<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/reflect/value.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./value.go?s=95489:95652#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/reflect">reflect</a>/<span class="text-muted">value.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/reflect">reflect</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package reflect
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;internal/abi&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;internal/goarch&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;internal/itoa&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;internal/unsafeheader&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;runtime&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;unsafe&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// Value is the reflection interface to a Go value.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// Not all methods apply to all kinds of values. Restrictions,</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// if any, are noted in the documentation for each method.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// Use the Kind method to find out the kind of value before</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// calling kind-specific methods. Calling a method</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// inappropriate to the kind of type causes a run time panic.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// The zero Value represents no value.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// Its IsValid method returns false, its Kind method returns Invalid,</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// its String method returns &#34;&lt;invalid Value&gt;&#34;, and all other methods panic.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// Most functions and methods never return an invalid value.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// If one does, its documentation states the conditions explicitly.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// A Value can be used concurrently by multiple goroutines provided that</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// the underlying Go value can be used concurrently for the equivalent</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// direct operations.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// To compare two Values, compare the results of the Interface method.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// Using == on two Values does not compare the underlying values</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// they represent.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>type Value struct {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	<span class="comment">// typ_ holds the type of the value represented by a Value.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	<span class="comment">// Access using the typ method to avoid escape of v.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	typ_ *abi.Type
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	<span class="comment">// Pointer-valued data or, if flagIndir is set, pointer to data.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">// Valid when either flagIndir is set or typ.pointers() is true.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	ptr unsafe.Pointer
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	<span class="comment">// flag holds metadata about the value.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// The lowest five bits give the Kind of the value, mirroring typ.Kind().</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">// The next set of bits are flag bits:</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	<span class="comment">//	- flagStickyRO: obtained via unexported not embedded field, so read-only</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	<span class="comment">//	- flagEmbedRO: obtained via unexported embedded field, so read-only</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">//	- flagIndir: val holds a pointer to the data</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">//	- flagAddr: v.CanAddr is true (implies flagIndir and ptr is non-nil)</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">//	- flagMethod: v is a method value.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// If ifaceIndir(typ), code can assume that flagIndir is set.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// The remaining 22+ bits give a method number for method values.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// If flag.kind() != Func, code can assume that flagMethod is unset.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	flag
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	<span class="comment">// A method value represents a curried method invocation</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	<span class="comment">// like r.Read for some receiver r. The typ+val+flag bits describe</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">// the receiver r, but the flag&#39;s Kind bits say Func (methods are</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// functions), and the top bits of the flag give the method number</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">// in r&#39;s type&#39;s method table.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>type flag uintptr
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>const (
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	flagKindWidth        = 5 <span class="comment">// there are 27 kinds</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	flagKindMask    flag = 1&lt;&lt;flagKindWidth - 1
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	flagStickyRO    flag = 1 &lt;&lt; 5
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	flagEmbedRO     flag = 1 &lt;&lt; 6
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	flagIndir       flag = 1 &lt;&lt; 7
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	flagAddr        flag = 1 &lt;&lt; 8
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	flagMethod      flag = 1 &lt;&lt; 9
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	flagMethodShift      = 10
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	flagRO          flag = flagStickyRO | flagEmbedRO
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>)
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>func (f flag) kind() Kind {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	return Kind(f &amp; flagKindMask)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>func (f flag) ro() flag {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	if f&amp;flagRO != 0 {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		return flagStickyRO
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	}
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	return 0
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>func (v Value) typ() *abi.Type {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// Types are either static (for compiler-created types) or</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// heap-allocated but always reachable (for reflection-created</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// types, held in the central map). So there is no need to</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// escape types. noescape here help avoid unnecessary escape</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">// of v.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	return (*abi.Type)(noescape(unsafe.Pointer(v.typ_)))
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// pointer returns the underlying pointer represented by v.</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// v.Kind() must be Pointer, Map, Chan, Func, or UnsafePointer</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// if v.Kind() == Pointer, the base type must not be not-in-heap.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>func (v Value) pointer() unsafe.Pointer {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	if v.typ().Size() != goarch.PtrSize || !v.typ().Pointers() {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		panic(&#34;can&#39;t call pointer on a non-pointer Value&#34;)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	if v.flag&amp;flagIndir != 0 {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		return *(*unsafe.Pointer)(v.ptr)
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	return v.ptr
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// packEface converts v to the empty interface.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>func packEface(v Value) any {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	t := v.typ()
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	var i any
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	e := (*emptyInterface)(unsafe.Pointer(&amp;i))
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// First, fill in the data portion of the interface.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	switch {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	case t.IfaceIndir():
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		if v.flag&amp;flagIndir == 0 {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			panic(&#34;bad indir&#34;)
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		<span class="comment">// Value is indirect, and so is the interface we&#39;re making.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		ptr := v.ptr
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		if v.flag&amp;flagAddr != 0 {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			<span class="comment">// TODO: pass safe boolean from valueInterface so</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>			<span class="comment">// we don&#39;t need to copy if safe==true?</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			c := unsafe_New(t)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>			typedmemmove(t, c, ptr)
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			ptr = c
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		e.word = ptr
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	case v.flag&amp;flagIndir != 0:
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		<span class="comment">// Value is indirect, but interface is direct. We need</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		<span class="comment">// to load the data at v.ptr into the interface data word.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		e.word = *(*unsafe.Pointer)(v.ptr)
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	default:
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		<span class="comment">// Value is direct, and so is the interface.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		e.word = v.ptr
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">// Now, fill in the type portion. We&#39;re very careful here not</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">// to have any operation between the e.word and e.typ assignments</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">// that would let the garbage collector observe the partially-built</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// interface value.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	e.typ = t
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	return i
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// unpackEface converts the empty interface i to a Value.</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>func unpackEface(i any) Value {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	e := (*emptyInterface)(unsafe.Pointer(&amp;i))
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// NOTE: don&#39;t read e.word until we know whether it is really a pointer or not.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	t := e.typ
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	if t == nil {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		return Value{}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	f := flag(t.Kind())
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	if t.IfaceIndir() {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		f |= flagIndir
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	return Value{t, e.word, f}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// A ValueError occurs when a Value method is invoked on</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// a [Value] that does not support it. Such cases are documented</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// in the description of each method.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>type ValueError struct {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	Method string
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	Kind   Kind
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>func (e *ValueError) Error() string {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	if e.Kind == 0 {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		return &#34;reflect: call of &#34; + e.Method + &#34; on zero Value&#34;
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	return &#34;reflect: call of &#34; + e.Method + &#34; on &#34; + e.Kind.String() + &#34; Value&#34;
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// valueMethodName returns the name of the exported calling method on Value.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>func valueMethodName() string {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	var pc [5]uintptr
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	n := runtime.Callers(1, pc[:])
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	frames := runtime.CallersFrames(pc[:n])
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	var frame runtime.Frame
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	for more := true; more; {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		const prefix = &#34;reflect.Value.&#34;
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		frame, more = frames.Next()
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		name := frame.Function
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		if len(name) &gt; len(prefix) &amp;&amp; name[:len(prefix)] == prefix {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>			methodName := name[len(prefix):]
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>			if len(methodName) &gt; 0 &amp;&amp; &#39;A&#39; &lt;= methodName[0] &amp;&amp; methodName[0] &lt;= &#39;Z&#39; {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>				return name
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>			}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	return &#34;unknown method&#34;
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// emptyInterface is the header for an interface{} value.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>type emptyInterface struct {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	typ  *abi.Type
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	word unsafe.Pointer
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// nonEmptyInterface is the header for an interface value with methods.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>type nonEmptyInterface struct {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	<span class="comment">// see ../runtime/iface.go:/Itab</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	itab *struct {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		ityp *abi.Type <span class="comment">// static interface type</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		typ  *abi.Type <span class="comment">// dynamic concrete type</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		hash uint32    <span class="comment">// copy of typ.hash</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		_    [4]byte
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		fun  [100000]unsafe.Pointer <span class="comment">// method table</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	word unsafe.Pointer
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">// mustBe panics if f&#39;s kind is not expected.</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">// Making this a method on flag instead of on Value</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">// (and embedding flag in Value) means that we can write</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// the very clear v.mustBe(Bool) and have it compile into</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// v.flag.mustBe(Bool), which will only bother to copy the</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// single important word for the receiver.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>func (f flag) mustBe(expected Kind) {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	<span class="comment">// TODO(mvdan): use f.kind() again once mid-stack inlining gets better</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	if Kind(f&amp;flagKindMask) != expected {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		panic(&amp;ValueError{valueMethodName(), f.kind()})
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// mustBeExported panics if f records that the value was obtained using</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// an unexported field.</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>func (f flag) mustBeExported() {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	if f == 0 || f&amp;flagRO != 0 {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		f.mustBeExportedSlow()
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>}
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>func (f flag) mustBeExportedSlow() {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	if f == 0 {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		panic(&amp;ValueError{valueMethodName(), Invalid})
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	if f&amp;flagRO != 0 {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		panic(&#34;reflect: &#34; + valueMethodName() + &#34; using value obtained using unexported field&#34;)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// mustBeAssignable panics if f records that the value is not assignable,</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// which is to say that either it was obtained using an unexported field</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// or it is not addressable.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>func (f flag) mustBeAssignable() {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	if f&amp;flagRO != 0 || f&amp;flagAddr == 0 {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		f.mustBeAssignableSlow()
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>func (f flag) mustBeAssignableSlow() {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	if f == 0 {
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		panic(&amp;ValueError{valueMethodName(), Invalid})
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	<span class="comment">// Assignable if addressable and not read-only.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	if f&amp;flagRO != 0 {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		panic(&#34;reflect: &#34; + valueMethodName() + &#34; using value obtained using unexported field&#34;)
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	if f&amp;flagAddr == 0 {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		panic(&#34;reflect: &#34; + valueMethodName() + &#34; using unaddressable value&#34;)
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>}
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// Addr returns a pointer value representing the address of v.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">// It panics if [Value.CanAddr] returns false.</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">// Addr is typically used to obtain a pointer to a struct field</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// or slice element in order to call a method that requires a</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">// pointer receiver.</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>func (v Value) Addr() Value {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	if v.flag&amp;flagAddr == 0 {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		panic(&#34;reflect.Value.Addr of unaddressable value&#34;)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	<span class="comment">// Preserve flagRO instead of using v.flag.ro() so that</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	<span class="comment">// v.Addr().Elem() is equivalent to v (#32772)</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	fl := v.flag &amp; flagRO
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	return Value{ptrTo(v.typ()), v.ptr, fl | flag(Pointer)}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// Bool returns v&#39;s underlying value.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s kind is not [Bool].</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>func (v Value) Bool() bool {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	<span class="comment">// panicNotBool is split out to keep Bool inlineable.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	if v.kind() != Bool {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		v.panicNotBool()
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	return *(*bool)(v.ptr)
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>func (v Value) panicNotBool() {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	v.mustBe(Bool)
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>var bytesType = rtypeOf(([]byte)(nil))
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span><span class="comment">// Bytes returns v&#39;s underlying value.</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s underlying value is not a slice of bytes or</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span><span class="comment">// an addressable array of bytes.</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>func (v Value) Bytes() []byte {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	<span class="comment">// bytesSlow is split out to keep Bytes inlineable for unnamed []byte.</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	if v.typ_ == bytesType { <span class="comment">// ok to use v.typ_ directly as comparison doesn&#39;t cause escape</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		return *(*[]byte)(v.ptr)
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	return v.bytesSlow()
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>func (v Value) bytesSlow() []byte {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	switch v.kind() {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	case Slice:
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		if v.typ().Elem().Kind() != abi.Uint8 {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>			panic(&#34;reflect.Value.Bytes of non-byte slice&#34;)
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		<span class="comment">// Slice is always bigger than a word; assume flagIndir.</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		return *(*[]byte)(v.ptr)
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	case Array:
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		if v.typ().Elem().Kind() != abi.Uint8 {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>			panic(&#34;reflect.Value.Bytes of non-byte array&#34;)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		if !v.CanAddr() {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>			panic(&#34;reflect.Value.Bytes of unaddressable byte array&#34;)
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		p := (*byte)(v.ptr)
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		n := int((*arrayType)(unsafe.Pointer(v.typ())).Len)
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		return unsafe.Slice(p, n)
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.Bytes&#34;, v.kind()})
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// runes returns v&#39;s underlying value.</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s underlying value is not a slice of runes (int32s).</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>func (v Value) runes() []rune {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	v.mustBe(Slice)
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	if v.typ().Elem().Kind() != abi.Int32 {
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		panic(&#34;reflect.Value.Bytes of non-rune slice&#34;)
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	}
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	<span class="comment">// Slice is always bigger than a word; assume flagIndir.</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	return *(*[]rune)(v.ptr)
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>}
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span><span class="comment">// CanAddr reports whether the value&#39;s address can be obtained with [Value.Addr].</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span><span class="comment">// Such values are called addressable. A value is addressable if it is</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// an element of a slice, an element of an addressable array,</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// a field of an addressable struct, or the result of dereferencing a pointer.</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">// If CanAddr returns false, calling [Value.Addr] will panic.</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>func (v Value) CanAddr() bool {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	return v.flag&amp;flagAddr != 0
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span><span class="comment">// CanSet reports whether the value of v can be changed.</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span><span class="comment">// A [Value] can be changed only if it is addressable and was not</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">// obtained by the use of unexported struct fields.</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span><span class="comment">// If CanSet returns false, calling [Value.Set] or any type-specific</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span><span class="comment">// setter (e.g., [Value.SetBool], [Value.SetInt]) will panic.</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>func (v Value) CanSet() bool {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	return v.flag&amp;(flagAddr|flagRO) == flagAddr
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// Call calls the function v with the input arguments in.</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">// For example, if len(in) == 3, v.Call(in) represents the Go call v(in[0], in[1], in[2]).</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// Call panics if v&#39;s Kind is not [Func].</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="comment">// It returns the output results as Values.</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">// As in Go, each input argument must be assignable to the</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span><span class="comment">// type of the function&#39;s corresponding input parameter.</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span><span class="comment">// If v is a variadic function, Call creates the variadic slice parameter</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span><span class="comment">// itself, copying in the corresponding values.</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>func (v Value) Call(in []Value) []Value {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	v.mustBe(Func)
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	v.mustBeExported()
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	return v.call(&#34;Call&#34;, in)
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span><span class="comment">// CallSlice calls the variadic function v with the input arguments in,</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span><span class="comment">// assigning the slice in[len(in)-1] to v&#39;s final variadic argument.</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span><span class="comment">// For example, if len(in) == 3, v.CallSlice(in) represents the Go call v(in[0], in[1], in[2]...).</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span><span class="comment">// CallSlice panics if v&#39;s Kind is not [Func] or if v is not variadic.</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span><span class="comment">// It returns the output results as Values.</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span><span class="comment">// As in Go, each input argument must be assignable to the</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span><span class="comment">// type of the function&#39;s corresponding input parameter.</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>func (v Value) CallSlice(in []Value) []Value {
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	v.mustBe(Func)
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	v.mustBeExported()
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	return v.call(&#34;CallSlice&#34;, in)
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>var callGC bool <span class="comment">// for testing; see TestCallMethodJump and TestCallArgLive</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>const debugReflectCall = false
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>func (v Value) call(op string, in []Value) []Value {
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	<span class="comment">// Get function pointer, type.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	t := (*funcType)(unsafe.Pointer(v.typ()))
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	var (
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		fn       unsafe.Pointer
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		rcvr     Value
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		rcvrtype *abi.Type
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	)
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	if v.flag&amp;flagMethod != 0 {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		rcvr = v
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		rcvrtype, t, fn = methodReceiver(op, v, int(v.flag)&gt;&gt;flagMethodShift)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	} else if v.flag&amp;flagIndir != 0 {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		fn = *(*unsafe.Pointer)(v.ptr)
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	} else {
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		fn = v.ptr
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	if fn == nil {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		panic(&#34;reflect.Value.Call: call of nil function&#34;)
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	isSlice := op == &#34;CallSlice&#34;
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	n := t.NumIn()
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	isVariadic := t.IsVariadic()
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	if isSlice {
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		if !isVariadic {
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>			panic(&#34;reflect: CallSlice of non-variadic function&#34;)
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		}
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		if len(in) &lt; n {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>			panic(&#34;reflect: CallSlice with too few input arguments&#34;)
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		if len(in) &gt; n {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			panic(&#34;reflect: CallSlice with too many input arguments&#34;)
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	} else {
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		if isVariadic {
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>			n--
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>		}
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		if len(in) &lt; n {
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>			panic(&#34;reflect: Call with too few input arguments&#34;)
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		if !isVariadic &amp;&amp; len(in) &gt; n {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>			panic(&#34;reflect: Call with too many input arguments&#34;)
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		}
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	}
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	for _, x := range in {
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		if x.Kind() == Invalid {
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>			panic(&#34;reflect: &#34; + op + &#34; using zero Value argument&#34;)
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	}
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	for i := 0; i &lt; n; i++ {
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		if xt, targ := in[i].Type(), t.In(i); !xt.AssignableTo(toRType(targ)) {
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>			panic(&#34;reflect: &#34; + op + &#34; using &#34; + xt.String() + &#34; as type &#34; + stringFor(targ))
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		}
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	if !isSlice &amp;&amp; isVariadic {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		<span class="comment">// prepare slice for remaining values</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		m := len(in) - n
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		slice := MakeSlice(toRType(t.In(n)), m, m)
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		elem := toRType(t.In(n)).Elem() <span class="comment">// FIXME cast to slice type and Elem()</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		for i := 0; i &lt; m; i++ {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>			x := in[n+i]
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>			if xt := x.Type(); !xt.AssignableTo(elem) {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>				panic(&#34;reflect: cannot use &#34; + xt.String() + &#34; as type &#34; + elem.String() + &#34; in &#34; + op)
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>			}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>			slice.Index(i).Set(x)
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>		origIn := in
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		in = make([]Value, n+1)
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		copy(in[:n], origIn)
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		in[n] = slice
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	nin := len(in)
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	if nin != t.NumIn() {
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		panic(&#34;reflect.Value.Call: wrong argument count&#34;)
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	}
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	nout := t.NumOut()
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	<span class="comment">// Register argument space.</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	var regArgs abi.RegArgs
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	<span class="comment">// Compute frame type.</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	frametype, framePool, abid := funcLayout(t, rcvrtype)
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	<span class="comment">// Allocate a chunk of memory for frame if needed.</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	var stackArgs unsafe.Pointer
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	if frametype.Size() != 0 {
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		if nout == 0 {
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>			stackArgs = framePool.Get().(unsafe.Pointer)
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		} else {
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>			<span class="comment">// Can&#39;t use pool if the function has return values.</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>			<span class="comment">// We will leak pointer to args in ret, so its lifetime is not scoped.</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>			stackArgs = unsafe_New(frametype)
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		}
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	frameSize := frametype.Size()
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	if debugReflectCall {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		println(&#34;reflect.call&#34;, stringFor(&amp;t.Type))
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		abid.dump()
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	}
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	<span class="comment">// Copy inputs into args.</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	<span class="comment">// Handle receiver.</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	inStart := 0
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	if rcvrtype != nil {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>		<span class="comment">// Guaranteed to only be one word in size,</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		<span class="comment">// so it will only take up exactly 1 abiStep (either</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		<span class="comment">// in a register or on the stack).</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		switch st := abid.call.steps[0]; st.kind {
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		case abiStepStack:
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>			storeRcvr(rcvr, stackArgs)
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		case abiStepPointer:
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>			storeRcvr(rcvr, unsafe.Pointer(&amp;regArgs.Ptrs[st.ireg]))
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>			fallthrough
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		case abiStepIntReg:
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>			storeRcvr(rcvr, unsafe.Pointer(&amp;regArgs.Ints[st.ireg]))
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		case abiStepFloatReg:
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>			storeRcvr(rcvr, unsafe.Pointer(&amp;regArgs.Floats[st.freg]))
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		default:
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>			panic(&#34;unknown ABI parameter kind&#34;)
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>		}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		inStart = 1
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	}
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	<span class="comment">// Handle arguments.</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	for i, v := range in {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		v.mustBeExported()
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		targ := toRType(t.In(i))
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		<span class="comment">// TODO(mknyszek): Figure out if it&#39;s possible to get some</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		<span class="comment">// scratch space for this assignment check. Previously, it</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		<span class="comment">// was possible to use space in the argument frame.</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		v = v.assignTo(&#34;reflect.Value.Call&#34;, &amp;targ.t, nil)
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	stepsLoop:
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		for _, st := range abid.call.stepsForValue(i + inStart) {
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>			switch st.kind {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>			case abiStepStack:
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>				<span class="comment">// Copy values to the &#34;stack.&#34;</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>				addr := add(stackArgs, st.stkOff, &#34;precomputed stack arg offset&#34;)
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>				if v.flag&amp;flagIndir != 0 {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>					typedmemmove(&amp;targ.t, addr, v.ptr)
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>				} else {
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>					*(*unsafe.Pointer)(addr) = v.ptr
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>				}
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>				<span class="comment">// There&#39;s only one step for a stack-allocated value.</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>				break stepsLoop
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>			case abiStepIntReg, abiStepPointer:
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>				<span class="comment">// Copy values to &#34;integer registers.&#34;</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>				if v.flag&amp;flagIndir != 0 {
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>					offset := add(v.ptr, st.offset, &#34;precomputed value offset&#34;)
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>					if st.kind == abiStepPointer {
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>						<span class="comment">// Duplicate this pointer in the pointer area of the</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>						<span class="comment">// register space. Otherwise, there&#39;s the potential for</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>						<span class="comment">// this to be the last reference to v.ptr.</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>						regArgs.Ptrs[st.ireg] = *(*unsafe.Pointer)(offset)
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>					}
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>					intToReg(&amp;regArgs, st.ireg, st.size, offset)
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>				} else {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>					if st.kind == abiStepPointer {
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>						<span class="comment">// See the comment in abiStepPointer case above.</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>						regArgs.Ptrs[st.ireg] = v.ptr
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>					}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>					regArgs.Ints[st.ireg] = uintptr(v.ptr)
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>				}
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>			case abiStepFloatReg:
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>				<span class="comment">// Copy values to &#34;float registers.&#34;</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>				if v.flag&amp;flagIndir == 0 {
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>					panic(&#34;attempted to copy pointer to FP register&#34;)
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>				}
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>				offset := add(v.ptr, st.offset, &#34;precomputed value offset&#34;)
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>				floatToReg(&amp;regArgs, st.freg, st.size, offset)
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>			default:
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>				panic(&#34;unknown ABI part kind&#34;)
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>			}
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>		}
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	<span class="comment">// TODO(mknyszek): Remove this when we no longer have</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	<span class="comment">// caller reserved spill space.</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	frameSize = align(frameSize, goarch.PtrSize)
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	frameSize += abid.spill
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	<span class="comment">// Mark pointers in registers for the return path.</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	regArgs.ReturnIsPtr = abid.outRegPtrs
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	if debugReflectCall {
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		regArgs.Dump()
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	}
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	<span class="comment">// For testing; see TestCallArgLive.</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	if callGC {
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		runtime.GC()
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	}
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	<span class="comment">// Call.</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	call(frametype, fn, stackArgs, uint32(frametype.Size()), uint32(abid.retOffset), uint32(frameSize), &amp;regArgs)
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	<span class="comment">// For testing; see TestCallMethodJump.</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	if callGC {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		runtime.GC()
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	}
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	var ret []Value
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	if nout == 0 {
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>		if stackArgs != nil {
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>			typedmemclr(frametype, stackArgs)
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>			framePool.Put(stackArgs)
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		}
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	} else {
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>		if stackArgs != nil {
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>			<span class="comment">// Zero the now unused input area of args,</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>			<span class="comment">// because the Values returned by this function contain pointers to the args object,</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>			<span class="comment">// and will thus keep the args object alive indefinitely.</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>			typedmemclrpartial(frametype, stackArgs, 0, abid.retOffset)
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>		}
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		<span class="comment">// Wrap Values around return values in args.</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		ret = make([]Value, nout)
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		for i := 0; i &lt; nout; i++ {
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>			tv := t.Out(i)
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>			if tv.Size() == 0 {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>				<span class="comment">// For zero-sized return value, args+off may point to the next object.</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>				<span class="comment">// In this case, return the zero value instead.</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>				ret[i] = Zero(toRType(tv))
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>				continue
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>			}
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>			steps := abid.ret.stepsForValue(i)
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>			if st := steps[0]; st.kind == abiStepStack {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>				<span class="comment">// This value is on the stack. If part of a value is stack</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>				<span class="comment">// allocated, the entire value is according to the ABI. So</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>				<span class="comment">// just make an indirection into the allocated frame.</span>
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>				fl := flagIndir | flag(tv.Kind())
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>				ret[i] = Value{tv, add(stackArgs, st.stkOff, &#34;tv.Size() != 0&#34;), fl}
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>				<span class="comment">// Note: this does introduce false sharing between results -</span>
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>				<span class="comment">// if any result is live, they are all live.</span>
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>				<span class="comment">// (And the space for the args is live as well, but as we&#39;ve</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>				<span class="comment">// cleared that space it isn&#39;t as big a deal.)</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>				continue
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>			}
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>			<span class="comment">// Handle pointers passed in registers.</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			if !ifaceIndir(tv) {
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>				<span class="comment">// Pointer-valued data gets put directly</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>				<span class="comment">// into v.ptr.</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>				if steps[0].kind != abiStepPointer {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>					print(&#34;kind=&#34;, steps[0].kind, &#34;, type=&#34;, stringFor(tv), &#34;\n&#34;)
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>					panic(&#34;mismatch between ABI description and types&#34;)
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>				}
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>				ret[i] = Value{tv, regArgs.Ptrs[steps[0].ireg], flag(tv.Kind())}
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>				continue
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>			}
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>			<span class="comment">// All that&#39;s left is values passed in registers that we need to</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>			<span class="comment">// create space for and copy values back into.</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>			<span class="comment">// TODO(mknyszek): We make a new allocation for each register-allocated</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>			<span class="comment">// value, but previously we could always point into the heap-allocated</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>			<span class="comment">// stack frame. This is a regression that could be fixed by adding</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>			<span class="comment">// additional space to the allocated stack frame and storing the</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>			<span class="comment">// register-allocated return values into the allocated stack frame and</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>			<span class="comment">// referring there in the resulting Value.</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>			s := unsafe_New(tv)
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>			for _, st := range steps {
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>				switch st.kind {
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>				case abiStepIntReg:
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>					offset := add(s, st.offset, &#34;precomputed value offset&#34;)
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>					intFromReg(&amp;regArgs, st.ireg, st.size, offset)
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>				case abiStepPointer:
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>					s := add(s, st.offset, &#34;precomputed value offset&#34;)
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>					*((*unsafe.Pointer)(s)) = regArgs.Ptrs[st.ireg]
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>				case abiStepFloatReg:
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>					offset := add(s, st.offset, &#34;precomputed value offset&#34;)
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>					floatFromReg(&amp;regArgs, st.freg, st.size, offset)
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>				case abiStepStack:
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>					panic(&#34;register-based return value has stack component&#34;)
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>				default:
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>					panic(&#34;unknown ABI part kind&#34;)
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>				}
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>			}
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>			ret[i] = Value{tv, s, flagIndir | flag(tv.Kind())}
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>		}
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	}
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	return ret
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>}
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span><span class="comment">// callReflect is the call implementation used by a function</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span><span class="comment">// returned by MakeFunc. In many ways it is the opposite of the</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span><span class="comment">// method Value.call above. The method above converts a call using Values</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span><span class="comment">// into a call of a function with a concrete argument frame, while</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span><span class="comment">// callReflect converts a call of a function with a concrete argument</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span><span class="comment">// frame into a call using Values.</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span><span class="comment">// It is in this file so that it can be next to the call method above.</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span><span class="comment">// The remainder of the MakeFunc implementation is in makefunc.go.</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span><span class="comment">// NOTE: This function must be marked as a &#34;wrapper&#34; in the generated code,</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span><span class="comment">// so that the linker can make it work correctly for panic and recover.</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span><span class="comment">// The gc compilers know to do that for the name &#34;reflect.callReflect&#34;.</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span><span class="comment">// ctxt is the &#34;closure&#34; generated by MakeFunc.</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span><span class="comment">// frame is a pointer to the arguments to that closure on the stack.</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span><span class="comment">// retValid points to a boolean which should be set when the results</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span><span class="comment">// section of frame is set.</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span><span class="comment">// regs contains the argument values passed in registers and will contain</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span><span class="comment">// the values returned from ctxt.fn in registers.</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>func callReflect(ctxt *makeFuncImpl, frame unsafe.Pointer, retValid *bool, regs *abi.RegArgs) {
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	if callGC {
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>		<span class="comment">// Call GC upon entry during testing.</span>
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>		<span class="comment">// Getting our stack scanned here is the biggest hazard, because</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>		<span class="comment">// our caller (makeFuncStub) could have failed to place the last</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>		<span class="comment">// pointer to a value in regs&#39; pointer space, in which case it</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>		<span class="comment">// won&#39;t be visible to the GC.</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>		runtime.GC()
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	}
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	ftyp := ctxt.ftyp
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	f := ctxt.fn
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	_, _, abid := funcLayout(ftyp, nil)
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	<span class="comment">// Copy arguments into Values.</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	ptr := frame
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	in := make([]Value, 0, int(ftyp.InCount))
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	for i, typ := range ftyp.InSlice() {
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		if typ.Size() == 0 {
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>			in = append(in, Zero(toRType(typ)))
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>			continue
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		}
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		v := Value{typ, nil, flag(typ.Kind())}
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		steps := abid.call.stepsForValue(i)
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		if st := steps[0]; st.kind == abiStepStack {
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>			if ifaceIndir(typ) {
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>				<span class="comment">// value cannot be inlined in interface data.</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>				<span class="comment">// Must make a copy, because f might keep a reference to it,</span>
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>				<span class="comment">// and we cannot let f keep a reference to the stack frame</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>				<span class="comment">// after this function returns, not even a read-only reference.</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>				v.ptr = unsafe_New(typ)
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>				if typ.Size() &gt; 0 {
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>					typedmemmove(typ, v.ptr, add(ptr, st.stkOff, &#34;typ.size &gt; 0&#34;))
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>				}
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>				v.flag |= flagIndir
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>			} else {
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>				v.ptr = *(*unsafe.Pointer)(add(ptr, st.stkOff, &#34;1-ptr&#34;))
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>			}
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>		} else {
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>			if ifaceIndir(typ) {
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>				<span class="comment">// All that&#39;s left is values passed in registers that we need to</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>				<span class="comment">// create space for the values.</span>
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>				v.flag |= flagIndir
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>				v.ptr = unsafe_New(typ)
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>				for _, st := range steps {
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>					switch st.kind {
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>					case abiStepIntReg:
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>						offset := add(v.ptr, st.offset, &#34;precomputed value offset&#34;)
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>						intFromReg(regs, st.ireg, st.size, offset)
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>					case abiStepPointer:
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>						s := add(v.ptr, st.offset, &#34;precomputed value offset&#34;)
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>						*((*unsafe.Pointer)(s)) = regs.Ptrs[st.ireg]
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>					case abiStepFloatReg:
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>						offset := add(v.ptr, st.offset, &#34;precomputed value offset&#34;)
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>						floatFromReg(regs, st.freg, st.size, offset)
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>					case abiStepStack:
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>						panic(&#34;register-based return value has stack component&#34;)
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>					default:
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>						panic(&#34;unknown ABI part kind&#34;)
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>					}
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>				}
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>			} else {
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>				<span class="comment">// Pointer-valued data gets put directly</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>				<span class="comment">// into v.ptr.</span>
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>				if steps[0].kind != abiStepPointer {
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>					print(&#34;kind=&#34;, steps[0].kind, &#34;, type=&#34;, stringFor(typ), &#34;\n&#34;)
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>					panic(&#34;mismatch between ABI description and types&#34;)
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>				}
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>				v.ptr = regs.Ptrs[steps[0].ireg]
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>			}
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>		}
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>		in = append(in, v)
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	}
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>	<span class="comment">// Call underlying function.</span>
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	out := f(in)
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>	numOut := ftyp.NumOut()
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>	if len(out) != numOut {
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>		panic(&#34;reflect: wrong return count from function created by MakeFunc&#34;)
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	}
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>	<span class="comment">// Copy results back into argument frame and register space.</span>
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>	if numOut &gt; 0 {
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>		for i, typ := range ftyp.OutSlice() {
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>			v := out[i]
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>			if v.typ() == nil {
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>				panic(&#34;reflect: function created by MakeFunc using &#34; + funcName(f) +
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>					&#34; returned zero Value&#34;)
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>			}
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>			if v.flag&amp;flagRO != 0 {
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>				panic(&#34;reflect: function created by MakeFunc using &#34; + funcName(f) +
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>					&#34; returned value obtained from unexported field&#34;)
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>			}
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>			if typ.Size() == 0 {
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>				continue
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>			}
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>			<span class="comment">// Convert v to type typ if v is assignable to a variable</span>
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>			<span class="comment">// of type t in the language spec.</span>
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>			<span class="comment">// See issue 28761.</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>			<span class="comment">// TODO(mknyszek): In the switch to the register ABI we lost</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>			<span class="comment">// the scratch space here for the register cases (and</span>
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>			<span class="comment">// temporarily for all the cases).</span>
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>			<span class="comment">// If/when this happens, take note of the following:</span>
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>			<span class="comment">// We must clear the destination before calling assignTo,</span>
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>			<span class="comment">// in case assignTo writes (with memory barriers) to the</span>
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>			<span class="comment">// target location used as scratch space. See issue 39541.</span>
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>			v = v.assignTo(&#34;reflect.MakeFunc&#34;, typ, nil)
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>		stepsLoop:
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>			for _, st := range abid.ret.stepsForValue(i) {
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>				switch st.kind {
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>				case abiStepStack:
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>					<span class="comment">// Copy values to the &#34;stack.&#34;</span>
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>					addr := add(ptr, st.stkOff, &#34;precomputed stack arg offset&#34;)
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>					<span class="comment">// Do not use write barriers. The stack space used</span>
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>					<span class="comment">// for this call is not adequately zeroed, and we</span>
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>					<span class="comment">// are careful to keep the arguments alive until we</span>
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>					<span class="comment">// return to makeFuncStub&#39;s caller.</span>
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>					if v.flag&amp;flagIndir != 0 {
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>						memmove(addr, v.ptr, st.size)
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>					} else {
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>						<span class="comment">// This case must be a pointer type.</span>
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>						*(*uintptr)(addr) = uintptr(v.ptr)
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>					}
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>					<span class="comment">// There&#39;s only one step for a stack-allocated value.</span>
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>					break stepsLoop
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>				case abiStepIntReg, abiStepPointer:
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>					<span class="comment">// Copy values to &#34;integer registers.&#34;</span>
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>					if v.flag&amp;flagIndir != 0 {
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>						offset := add(v.ptr, st.offset, &#34;precomputed value offset&#34;)
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>						intToReg(regs, st.ireg, st.size, offset)
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>					} else {
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>						<span class="comment">// Only populate the Ints space on the return path.</span>
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>						<span class="comment">// This is safe because out is kept alive until the</span>
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>						<span class="comment">// end of this function, and the return path through</span>
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>						<span class="comment">// makeFuncStub has no preemption, so these pointers</span>
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>						<span class="comment">// are always visible to the GC.</span>
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>						regs.Ints[st.ireg] = uintptr(v.ptr)
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>					}
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>				case abiStepFloatReg:
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>					<span class="comment">// Copy values to &#34;float registers.&#34;</span>
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>					if v.flag&amp;flagIndir == 0 {
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>						panic(&#34;attempted to copy pointer to FP register&#34;)
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>					}
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>					offset := add(v.ptr, st.offset, &#34;precomputed value offset&#34;)
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>					floatToReg(regs, st.freg, st.size, offset)
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>				default:
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>					panic(&#34;unknown ABI part kind&#34;)
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>				}
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>			}
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>		}
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>	}
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	<span class="comment">// Announce that the return values are valid.</span>
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>	<span class="comment">// After this point the runtime can depend on the return values being valid.</span>
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>	*retValid = true
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>	<span class="comment">// We have to make sure that the out slice lives at least until</span>
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>	<span class="comment">// the runtime knows the return values are valid. Otherwise, the</span>
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>	<span class="comment">// return values might not be scanned by anyone during a GC.</span>
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>	<span class="comment">// (out would be dead, and the return slots not yet alive.)</span>
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>	runtime.KeepAlive(out)
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>	<span class="comment">// runtime.getArgInfo expects to be able to find ctxt on the</span>
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>	<span class="comment">// stack when it finds our caller, makeFuncStub. Make sure it</span>
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>	<span class="comment">// doesn&#39;t get garbage collected.</span>
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>	runtime.KeepAlive(ctxt)
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>}
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>
<span id="L880" class="ln">   880&nbsp;&nbsp;</span><span class="comment">// methodReceiver returns information about the receiver</span>
<span id="L881" class="ln">   881&nbsp;&nbsp;</span><span class="comment">// described by v. The Value v may or may not have the</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span><span class="comment">// flagMethod bit set, so the kind cached in v.flag should</span>
<span id="L883" class="ln">   883&nbsp;&nbsp;</span><span class="comment">// not be used.</span>
<span id="L884" class="ln">   884&nbsp;&nbsp;</span><span class="comment">// The return value rcvrtype gives the method&#39;s actual receiver type.</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span><span class="comment">// The return value t gives the method type signature (without the receiver).</span>
<span id="L886" class="ln">   886&nbsp;&nbsp;</span><span class="comment">// The return value fn is a pointer to the method code.</span>
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>func methodReceiver(op string, v Value, methodIndex int) (rcvrtype *abi.Type, t *funcType, fn unsafe.Pointer) {
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>	i := methodIndex
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>	if v.typ().Kind() == abi.Interface {
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>		tt := (*interfaceType)(unsafe.Pointer(v.typ()))
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>		if uint(i) &gt;= uint(len(tt.Methods)) {
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>			panic(&#34;reflect: internal error: invalid method index&#34;)
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>		}
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>		m := &amp;tt.Methods[i]
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>		if !tt.nameOff(m.Name).IsExported() {
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>			panic(&#34;reflect: &#34; + op + &#34; of unexported method&#34;)
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>		}
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>		iface := (*nonEmptyInterface)(v.ptr)
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>		if iface.itab == nil {
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>			panic(&#34;reflect: &#34; + op + &#34; of method on nil interface value&#34;)
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>		}
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>		rcvrtype = iface.itab.typ
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>		fn = unsafe.Pointer(&amp;iface.itab.fun[i])
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>		t = (*funcType)(unsafe.Pointer(tt.typeOff(m.Typ)))
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>	} else {
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>		rcvrtype = v.typ()
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>		ms := v.typ().ExportedMethods()
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>		if uint(i) &gt;= uint(len(ms)) {
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>			panic(&#34;reflect: internal error: invalid method index&#34;)
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>		}
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>		m := ms[i]
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>		if !nameOffFor(v.typ(), m.Name).IsExported() {
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>			panic(&#34;reflect: &#34; + op + &#34; of unexported method&#34;)
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>		}
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>		ifn := textOffFor(v.typ(), m.Ifn)
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>		fn = unsafe.Pointer(&amp;ifn)
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>		t = (*funcType)(unsafe.Pointer(typeOffFor(v.typ(), m.Mtyp)))
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>	}
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>	return
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>}
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>
<span id="L922" class="ln">   922&nbsp;&nbsp;</span><span class="comment">// v is a method receiver. Store at p the word which is used to</span>
<span id="L923" class="ln">   923&nbsp;&nbsp;</span><span class="comment">// encode that receiver at the start of the argument list.</span>
<span id="L924" class="ln">   924&nbsp;&nbsp;</span><span class="comment">// Reflect uses the &#34;interface&#34; calling convention for</span>
<span id="L925" class="ln">   925&nbsp;&nbsp;</span><span class="comment">// methods, which always uses one word to record the receiver.</span>
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>func storeRcvr(v Value, p unsafe.Pointer) {
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>	t := v.typ()
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>	if t.Kind() == abi.Interface {
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>		<span class="comment">// the interface data word becomes the receiver word</span>
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>		iface := (*nonEmptyInterface)(v.ptr)
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>		*(*unsafe.Pointer)(p) = iface.word
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>	} else if v.flag&amp;flagIndir != 0 &amp;&amp; !ifaceIndir(t) {
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>		*(*unsafe.Pointer)(p) = *(*unsafe.Pointer)(v.ptr)
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>	} else {
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>		*(*unsafe.Pointer)(p) = v.ptr
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>	}
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>}
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>
<span id="L939" class="ln">   939&nbsp;&nbsp;</span><span class="comment">// align returns the result of rounding x up to a multiple of n.</span>
<span id="L940" class="ln">   940&nbsp;&nbsp;</span><span class="comment">// n must be a power of two.</span>
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>func align(x, n uintptr) uintptr {
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>	return (x + n - 1) &amp;^ (n - 1)
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>}
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>
<span id="L945" class="ln">   945&nbsp;&nbsp;</span><span class="comment">// callMethod is the call implementation used by a function returned</span>
<span id="L946" class="ln">   946&nbsp;&nbsp;</span><span class="comment">// by makeMethodValue (used by v.Method(i).Interface()).</span>
<span id="L947" class="ln">   947&nbsp;&nbsp;</span><span class="comment">// It is a streamlined version of the usual reflect call: the caller has</span>
<span id="L948" class="ln">   948&nbsp;&nbsp;</span><span class="comment">// already laid out the argument frame for us, so we don&#39;t have</span>
<span id="L949" class="ln">   949&nbsp;&nbsp;</span><span class="comment">// to deal with individual Values for each argument.</span>
<span id="L950" class="ln">   950&nbsp;&nbsp;</span><span class="comment">// It is in this file so that it can be next to the two similar functions above.</span>
<span id="L951" class="ln">   951&nbsp;&nbsp;</span><span class="comment">// The remainder of the makeMethodValue implementation is in makefunc.go.</span>
<span id="L952" class="ln">   952&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L953" class="ln">   953&nbsp;&nbsp;</span><span class="comment">// NOTE: This function must be marked as a &#34;wrapper&#34; in the generated code,</span>
<span id="L954" class="ln">   954&nbsp;&nbsp;</span><span class="comment">// so that the linker can make it work correctly for panic and recover.</span>
<span id="L955" class="ln">   955&nbsp;&nbsp;</span><span class="comment">// The gc compilers know to do that for the name &#34;reflect.callMethod&#34;.</span>
<span id="L956" class="ln">   956&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L957" class="ln">   957&nbsp;&nbsp;</span><span class="comment">// ctxt is the &#34;closure&#34; generated by makeVethodValue.</span>
<span id="L958" class="ln">   958&nbsp;&nbsp;</span><span class="comment">// frame is a pointer to the arguments to that closure on the stack.</span>
<span id="L959" class="ln">   959&nbsp;&nbsp;</span><span class="comment">// retValid points to a boolean which should be set when the results</span>
<span id="L960" class="ln">   960&nbsp;&nbsp;</span><span class="comment">// section of frame is set.</span>
<span id="L961" class="ln">   961&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L962" class="ln">   962&nbsp;&nbsp;</span><span class="comment">// regs contains the argument values passed in registers and will contain</span>
<span id="L963" class="ln">   963&nbsp;&nbsp;</span><span class="comment">// the values returned from ctxt.fn in registers.</span>
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>func callMethod(ctxt *methodValue, frame unsafe.Pointer, retValid *bool, regs *abi.RegArgs) {
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>	rcvr := ctxt.rcvr
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>	rcvrType, valueFuncType, methodFn := methodReceiver(&#34;call&#34;, rcvr, ctxt.method)
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>	<span class="comment">// There are two ABIs at play here.</span>
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>	<span class="comment">// methodValueCall was invoked with the ABI assuming there was no</span>
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>	<span class="comment">// receiver (&#34;value ABI&#34;) and that&#39;s what frame and regs are holding.</span>
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>	<span class="comment">// Meanwhile, we need to actually call the method with a receiver, which</span>
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>	<span class="comment">// has its own ABI (&#34;method ABI&#34;). Everything that follows is a translation</span>
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>	<span class="comment">// between the two.</span>
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>	_, _, valueABI := funcLayout(valueFuncType, nil)
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>	valueFrame, valueRegs := frame, regs
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>	methodFrameType, methodFramePool, methodABI := funcLayout(valueFuncType, rcvrType)
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>	<span class="comment">// Make a new frame that is one word bigger so we can store the receiver.</span>
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>	<span class="comment">// This space is used for both arguments and return values.</span>
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>	methodFrame := methodFramePool.Get().(unsafe.Pointer)
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>	var methodRegs abi.RegArgs
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>	<span class="comment">// Deal with the receiver. It&#39;s guaranteed to only be one word in size.</span>
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>	switch st := methodABI.call.steps[0]; st.kind {
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	case abiStepStack:
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>		<span class="comment">// Only copy the receiver to the stack if the ABI says so.</span>
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>		<span class="comment">// Otherwise, it&#39;ll be in a register already.</span>
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>		storeRcvr(rcvr, methodFrame)
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>	case abiStepPointer:
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>		<span class="comment">// Put the receiver in a register.</span>
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>		storeRcvr(rcvr, unsafe.Pointer(&amp;methodRegs.Ptrs[st.ireg]))
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>		fallthrough
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>	case abiStepIntReg:
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>		storeRcvr(rcvr, unsafe.Pointer(&amp;methodRegs.Ints[st.ireg]))
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>	case abiStepFloatReg:
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>		storeRcvr(rcvr, unsafe.Pointer(&amp;methodRegs.Floats[st.freg]))
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>	default:
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>		panic(&#34;unknown ABI parameter kind&#34;)
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>	}
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>	<span class="comment">// Translate the rest of the arguments.</span>
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>	for i, t := range valueFuncType.InSlice() {
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>		valueSteps := valueABI.call.stepsForValue(i)
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>		methodSteps := methodABI.call.stepsForValue(i + 1)
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>		<span class="comment">// Zero-sized types are trivial: nothing to do.</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>		if len(valueSteps) == 0 {
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>			if len(methodSteps) != 0 {
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>				panic(&#34;method ABI and value ABI do not align&#34;)
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>			}
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>			continue
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>		}
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>		<span class="comment">// There are four cases to handle in translating each</span>
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>		<span class="comment">// argument:</span>
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>		<span class="comment">// 1. Stack -&gt; stack translation.</span>
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>		<span class="comment">// 2. Stack -&gt; registers translation.</span>
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>		<span class="comment">// 3. Registers -&gt; stack translation.</span>
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>		<span class="comment">// 4. Registers -&gt; registers translation.</span>
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>		<span class="comment">// If the value ABI passes the value on the stack,</span>
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>		<span class="comment">// then the method ABI does too, because it has strictly</span>
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>		<span class="comment">// fewer arguments. Simply copy between the two.</span>
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>		if vStep := valueSteps[0]; vStep.kind == abiStepStack {
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>			mStep := methodSteps[0]
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>			<span class="comment">// Handle stack -&gt; stack translation.</span>
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>			if mStep.kind == abiStepStack {
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>				if vStep.size != mStep.size {
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>					panic(&#34;method ABI and value ABI do not align&#34;)
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>				}
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>				typedmemmove(t,
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>					add(methodFrame, mStep.stkOff, &#34;precomputed stack offset&#34;),
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>					add(valueFrame, vStep.stkOff, &#34;precomputed stack offset&#34;))
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>				continue
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>			}
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>			<span class="comment">// Handle stack -&gt; register translation.</span>
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>			for _, mStep := range methodSteps {
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>				from := add(valueFrame, vStep.stkOff+mStep.offset, &#34;precomputed stack offset&#34;)
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>				switch mStep.kind {
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>				case abiStepPointer:
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>					<span class="comment">// Do the pointer copy directly so we get a write barrier.</span>
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>					methodRegs.Ptrs[mStep.ireg] = *(*unsafe.Pointer)(from)
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>					fallthrough <span class="comment">// We need to make sure this ends up in Ints, too.</span>
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>				case abiStepIntReg:
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>					intToReg(&amp;methodRegs, mStep.ireg, mStep.size, from)
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>				case abiStepFloatReg:
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>					floatToReg(&amp;methodRegs, mStep.freg, mStep.size, from)
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>				default:
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>					panic(&#34;unexpected method step&#34;)
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>				}
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>			}
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>			continue
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>		}
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>		<span class="comment">// Handle register -&gt; stack translation.</span>
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>		if mStep := methodSteps[0]; mStep.kind == abiStepStack {
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>			for _, vStep := range valueSteps {
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>				to := add(methodFrame, mStep.stkOff+vStep.offset, &#34;precomputed stack offset&#34;)
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>				switch vStep.kind {
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>				case abiStepPointer:
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>					<span class="comment">// Do the pointer copy directly so we get a write barrier.</span>
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>					*(*unsafe.Pointer)(to) = valueRegs.Ptrs[vStep.ireg]
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>				case abiStepIntReg:
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>					intFromReg(valueRegs, vStep.ireg, vStep.size, to)
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>				case abiStepFloatReg:
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>					floatFromReg(valueRegs, vStep.freg, vStep.size, to)
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>				default:
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>					panic(&#34;unexpected value step&#34;)
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>				}
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>			}
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>			continue
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>		}
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>		<span class="comment">// Handle register -&gt; register translation.</span>
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>		if len(valueSteps) != len(methodSteps) {
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>			<span class="comment">// Because it&#39;s the same type for the value, and it&#39;s assigned</span>
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>			<span class="comment">// to registers both times, it should always take up the same</span>
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>			<span class="comment">// number of registers for each ABI.</span>
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>			panic(&#34;method ABI and value ABI don&#39;t align&#34;)
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>		}
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>		for i, vStep := range valueSteps {
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>			mStep := methodSteps[i]
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>			if mStep.kind != vStep.kind {
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>				panic(&#34;method ABI and value ABI don&#39;t align&#34;)
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>			}
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>			switch vStep.kind {
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>			case abiStepPointer:
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>				<span class="comment">// Copy this too, so we get a write barrier.</span>
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>				methodRegs.Ptrs[mStep.ireg] = valueRegs.Ptrs[vStep.ireg]
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>				fallthrough
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>			case abiStepIntReg:
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>				methodRegs.Ints[mStep.ireg] = valueRegs.Ints[vStep.ireg]
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>			case abiStepFloatReg:
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>				methodRegs.Floats[mStep.freg] = valueRegs.Floats[vStep.freg]
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>			default:
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>				panic(&#34;unexpected value step&#34;)
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>			}
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>		}
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>	}
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>	methodFrameSize := methodFrameType.Size()
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>	<span class="comment">// TODO(mknyszek): Remove this when we no longer have</span>
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>	<span class="comment">// caller reserved spill space.</span>
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>	methodFrameSize = align(methodFrameSize, goarch.PtrSize)
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>	methodFrameSize += methodABI.spill
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>	<span class="comment">// Mark pointers in registers for the return path.</span>
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>	methodRegs.ReturnIsPtr = methodABI.outRegPtrs
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>	<span class="comment">// Call.</span>
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>	<span class="comment">// Call copies the arguments from scratch to the stack, calls fn,</span>
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>	<span class="comment">// and then copies the results back into scratch.</span>
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>	call(methodFrameType, methodFn, methodFrame, uint32(methodFrameType.Size()), uint32(methodABI.retOffset), uint32(methodFrameSize), &amp;methodRegs)
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>	<span class="comment">// Copy return values.</span>
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>	<span class="comment">// This is somewhat simpler because both ABIs have an identical</span>
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>	<span class="comment">// return value ABI (the types are identical). As a result, register</span>
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>	<span class="comment">// results can simply be copied over. Stack-allocated values are laid</span>
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>	<span class="comment">// out the same, but are at different offsets from the start of the frame</span>
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>	<span class="comment">// Ignore any changes to args.</span>
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>	<span class="comment">// Avoid constructing out-of-bounds pointers if there are no return values.</span>
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>	<span class="comment">// because the arguments may be laid out differently.</span>
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>	if valueRegs != nil {
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>		*valueRegs = methodRegs
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>	}
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>	if retSize := methodFrameType.Size() - methodABI.retOffset; retSize &gt; 0 {
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>		valueRet := add(valueFrame, valueABI.retOffset, &#34;valueFrame&#39;s size &gt; retOffset&#34;)
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>		methodRet := add(methodFrame, methodABI.retOffset, &#34;methodFrame&#39;s size &gt; retOffset&#34;)
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>		<span class="comment">// This copies to the stack. Write barriers are not needed.</span>
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>		memmove(valueRet, methodRet, retSize)
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>	}
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>	<span class="comment">// Tell the runtime it can now depend on the return values</span>
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>	<span class="comment">// being properly initialized.</span>
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>	*retValid = true
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>	<span class="comment">// Clear the scratch space and put it back in the pool.</span>
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>	<span class="comment">// This must happen after the statement above, so that the return</span>
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>	<span class="comment">// values will always be scanned by someone.</span>
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>	typedmemclr(methodFrameType, methodFrame)
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>	methodFramePool.Put(methodFrame)
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>	<span class="comment">// See the comment in callReflect.</span>
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>	runtime.KeepAlive(ctxt)
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>	<span class="comment">// Keep valueRegs alive because it may hold live pointer results.</span>
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>	<span class="comment">// The caller (methodValueCall) has it as a stack object, which is only</span>
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>	<span class="comment">// scanned when there is a reference to it.</span>
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>	runtime.KeepAlive(valueRegs)
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>}
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span><span class="comment">// funcName returns the name of f, for use in error messages.</span>
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>func funcName(f func([]Value) []Value) string {
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>	pc := *(*uintptr)(unsafe.Pointer(&amp;f))
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>	rf := runtime.FuncForPC(pc)
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>	if rf != nil {
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>		return rf.Name()
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>	}
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>	return &#34;closure&#34;
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>}
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span><span class="comment">// Cap returns v&#39;s capacity.</span>
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Array], [Chan], [Slice] or pointer to [Array].</span>
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>func (v Value) Cap() int {
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>	<span class="comment">// capNonSlice is split out to keep Cap inlineable for slice kinds.</span>
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>	if v.kind() == Slice {
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>		return (*unsafeheader.Slice)(v.ptr).Cap
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>	}
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>	return v.capNonSlice()
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>}
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>func (v Value) capNonSlice() int {
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>	k := v.kind()
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>	switch k {
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>	case Array:
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>		return v.typ().Len()
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>	case Chan:
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>		return chancap(v.pointer())
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>	case Ptr:
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>		if v.typ().Elem().Kind() == abi.Array {
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>			return v.typ().Elem().Len()
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>		}
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>		panic(&#34;reflect: call of reflect.Value.Cap on ptr to non-array Value&#34;)
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>	}
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.Cap&#34;, v.kind()})
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>}
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span><span class="comment">// Close closes the channel v.</span>
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Chan] or</span>
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span><span class="comment">// v is a receive-only channel.</span>
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>func (v Value) Close() {
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>	v.mustBe(Chan)
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>	v.mustBeExported()
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>	tt := (*chanType)(unsafe.Pointer(v.typ()))
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>	if ChanDir(tt.Dir)&amp;SendDir == 0 {
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>		panic(&#34;reflect: close of receive-only channel&#34;)
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>	}
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>	chanclose(v.pointer())
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>}
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span><span class="comment">// CanComplex reports whether [Value.Complex] can be used without panicking.</span>
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>func (v Value) CanComplex() bool {
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>	switch v.kind() {
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>	case Complex64, Complex128:
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>		return true
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>	default:
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>		return false
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>	}
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>}
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span><span class="comment">// Complex returns v&#39;s underlying value, as a complex128.</span>
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Complex64] or [Complex128]</span>
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>func (v Value) Complex() complex128 {
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>	k := v.kind()
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>	switch k {
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>	case Complex64:
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>		return complex128(*(*complex64)(v.ptr))
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>	case Complex128:
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>		return *(*complex128)(v.ptr)
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>	}
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.Complex&#34;, v.kind()})
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>}
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span><span class="comment">// Elem returns the value that the interface v contains</span>
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span><span class="comment">// or that the pointer v points to.</span>
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Interface] or [Pointer].</span>
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span><span class="comment">// It returns the zero Value if v is nil.</span>
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>func (v Value) Elem() Value {
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>	k := v.kind()
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>	switch k {
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>	case Interface:
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>		var eface any
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>		if v.typ().NumMethod() == 0 {
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>			eface = *(*any)(v.ptr)
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>		} else {
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>			eface = (any)(*(*interface {
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>				M()
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>			})(v.ptr))
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>		}
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>		x := unpackEface(eface)
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>		if x.flag != 0 {
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>			x.flag |= v.flag.ro()
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>		}
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>		return x
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>	case Pointer:
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>		ptr := v.ptr
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>		if v.flag&amp;flagIndir != 0 {
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>			if ifaceIndir(v.typ()) {
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>				<span class="comment">// This is a pointer to a not-in-heap object. ptr points to a uintptr</span>
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>				<span class="comment">// in the heap. That uintptr is the address of a not-in-heap object.</span>
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span>				<span class="comment">// In general, pointers to not-in-heap objects can be total junk.</span>
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>				<span class="comment">// But Elem() is asking to dereference it, so the user has asserted</span>
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span>				<span class="comment">// that at least it is a valid pointer (not just an integer stored in</span>
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span>				<span class="comment">// a pointer slot). So let&#39;s check, to make sure that it isn&#39;t a pointer</span>
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span>				<span class="comment">// that the runtime will crash on if it sees it during GC or write barriers.</span>
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span>				<span class="comment">// Since it is a not-in-heap pointer, all pointers to the heap are</span>
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>				<span class="comment">// forbidden! That makes the test pretty easy.</span>
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>				<span class="comment">// See issue 48399.</span>
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>				if !verifyNotInHeapPtr(*(*uintptr)(ptr)) {
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>					panic(&#34;reflect: reflect.Value.Elem on an invalid notinheap pointer&#34;)
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>				}
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>			}
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>			ptr = *(*unsafe.Pointer)(ptr)
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>		}
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>		<span class="comment">// The returned value&#39;s address is v&#39;s value.</span>
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>		if ptr == nil {
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>			return Value{}
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>		}
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>		tt := (*ptrType)(unsafe.Pointer(v.typ()))
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>		typ := tt.Elem
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>		fl := v.flag&amp;flagRO | flagIndir | flagAddr
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>		fl |= flag(typ.Kind())
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>		return Value{typ, ptr, fl}
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>	}
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.Elem&#34;, v.kind()})
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>}
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span><span class="comment">// Field returns the i&#39;th field of the struct v.</span>
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Struct] or i is out of range.</span>
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>func (v Value) Field(i int) Value {
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>	if v.kind() != Struct {
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.Field&#34;, v.kind()})
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span>	}
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>	tt := (*structType)(unsafe.Pointer(v.typ()))
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span>	if uint(i) &gt;= uint(len(tt.Fields)) {
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span>		panic(&#34;reflect: Field index out of range&#34;)
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span>	}
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span>	field := &amp;tt.Fields[i]
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span>	typ := field.Typ
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span>
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>	<span class="comment">// Inherit permission bits from v, but clear flagEmbedRO.</span>
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span>	fl := v.flag&amp;(flagStickyRO|flagIndir|flagAddr) | flag(typ.Kind())
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span>	<span class="comment">// Using an unexported field forces flagRO.</span>
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span>	if !field.Name.IsExported() {
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span>		if field.Embedded() {
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span>			fl |= flagEmbedRO
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>		} else {
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span>			fl |= flagStickyRO
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span>		}
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span>	}
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span>	<span class="comment">// Either flagIndir is set and v.ptr points at struct,</span>
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span>	<span class="comment">// or flagIndir is not set and v.ptr is the actual struct data.</span>
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>	<span class="comment">// In the former case, we want v.ptr + offset.</span>
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span>	<span class="comment">// In the latter case, we must have field.offset = 0,</span>
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span>	<span class="comment">// so v.ptr + field.offset is still the correct address.</span>
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span>	ptr := add(v.ptr, field.Offset, &#34;same as non-reflect &amp;v.field&#34;)
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span>	return Value{typ, ptr, fl}
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span>}
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span>
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span><span class="comment">// FieldByIndex returns the nested field corresponding to index.</span>
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span><span class="comment">// It panics if evaluation requires stepping through a nil</span>
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span><span class="comment">// pointer or a field that is not a struct.</span>
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span>func (v Value) FieldByIndex(index []int) Value {
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span>	if len(index) == 1 {
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span>		return v.Field(index[0])
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span>	}
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span>	v.mustBe(Struct)
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>	for i, x := range index {
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span>			if v.Kind() == Pointer &amp;&amp; v.typ().Elem().Kind() == abi.Struct {
<span id="L1323" class="ln">  1323&nbsp;&nbsp;</span>				if v.IsNil() {
<span id="L1324" class="ln">  1324&nbsp;&nbsp;</span>					panic(&#34;reflect: indirection through nil pointer to embedded struct&#34;)
<span id="L1325" class="ln">  1325&nbsp;&nbsp;</span>				}
<span id="L1326" class="ln">  1326&nbsp;&nbsp;</span>				v = v.Elem()
<span id="L1327" class="ln">  1327&nbsp;&nbsp;</span>			}
<span id="L1328" class="ln">  1328&nbsp;&nbsp;</span>		}
<span id="L1329" class="ln">  1329&nbsp;&nbsp;</span>		v = v.Field(x)
<span id="L1330" class="ln">  1330&nbsp;&nbsp;</span>	}
<span id="L1331" class="ln">  1331&nbsp;&nbsp;</span>	return v
<span id="L1332" class="ln">  1332&nbsp;&nbsp;</span>}
<span id="L1333" class="ln">  1333&nbsp;&nbsp;</span>
<span id="L1334" class="ln">  1334&nbsp;&nbsp;</span><span class="comment">// FieldByIndexErr returns the nested field corresponding to index.</span>
<span id="L1335" class="ln">  1335&nbsp;&nbsp;</span><span class="comment">// It returns an error if evaluation requires stepping through a nil</span>
<span id="L1336" class="ln">  1336&nbsp;&nbsp;</span><span class="comment">// pointer, but panics if it must step through a field that</span>
<span id="L1337" class="ln">  1337&nbsp;&nbsp;</span><span class="comment">// is not a struct.</span>
<span id="L1338" class="ln">  1338&nbsp;&nbsp;</span>func (v Value) FieldByIndexErr(index []int) (Value, error) {
<span id="L1339" class="ln">  1339&nbsp;&nbsp;</span>	if len(index) == 1 {
<span id="L1340" class="ln">  1340&nbsp;&nbsp;</span>		return v.Field(index[0]), nil
<span id="L1341" class="ln">  1341&nbsp;&nbsp;</span>	}
<span id="L1342" class="ln">  1342&nbsp;&nbsp;</span>	v.mustBe(Struct)
<span id="L1343" class="ln">  1343&nbsp;&nbsp;</span>	for i, x := range index {
<span id="L1344" class="ln">  1344&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L1345" class="ln">  1345&nbsp;&nbsp;</span>			if v.Kind() == Ptr &amp;&amp; v.typ().Elem().Kind() == abi.Struct {
<span id="L1346" class="ln">  1346&nbsp;&nbsp;</span>				if v.IsNil() {
<span id="L1347" class="ln">  1347&nbsp;&nbsp;</span>					return Value{}, errors.New(&#34;reflect: indirection through nil pointer to embedded struct field &#34; + nameFor(v.typ().Elem()))
<span id="L1348" class="ln">  1348&nbsp;&nbsp;</span>				}
<span id="L1349" class="ln">  1349&nbsp;&nbsp;</span>				v = v.Elem()
<span id="L1350" class="ln">  1350&nbsp;&nbsp;</span>			}
<span id="L1351" class="ln">  1351&nbsp;&nbsp;</span>		}
<span id="L1352" class="ln">  1352&nbsp;&nbsp;</span>		v = v.Field(x)
<span id="L1353" class="ln">  1353&nbsp;&nbsp;</span>	}
<span id="L1354" class="ln">  1354&nbsp;&nbsp;</span>	return v, nil
<span id="L1355" class="ln">  1355&nbsp;&nbsp;</span>}
<span id="L1356" class="ln">  1356&nbsp;&nbsp;</span>
<span id="L1357" class="ln">  1357&nbsp;&nbsp;</span><span class="comment">// FieldByName returns the struct field with the given name.</span>
<span id="L1358" class="ln">  1358&nbsp;&nbsp;</span><span class="comment">// It returns the zero Value if no field was found.</span>
<span id="L1359" class="ln">  1359&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Struct].</span>
<span id="L1360" class="ln">  1360&nbsp;&nbsp;</span>func (v Value) FieldByName(name string) Value {
<span id="L1361" class="ln">  1361&nbsp;&nbsp;</span>	v.mustBe(Struct)
<span id="L1362" class="ln">  1362&nbsp;&nbsp;</span>	if f, ok := toRType(v.typ()).FieldByName(name); ok {
<span id="L1363" class="ln">  1363&nbsp;&nbsp;</span>		return v.FieldByIndex(f.Index)
<span id="L1364" class="ln">  1364&nbsp;&nbsp;</span>	}
<span id="L1365" class="ln">  1365&nbsp;&nbsp;</span>	return Value{}
<span id="L1366" class="ln">  1366&nbsp;&nbsp;</span>}
<span id="L1367" class="ln">  1367&nbsp;&nbsp;</span>
<span id="L1368" class="ln">  1368&nbsp;&nbsp;</span><span class="comment">// FieldByNameFunc returns the struct field with a name</span>
<span id="L1369" class="ln">  1369&nbsp;&nbsp;</span><span class="comment">// that satisfies the match function.</span>
<span id="L1370" class="ln">  1370&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Struct].</span>
<span id="L1371" class="ln">  1371&nbsp;&nbsp;</span><span class="comment">// It returns the zero Value if no field was found.</span>
<span id="L1372" class="ln">  1372&nbsp;&nbsp;</span>func (v Value) FieldByNameFunc(match func(string) bool) Value {
<span id="L1373" class="ln">  1373&nbsp;&nbsp;</span>	if f, ok := toRType(v.typ()).FieldByNameFunc(match); ok {
<span id="L1374" class="ln">  1374&nbsp;&nbsp;</span>		return v.FieldByIndex(f.Index)
<span id="L1375" class="ln">  1375&nbsp;&nbsp;</span>	}
<span id="L1376" class="ln">  1376&nbsp;&nbsp;</span>	return Value{}
<span id="L1377" class="ln">  1377&nbsp;&nbsp;</span>}
<span id="L1378" class="ln">  1378&nbsp;&nbsp;</span>
<span id="L1379" class="ln">  1379&nbsp;&nbsp;</span><span class="comment">// CanFloat reports whether [Value.Float] can be used without panicking.</span>
<span id="L1380" class="ln">  1380&nbsp;&nbsp;</span>func (v Value) CanFloat() bool {
<span id="L1381" class="ln">  1381&nbsp;&nbsp;</span>	switch v.kind() {
<span id="L1382" class="ln">  1382&nbsp;&nbsp;</span>	case Float32, Float64:
<span id="L1383" class="ln">  1383&nbsp;&nbsp;</span>		return true
<span id="L1384" class="ln">  1384&nbsp;&nbsp;</span>	default:
<span id="L1385" class="ln">  1385&nbsp;&nbsp;</span>		return false
<span id="L1386" class="ln">  1386&nbsp;&nbsp;</span>	}
<span id="L1387" class="ln">  1387&nbsp;&nbsp;</span>}
<span id="L1388" class="ln">  1388&nbsp;&nbsp;</span>
<span id="L1389" class="ln">  1389&nbsp;&nbsp;</span><span class="comment">// Float returns v&#39;s underlying value, as a float64.</span>
<span id="L1390" class="ln">  1390&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Float32] or [Float64]</span>
<span id="L1391" class="ln">  1391&nbsp;&nbsp;</span>func (v Value) Float() float64 {
<span id="L1392" class="ln">  1392&nbsp;&nbsp;</span>	k := v.kind()
<span id="L1393" class="ln">  1393&nbsp;&nbsp;</span>	switch k {
<span id="L1394" class="ln">  1394&nbsp;&nbsp;</span>	case Float32:
<span id="L1395" class="ln">  1395&nbsp;&nbsp;</span>		return float64(*(*float32)(v.ptr))
<span id="L1396" class="ln">  1396&nbsp;&nbsp;</span>	case Float64:
<span id="L1397" class="ln">  1397&nbsp;&nbsp;</span>		return *(*float64)(v.ptr)
<span id="L1398" class="ln">  1398&nbsp;&nbsp;</span>	}
<span id="L1399" class="ln">  1399&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.Float&#34;, v.kind()})
<span id="L1400" class="ln">  1400&nbsp;&nbsp;</span>}
<span id="L1401" class="ln">  1401&nbsp;&nbsp;</span>
<span id="L1402" class="ln">  1402&nbsp;&nbsp;</span>var uint8Type = rtypeOf(uint8(0))
<span id="L1403" class="ln">  1403&nbsp;&nbsp;</span>
<span id="L1404" class="ln">  1404&nbsp;&nbsp;</span><span class="comment">// Index returns v&#39;s i&#39;th element.</span>
<span id="L1405" class="ln">  1405&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Array], [Slice], or [String] or i is out of range.</span>
<span id="L1406" class="ln">  1406&nbsp;&nbsp;</span>func (v Value) Index(i int) Value {
<span id="L1407" class="ln">  1407&nbsp;&nbsp;</span>	switch v.kind() {
<span id="L1408" class="ln">  1408&nbsp;&nbsp;</span>	case Array:
<span id="L1409" class="ln">  1409&nbsp;&nbsp;</span>		tt := (*arrayType)(unsafe.Pointer(v.typ()))
<span id="L1410" class="ln">  1410&nbsp;&nbsp;</span>		if uint(i) &gt;= uint(tt.Len) {
<span id="L1411" class="ln">  1411&nbsp;&nbsp;</span>			panic(&#34;reflect: array index out of range&#34;)
<span id="L1412" class="ln">  1412&nbsp;&nbsp;</span>		}
<span id="L1413" class="ln">  1413&nbsp;&nbsp;</span>		typ := tt.Elem
<span id="L1414" class="ln">  1414&nbsp;&nbsp;</span>		offset := uintptr(i) * typ.Size()
<span id="L1415" class="ln">  1415&nbsp;&nbsp;</span>
<span id="L1416" class="ln">  1416&nbsp;&nbsp;</span>		<span class="comment">// Either flagIndir is set and v.ptr points at array,</span>
<span id="L1417" class="ln">  1417&nbsp;&nbsp;</span>		<span class="comment">// or flagIndir is not set and v.ptr is the actual array data.</span>
<span id="L1418" class="ln">  1418&nbsp;&nbsp;</span>		<span class="comment">// In the former case, we want v.ptr + offset.</span>
<span id="L1419" class="ln">  1419&nbsp;&nbsp;</span>		<span class="comment">// In the latter case, we must be doing Index(0), so offset = 0,</span>
<span id="L1420" class="ln">  1420&nbsp;&nbsp;</span>		<span class="comment">// so v.ptr + offset is still the correct address.</span>
<span id="L1421" class="ln">  1421&nbsp;&nbsp;</span>		val := add(v.ptr, offset, &#34;same as &amp;v[i], i &lt; tt.len&#34;)
<span id="L1422" class="ln">  1422&nbsp;&nbsp;</span>		fl := v.flag&amp;(flagIndir|flagAddr) | v.flag.ro() | flag(typ.Kind()) <span class="comment">// bits same as overall array</span>
<span id="L1423" class="ln">  1423&nbsp;&nbsp;</span>		return Value{typ, val, fl}
<span id="L1424" class="ln">  1424&nbsp;&nbsp;</span>
<span id="L1425" class="ln">  1425&nbsp;&nbsp;</span>	case Slice:
<span id="L1426" class="ln">  1426&nbsp;&nbsp;</span>		<span class="comment">// Element flag same as Elem of Pointer.</span>
<span id="L1427" class="ln">  1427&nbsp;&nbsp;</span>		<span class="comment">// Addressable, indirect, possibly read-only.</span>
<span id="L1428" class="ln">  1428&nbsp;&nbsp;</span>		s := (*unsafeheader.Slice)(v.ptr)
<span id="L1429" class="ln">  1429&nbsp;&nbsp;</span>		if uint(i) &gt;= uint(s.Len) {
<span id="L1430" class="ln">  1430&nbsp;&nbsp;</span>			panic(&#34;reflect: slice index out of range&#34;)
<span id="L1431" class="ln">  1431&nbsp;&nbsp;</span>		}
<span id="L1432" class="ln">  1432&nbsp;&nbsp;</span>		tt := (*sliceType)(unsafe.Pointer(v.typ()))
<span id="L1433" class="ln">  1433&nbsp;&nbsp;</span>		typ := tt.Elem
<span id="L1434" class="ln">  1434&nbsp;&nbsp;</span>		val := arrayAt(s.Data, i, typ.Size(), &#34;i &lt; s.Len&#34;)
<span id="L1435" class="ln">  1435&nbsp;&nbsp;</span>		fl := flagAddr | flagIndir | v.flag.ro() | flag(typ.Kind())
<span id="L1436" class="ln">  1436&nbsp;&nbsp;</span>		return Value{typ, val, fl}
<span id="L1437" class="ln">  1437&nbsp;&nbsp;</span>
<span id="L1438" class="ln">  1438&nbsp;&nbsp;</span>	case String:
<span id="L1439" class="ln">  1439&nbsp;&nbsp;</span>		s := (*unsafeheader.String)(v.ptr)
<span id="L1440" class="ln">  1440&nbsp;&nbsp;</span>		if uint(i) &gt;= uint(s.Len) {
<span id="L1441" class="ln">  1441&nbsp;&nbsp;</span>			panic(&#34;reflect: string index out of range&#34;)
<span id="L1442" class="ln">  1442&nbsp;&nbsp;</span>		}
<span id="L1443" class="ln">  1443&nbsp;&nbsp;</span>		p := arrayAt(s.Data, i, 1, &#34;i &lt; s.Len&#34;)
<span id="L1444" class="ln">  1444&nbsp;&nbsp;</span>		fl := v.flag.ro() | flag(Uint8) | flagIndir
<span id="L1445" class="ln">  1445&nbsp;&nbsp;</span>		return Value{uint8Type, p, fl}
<span id="L1446" class="ln">  1446&nbsp;&nbsp;</span>	}
<span id="L1447" class="ln">  1447&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.Index&#34;, v.kind()})
<span id="L1448" class="ln">  1448&nbsp;&nbsp;</span>}
<span id="L1449" class="ln">  1449&nbsp;&nbsp;</span>
<span id="L1450" class="ln">  1450&nbsp;&nbsp;</span><span class="comment">// CanInt reports whether Int can be used without panicking.</span>
<span id="L1451" class="ln">  1451&nbsp;&nbsp;</span>func (v Value) CanInt() bool {
<span id="L1452" class="ln">  1452&nbsp;&nbsp;</span>	switch v.kind() {
<span id="L1453" class="ln">  1453&nbsp;&nbsp;</span>	case Int, Int8, Int16, Int32, Int64:
<span id="L1454" class="ln">  1454&nbsp;&nbsp;</span>		return true
<span id="L1455" class="ln">  1455&nbsp;&nbsp;</span>	default:
<span id="L1456" class="ln">  1456&nbsp;&nbsp;</span>		return false
<span id="L1457" class="ln">  1457&nbsp;&nbsp;</span>	}
<span id="L1458" class="ln">  1458&nbsp;&nbsp;</span>}
<span id="L1459" class="ln">  1459&nbsp;&nbsp;</span>
<span id="L1460" class="ln">  1460&nbsp;&nbsp;</span><span class="comment">// Int returns v&#39;s underlying value, as an int64.</span>
<span id="L1461" class="ln">  1461&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Int], [Int8], [Int16], [Int32], or [Int64].</span>
<span id="L1462" class="ln">  1462&nbsp;&nbsp;</span>func (v Value) Int() int64 {
<span id="L1463" class="ln">  1463&nbsp;&nbsp;</span>	k := v.kind()
<span id="L1464" class="ln">  1464&nbsp;&nbsp;</span>	p := v.ptr
<span id="L1465" class="ln">  1465&nbsp;&nbsp;</span>	switch k {
<span id="L1466" class="ln">  1466&nbsp;&nbsp;</span>	case Int:
<span id="L1467" class="ln">  1467&nbsp;&nbsp;</span>		return int64(*(*int)(p))
<span id="L1468" class="ln">  1468&nbsp;&nbsp;</span>	case Int8:
<span id="L1469" class="ln">  1469&nbsp;&nbsp;</span>		return int64(*(*int8)(p))
<span id="L1470" class="ln">  1470&nbsp;&nbsp;</span>	case Int16:
<span id="L1471" class="ln">  1471&nbsp;&nbsp;</span>		return int64(*(*int16)(p))
<span id="L1472" class="ln">  1472&nbsp;&nbsp;</span>	case Int32:
<span id="L1473" class="ln">  1473&nbsp;&nbsp;</span>		return int64(*(*int32)(p))
<span id="L1474" class="ln">  1474&nbsp;&nbsp;</span>	case Int64:
<span id="L1475" class="ln">  1475&nbsp;&nbsp;</span>		return *(*int64)(p)
<span id="L1476" class="ln">  1476&nbsp;&nbsp;</span>	}
<span id="L1477" class="ln">  1477&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.Int&#34;, v.kind()})
<span id="L1478" class="ln">  1478&nbsp;&nbsp;</span>}
<span id="L1479" class="ln">  1479&nbsp;&nbsp;</span>
<span id="L1480" class="ln">  1480&nbsp;&nbsp;</span><span class="comment">// CanInterface reports whether [Value.Interface] can be used without panicking.</span>
<span id="L1481" class="ln">  1481&nbsp;&nbsp;</span>func (v Value) CanInterface() bool {
<span id="L1482" class="ln">  1482&nbsp;&nbsp;</span>	if v.flag == 0 {
<span id="L1483" class="ln">  1483&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.CanInterface&#34;, Invalid})
<span id="L1484" class="ln">  1484&nbsp;&nbsp;</span>	}
<span id="L1485" class="ln">  1485&nbsp;&nbsp;</span>	return v.flag&amp;flagRO == 0
<span id="L1486" class="ln">  1486&nbsp;&nbsp;</span>}
<span id="L1487" class="ln">  1487&nbsp;&nbsp;</span>
<span id="L1488" class="ln">  1488&nbsp;&nbsp;</span><span class="comment">// Interface returns v&#39;s current value as an interface{}.</span>
<span id="L1489" class="ln">  1489&nbsp;&nbsp;</span><span class="comment">// It is equivalent to:</span>
<span id="L1490" class="ln">  1490&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1491" class="ln">  1491&nbsp;&nbsp;</span><span class="comment">//	var i interface{} = (v&#39;s underlying value)</span>
<span id="L1492" class="ln">  1492&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1493" class="ln">  1493&nbsp;&nbsp;</span><span class="comment">// It panics if the Value was obtained by accessing</span>
<span id="L1494" class="ln">  1494&nbsp;&nbsp;</span><span class="comment">// unexported struct fields.</span>
<span id="L1495" class="ln">  1495&nbsp;&nbsp;</span>func (v Value) Interface() (i any) {
<span id="L1496" class="ln">  1496&nbsp;&nbsp;</span>	return valueInterface(v, true)
<span id="L1497" class="ln">  1497&nbsp;&nbsp;</span>}
<span id="L1498" class="ln">  1498&nbsp;&nbsp;</span>
<span id="L1499" class="ln">  1499&nbsp;&nbsp;</span>func valueInterface(v Value, safe bool) any {
<span id="L1500" class="ln">  1500&nbsp;&nbsp;</span>	if v.flag == 0 {
<span id="L1501" class="ln">  1501&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.Interface&#34;, Invalid})
<span id="L1502" class="ln">  1502&nbsp;&nbsp;</span>	}
<span id="L1503" class="ln">  1503&nbsp;&nbsp;</span>	if safe &amp;&amp; v.flag&amp;flagRO != 0 {
<span id="L1504" class="ln">  1504&nbsp;&nbsp;</span>		<span class="comment">// Do not allow access to unexported values via Interface,</span>
<span id="L1505" class="ln">  1505&nbsp;&nbsp;</span>		<span class="comment">// because they might be pointers that should not be</span>
<span id="L1506" class="ln">  1506&nbsp;&nbsp;</span>		<span class="comment">// writable or methods or function that should not be callable.</span>
<span id="L1507" class="ln">  1507&nbsp;&nbsp;</span>		panic(&#34;reflect.Value.Interface: cannot return value obtained from unexported field or method&#34;)
<span id="L1508" class="ln">  1508&nbsp;&nbsp;</span>	}
<span id="L1509" class="ln">  1509&nbsp;&nbsp;</span>	if v.flag&amp;flagMethod != 0 {
<span id="L1510" class="ln">  1510&nbsp;&nbsp;</span>		v = makeMethodValue(&#34;Interface&#34;, v)
<span id="L1511" class="ln">  1511&nbsp;&nbsp;</span>	}
<span id="L1512" class="ln">  1512&nbsp;&nbsp;</span>
<span id="L1513" class="ln">  1513&nbsp;&nbsp;</span>	if v.kind() == Interface {
<span id="L1514" class="ln">  1514&nbsp;&nbsp;</span>		<span class="comment">// Special case: return the element inside the interface.</span>
<span id="L1515" class="ln">  1515&nbsp;&nbsp;</span>		<span class="comment">// Empty interface has one layout, all interfaces with</span>
<span id="L1516" class="ln">  1516&nbsp;&nbsp;</span>		<span class="comment">// methods have a second layout.</span>
<span id="L1517" class="ln">  1517&nbsp;&nbsp;</span>		if v.NumMethod() == 0 {
<span id="L1518" class="ln">  1518&nbsp;&nbsp;</span>			return *(*any)(v.ptr)
<span id="L1519" class="ln">  1519&nbsp;&nbsp;</span>		}
<span id="L1520" class="ln">  1520&nbsp;&nbsp;</span>		return *(*interface {
<span id="L1521" class="ln">  1521&nbsp;&nbsp;</span>			M()
<span id="L1522" class="ln">  1522&nbsp;&nbsp;</span>		})(v.ptr)
<span id="L1523" class="ln">  1523&nbsp;&nbsp;</span>	}
<span id="L1524" class="ln">  1524&nbsp;&nbsp;</span>
<span id="L1525" class="ln">  1525&nbsp;&nbsp;</span>	<span class="comment">// TODO: pass safe to packEface so we don&#39;t need to copy if safe==true?</span>
<span id="L1526" class="ln">  1526&nbsp;&nbsp;</span>	return packEface(v)
<span id="L1527" class="ln">  1527&nbsp;&nbsp;</span>}
<span id="L1528" class="ln">  1528&nbsp;&nbsp;</span>
<span id="L1529" class="ln">  1529&nbsp;&nbsp;</span><span class="comment">// InterfaceData returns a pair of unspecified uintptr values.</span>
<span id="L1530" class="ln">  1530&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not Interface.</span>
<span id="L1531" class="ln">  1531&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1532" class="ln">  1532&nbsp;&nbsp;</span><span class="comment">// In earlier versions of Go, this function returned the interface&#39;s</span>
<span id="L1533" class="ln">  1533&nbsp;&nbsp;</span><span class="comment">// value as a uintptr pair. As of Go 1.4, the implementation of</span>
<span id="L1534" class="ln">  1534&nbsp;&nbsp;</span><span class="comment">// interface values precludes any defined use of InterfaceData.</span>
<span id="L1535" class="ln">  1535&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1536" class="ln">  1536&nbsp;&nbsp;</span><span class="comment">// Deprecated: The memory representation of interface values is not</span>
<span id="L1537" class="ln">  1537&nbsp;&nbsp;</span><span class="comment">// compatible with InterfaceData.</span>
<span id="L1538" class="ln">  1538&nbsp;&nbsp;</span>func (v Value) InterfaceData() [2]uintptr {
<span id="L1539" class="ln">  1539&nbsp;&nbsp;</span>	v.mustBe(Interface)
<span id="L1540" class="ln">  1540&nbsp;&nbsp;</span>	<span class="comment">// The compiler loses track as it converts to uintptr. Force escape.</span>
<span id="L1541" class="ln">  1541&nbsp;&nbsp;</span>	escapes(v.ptr)
<span id="L1542" class="ln">  1542&nbsp;&nbsp;</span>	<span class="comment">// We treat this as a read operation, so we allow</span>
<span id="L1543" class="ln">  1543&nbsp;&nbsp;</span>	<span class="comment">// it even for unexported data, because the caller</span>
<span id="L1544" class="ln">  1544&nbsp;&nbsp;</span>	<span class="comment">// has to import &#34;unsafe&#34; to turn it into something</span>
<span id="L1545" class="ln">  1545&nbsp;&nbsp;</span>	<span class="comment">// that can be abused.</span>
<span id="L1546" class="ln">  1546&nbsp;&nbsp;</span>	<span class="comment">// Interface value is always bigger than a word; assume flagIndir.</span>
<span id="L1547" class="ln">  1547&nbsp;&nbsp;</span>	return *(*[2]uintptr)(v.ptr)
<span id="L1548" class="ln">  1548&nbsp;&nbsp;</span>}
<span id="L1549" class="ln">  1549&nbsp;&nbsp;</span>
<span id="L1550" class="ln">  1550&nbsp;&nbsp;</span><span class="comment">// IsNil reports whether its argument v is nil. The argument must be</span>
<span id="L1551" class="ln">  1551&nbsp;&nbsp;</span><span class="comment">// a chan, func, interface, map, pointer, or slice value; if it is</span>
<span id="L1552" class="ln">  1552&nbsp;&nbsp;</span><span class="comment">// not, IsNil panics. Note that IsNil is not always equivalent to a</span>
<span id="L1553" class="ln">  1553&nbsp;&nbsp;</span><span class="comment">// regular comparison with nil in Go. For example, if v was created</span>
<span id="L1554" class="ln">  1554&nbsp;&nbsp;</span><span class="comment">// by calling ValueOf with an uninitialized interface variable i,</span>
<span id="L1555" class="ln">  1555&nbsp;&nbsp;</span><span class="comment">// i==nil will be true but v.IsNil will panic as v will be the zero</span>
<span id="L1556" class="ln">  1556&nbsp;&nbsp;</span><span class="comment">// Value.</span>
<span id="L1557" class="ln">  1557&nbsp;&nbsp;</span>func (v Value) IsNil() bool {
<span id="L1558" class="ln">  1558&nbsp;&nbsp;</span>	k := v.kind()
<span id="L1559" class="ln">  1559&nbsp;&nbsp;</span>	switch k {
<span id="L1560" class="ln">  1560&nbsp;&nbsp;</span>	case Chan, Func, Map, Pointer, UnsafePointer:
<span id="L1561" class="ln">  1561&nbsp;&nbsp;</span>		if v.flag&amp;flagMethod != 0 {
<span id="L1562" class="ln">  1562&nbsp;&nbsp;</span>			return false
<span id="L1563" class="ln">  1563&nbsp;&nbsp;</span>		}
<span id="L1564" class="ln">  1564&nbsp;&nbsp;</span>		ptr := v.ptr
<span id="L1565" class="ln">  1565&nbsp;&nbsp;</span>		if v.flag&amp;flagIndir != 0 {
<span id="L1566" class="ln">  1566&nbsp;&nbsp;</span>			ptr = *(*unsafe.Pointer)(ptr)
<span id="L1567" class="ln">  1567&nbsp;&nbsp;</span>		}
<span id="L1568" class="ln">  1568&nbsp;&nbsp;</span>		return ptr == nil
<span id="L1569" class="ln">  1569&nbsp;&nbsp;</span>	case Interface, Slice:
<span id="L1570" class="ln">  1570&nbsp;&nbsp;</span>		<span class="comment">// Both interface and slice are nil if first word is 0.</span>
<span id="L1571" class="ln">  1571&nbsp;&nbsp;</span>		<span class="comment">// Both are always bigger than a word; assume flagIndir.</span>
<span id="L1572" class="ln">  1572&nbsp;&nbsp;</span>		return *(*unsafe.Pointer)(v.ptr) == nil
<span id="L1573" class="ln">  1573&nbsp;&nbsp;</span>	}
<span id="L1574" class="ln">  1574&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.IsNil&#34;, v.kind()})
<span id="L1575" class="ln">  1575&nbsp;&nbsp;</span>}
<span id="L1576" class="ln">  1576&nbsp;&nbsp;</span>
<span id="L1577" class="ln">  1577&nbsp;&nbsp;</span><span class="comment">// IsValid reports whether v represents a value.</span>
<span id="L1578" class="ln">  1578&nbsp;&nbsp;</span><span class="comment">// It returns false if v is the zero Value.</span>
<span id="L1579" class="ln">  1579&nbsp;&nbsp;</span><span class="comment">// If IsValid returns false, all other methods except String panic.</span>
<span id="L1580" class="ln">  1580&nbsp;&nbsp;</span><span class="comment">// Most functions and methods never return an invalid Value.</span>
<span id="L1581" class="ln">  1581&nbsp;&nbsp;</span><span class="comment">// If one does, its documentation states the conditions explicitly.</span>
<span id="L1582" class="ln">  1582&nbsp;&nbsp;</span>func (v Value) IsValid() bool {
<span id="L1583" class="ln">  1583&nbsp;&nbsp;</span>	return v.flag != 0
<span id="L1584" class="ln">  1584&nbsp;&nbsp;</span>}
<span id="L1585" class="ln">  1585&nbsp;&nbsp;</span>
<span id="L1586" class="ln">  1586&nbsp;&nbsp;</span><span class="comment">// IsZero reports whether v is the zero value for its type.</span>
<span id="L1587" class="ln">  1587&nbsp;&nbsp;</span><span class="comment">// It panics if the argument is invalid.</span>
<span id="L1588" class="ln">  1588&nbsp;&nbsp;</span>func (v Value) IsZero() bool {
<span id="L1589" class="ln">  1589&nbsp;&nbsp;</span>	switch v.kind() {
<span id="L1590" class="ln">  1590&nbsp;&nbsp;</span>	case Bool:
<span id="L1591" class="ln">  1591&nbsp;&nbsp;</span>		return !v.Bool()
<span id="L1592" class="ln">  1592&nbsp;&nbsp;</span>	case Int, Int8, Int16, Int32, Int64:
<span id="L1593" class="ln">  1593&nbsp;&nbsp;</span>		return v.Int() == 0
<span id="L1594" class="ln">  1594&nbsp;&nbsp;</span>	case Uint, Uint8, Uint16, Uint32, Uint64, Uintptr:
<span id="L1595" class="ln">  1595&nbsp;&nbsp;</span>		return v.Uint() == 0
<span id="L1596" class="ln">  1596&nbsp;&nbsp;</span>	case Float32, Float64:
<span id="L1597" class="ln">  1597&nbsp;&nbsp;</span>		return v.Float() == 0
<span id="L1598" class="ln">  1598&nbsp;&nbsp;</span>	case Complex64, Complex128:
<span id="L1599" class="ln">  1599&nbsp;&nbsp;</span>		return v.Complex() == 0
<span id="L1600" class="ln">  1600&nbsp;&nbsp;</span>	case Array:
<span id="L1601" class="ln">  1601&nbsp;&nbsp;</span>		if v.flag&amp;flagIndir == 0 {
<span id="L1602" class="ln">  1602&nbsp;&nbsp;</span>			return v.ptr == nil
<span id="L1603" class="ln">  1603&nbsp;&nbsp;</span>		}
<span id="L1604" class="ln">  1604&nbsp;&nbsp;</span>		typ := (*abi.ArrayType)(unsafe.Pointer(v.typ()))
<span id="L1605" class="ln">  1605&nbsp;&nbsp;</span>		<span class="comment">// If the type is comparable, then compare directly with zero.</span>
<span id="L1606" class="ln">  1606&nbsp;&nbsp;</span>		if typ.Equal != nil &amp;&amp; typ.Size() &lt;= abi.ZeroValSize {
<span id="L1607" class="ln">  1607&nbsp;&nbsp;</span>			<span class="comment">// v.ptr doesn&#39;t escape, as Equal functions are compiler generated</span>
<span id="L1608" class="ln">  1608&nbsp;&nbsp;</span>			<span class="comment">// and never escape. The escape analysis doesn&#39;t know, as it is a</span>
<span id="L1609" class="ln">  1609&nbsp;&nbsp;</span>			<span class="comment">// function pointer call.</span>
<span id="L1610" class="ln">  1610&nbsp;&nbsp;</span>			return typ.Equal(noescape(v.ptr), unsafe.Pointer(&amp;zeroVal[0]))
<span id="L1611" class="ln">  1611&nbsp;&nbsp;</span>		}
<span id="L1612" class="ln">  1612&nbsp;&nbsp;</span>		if typ.TFlag&amp;abi.TFlagRegularMemory != 0 {
<span id="L1613" class="ln">  1613&nbsp;&nbsp;</span>			<span class="comment">// For some types where the zero value is a value where all bits of this type are 0</span>
<span id="L1614" class="ln">  1614&nbsp;&nbsp;</span>			<span class="comment">// optimize it.</span>
<span id="L1615" class="ln">  1615&nbsp;&nbsp;</span>			return isZero(unsafe.Slice(((*byte)(v.ptr)), typ.Size()))
<span id="L1616" class="ln">  1616&nbsp;&nbsp;</span>		}
<span id="L1617" class="ln">  1617&nbsp;&nbsp;</span>		n := int(typ.Len)
<span id="L1618" class="ln">  1618&nbsp;&nbsp;</span>		for i := 0; i &lt; n; i++ {
<span id="L1619" class="ln">  1619&nbsp;&nbsp;</span>			if !v.Index(i).IsZero() {
<span id="L1620" class="ln">  1620&nbsp;&nbsp;</span>				return false
<span id="L1621" class="ln">  1621&nbsp;&nbsp;</span>			}
<span id="L1622" class="ln">  1622&nbsp;&nbsp;</span>		}
<span id="L1623" class="ln">  1623&nbsp;&nbsp;</span>		return true
<span id="L1624" class="ln">  1624&nbsp;&nbsp;</span>	case Chan, Func, Interface, Map, Pointer, Slice, UnsafePointer:
<span id="L1625" class="ln">  1625&nbsp;&nbsp;</span>		return v.IsNil()
<span id="L1626" class="ln">  1626&nbsp;&nbsp;</span>	case String:
<span id="L1627" class="ln">  1627&nbsp;&nbsp;</span>		return v.Len() == 0
<span id="L1628" class="ln">  1628&nbsp;&nbsp;</span>	case Struct:
<span id="L1629" class="ln">  1629&nbsp;&nbsp;</span>		if v.flag&amp;flagIndir == 0 {
<span id="L1630" class="ln">  1630&nbsp;&nbsp;</span>			return v.ptr == nil
<span id="L1631" class="ln">  1631&nbsp;&nbsp;</span>		}
<span id="L1632" class="ln">  1632&nbsp;&nbsp;</span>		typ := (*abi.StructType)(unsafe.Pointer(v.typ()))
<span id="L1633" class="ln">  1633&nbsp;&nbsp;</span>		<span class="comment">// If the type is comparable, then compare directly with zero.</span>
<span id="L1634" class="ln">  1634&nbsp;&nbsp;</span>		if typ.Equal != nil &amp;&amp; typ.Size() &lt;= abi.ZeroValSize {
<span id="L1635" class="ln">  1635&nbsp;&nbsp;</span>			<span class="comment">// See noescape justification above.</span>
<span id="L1636" class="ln">  1636&nbsp;&nbsp;</span>			return typ.Equal(noescape(v.ptr), unsafe.Pointer(&amp;zeroVal[0]))
<span id="L1637" class="ln">  1637&nbsp;&nbsp;</span>		}
<span id="L1638" class="ln">  1638&nbsp;&nbsp;</span>		if typ.TFlag&amp;abi.TFlagRegularMemory != 0 {
<span id="L1639" class="ln">  1639&nbsp;&nbsp;</span>			<span class="comment">// For some types where the zero value is a value where all bits of this type are 0</span>
<span id="L1640" class="ln">  1640&nbsp;&nbsp;</span>			<span class="comment">// optimize it.</span>
<span id="L1641" class="ln">  1641&nbsp;&nbsp;</span>			return isZero(unsafe.Slice(((*byte)(v.ptr)), typ.Size()))
<span id="L1642" class="ln">  1642&nbsp;&nbsp;</span>		}
<span id="L1643" class="ln">  1643&nbsp;&nbsp;</span>
<span id="L1644" class="ln">  1644&nbsp;&nbsp;</span>		n := v.NumField()
<span id="L1645" class="ln">  1645&nbsp;&nbsp;</span>		for i := 0; i &lt; n; i++ {
<span id="L1646" class="ln">  1646&nbsp;&nbsp;</span>			if !v.Field(i).IsZero() &amp;&amp; v.Type().Field(i).Name != &#34;_&#34; {
<span id="L1647" class="ln">  1647&nbsp;&nbsp;</span>				return false
<span id="L1648" class="ln">  1648&nbsp;&nbsp;</span>			}
<span id="L1649" class="ln">  1649&nbsp;&nbsp;</span>		}
<span id="L1650" class="ln">  1650&nbsp;&nbsp;</span>		return true
<span id="L1651" class="ln">  1651&nbsp;&nbsp;</span>	default:
<span id="L1652" class="ln">  1652&nbsp;&nbsp;</span>		<span class="comment">// This should never happen, but will act as a safeguard for later,</span>
<span id="L1653" class="ln">  1653&nbsp;&nbsp;</span>		<span class="comment">// as a default value doesn&#39;t makes sense here.</span>
<span id="L1654" class="ln">  1654&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.IsZero&#34;, v.Kind()})
<span id="L1655" class="ln">  1655&nbsp;&nbsp;</span>	}
<span id="L1656" class="ln">  1656&nbsp;&nbsp;</span>}
<span id="L1657" class="ln">  1657&nbsp;&nbsp;</span>
<span id="L1658" class="ln">  1658&nbsp;&nbsp;</span><span class="comment">// isZero For all zeros, performance is not as good as</span>
<span id="L1659" class="ln">  1659&nbsp;&nbsp;</span><span class="comment">// return bytealg.Count(b, byte(0)) == len(b)</span>
<span id="L1660" class="ln">  1660&nbsp;&nbsp;</span>func isZero(b []byte) bool {
<span id="L1661" class="ln">  1661&nbsp;&nbsp;</span>	if len(b) == 0 {
<span id="L1662" class="ln">  1662&nbsp;&nbsp;</span>		return true
<span id="L1663" class="ln">  1663&nbsp;&nbsp;</span>	}
<span id="L1664" class="ln">  1664&nbsp;&nbsp;</span>	const n = 32
<span id="L1665" class="ln">  1665&nbsp;&nbsp;</span>	<span class="comment">// Align memory addresses to 8 bytes.</span>
<span id="L1666" class="ln">  1666&nbsp;&nbsp;</span>	for uintptr(unsafe.Pointer(&amp;b[0]))%8 != 0 {
<span id="L1667" class="ln">  1667&nbsp;&nbsp;</span>		if b[0] != 0 {
<span id="L1668" class="ln">  1668&nbsp;&nbsp;</span>			return false
<span id="L1669" class="ln">  1669&nbsp;&nbsp;</span>		}
<span id="L1670" class="ln">  1670&nbsp;&nbsp;</span>		b = b[1:]
<span id="L1671" class="ln">  1671&nbsp;&nbsp;</span>		if len(b) == 0 {
<span id="L1672" class="ln">  1672&nbsp;&nbsp;</span>			return true
<span id="L1673" class="ln">  1673&nbsp;&nbsp;</span>		}
<span id="L1674" class="ln">  1674&nbsp;&nbsp;</span>	}
<span id="L1675" class="ln">  1675&nbsp;&nbsp;</span>	for len(b)%8 != 0 {
<span id="L1676" class="ln">  1676&nbsp;&nbsp;</span>		if b[len(b)-1] != 0 {
<span id="L1677" class="ln">  1677&nbsp;&nbsp;</span>			return false
<span id="L1678" class="ln">  1678&nbsp;&nbsp;</span>		}
<span id="L1679" class="ln">  1679&nbsp;&nbsp;</span>		b = b[:len(b)-1]
<span id="L1680" class="ln">  1680&nbsp;&nbsp;</span>	}
<span id="L1681" class="ln">  1681&nbsp;&nbsp;</span>	if len(b) == 0 {
<span id="L1682" class="ln">  1682&nbsp;&nbsp;</span>		return true
<span id="L1683" class="ln">  1683&nbsp;&nbsp;</span>	}
<span id="L1684" class="ln">  1684&nbsp;&nbsp;</span>	w := unsafe.Slice((*uint64)(unsafe.Pointer(&amp;b[0])), len(b)/8)
<span id="L1685" class="ln">  1685&nbsp;&nbsp;</span>	for len(w)%n != 0 {
<span id="L1686" class="ln">  1686&nbsp;&nbsp;</span>		if w[0] != 0 {
<span id="L1687" class="ln">  1687&nbsp;&nbsp;</span>			return false
<span id="L1688" class="ln">  1688&nbsp;&nbsp;</span>		}
<span id="L1689" class="ln">  1689&nbsp;&nbsp;</span>		w = w[1:]
<span id="L1690" class="ln">  1690&nbsp;&nbsp;</span>	}
<span id="L1691" class="ln">  1691&nbsp;&nbsp;</span>	for len(w) &gt;= n {
<span id="L1692" class="ln">  1692&nbsp;&nbsp;</span>		if w[0] != 0 || w[1] != 0 || w[2] != 0 || w[3] != 0 ||
<span id="L1693" class="ln">  1693&nbsp;&nbsp;</span>			w[4] != 0 || w[5] != 0 || w[6] != 0 || w[7] != 0 ||
<span id="L1694" class="ln">  1694&nbsp;&nbsp;</span>			w[8] != 0 || w[9] != 0 || w[10] != 0 || w[11] != 0 ||
<span id="L1695" class="ln">  1695&nbsp;&nbsp;</span>			w[12] != 0 || w[13] != 0 || w[14] != 0 || w[15] != 0 ||
<span id="L1696" class="ln">  1696&nbsp;&nbsp;</span>			w[16] != 0 || w[17] != 0 || w[18] != 0 || w[19] != 0 ||
<span id="L1697" class="ln">  1697&nbsp;&nbsp;</span>			w[20] != 0 || w[21] != 0 || w[22] != 0 || w[23] != 0 ||
<span id="L1698" class="ln">  1698&nbsp;&nbsp;</span>			w[24] != 0 || w[25] != 0 || w[26] != 0 || w[27] != 0 ||
<span id="L1699" class="ln">  1699&nbsp;&nbsp;</span>			w[28] != 0 || w[29] != 0 || w[30] != 0 || w[31] != 0 {
<span id="L1700" class="ln">  1700&nbsp;&nbsp;</span>			return false
<span id="L1701" class="ln">  1701&nbsp;&nbsp;</span>		}
<span id="L1702" class="ln">  1702&nbsp;&nbsp;</span>		w = w[n:]
<span id="L1703" class="ln">  1703&nbsp;&nbsp;</span>	}
<span id="L1704" class="ln">  1704&nbsp;&nbsp;</span>	return true
<span id="L1705" class="ln">  1705&nbsp;&nbsp;</span>}
<span id="L1706" class="ln">  1706&nbsp;&nbsp;</span>
<span id="L1707" class="ln">  1707&nbsp;&nbsp;</span><span class="comment">// SetZero sets v to be the zero value of v&#39;s type.</span>
<span id="L1708" class="ln">  1708&nbsp;&nbsp;</span><span class="comment">// It panics if [Value.CanSet] returns false.</span>
<span id="L1709" class="ln">  1709&nbsp;&nbsp;</span>func (v Value) SetZero() {
<span id="L1710" class="ln">  1710&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L1711" class="ln">  1711&nbsp;&nbsp;</span>	switch v.kind() {
<span id="L1712" class="ln">  1712&nbsp;&nbsp;</span>	case Bool:
<span id="L1713" class="ln">  1713&nbsp;&nbsp;</span>		*(*bool)(v.ptr) = false
<span id="L1714" class="ln">  1714&nbsp;&nbsp;</span>	case Int:
<span id="L1715" class="ln">  1715&nbsp;&nbsp;</span>		*(*int)(v.ptr) = 0
<span id="L1716" class="ln">  1716&nbsp;&nbsp;</span>	case Int8:
<span id="L1717" class="ln">  1717&nbsp;&nbsp;</span>		*(*int8)(v.ptr) = 0
<span id="L1718" class="ln">  1718&nbsp;&nbsp;</span>	case Int16:
<span id="L1719" class="ln">  1719&nbsp;&nbsp;</span>		*(*int16)(v.ptr) = 0
<span id="L1720" class="ln">  1720&nbsp;&nbsp;</span>	case Int32:
<span id="L1721" class="ln">  1721&nbsp;&nbsp;</span>		*(*int32)(v.ptr) = 0
<span id="L1722" class="ln">  1722&nbsp;&nbsp;</span>	case Int64:
<span id="L1723" class="ln">  1723&nbsp;&nbsp;</span>		*(*int64)(v.ptr) = 0
<span id="L1724" class="ln">  1724&nbsp;&nbsp;</span>	case Uint:
<span id="L1725" class="ln">  1725&nbsp;&nbsp;</span>		*(*uint)(v.ptr) = 0
<span id="L1726" class="ln">  1726&nbsp;&nbsp;</span>	case Uint8:
<span id="L1727" class="ln">  1727&nbsp;&nbsp;</span>		*(*uint8)(v.ptr) = 0
<span id="L1728" class="ln">  1728&nbsp;&nbsp;</span>	case Uint16:
<span id="L1729" class="ln">  1729&nbsp;&nbsp;</span>		*(*uint16)(v.ptr) = 0
<span id="L1730" class="ln">  1730&nbsp;&nbsp;</span>	case Uint32:
<span id="L1731" class="ln">  1731&nbsp;&nbsp;</span>		*(*uint32)(v.ptr) = 0
<span id="L1732" class="ln">  1732&nbsp;&nbsp;</span>	case Uint64:
<span id="L1733" class="ln">  1733&nbsp;&nbsp;</span>		*(*uint64)(v.ptr) = 0
<span id="L1734" class="ln">  1734&nbsp;&nbsp;</span>	case Uintptr:
<span id="L1735" class="ln">  1735&nbsp;&nbsp;</span>		*(*uintptr)(v.ptr) = 0
<span id="L1736" class="ln">  1736&nbsp;&nbsp;</span>	case Float32:
<span id="L1737" class="ln">  1737&nbsp;&nbsp;</span>		*(*float32)(v.ptr) = 0
<span id="L1738" class="ln">  1738&nbsp;&nbsp;</span>	case Float64:
<span id="L1739" class="ln">  1739&nbsp;&nbsp;</span>		*(*float64)(v.ptr) = 0
<span id="L1740" class="ln">  1740&nbsp;&nbsp;</span>	case Complex64:
<span id="L1741" class="ln">  1741&nbsp;&nbsp;</span>		*(*complex64)(v.ptr) = 0
<span id="L1742" class="ln">  1742&nbsp;&nbsp;</span>	case Complex128:
<span id="L1743" class="ln">  1743&nbsp;&nbsp;</span>		*(*complex128)(v.ptr) = 0
<span id="L1744" class="ln">  1744&nbsp;&nbsp;</span>	case String:
<span id="L1745" class="ln">  1745&nbsp;&nbsp;</span>		*(*string)(v.ptr) = &#34;&#34;
<span id="L1746" class="ln">  1746&nbsp;&nbsp;</span>	case Slice:
<span id="L1747" class="ln">  1747&nbsp;&nbsp;</span>		*(*unsafeheader.Slice)(v.ptr) = unsafeheader.Slice{}
<span id="L1748" class="ln">  1748&nbsp;&nbsp;</span>	case Interface:
<span id="L1749" class="ln">  1749&nbsp;&nbsp;</span>		*(*emptyInterface)(v.ptr) = emptyInterface{}
<span id="L1750" class="ln">  1750&nbsp;&nbsp;</span>	case Chan, Func, Map, Pointer, UnsafePointer:
<span id="L1751" class="ln">  1751&nbsp;&nbsp;</span>		*(*unsafe.Pointer)(v.ptr) = nil
<span id="L1752" class="ln">  1752&nbsp;&nbsp;</span>	case Array, Struct:
<span id="L1753" class="ln">  1753&nbsp;&nbsp;</span>		typedmemclr(v.typ(), v.ptr)
<span id="L1754" class="ln">  1754&nbsp;&nbsp;</span>	default:
<span id="L1755" class="ln">  1755&nbsp;&nbsp;</span>		<span class="comment">// This should never happen, but will act as a safeguard for later,</span>
<span id="L1756" class="ln">  1756&nbsp;&nbsp;</span>		<span class="comment">// as a default value doesn&#39;t makes sense here.</span>
<span id="L1757" class="ln">  1757&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.SetZero&#34;, v.Kind()})
<span id="L1758" class="ln">  1758&nbsp;&nbsp;</span>	}
<span id="L1759" class="ln">  1759&nbsp;&nbsp;</span>}
<span id="L1760" class="ln">  1760&nbsp;&nbsp;</span>
<span id="L1761" class="ln">  1761&nbsp;&nbsp;</span><span class="comment">// Kind returns v&#39;s Kind.</span>
<span id="L1762" class="ln">  1762&nbsp;&nbsp;</span><span class="comment">// If v is the zero Value ([Value.IsValid] returns false), Kind returns Invalid.</span>
<span id="L1763" class="ln">  1763&nbsp;&nbsp;</span>func (v Value) Kind() Kind {
<span id="L1764" class="ln">  1764&nbsp;&nbsp;</span>	return v.kind()
<span id="L1765" class="ln">  1765&nbsp;&nbsp;</span>}
<span id="L1766" class="ln">  1766&nbsp;&nbsp;</span>
<span id="L1767" class="ln">  1767&nbsp;&nbsp;</span><span class="comment">// Len returns v&#39;s length.</span>
<span id="L1768" class="ln">  1768&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Array], [Chan], [Map], [Slice], [String], or pointer to [Array].</span>
<span id="L1769" class="ln">  1769&nbsp;&nbsp;</span>func (v Value) Len() int {
<span id="L1770" class="ln">  1770&nbsp;&nbsp;</span>	<span class="comment">// lenNonSlice is split out to keep Len inlineable for slice kinds.</span>
<span id="L1771" class="ln">  1771&nbsp;&nbsp;</span>	if v.kind() == Slice {
<span id="L1772" class="ln">  1772&nbsp;&nbsp;</span>		return (*unsafeheader.Slice)(v.ptr).Len
<span id="L1773" class="ln">  1773&nbsp;&nbsp;</span>	}
<span id="L1774" class="ln">  1774&nbsp;&nbsp;</span>	return v.lenNonSlice()
<span id="L1775" class="ln">  1775&nbsp;&nbsp;</span>}
<span id="L1776" class="ln">  1776&nbsp;&nbsp;</span>
<span id="L1777" class="ln">  1777&nbsp;&nbsp;</span>func (v Value) lenNonSlice() int {
<span id="L1778" class="ln">  1778&nbsp;&nbsp;</span>	switch k := v.kind(); k {
<span id="L1779" class="ln">  1779&nbsp;&nbsp;</span>	case Array:
<span id="L1780" class="ln">  1780&nbsp;&nbsp;</span>		tt := (*arrayType)(unsafe.Pointer(v.typ()))
<span id="L1781" class="ln">  1781&nbsp;&nbsp;</span>		return int(tt.Len)
<span id="L1782" class="ln">  1782&nbsp;&nbsp;</span>	case Chan:
<span id="L1783" class="ln">  1783&nbsp;&nbsp;</span>		return chanlen(v.pointer())
<span id="L1784" class="ln">  1784&nbsp;&nbsp;</span>	case Map:
<span id="L1785" class="ln">  1785&nbsp;&nbsp;</span>		return maplen(v.pointer())
<span id="L1786" class="ln">  1786&nbsp;&nbsp;</span>	case String:
<span id="L1787" class="ln">  1787&nbsp;&nbsp;</span>		<span class="comment">// String is bigger than a word; assume flagIndir.</span>
<span id="L1788" class="ln">  1788&nbsp;&nbsp;</span>		return (*unsafeheader.String)(v.ptr).Len
<span id="L1789" class="ln">  1789&nbsp;&nbsp;</span>	case Ptr:
<span id="L1790" class="ln">  1790&nbsp;&nbsp;</span>		if v.typ().Elem().Kind() == abi.Array {
<span id="L1791" class="ln">  1791&nbsp;&nbsp;</span>			return v.typ().Elem().Len()
<span id="L1792" class="ln">  1792&nbsp;&nbsp;</span>		}
<span id="L1793" class="ln">  1793&nbsp;&nbsp;</span>		panic(&#34;reflect: call of reflect.Value.Len on ptr to non-array Value&#34;)
<span id="L1794" class="ln">  1794&nbsp;&nbsp;</span>	}
<span id="L1795" class="ln">  1795&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.Len&#34;, v.kind()})
<span id="L1796" class="ln">  1796&nbsp;&nbsp;</span>}
<span id="L1797" class="ln">  1797&nbsp;&nbsp;</span>
<span id="L1798" class="ln">  1798&nbsp;&nbsp;</span>var stringType = rtypeOf(&#34;&#34;)
<span id="L1799" class="ln">  1799&nbsp;&nbsp;</span>
<span id="L1800" class="ln">  1800&nbsp;&nbsp;</span><span class="comment">// MapIndex returns the value associated with key in the map v.</span>
<span id="L1801" class="ln">  1801&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Map].</span>
<span id="L1802" class="ln">  1802&nbsp;&nbsp;</span><span class="comment">// It returns the zero Value if key is not found in the map or if v represents a nil map.</span>
<span id="L1803" class="ln">  1803&nbsp;&nbsp;</span><span class="comment">// As in Go, the key&#39;s value must be assignable to the map&#39;s key type.</span>
<span id="L1804" class="ln">  1804&nbsp;&nbsp;</span>func (v Value) MapIndex(key Value) Value {
<span id="L1805" class="ln">  1805&nbsp;&nbsp;</span>	v.mustBe(Map)
<span id="L1806" class="ln">  1806&nbsp;&nbsp;</span>	tt := (*mapType)(unsafe.Pointer(v.typ()))
<span id="L1807" class="ln">  1807&nbsp;&nbsp;</span>
<span id="L1808" class="ln">  1808&nbsp;&nbsp;</span>	<span class="comment">// Do not require key to be exported, so that DeepEqual</span>
<span id="L1809" class="ln">  1809&nbsp;&nbsp;</span>	<span class="comment">// and other programs can use all the keys returned by</span>
<span id="L1810" class="ln">  1810&nbsp;&nbsp;</span>	<span class="comment">// MapKeys as arguments to MapIndex. If either the map</span>
<span id="L1811" class="ln">  1811&nbsp;&nbsp;</span>	<span class="comment">// or the key is unexported, though, the result will be</span>
<span id="L1812" class="ln">  1812&nbsp;&nbsp;</span>	<span class="comment">// considered unexported. This is consistent with the</span>
<span id="L1813" class="ln">  1813&nbsp;&nbsp;</span>	<span class="comment">// behavior for structs, which allow read but not write</span>
<span id="L1814" class="ln">  1814&nbsp;&nbsp;</span>	<span class="comment">// of unexported fields.</span>
<span id="L1815" class="ln">  1815&nbsp;&nbsp;</span>
<span id="L1816" class="ln">  1816&nbsp;&nbsp;</span>	var e unsafe.Pointer
<span id="L1817" class="ln">  1817&nbsp;&nbsp;</span>	if (tt.Key == stringType || key.kind() == String) &amp;&amp; tt.Key == key.typ() &amp;&amp; tt.Elem.Size() &lt;= maxValSize {
<span id="L1818" class="ln">  1818&nbsp;&nbsp;</span>		k := *(*string)(key.ptr)
<span id="L1819" class="ln">  1819&nbsp;&nbsp;</span>		e = mapaccess_faststr(v.typ(), v.pointer(), k)
<span id="L1820" class="ln">  1820&nbsp;&nbsp;</span>	} else {
<span id="L1821" class="ln">  1821&nbsp;&nbsp;</span>		key = key.assignTo(&#34;reflect.Value.MapIndex&#34;, tt.Key, nil)
<span id="L1822" class="ln">  1822&nbsp;&nbsp;</span>		var k unsafe.Pointer
<span id="L1823" class="ln">  1823&nbsp;&nbsp;</span>		if key.flag&amp;flagIndir != 0 {
<span id="L1824" class="ln">  1824&nbsp;&nbsp;</span>			k = key.ptr
<span id="L1825" class="ln">  1825&nbsp;&nbsp;</span>		} else {
<span id="L1826" class="ln">  1826&nbsp;&nbsp;</span>			k = unsafe.Pointer(&amp;key.ptr)
<span id="L1827" class="ln">  1827&nbsp;&nbsp;</span>		}
<span id="L1828" class="ln">  1828&nbsp;&nbsp;</span>		e = mapaccess(v.typ(), v.pointer(), k)
<span id="L1829" class="ln">  1829&nbsp;&nbsp;</span>	}
<span id="L1830" class="ln">  1830&nbsp;&nbsp;</span>	if e == nil {
<span id="L1831" class="ln">  1831&nbsp;&nbsp;</span>		return Value{}
<span id="L1832" class="ln">  1832&nbsp;&nbsp;</span>	}
<span id="L1833" class="ln">  1833&nbsp;&nbsp;</span>	typ := tt.Elem
<span id="L1834" class="ln">  1834&nbsp;&nbsp;</span>	fl := (v.flag | key.flag).ro()
<span id="L1835" class="ln">  1835&nbsp;&nbsp;</span>	fl |= flag(typ.Kind())
<span id="L1836" class="ln">  1836&nbsp;&nbsp;</span>	return copyVal(typ, fl, e)
<span id="L1837" class="ln">  1837&nbsp;&nbsp;</span>}
<span id="L1838" class="ln">  1838&nbsp;&nbsp;</span>
<span id="L1839" class="ln">  1839&nbsp;&nbsp;</span><span class="comment">// MapKeys returns a slice containing all the keys present in the map,</span>
<span id="L1840" class="ln">  1840&nbsp;&nbsp;</span><span class="comment">// in unspecified order.</span>
<span id="L1841" class="ln">  1841&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Map].</span>
<span id="L1842" class="ln">  1842&nbsp;&nbsp;</span><span class="comment">// It returns an empty slice if v represents a nil map.</span>
<span id="L1843" class="ln">  1843&nbsp;&nbsp;</span>func (v Value) MapKeys() []Value {
<span id="L1844" class="ln">  1844&nbsp;&nbsp;</span>	v.mustBe(Map)
<span id="L1845" class="ln">  1845&nbsp;&nbsp;</span>	tt := (*mapType)(unsafe.Pointer(v.typ()))
<span id="L1846" class="ln">  1846&nbsp;&nbsp;</span>	keyType := tt.Key
<span id="L1847" class="ln">  1847&nbsp;&nbsp;</span>
<span id="L1848" class="ln">  1848&nbsp;&nbsp;</span>	fl := v.flag.ro() | flag(keyType.Kind())
<span id="L1849" class="ln">  1849&nbsp;&nbsp;</span>
<span id="L1850" class="ln">  1850&nbsp;&nbsp;</span>	m := v.pointer()
<span id="L1851" class="ln">  1851&nbsp;&nbsp;</span>	mlen := int(0)
<span id="L1852" class="ln">  1852&nbsp;&nbsp;</span>	if m != nil {
<span id="L1853" class="ln">  1853&nbsp;&nbsp;</span>		mlen = maplen(m)
<span id="L1854" class="ln">  1854&nbsp;&nbsp;</span>	}
<span id="L1855" class="ln">  1855&nbsp;&nbsp;</span>	var it hiter
<span id="L1856" class="ln">  1856&nbsp;&nbsp;</span>	mapiterinit(v.typ(), m, &amp;it)
<span id="L1857" class="ln">  1857&nbsp;&nbsp;</span>	a := make([]Value, mlen)
<span id="L1858" class="ln">  1858&nbsp;&nbsp;</span>	var i int
<span id="L1859" class="ln">  1859&nbsp;&nbsp;</span>	for i = 0; i &lt; len(a); i++ {
<span id="L1860" class="ln">  1860&nbsp;&nbsp;</span>		key := mapiterkey(&amp;it)
<span id="L1861" class="ln">  1861&nbsp;&nbsp;</span>		if key == nil {
<span id="L1862" class="ln">  1862&nbsp;&nbsp;</span>			<span class="comment">// Someone deleted an entry from the map since we</span>
<span id="L1863" class="ln">  1863&nbsp;&nbsp;</span>			<span class="comment">// called maplen above. It&#39;s a data race, but nothing</span>
<span id="L1864" class="ln">  1864&nbsp;&nbsp;</span>			<span class="comment">// we can do about it.</span>
<span id="L1865" class="ln">  1865&nbsp;&nbsp;</span>			break
<span id="L1866" class="ln">  1866&nbsp;&nbsp;</span>		}
<span id="L1867" class="ln">  1867&nbsp;&nbsp;</span>		a[i] = copyVal(keyType, fl, key)
<span id="L1868" class="ln">  1868&nbsp;&nbsp;</span>		mapiternext(&amp;it)
<span id="L1869" class="ln">  1869&nbsp;&nbsp;</span>	}
<span id="L1870" class="ln">  1870&nbsp;&nbsp;</span>	return a[:i]
<span id="L1871" class="ln">  1871&nbsp;&nbsp;</span>}
<span id="L1872" class="ln">  1872&nbsp;&nbsp;</span>
<span id="L1873" class="ln">  1873&nbsp;&nbsp;</span><span class="comment">// hiter&#39;s structure matches runtime.hiter&#39;s structure.</span>
<span id="L1874" class="ln">  1874&nbsp;&nbsp;</span><span class="comment">// Having a clone here allows us to embed a map iterator</span>
<span id="L1875" class="ln">  1875&nbsp;&nbsp;</span><span class="comment">// inside type MapIter so that MapIters can be re-used</span>
<span id="L1876" class="ln">  1876&nbsp;&nbsp;</span><span class="comment">// without doing any allocations.</span>
<span id="L1877" class="ln">  1877&nbsp;&nbsp;</span>type hiter struct {
<span id="L1878" class="ln">  1878&nbsp;&nbsp;</span>	key         unsafe.Pointer
<span id="L1879" class="ln">  1879&nbsp;&nbsp;</span>	elem        unsafe.Pointer
<span id="L1880" class="ln">  1880&nbsp;&nbsp;</span>	t           unsafe.Pointer
<span id="L1881" class="ln">  1881&nbsp;&nbsp;</span>	h           unsafe.Pointer
<span id="L1882" class="ln">  1882&nbsp;&nbsp;</span>	buckets     unsafe.Pointer
<span id="L1883" class="ln">  1883&nbsp;&nbsp;</span>	bptr        unsafe.Pointer
<span id="L1884" class="ln">  1884&nbsp;&nbsp;</span>	overflow    *[]unsafe.Pointer
<span id="L1885" class="ln">  1885&nbsp;&nbsp;</span>	oldoverflow *[]unsafe.Pointer
<span id="L1886" class="ln">  1886&nbsp;&nbsp;</span>	startBucket uintptr
<span id="L1887" class="ln">  1887&nbsp;&nbsp;</span>	offset      uint8
<span id="L1888" class="ln">  1888&nbsp;&nbsp;</span>	wrapped     bool
<span id="L1889" class="ln">  1889&nbsp;&nbsp;</span>	B           uint8
<span id="L1890" class="ln">  1890&nbsp;&nbsp;</span>	i           uint8
<span id="L1891" class="ln">  1891&nbsp;&nbsp;</span>	bucket      uintptr
<span id="L1892" class="ln">  1892&nbsp;&nbsp;</span>	checkBucket uintptr
<span id="L1893" class="ln">  1893&nbsp;&nbsp;</span>}
<span id="L1894" class="ln">  1894&nbsp;&nbsp;</span>
<span id="L1895" class="ln">  1895&nbsp;&nbsp;</span>func (h *hiter) initialized() bool {
<span id="L1896" class="ln">  1896&nbsp;&nbsp;</span>	return h.t != nil
<span id="L1897" class="ln">  1897&nbsp;&nbsp;</span>}
<span id="L1898" class="ln">  1898&nbsp;&nbsp;</span>
<span id="L1899" class="ln">  1899&nbsp;&nbsp;</span><span class="comment">// A MapIter is an iterator for ranging over a map.</span>
<span id="L1900" class="ln">  1900&nbsp;&nbsp;</span><span class="comment">// See [Value.MapRange].</span>
<span id="L1901" class="ln">  1901&nbsp;&nbsp;</span>type MapIter struct {
<span id="L1902" class="ln">  1902&nbsp;&nbsp;</span>	m     Value
<span id="L1903" class="ln">  1903&nbsp;&nbsp;</span>	hiter hiter
<span id="L1904" class="ln">  1904&nbsp;&nbsp;</span>}
<span id="L1905" class="ln">  1905&nbsp;&nbsp;</span>
<span id="L1906" class="ln">  1906&nbsp;&nbsp;</span><span class="comment">// Key returns the key of iter&#39;s current map entry.</span>
<span id="L1907" class="ln">  1907&nbsp;&nbsp;</span>func (iter *MapIter) Key() Value {
<span id="L1908" class="ln">  1908&nbsp;&nbsp;</span>	if !iter.hiter.initialized() {
<span id="L1909" class="ln">  1909&nbsp;&nbsp;</span>		panic(&#34;MapIter.Key called before Next&#34;)
<span id="L1910" class="ln">  1910&nbsp;&nbsp;</span>	}
<span id="L1911" class="ln">  1911&nbsp;&nbsp;</span>	iterkey := mapiterkey(&amp;iter.hiter)
<span id="L1912" class="ln">  1912&nbsp;&nbsp;</span>	if iterkey == nil {
<span id="L1913" class="ln">  1913&nbsp;&nbsp;</span>		panic(&#34;MapIter.Key called on exhausted iterator&#34;)
<span id="L1914" class="ln">  1914&nbsp;&nbsp;</span>	}
<span id="L1915" class="ln">  1915&nbsp;&nbsp;</span>
<span id="L1916" class="ln">  1916&nbsp;&nbsp;</span>	t := (*mapType)(unsafe.Pointer(iter.m.typ()))
<span id="L1917" class="ln">  1917&nbsp;&nbsp;</span>	ktype := t.Key
<span id="L1918" class="ln">  1918&nbsp;&nbsp;</span>	return copyVal(ktype, iter.m.flag.ro()|flag(ktype.Kind()), iterkey)
<span id="L1919" class="ln">  1919&nbsp;&nbsp;</span>}
<span id="L1920" class="ln">  1920&nbsp;&nbsp;</span>
<span id="L1921" class="ln">  1921&nbsp;&nbsp;</span><span class="comment">// SetIterKey assigns to v the key of iter&#39;s current map entry.</span>
<span id="L1922" class="ln">  1922&nbsp;&nbsp;</span><span class="comment">// It is equivalent to v.Set(iter.Key()), but it avoids allocating a new Value.</span>
<span id="L1923" class="ln">  1923&nbsp;&nbsp;</span><span class="comment">// As in Go, the key must be assignable to v&#39;s type and</span>
<span id="L1924" class="ln">  1924&nbsp;&nbsp;</span><span class="comment">// must not be derived from an unexported field.</span>
<span id="L1925" class="ln">  1925&nbsp;&nbsp;</span>func (v Value) SetIterKey(iter *MapIter) {
<span id="L1926" class="ln">  1926&nbsp;&nbsp;</span>	if !iter.hiter.initialized() {
<span id="L1927" class="ln">  1927&nbsp;&nbsp;</span>		panic(&#34;reflect: Value.SetIterKey called before Next&#34;)
<span id="L1928" class="ln">  1928&nbsp;&nbsp;</span>	}
<span id="L1929" class="ln">  1929&nbsp;&nbsp;</span>	iterkey := mapiterkey(&amp;iter.hiter)
<span id="L1930" class="ln">  1930&nbsp;&nbsp;</span>	if iterkey == nil {
<span id="L1931" class="ln">  1931&nbsp;&nbsp;</span>		panic(&#34;reflect: Value.SetIterKey called on exhausted iterator&#34;)
<span id="L1932" class="ln">  1932&nbsp;&nbsp;</span>	}
<span id="L1933" class="ln">  1933&nbsp;&nbsp;</span>
<span id="L1934" class="ln">  1934&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L1935" class="ln">  1935&nbsp;&nbsp;</span>	var target unsafe.Pointer
<span id="L1936" class="ln">  1936&nbsp;&nbsp;</span>	if v.kind() == Interface {
<span id="L1937" class="ln">  1937&nbsp;&nbsp;</span>		target = v.ptr
<span id="L1938" class="ln">  1938&nbsp;&nbsp;</span>	}
<span id="L1939" class="ln">  1939&nbsp;&nbsp;</span>
<span id="L1940" class="ln">  1940&nbsp;&nbsp;</span>	t := (*mapType)(unsafe.Pointer(iter.m.typ()))
<span id="L1941" class="ln">  1941&nbsp;&nbsp;</span>	ktype := t.Key
<span id="L1942" class="ln">  1942&nbsp;&nbsp;</span>
<span id="L1943" class="ln">  1943&nbsp;&nbsp;</span>	iter.m.mustBeExported() <span class="comment">// do not let unexported m leak</span>
<span id="L1944" class="ln">  1944&nbsp;&nbsp;</span>	key := Value{ktype, iterkey, iter.m.flag | flag(ktype.Kind()) | flagIndir}
<span id="L1945" class="ln">  1945&nbsp;&nbsp;</span>	key = key.assignTo(&#34;reflect.MapIter.SetKey&#34;, v.typ(), target)
<span id="L1946" class="ln">  1946&nbsp;&nbsp;</span>	typedmemmove(v.typ(), v.ptr, key.ptr)
<span id="L1947" class="ln">  1947&nbsp;&nbsp;</span>}
<span id="L1948" class="ln">  1948&nbsp;&nbsp;</span>
<span id="L1949" class="ln">  1949&nbsp;&nbsp;</span><span class="comment">// Value returns the value of iter&#39;s current map entry.</span>
<span id="L1950" class="ln">  1950&nbsp;&nbsp;</span>func (iter *MapIter) Value() Value {
<span id="L1951" class="ln">  1951&nbsp;&nbsp;</span>	if !iter.hiter.initialized() {
<span id="L1952" class="ln">  1952&nbsp;&nbsp;</span>		panic(&#34;MapIter.Value called before Next&#34;)
<span id="L1953" class="ln">  1953&nbsp;&nbsp;</span>	}
<span id="L1954" class="ln">  1954&nbsp;&nbsp;</span>	iterelem := mapiterelem(&amp;iter.hiter)
<span id="L1955" class="ln">  1955&nbsp;&nbsp;</span>	if iterelem == nil {
<span id="L1956" class="ln">  1956&nbsp;&nbsp;</span>		panic(&#34;MapIter.Value called on exhausted iterator&#34;)
<span id="L1957" class="ln">  1957&nbsp;&nbsp;</span>	}
<span id="L1958" class="ln">  1958&nbsp;&nbsp;</span>
<span id="L1959" class="ln">  1959&nbsp;&nbsp;</span>	t := (*mapType)(unsafe.Pointer(iter.m.typ()))
<span id="L1960" class="ln">  1960&nbsp;&nbsp;</span>	vtype := t.Elem
<span id="L1961" class="ln">  1961&nbsp;&nbsp;</span>	return copyVal(vtype, iter.m.flag.ro()|flag(vtype.Kind()), iterelem)
<span id="L1962" class="ln">  1962&nbsp;&nbsp;</span>}
<span id="L1963" class="ln">  1963&nbsp;&nbsp;</span>
<span id="L1964" class="ln">  1964&nbsp;&nbsp;</span><span class="comment">// SetIterValue assigns to v the value of iter&#39;s current map entry.</span>
<span id="L1965" class="ln">  1965&nbsp;&nbsp;</span><span class="comment">// It is equivalent to v.Set(iter.Value()), but it avoids allocating a new Value.</span>
<span id="L1966" class="ln">  1966&nbsp;&nbsp;</span><span class="comment">// As in Go, the value must be assignable to v&#39;s type and</span>
<span id="L1967" class="ln">  1967&nbsp;&nbsp;</span><span class="comment">// must not be derived from an unexported field.</span>
<span id="L1968" class="ln">  1968&nbsp;&nbsp;</span>func (v Value) SetIterValue(iter *MapIter) {
<span id="L1969" class="ln">  1969&nbsp;&nbsp;</span>	if !iter.hiter.initialized() {
<span id="L1970" class="ln">  1970&nbsp;&nbsp;</span>		panic(&#34;reflect: Value.SetIterValue called before Next&#34;)
<span id="L1971" class="ln">  1971&nbsp;&nbsp;</span>	}
<span id="L1972" class="ln">  1972&nbsp;&nbsp;</span>	iterelem := mapiterelem(&amp;iter.hiter)
<span id="L1973" class="ln">  1973&nbsp;&nbsp;</span>	if iterelem == nil {
<span id="L1974" class="ln">  1974&nbsp;&nbsp;</span>		panic(&#34;reflect: Value.SetIterValue called on exhausted iterator&#34;)
<span id="L1975" class="ln">  1975&nbsp;&nbsp;</span>	}
<span id="L1976" class="ln">  1976&nbsp;&nbsp;</span>
<span id="L1977" class="ln">  1977&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L1978" class="ln">  1978&nbsp;&nbsp;</span>	var target unsafe.Pointer
<span id="L1979" class="ln">  1979&nbsp;&nbsp;</span>	if v.kind() == Interface {
<span id="L1980" class="ln">  1980&nbsp;&nbsp;</span>		target = v.ptr
<span id="L1981" class="ln">  1981&nbsp;&nbsp;</span>	}
<span id="L1982" class="ln">  1982&nbsp;&nbsp;</span>
<span id="L1983" class="ln">  1983&nbsp;&nbsp;</span>	t := (*mapType)(unsafe.Pointer(iter.m.typ()))
<span id="L1984" class="ln">  1984&nbsp;&nbsp;</span>	vtype := t.Elem
<span id="L1985" class="ln">  1985&nbsp;&nbsp;</span>
<span id="L1986" class="ln">  1986&nbsp;&nbsp;</span>	iter.m.mustBeExported() <span class="comment">// do not let unexported m leak</span>
<span id="L1987" class="ln">  1987&nbsp;&nbsp;</span>	elem := Value{vtype, iterelem, iter.m.flag | flag(vtype.Kind()) | flagIndir}
<span id="L1988" class="ln">  1988&nbsp;&nbsp;</span>	elem = elem.assignTo(&#34;reflect.MapIter.SetValue&#34;, v.typ(), target)
<span id="L1989" class="ln">  1989&nbsp;&nbsp;</span>	typedmemmove(v.typ(), v.ptr, elem.ptr)
<span id="L1990" class="ln">  1990&nbsp;&nbsp;</span>}
<span id="L1991" class="ln">  1991&nbsp;&nbsp;</span>
<span id="L1992" class="ln">  1992&nbsp;&nbsp;</span><span class="comment">// Next advances the map iterator and reports whether there is another</span>
<span id="L1993" class="ln">  1993&nbsp;&nbsp;</span><span class="comment">// entry. It returns false when iter is exhausted; subsequent</span>
<span id="L1994" class="ln">  1994&nbsp;&nbsp;</span><span class="comment">// calls to [MapIter.Key], [MapIter.Value], or [MapIter.Next] will panic.</span>
<span id="L1995" class="ln">  1995&nbsp;&nbsp;</span>func (iter *MapIter) Next() bool {
<span id="L1996" class="ln">  1996&nbsp;&nbsp;</span>	if !iter.m.IsValid() {
<span id="L1997" class="ln">  1997&nbsp;&nbsp;</span>		panic(&#34;MapIter.Next called on an iterator that does not have an associated map Value&#34;)
<span id="L1998" class="ln">  1998&nbsp;&nbsp;</span>	}
<span id="L1999" class="ln">  1999&nbsp;&nbsp;</span>	if !iter.hiter.initialized() {
<span id="L2000" class="ln">  2000&nbsp;&nbsp;</span>		mapiterinit(iter.m.typ(), iter.m.pointer(), &amp;iter.hiter)
<span id="L2001" class="ln">  2001&nbsp;&nbsp;</span>	} else {
<span id="L2002" class="ln">  2002&nbsp;&nbsp;</span>		if mapiterkey(&amp;iter.hiter) == nil {
<span id="L2003" class="ln">  2003&nbsp;&nbsp;</span>			panic(&#34;MapIter.Next called on exhausted iterator&#34;)
<span id="L2004" class="ln">  2004&nbsp;&nbsp;</span>		}
<span id="L2005" class="ln">  2005&nbsp;&nbsp;</span>		mapiternext(&amp;iter.hiter)
<span id="L2006" class="ln">  2006&nbsp;&nbsp;</span>	}
<span id="L2007" class="ln">  2007&nbsp;&nbsp;</span>	return mapiterkey(&amp;iter.hiter) != nil
<span id="L2008" class="ln">  2008&nbsp;&nbsp;</span>}
<span id="L2009" class="ln">  2009&nbsp;&nbsp;</span>
<span id="L2010" class="ln">  2010&nbsp;&nbsp;</span><span class="comment">// Reset modifies iter to iterate over v.</span>
<span id="L2011" class="ln">  2011&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Map] and v is not the zero Value.</span>
<span id="L2012" class="ln">  2012&nbsp;&nbsp;</span><span class="comment">// Reset(Value{}) causes iter to not to refer to any map,</span>
<span id="L2013" class="ln">  2013&nbsp;&nbsp;</span><span class="comment">// which may allow the previously iterated-over map to be garbage collected.</span>
<span id="L2014" class="ln">  2014&nbsp;&nbsp;</span>func (iter *MapIter) Reset(v Value) {
<span id="L2015" class="ln">  2015&nbsp;&nbsp;</span>	if v.IsValid() {
<span id="L2016" class="ln">  2016&nbsp;&nbsp;</span>		v.mustBe(Map)
<span id="L2017" class="ln">  2017&nbsp;&nbsp;</span>	}
<span id="L2018" class="ln">  2018&nbsp;&nbsp;</span>	iter.m = v
<span id="L2019" class="ln">  2019&nbsp;&nbsp;</span>	iter.hiter = hiter{}
<span id="L2020" class="ln">  2020&nbsp;&nbsp;</span>}
<span id="L2021" class="ln">  2021&nbsp;&nbsp;</span>
<span id="L2022" class="ln">  2022&nbsp;&nbsp;</span><span class="comment">// MapRange returns a range iterator for a map.</span>
<span id="L2023" class="ln">  2023&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Map].</span>
<span id="L2024" class="ln">  2024&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2025" class="ln">  2025&nbsp;&nbsp;</span><span class="comment">// Call [MapIter.Next] to advance the iterator, and [MapIter.Key]/[MapIter.Value] to access each entry.</span>
<span id="L2026" class="ln">  2026&nbsp;&nbsp;</span><span class="comment">// [MapIter.Next] returns false when the iterator is exhausted.</span>
<span id="L2027" class="ln">  2027&nbsp;&nbsp;</span><span class="comment">// MapRange follows the same iteration semantics as a range statement.</span>
<span id="L2028" class="ln">  2028&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2029" class="ln">  2029&nbsp;&nbsp;</span><span class="comment">// Example:</span>
<span id="L2030" class="ln">  2030&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2031" class="ln">  2031&nbsp;&nbsp;</span><span class="comment">//	iter := reflect.ValueOf(m).MapRange()</span>
<span id="L2032" class="ln">  2032&nbsp;&nbsp;</span><span class="comment">//	for iter.Next() {</span>
<span id="L2033" class="ln">  2033&nbsp;&nbsp;</span><span class="comment">//		k := iter.Key()</span>
<span id="L2034" class="ln">  2034&nbsp;&nbsp;</span><span class="comment">//		v := iter.Value()</span>
<span id="L2035" class="ln">  2035&nbsp;&nbsp;</span><span class="comment">//		...</span>
<span id="L2036" class="ln">  2036&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L2037" class="ln">  2037&nbsp;&nbsp;</span>func (v Value) MapRange() *MapIter {
<span id="L2038" class="ln">  2038&nbsp;&nbsp;</span>	<span class="comment">// This is inlinable to take advantage of &#34;function outlining&#34;.</span>
<span id="L2039" class="ln">  2039&nbsp;&nbsp;</span>	<span class="comment">// The allocation of MapIter can be stack allocated if the caller</span>
<span id="L2040" class="ln">  2040&nbsp;&nbsp;</span>	<span class="comment">// does not allow it to escape.</span>
<span id="L2041" class="ln">  2041&nbsp;&nbsp;</span>	<span class="comment">// See https://blog.filippo.io/efficient-go-apis-with-the-inliner/</span>
<span id="L2042" class="ln">  2042&nbsp;&nbsp;</span>	if v.kind() != Map {
<span id="L2043" class="ln">  2043&nbsp;&nbsp;</span>		v.panicNotMap()
<span id="L2044" class="ln">  2044&nbsp;&nbsp;</span>	}
<span id="L2045" class="ln">  2045&nbsp;&nbsp;</span>	return &amp;MapIter{m: v}
<span id="L2046" class="ln">  2046&nbsp;&nbsp;</span>}
<span id="L2047" class="ln">  2047&nbsp;&nbsp;</span>
<span id="L2048" class="ln">  2048&nbsp;&nbsp;</span><span class="comment">// Force slow panicking path not inlined, so it won&#39;t add to the</span>
<span id="L2049" class="ln">  2049&nbsp;&nbsp;</span><span class="comment">// inlining budget of the caller.</span>
<span id="L2050" class="ln">  2050&nbsp;&nbsp;</span><span class="comment">// TODO: undo when the inliner is no longer bottom-up only.</span>
<span id="L2051" class="ln">  2051&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2052" class="ln">  2052&nbsp;&nbsp;</span><span class="comment">//go:noinline</span>
<span id="L2053" class="ln">  2053&nbsp;&nbsp;</span>func (f flag) panicNotMap() {
<span id="L2054" class="ln">  2054&nbsp;&nbsp;</span>	f.mustBe(Map)
<span id="L2055" class="ln">  2055&nbsp;&nbsp;</span>}
<span id="L2056" class="ln">  2056&nbsp;&nbsp;</span>
<span id="L2057" class="ln">  2057&nbsp;&nbsp;</span><span class="comment">// copyVal returns a Value containing the map key or value at ptr,</span>
<span id="L2058" class="ln">  2058&nbsp;&nbsp;</span><span class="comment">// allocating a new variable as needed.</span>
<span id="L2059" class="ln">  2059&nbsp;&nbsp;</span>func copyVal(typ *abi.Type, fl flag, ptr unsafe.Pointer) Value {
<span id="L2060" class="ln">  2060&nbsp;&nbsp;</span>	if typ.IfaceIndir() {
<span id="L2061" class="ln">  2061&nbsp;&nbsp;</span>		<span class="comment">// Copy result so future changes to the map</span>
<span id="L2062" class="ln">  2062&nbsp;&nbsp;</span>		<span class="comment">// won&#39;t change the underlying value.</span>
<span id="L2063" class="ln">  2063&nbsp;&nbsp;</span>		c := unsafe_New(typ)
<span id="L2064" class="ln">  2064&nbsp;&nbsp;</span>		typedmemmove(typ, c, ptr)
<span id="L2065" class="ln">  2065&nbsp;&nbsp;</span>		return Value{typ, c, fl | flagIndir}
<span id="L2066" class="ln">  2066&nbsp;&nbsp;</span>	}
<span id="L2067" class="ln">  2067&nbsp;&nbsp;</span>	return Value{typ, *(*unsafe.Pointer)(ptr), fl}
<span id="L2068" class="ln">  2068&nbsp;&nbsp;</span>}
<span id="L2069" class="ln">  2069&nbsp;&nbsp;</span>
<span id="L2070" class="ln">  2070&nbsp;&nbsp;</span><span class="comment">// Method returns a function value corresponding to v&#39;s i&#39;th method.</span>
<span id="L2071" class="ln">  2071&nbsp;&nbsp;</span><span class="comment">// The arguments to a Call on the returned function should not include</span>
<span id="L2072" class="ln">  2072&nbsp;&nbsp;</span><span class="comment">// a receiver; the returned function will always use v as the receiver.</span>
<span id="L2073" class="ln">  2073&nbsp;&nbsp;</span><span class="comment">// Method panics if i is out of range or if v is a nil interface value.</span>
<span id="L2074" class="ln">  2074&nbsp;&nbsp;</span>func (v Value) Method(i int) Value {
<span id="L2075" class="ln">  2075&nbsp;&nbsp;</span>	if v.typ() == nil {
<span id="L2076" class="ln">  2076&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.Method&#34;, Invalid})
<span id="L2077" class="ln">  2077&nbsp;&nbsp;</span>	}
<span id="L2078" class="ln">  2078&nbsp;&nbsp;</span>	if v.flag&amp;flagMethod != 0 || uint(i) &gt;= uint(toRType(v.typ()).NumMethod()) {
<span id="L2079" class="ln">  2079&nbsp;&nbsp;</span>		panic(&#34;reflect: Method index out of range&#34;)
<span id="L2080" class="ln">  2080&nbsp;&nbsp;</span>	}
<span id="L2081" class="ln">  2081&nbsp;&nbsp;</span>	if v.typ().Kind() == abi.Interface &amp;&amp; v.IsNil() {
<span id="L2082" class="ln">  2082&nbsp;&nbsp;</span>		panic(&#34;reflect: Method on nil interface value&#34;)
<span id="L2083" class="ln">  2083&nbsp;&nbsp;</span>	}
<span id="L2084" class="ln">  2084&nbsp;&nbsp;</span>	fl := v.flag.ro() | (v.flag &amp; flagIndir)
<span id="L2085" class="ln">  2085&nbsp;&nbsp;</span>	fl |= flag(Func)
<span id="L2086" class="ln">  2086&nbsp;&nbsp;</span>	fl |= flag(i)&lt;&lt;flagMethodShift | flagMethod
<span id="L2087" class="ln">  2087&nbsp;&nbsp;</span>	return Value{v.typ(), v.ptr, fl}
<span id="L2088" class="ln">  2088&nbsp;&nbsp;</span>}
<span id="L2089" class="ln">  2089&nbsp;&nbsp;</span>
<span id="L2090" class="ln">  2090&nbsp;&nbsp;</span><span class="comment">// NumMethod returns the number of methods in the value&#39;s method set.</span>
<span id="L2091" class="ln">  2091&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2092" class="ln">  2092&nbsp;&nbsp;</span><span class="comment">// For a non-interface type, it returns the number of exported methods.</span>
<span id="L2093" class="ln">  2093&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2094" class="ln">  2094&nbsp;&nbsp;</span><span class="comment">// For an interface type, it returns the number of exported and unexported methods.</span>
<span id="L2095" class="ln">  2095&nbsp;&nbsp;</span>func (v Value) NumMethod() int {
<span id="L2096" class="ln">  2096&nbsp;&nbsp;</span>	if v.typ() == nil {
<span id="L2097" class="ln">  2097&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.NumMethod&#34;, Invalid})
<span id="L2098" class="ln">  2098&nbsp;&nbsp;</span>	}
<span id="L2099" class="ln">  2099&nbsp;&nbsp;</span>	if v.flag&amp;flagMethod != 0 {
<span id="L2100" class="ln">  2100&nbsp;&nbsp;</span>		return 0
<span id="L2101" class="ln">  2101&nbsp;&nbsp;</span>	}
<span id="L2102" class="ln">  2102&nbsp;&nbsp;</span>	return toRType(v.typ()).NumMethod()
<span id="L2103" class="ln">  2103&nbsp;&nbsp;</span>}
<span id="L2104" class="ln">  2104&nbsp;&nbsp;</span>
<span id="L2105" class="ln">  2105&nbsp;&nbsp;</span><span class="comment">// MethodByName returns a function value corresponding to the method</span>
<span id="L2106" class="ln">  2106&nbsp;&nbsp;</span><span class="comment">// of v with the given name.</span>
<span id="L2107" class="ln">  2107&nbsp;&nbsp;</span><span class="comment">// The arguments to a Call on the returned function should not include</span>
<span id="L2108" class="ln">  2108&nbsp;&nbsp;</span><span class="comment">// a receiver; the returned function will always use v as the receiver.</span>
<span id="L2109" class="ln">  2109&nbsp;&nbsp;</span><span class="comment">// It returns the zero Value if no method was found.</span>
<span id="L2110" class="ln">  2110&nbsp;&nbsp;</span>func (v Value) MethodByName(name string) Value {
<span id="L2111" class="ln">  2111&nbsp;&nbsp;</span>	if v.typ() == nil {
<span id="L2112" class="ln">  2112&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.MethodByName&#34;, Invalid})
<span id="L2113" class="ln">  2113&nbsp;&nbsp;</span>	}
<span id="L2114" class="ln">  2114&nbsp;&nbsp;</span>	if v.flag&amp;flagMethod != 0 {
<span id="L2115" class="ln">  2115&nbsp;&nbsp;</span>		return Value{}
<span id="L2116" class="ln">  2116&nbsp;&nbsp;</span>	}
<span id="L2117" class="ln">  2117&nbsp;&nbsp;</span>	m, ok := toRType(v.typ()).MethodByName(name)
<span id="L2118" class="ln">  2118&nbsp;&nbsp;</span>	if !ok {
<span id="L2119" class="ln">  2119&nbsp;&nbsp;</span>		return Value{}
<span id="L2120" class="ln">  2120&nbsp;&nbsp;</span>	}
<span id="L2121" class="ln">  2121&nbsp;&nbsp;</span>	return v.Method(m.Index)
<span id="L2122" class="ln">  2122&nbsp;&nbsp;</span>}
<span id="L2123" class="ln">  2123&nbsp;&nbsp;</span>
<span id="L2124" class="ln">  2124&nbsp;&nbsp;</span><span class="comment">// NumField returns the number of fields in the struct v.</span>
<span id="L2125" class="ln">  2125&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Struct].</span>
<span id="L2126" class="ln">  2126&nbsp;&nbsp;</span>func (v Value) NumField() int {
<span id="L2127" class="ln">  2127&nbsp;&nbsp;</span>	v.mustBe(Struct)
<span id="L2128" class="ln">  2128&nbsp;&nbsp;</span>	tt := (*structType)(unsafe.Pointer(v.typ()))
<span id="L2129" class="ln">  2129&nbsp;&nbsp;</span>	return len(tt.Fields)
<span id="L2130" class="ln">  2130&nbsp;&nbsp;</span>}
<span id="L2131" class="ln">  2131&nbsp;&nbsp;</span>
<span id="L2132" class="ln">  2132&nbsp;&nbsp;</span><span class="comment">// OverflowComplex reports whether the complex128 x cannot be represented by v&#39;s type.</span>
<span id="L2133" class="ln">  2133&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Complex64] or [Complex128].</span>
<span id="L2134" class="ln">  2134&nbsp;&nbsp;</span>func (v Value) OverflowComplex(x complex128) bool {
<span id="L2135" class="ln">  2135&nbsp;&nbsp;</span>	k := v.kind()
<span id="L2136" class="ln">  2136&nbsp;&nbsp;</span>	switch k {
<span id="L2137" class="ln">  2137&nbsp;&nbsp;</span>	case Complex64:
<span id="L2138" class="ln">  2138&nbsp;&nbsp;</span>		return overflowFloat32(real(x)) || overflowFloat32(imag(x))
<span id="L2139" class="ln">  2139&nbsp;&nbsp;</span>	case Complex128:
<span id="L2140" class="ln">  2140&nbsp;&nbsp;</span>		return false
<span id="L2141" class="ln">  2141&nbsp;&nbsp;</span>	}
<span id="L2142" class="ln">  2142&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.OverflowComplex&#34;, v.kind()})
<span id="L2143" class="ln">  2143&nbsp;&nbsp;</span>}
<span id="L2144" class="ln">  2144&nbsp;&nbsp;</span>
<span id="L2145" class="ln">  2145&nbsp;&nbsp;</span><span class="comment">// OverflowFloat reports whether the float64 x cannot be represented by v&#39;s type.</span>
<span id="L2146" class="ln">  2146&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Float32] or [Float64].</span>
<span id="L2147" class="ln">  2147&nbsp;&nbsp;</span>func (v Value) OverflowFloat(x float64) bool {
<span id="L2148" class="ln">  2148&nbsp;&nbsp;</span>	k := v.kind()
<span id="L2149" class="ln">  2149&nbsp;&nbsp;</span>	switch k {
<span id="L2150" class="ln">  2150&nbsp;&nbsp;</span>	case Float32:
<span id="L2151" class="ln">  2151&nbsp;&nbsp;</span>		return overflowFloat32(x)
<span id="L2152" class="ln">  2152&nbsp;&nbsp;</span>	case Float64:
<span id="L2153" class="ln">  2153&nbsp;&nbsp;</span>		return false
<span id="L2154" class="ln">  2154&nbsp;&nbsp;</span>	}
<span id="L2155" class="ln">  2155&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.OverflowFloat&#34;, v.kind()})
<span id="L2156" class="ln">  2156&nbsp;&nbsp;</span>}
<span id="L2157" class="ln">  2157&nbsp;&nbsp;</span>
<span id="L2158" class="ln">  2158&nbsp;&nbsp;</span>func overflowFloat32(x float64) bool {
<span id="L2159" class="ln">  2159&nbsp;&nbsp;</span>	if x &lt; 0 {
<span id="L2160" class="ln">  2160&nbsp;&nbsp;</span>		x = -x
<span id="L2161" class="ln">  2161&nbsp;&nbsp;</span>	}
<span id="L2162" class="ln">  2162&nbsp;&nbsp;</span>	return math.MaxFloat32 &lt; x &amp;&amp; x &lt;= math.MaxFloat64
<span id="L2163" class="ln">  2163&nbsp;&nbsp;</span>}
<span id="L2164" class="ln">  2164&nbsp;&nbsp;</span>
<span id="L2165" class="ln">  2165&nbsp;&nbsp;</span><span class="comment">// OverflowInt reports whether the int64 x cannot be represented by v&#39;s type.</span>
<span id="L2166" class="ln">  2166&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Int], [Int8], [Int16], [Int32], or [Int64].</span>
<span id="L2167" class="ln">  2167&nbsp;&nbsp;</span>func (v Value) OverflowInt(x int64) bool {
<span id="L2168" class="ln">  2168&nbsp;&nbsp;</span>	k := v.kind()
<span id="L2169" class="ln">  2169&nbsp;&nbsp;</span>	switch k {
<span id="L2170" class="ln">  2170&nbsp;&nbsp;</span>	case Int, Int8, Int16, Int32, Int64:
<span id="L2171" class="ln">  2171&nbsp;&nbsp;</span>		bitSize := v.typ().Size() * 8
<span id="L2172" class="ln">  2172&nbsp;&nbsp;</span>		trunc := (x &lt;&lt; (64 - bitSize)) &gt;&gt; (64 - bitSize)
<span id="L2173" class="ln">  2173&nbsp;&nbsp;</span>		return x != trunc
<span id="L2174" class="ln">  2174&nbsp;&nbsp;</span>	}
<span id="L2175" class="ln">  2175&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.OverflowInt&#34;, v.kind()})
<span id="L2176" class="ln">  2176&nbsp;&nbsp;</span>}
<span id="L2177" class="ln">  2177&nbsp;&nbsp;</span>
<span id="L2178" class="ln">  2178&nbsp;&nbsp;</span><span class="comment">// OverflowUint reports whether the uint64 x cannot be represented by v&#39;s type.</span>
<span id="L2179" class="ln">  2179&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Uint], [Uintptr], [Uint8], [Uint16], [Uint32], or [Uint64].</span>
<span id="L2180" class="ln">  2180&nbsp;&nbsp;</span>func (v Value) OverflowUint(x uint64) bool {
<span id="L2181" class="ln">  2181&nbsp;&nbsp;</span>	k := v.kind()
<span id="L2182" class="ln">  2182&nbsp;&nbsp;</span>	switch k {
<span id="L2183" class="ln">  2183&nbsp;&nbsp;</span>	case Uint, Uintptr, Uint8, Uint16, Uint32, Uint64:
<span id="L2184" class="ln">  2184&nbsp;&nbsp;</span>		bitSize := v.typ_.Size() * 8 <span class="comment">// ok to use v.typ_ directly as Size doesn&#39;t escape</span>
<span id="L2185" class="ln">  2185&nbsp;&nbsp;</span>		trunc := (x &lt;&lt; (64 - bitSize)) &gt;&gt; (64 - bitSize)
<span id="L2186" class="ln">  2186&nbsp;&nbsp;</span>		return x != trunc
<span id="L2187" class="ln">  2187&nbsp;&nbsp;</span>	}
<span id="L2188" class="ln">  2188&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.OverflowUint&#34;, v.kind()})
<span id="L2189" class="ln">  2189&nbsp;&nbsp;</span>}
<span id="L2190" class="ln">  2190&nbsp;&nbsp;</span>
<span id="L2191" class="ln">  2191&nbsp;&nbsp;</span><span class="comment">//go:nocheckptr</span>
<span id="L2192" class="ln">  2192&nbsp;&nbsp;</span><span class="comment">// This prevents inlining Value.Pointer when -d=checkptr is enabled,</span>
<span id="L2193" class="ln">  2193&nbsp;&nbsp;</span><span class="comment">// which ensures cmd/compile can recognize unsafe.Pointer(v.Pointer())</span>
<span id="L2194" class="ln">  2194&nbsp;&nbsp;</span><span class="comment">// and make an exception.</span>
<span id="L2195" class="ln">  2195&nbsp;&nbsp;</span>
<span id="L2196" class="ln">  2196&nbsp;&nbsp;</span><span class="comment">// Pointer returns v&#39;s value as a uintptr.</span>
<span id="L2197" class="ln">  2197&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Chan], [Func], [Map], [Pointer], [Slice], or [UnsafePointer].</span>
<span id="L2198" class="ln">  2198&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2199" class="ln">  2199&nbsp;&nbsp;</span><span class="comment">// If v&#39;s Kind is [Func], the returned pointer is an underlying</span>
<span id="L2200" class="ln">  2200&nbsp;&nbsp;</span><span class="comment">// code pointer, but not necessarily enough to identify a</span>
<span id="L2201" class="ln">  2201&nbsp;&nbsp;</span><span class="comment">// single function uniquely. The only guarantee is that the</span>
<span id="L2202" class="ln">  2202&nbsp;&nbsp;</span><span class="comment">// result is zero if and only if v is a nil func Value.</span>
<span id="L2203" class="ln">  2203&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2204" class="ln">  2204&nbsp;&nbsp;</span><span class="comment">// If v&#39;s Kind is [Slice], the returned pointer is to the first</span>
<span id="L2205" class="ln">  2205&nbsp;&nbsp;</span><span class="comment">// element of the slice. If the slice is nil the returned value</span>
<span id="L2206" class="ln">  2206&nbsp;&nbsp;</span><span class="comment">// is 0.  If the slice is empty but non-nil the return value is non-zero.</span>
<span id="L2207" class="ln">  2207&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2208" class="ln">  2208&nbsp;&nbsp;</span><span class="comment">// It&#39;s preferred to use uintptr(Value.UnsafePointer()) to get the equivalent result.</span>
<span id="L2209" class="ln">  2209&nbsp;&nbsp;</span>func (v Value) Pointer() uintptr {
<span id="L2210" class="ln">  2210&nbsp;&nbsp;</span>	<span class="comment">// The compiler loses track as it converts to uintptr. Force escape.</span>
<span id="L2211" class="ln">  2211&nbsp;&nbsp;</span>	escapes(v.ptr)
<span id="L2212" class="ln">  2212&nbsp;&nbsp;</span>
<span id="L2213" class="ln">  2213&nbsp;&nbsp;</span>	k := v.kind()
<span id="L2214" class="ln">  2214&nbsp;&nbsp;</span>	switch k {
<span id="L2215" class="ln">  2215&nbsp;&nbsp;</span>	case Pointer:
<span id="L2216" class="ln">  2216&nbsp;&nbsp;</span>		if v.typ().PtrBytes == 0 {
<span id="L2217" class="ln">  2217&nbsp;&nbsp;</span>			val := *(*uintptr)(v.ptr)
<span id="L2218" class="ln">  2218&nbsp;&nbsp;</span>			<span class="comment">// Since it is a not-in-heap pointer, all pointers to the heap are</span>
<span id="L2219" class="ln">  2219&nbsp;&nbsp;</span>			<span class="comment">// forbidden! See comment in Value.Elem and issue #48399.</span>
<span id="L2220" class="ln">  2220&nbsp;&nbsp;</span>			if !verifyNotInHeapPtr(val) {
<span id="L2221" class="ln">  2221&nbsp;&nbsp;</span>				panic(&#34;reflect: reflect.Value.Pointer on an invalid notinheap pointer&#34;)
<span id="L2222" class="ln">  2222&nbsp;&nbsp;</span>			}
<span id="L2223" class="ln">  2223&nbsp;&nbsp;</span>			return val
<span id="L2224" class="ln">  2224&nbsp;&nbsp;</span>		}
<span id="L2225" class="ln">  2225&nbsp;&nbsp;</span>		fallthrough
<span id="L2226" class="ln">  2226&nbsp;&nbsp;</span>	case Chan, Map, UnsafePointer:
<span id="L2227" class="ln">  2227&nbsp;&nbsp;</span>		return uintptr(v.pointer())
<span id="L2228" class="ln">  2228&nbsp;&nbsp;</span>	case Func:
<span id="L2229" class="ln">  2229&nbsp;&nbsp;</span>		if v.flag&amp;flagMethod != 0 {
<span id="L2230" class="ln">  2230&nbsp;&nbsp;</span>			<span class="comment">// As the doc comment says, the returned pointer is an</span>
<span id="L2231" class="ln">  2231&nbsp;&nbsp;</span>			<span class="comment">// underlying code pointer but not necessarily enough to</span>
<span id="L2232" class="ln">  2232&nbsp;&nbsp;</span>			<span class="comment">// identify a single function uniquely. All method expressions</span>
<span id="L2233" class="ln">  2233&nbsp;&nbsp;</span>			<span class="comment">// created via reflect have the same underlying code pointer,</span>
<span id="L2234" class="ln">  2234&nbsp;&nbsp;</span>			<span class="comment">// so their Pointers are equal. The function used here must</span>
<span id="L2235" class="ln">  2235&nbsp;&nbsp;</span>			<span class="comment">// match the one used in makeMethodValue.</span>
<span id="L2236" class="ln">  2236&nbsp;&nbsp;</span>			return methodValueCallCodePtr()
<span id="L2237" class="ln">  2237&nbsp;&nbsp;</span>		}
<span id="L2238" class="ln">  2238&nbsp;&nbsp;</span>		p := v.pointer()
<span id="L2239" class="ln">  2239&nbsp;&nbsp;</span>		<span class="comment">// Non-nil func value points at data block.</span>
<span id="L2240" class="ln">  2240&nbsp;&nbsp;</span>		<span class="comment">// First word of data block is actual code.</span>
<span id="L2241" class="ln">  2241&nbsp;&nbsp;</span>		if p != nil {
<span id="L2242" class="ln">  2242&nbsp;&nbsp;</span>			p = *(*unsafe.Pointer)(p)
<span id="L2243" class="ln">  2243&nbsp;&nbsp;</span>		}
<span id="L2244" class="ln">  2244&nbsp;&nbsp;</span>		return uintptr(p)
<span id="L2245" class="ln">  2245&nbsp;&nbsp;</span>
<span id="L2246" class="ln">  2246&nbsp;&nbsp;</span>	case Slice:
<span id="L2247" class="ln">  2247&nbsp;&nbsp;</span>		return uintptr((*unsafeheader.Slice)(v.ptr).Data)
<span id="L2248" class="ln">  2248&nbsp;&nbsp;</span>	}
<span id="L2249" class="ln">  2249&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.Pointer&#34;, v.kind()})
<span id="L2250" class="ln">  2250&nbsp;&nbsp;</span>}
<span id="L2251" class="ln">  2251&nbsp;&nbsp;</span>
<span id="L2252" class="ln">  2252&nbsp;&nbsp;</span><span class="comment">// Recv receives and returns a value from the channel v.</span>
<span id="L2253" class="ln">  2253&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Chan].</span>
<span id="L2254" class="ln">  2254&nbsp;&nbsp;</span><span class="comment">// The receive blocks until a value is ready.</span>
<span id="L2255" class="ln">  2255&nbsp;&nbsp;</span><span class="comment">// The boolean value ok is true if the value x corresponds to a send</span>
<span id="L2256" class="ln">  2256&nbsp;&nbsp;</span><span class="comment">// on the channel, false if it is a zero value received because the channel is closed.</span>
<span id="L2257" class="ln">  2257&nbsp;&nbsp;</span>func (v Value) Recv() (x Value, ok bool) {
<span id="L2258" class="ln">  2258&nbsp;&nbsp;</span>	v.mustBe(Chan)
<span id="L2259" class="ln">  2259&nbsp;&nbsp;</span>	v.mustBeExported()
<span id="L2260" class="ln">  2260&nbsp;&nbsp;</span>	return v.recv(false)
<span id="L2261" class="ln">  2261&nbsp;&nbsp;</span>}
<span id="L2262" class="ln">  2262&nbsp;&nbsp;</span>
<span id="L2263" class="ln">  2263&nbsp;&nbsp;</span><span class="comment">// internal recv, possibly non-blocking (nb).</span>
<span id="L2264" class="ln">  2264&nbsp;&nbsp;</span><span class="comment">// v is known to be a channel.</span>
<span id="L2265" class="ln">  2265&nbsp;&nbsp;</span>func (v Value) recv(nb bool) (val Value, ok bool) {
<span id="L2266" class="ln">  2266&nbsp;&nbsp;</span>	tt := (*chanType)(unsafe.Pointer(v.typ()))
<span id="L2267" class="ln">  2267&nbsp;&nbsp;</span>	if ChanDir(tt.Dir)&amp;RecvDir == 0 {
<span id="L2268" class="ln">  2268&nbsp;&nbsp;</span>		panic(&#34;reflect: recv on send-only channel&#34;)
<span id="L2269" class="ln">  2269&nbsp;&nbsp;</span>	}
<span id="L2270" class="ln">  2270&nbsp;&nbsp;</span>	t := tt.Elem
<span id="L2271" class="ln">  2271&nbsp;&nbsp;</span>	val = Value{t, nil, flag(t.Kind())}
<span id="L2272" class="ln">  2272&nbsp;&nbsp;</span>	var p unsafe.Pointer
<span id="L2273" class="ln">  2273&nbsp;&nbsp;</span>	if ifaceIndir(t) {
<span id="L2274" class="ln">  2274&nbsp;&nbsp;</span>		p = unsafe_New(t)
<span id="L2275" class="ln">  2275&nbsp;&nbsp;</span>		val.ptr = p
<span id="L2276" class="ln">  2276&nbsp;&nbsp;</span>		val.flag |= flagIndir
<span id="L2277" class="ln">  2277&nbsp;&nbsp;</span>	} else {
<span id="L2278" class="ln">  2278&nbsp;&nbsp;</span>		p = unsafe.Pointer(&amp;val.ptr)
<span id="L2279" class="ln">  2279&nbsp;&nbsp;</span>	}
<span id="L2280" class="ln">  2280&nbsp;&nbsp;</span>	selected, ok := chanrecv(v.pointer(), nb, p)
<span id="L2281" class="ln">  2281&nbsp;&nbsp;</span>	if !selected {
<span id="L2282" class="ln">  2282&nbsp;&nbsp;</span>		val = Value{}
<span id="L2283" class="ln">  2283&nbsp;&nbsp;</span>	}
<span id="L2284" class="ln">  2284&nbsp;&nbsp;</span>	return
<span id="L2285" class="ln">  2285&nbsp;&nbsp;</span>}
<span id="L2286" class="ln">  2286&nbsp;&nbsp;</span>
<span id="L2287" class="ln">  2287&nbsp;&nbsp;</span><span class="comment">// Send sends x on the channel v.</span>
<span id="L2288" class="ln">  2288&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s kind is not [Chan] or if x&#39;s type is not the same type as v&#39;s element type.</span>
<span id="L2289" class="ln">  2289&nbsp;&nbsp;</span><span class="comment">// As in Go, x&#39;s value must be assignable to the channel&#39;s element type.</span>
<span id="L2290" class="ln">  2290&nbsp;&nbsp;</span>func (v Value) Send(x Value) {
<span id="L2291" class="ln">  2291&nbsp;&nbsp;</span>	v.mustBe(Chan)
<span id="L2292" class="ln">  2292&nbsp;&nbsp;</span>	v.mustBeExported()
<span id="L2293" class="ln">  2293&nbsp;&nbsp;</span>	v.send(x, false)
<span id="L2294" class="ln">  2294&nbsp;&nbsp;</span>}
<span id="L2295" class="ln">  2295&nbsp;&nbsp;</span>
<span id="L2296" class="ln">  2296&nbsp;&nbsp;</span><span class="comment">// internal send, possibly non-blocking.</span>
<span id="L2297" class="ln">  2297&nbsp;&nbsp;</span><span class="comment">// v is known to be a channel.</span>
<span id="L2298" class="ln">  2298&nbsp;&nbsp;</span>func (v Value) send(x Value, nb bool) (selected bool) {
<span id="L2299" class="ln">  2299&nbsp;&nbsp;</span>	tt := (*chanType)(unsafe.Pointer(v.typ()))
<span id="L2300" class="ln">  2300&nbsp;&nbsp;</span>	if ChanDir(tt.Dir)&amp;SendDir == 0 {
<span id="L2301" class="ln">  2301&nbsp;&nbsp;</span>		panic(&#34;reflect: send on recv-only channel&#34;)
<span id="L2302" class="ln">  2302&nbsp;&nbsp;</span>	}
<span id="L2303" class="ln">  2303&nbsp;&nbsp;</span>	x.mustBeExported()
<span id="L2304" class="ln">  2304&nbsp;&nbsp;</span>	x = x.assignTo(&#34;reflect.Value.Send&#34;, tt.Elem, nil)
<span id="L2305" class="ln">  2305&nbsp;&nbsp;</span>	var p unsafe.Pointer
<span id="L2306" class="ln">  2306&nbsp;&nbsp;</span>	if x.flag&amp;flagIndir != 0 {
<span id="L2307" class="ln">  2307&nbsp;&nbsp;</span>		p = x.ptr
<span id="L2308" class="ln">  2308&nbsp;&nbsp;</span>	} else {
<span id="L2309" class="ln">  2309&nbsp;&nbsp;</span>		p = unsafe.Pointer(&amp;x.ptr)
<span id="L2310" class="ln">  2310&nbsp;&nbsp;</span>	}
<span id="L2311" class="ln">  2311&nbsp;&nbsp;</span>	return chansend(v.pointer(), p, nb)
<span id="L2312" class="ln">  2312&nbsp;&nbsp;</span>}
<span id="L2313" class="ln">  2313&nbsp;&nbsp;</span>
<span id="L2314" class="ln">  2314&nbsp;&nbsp;</span><span class="comment">// Set assigns x to the value v.</span>
<span id="L2315" class="ln">  2315&nbsp;&nbsp;</span><span class="comment">// It panics if [Value.CanSet] returns false.</span>
<span id="L2316" class="ln">  2316&nbsp;&nbsp;</span><span class="comment">// As in Go, x&#39;s value must be assignable to v&#39;s type and</span>
<span id="L2317" class="ln">  2317&nbsp;&nbsp;</span><span class="comment">// must not be derived from an unexported field.</span>
<span id="L2318" class="ln">  2318&nbsp;&nbsp;</span>func (v Value) Set(x Value) {
<span id="L2319" class="ln">  2319&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L2320" class="ln">  2320&nbsp;&nbsp;</span>	x.mustBeExported() <span class="comment">// do not let unexported x leak</span>
<span id="L2321" class="ln">  2321&nbsp;&nbsp;</span>	var target unsafe.Pointer
<span id="L2322" class="ln">  2322&nbsp;&nbsp;</span>	if v.kind() == Interface {
<span id="L2323" class="ln">  2323&nbsp;&nbsp;</span>		target = v.ptr
<span id="L2324" class="ln">  2324&nbsp;&nbsp;</span>	}
<span id="L2325" class="ln">  2325&nbsp;&nbsp;</span>	x = x.assignTo(&#34;reflect.Set&#34;, v.typ(), target)
<span id="L2326" class="ln">  2326&nbsp;&nbsp;</span>	if x.flag&amp;flagIndir != 0 {
<span id="L2327" class="ln">  2327&nbsp;&nbsp;</span>		if x.ptr == unsafe.Pointer(&amp;zeroVal[0]) {
<span id="L2328" class="ln">  2328&nbsp;&nbsp;</span>			typedmemclr(v.typ(), v.ptr)
<span id="L2329" class="ln">  2329&nbsp;&nbsp;</span>		} else {
<span id="L2330" class="ln">  2330&nbsp;&nbsp;</span>			typedmemmove(v.typ(), v.ptr, x.ptr)
<span id="L2331" class="ln">  2331&nbsp;&nbsp;</span>		}
<span id="L2332" class="ln">  2332&nbsp;&nbsp;</span>	} else {
<span id="L2333" class="ln">  2333&nbsp;&nbsp;</span>		*(*unsafe.Pointer)(v.ptr) = x.ptr
<span id="L2334" class="ln">  2334&nbsp;&nbsp;</span>	}
<span id="L2335" class="ln">  2335&nbsp;&nbsp;</span>}
<span id="L2336" class="ln">  2336&nbsp;&nbsp;</span>
<span id="L2337" class="ln">  2337&nbsp;&nbsp;</span><span class="comment">// SetBool sets v&#39;s underlying value.</span>
<span id="L2338" class="ln">  2338&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Bool] or if [Value.CanSet] returns false.</span>
<span id="L2339" class="ln">  2339&nbsp;&nbsp;</span>func (v Value) SetBool(x bool) {
<span id="L2340" class="ln">  2340&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L2341" class="ln">  2341&nbsp;&nbsp;</span>	v.mustBe(Bool)
<span id="L2342" class="ln">  2342&nbsp;&nbsp;</span>	*(*bool)(v.ptr) = x
<span id="L2343" class="ln">  2343&nbsp;&nbsp;</span>}
<span id="L2344" class="ln">  2344&nbsp;&nbsp;</span>
<span id="L2345" class="ln">  2345&nbsp;&nbsp;</span><span class="comment">// SetBytes sets v&#39;s underlying value.</span>
<span id="L2346" class="ln">  2346&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s underlying value is not a slice of bytes.</span>
<span id="L2347" class="ln">  2347&nbsp;&nbsp;</span>func (v Value) SetBytes(x []byte) {
<span id="L2348" class="ln">  2348&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L2349" class="ln">  2349&nbsp;&nbsp;</span>	v.mustBe(Slice)
<span id="L2350" class="ln">  2350&nbsp;&nbsp;</span>	if toRType(v.typ()).Elem().Kind() != Uint8 { <span class="comment">// TODO add Elem method, fix mustBe(Slice) to return slice.</span>
<span id="L2351" class="ln">  2351&nbsp;&nbsp;</span>		panic(&#34;reflect.Value.SetBytes of non-byte slice&#34;)
<span id="L2352" class="ln">  2352&nbsp;&nbsp;</span>	}
<span id="L2353" class="ln">  2353&nbsp;&nbsp;</span>	*(*[]byte)(v.ptr) = x
<span id="L2354" class="ln">  2354&nbsp;&nbsp;</span>}
<span id="L2355" class="ln">  2355&nbsp;&nbsp;</span>
<span id="L2356" class="ln">  2356&nbsp;&nbsp;</span><span class="comment">// setRunes sets v&#39;s underlying value.</span>
<span id="L2357" class="ln">  2357&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s underlying value is not a slice of runes (int32s).</span>
<span id="L2358" class="ln">  2358&nbsp;&nbsp;</span>func (v Value) setRunes(x []rune) {
<span id="L2359" class="ln">  2359&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L2360" class="ln">  2360&nbsp;&nbsp;</span>	v.mustBe(Slice)
<span id="L2361" class="ln">  2361&nbsp;&nbsp;</span>	if v.typ().Elem().Kind() != abi.Int32 {
<span id="L2362" class="ln">  2362&nbsp;&nbsp;</span>		panic(&#34;reflect.Value.setRunes of non-rune slice&#34;)
<span id="L2363" class="ln">  2363&nbsp;&nbsp;</span>	}
<span id="L2364" class="ln">  2364&nbsp;&nbsp;</span>	*(*[]rune)(v.ptr) = x
<span id="L2365" class="ln">  2365&nbsp;&nbsp;</span>}
<span id="L2366" class="ln">  2366&nbsp;&nbsp;</span>
<span id="L2367" class="ln">  2367&nbsp;&nbsp;</span><span class="comment">// SetComplex sets v&#39;s underlying value to x.</span>
<span id="L2368" class="ln">  2368&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Complex64] or [Complex128], or if [Value.CanSet] returns false.</span>
<span id="L2369" class="ln">  2369&nbsp;&nbsp;</span>func (v Value) SetComplex(x complex128) {
<span id="L2370" class="ln">  2370&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L2371" class="ln">  2371&nbsp;&nbsp;</span>	switch k := v.kind(); k {
<span id="L2372" class="ln">  2372&nbsp;&nbsp;</span>	default:
<span id="L2373" class="ln">  2373&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.SetComplex&#34;, v.kind()})
<span id="L2374" class="ln">  2374&nbsp;&nbsp;</span>	case Complex64:
<span id="L2375" class="ln">  2375&nbsp;&nbsp;</span>		*(*complex64)(v.ptr) = complex64(x)
<span id="L2376" class="ln">  2376&nbsp;&nbsp;</span>	case Complex128:
<span id="L2377" class="ln">  2377&nbsp;&nbsp;</span>		*(*complex128)(v.ptr) = x
<span id="L2378" class="ln">  2378&nbsp;&nbsp;</span>	}
<span id="L2379" class="ln">  2379&nbsp;&nbsp;</span>}
<span id="L2380" class="ln">  2380&nbsp;&nbsp;</span>
<span id="L2381" class="ln">  2381&nbsp;&nbsp;</span><span class="comment">// SetFloat sets v&#39;s underlying value to x.</span>
<span id="L2382" class="ln">  2382&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Float32] or [Float64], or if [Value.CanSet] returns false.</span>
<span id="L2383" class="ln">  2383&nbsp;&nbsp;</span>func (v Value) SetFloat(x float64) {
<span id="L2384" class="ln">  2384&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L2385" class="ln">  2385&nbsp;&nbsp;</span>	switch k := v.kind(); k {
<span id="L2386" class="ln">  2386&nbsp;&nbsp;</span>	default:
<span id="L2387" class="ln">  2387&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.SetFloat&#34;, v.kind()})
<span id="L2388" class="ln">  2388&nbsp;&nbsp;</span>	case Float32:
<span id="L2389" class="ln">  2389&nbsp;&nbsp;</span>		*(*float32)(v.ptr) = float32(x)
<span id="L2390" class="ln">  2390&nbsp;&nbsp;</span>	case Float64:
<span id="L2391" class="ln">  2391&nbsp;&nbsp;</span>		*(*float64)(v.ptr) = x
<span id="L2392" class="ln">  2392&nbsp;&nbsp;</span>	}
<span id="L2393" class="ln">  2393&nbsp;&nbsp;</span>}
<span id="L2394" class="ln">  2394&nbsp;&nbsp;</span>
<span id="L2395" class="ln">  2395&nbsp;&nbsp;</span><span class="comment">// SetInt sets v&#39;s underlying value to x.</span>
<span id="L2396" class="ln">  2396&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Int], [Int8], [Int16], [Int32], or [Int64], or if [Value.CanSet] returns false.</span>
<span id="L2397" class="ln">  2397&nbsp;&nbsp;</span>func (v Value) SetInt(x int64) {
<span id="L2398" class="ln">  2398&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L2399" class="ln">  2399&nbsp;&nbsp;</span>	switch k := v.kind(); k {
<span id="L2400" class="ln">  2400&nbsp;&nbsp;</span>	default:
<span id="L2401" class="ln">  2401&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.SetInt&#34;, v.kind()})
<span id="L2402" class="ln">  2402&nbsp;&nbsp;</span>	case Int:
<span id="L2403" class="ln">  2403&nbsp;&nbsp;</span>		*(*int)(v.ptr) = int(x)
<span id="L2404" class="ln">  2404&nbsp;&nbsp;</span>	case Int8:
<span id="L2405" class="ln">  2405&nbsp;&nbsp;</span>		*(*int8)(v.ptr) = int8(x)
<span id="L2406" class="ln">  2406&nbsp;&nbsp;</span>	case Int16:
<span id="L2407" class="ln">  2407&nbsp;&nbsp;</span>		*(*int16)(v.ptr) = int16(x)
<span id="L2408" class="ln">  2408&nbsp;&nbsp;</span>	case Int32:
<span id="L2409" class="ln">  2409&nbsp;&nbsp;</span>		*(*int32)(v.ptr) = int32(x)
<span id="L2410" class="ln">  2410&nbsp;&nbsp;</span>	case Int64:
<span id="L2411" class="ln">  2411&nbsp;&nbsp;</span>		*(*int64)(v.ptr) = x
<span id="L2412" class="ln">  2412&nbsp;&nbsp;</span>	}
<span id="L2413" class="ln">  2413&nbsp;&nbsp;</span>}
<span id="L2414" class="ln">  2414&nbsp;&nbsp;</span>
<span id="L2415" class="ln">  2415&nbsp;&nbsp;</span><span class="comment">// SetLen sets v&#39;s length to n.</span>
<span id="L2416" class="ln">  2416&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Slice] or if n is negative or</span>
<span id="L2417" class="ln">  2417&nbsp;&nbsp;</span><span class="comment">// greater than the capacity of the slice.</span>
<span id="L2418" class="ln">  2418&nbsp;&nbsp;</span>func (v Value) SetLen(n int) {
<span id="L2419" class="ln">  2419&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L2420" class="ln">  2420&nbsp;&nbsp;</span>	v.mustBe(Slice)
<span id="L2421" class="ln">  2421&nbsp;&nbsp;</span>	s := (*unsafeheader.Slice)(v.ptr)
<span id="L2422" class="ln">  2422&nbsp;&nbsp;</span>	if uint(n) &gt; uint(s.Cap) {
<span id="L2423" class="ln">  2423&nbsp;&nbsp;</span>		panic(&#34;reflect: slice length out of range in SetLen&#34;)
<span id="L2424" class="ln">  2424&nbsp;&nbsp;</span>	}
<span id="L2425" class="ln">  2425&nbsp;&nbsp;</span>	s.Len = n
<span id="L2426" class="ln">  2426&nbsp;&nbsp;</span>}
<span id="L2427" class="ln">  2427&nbsp;&nbsp;</span>
<span id="L2428" class="ln">  2428&nbsp;&nbsp;</span><span class="comment">// SetCap sets v&#39;s capacity to n.</span>
<span id="L2429" class="ln">  2429&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Slice] or if n is smaller than the length or</span>
<span id="L2430" class="ln">  2430&nbsp;&nbsp;</span><span class="comment">// greater than the capacity of the slice.</span>
<span id="L2431" class="ln">  2431&nbsp;&nbsp;</span>func (v Value) SetCap(n int) {
<span id="L2432" class="ln">  2432&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L2433" class="ln">  2433&nbsp;&nbsp;</span>	v.mustBe(Slice)
<span id="L2434" class="ln">  2434&nbsp;&nbsp;</span>	s := (*unsafeheader.Slice)(v.ptr)
<span id="L2435" class="ln">  2435&nbsp;&nbsp;</span>	if n &lt; s.Len || n &gt; s.Cap {
<span id="L2436" class="ln">  2436&nbsp;&nbsp;</span>		panic(&#34;reflect: slice capacity out of range in SetCap&#34;)
<span id="L2437" class="ln">  2437&nbsp;&nbsp;</span>	}
<span id="L2438" class="ln">  2438&nbsp;&nbsp;</span>	s.Cap = n
<span id="L2439" class="ln">  2439&nbsp;&nbsp;</span>}
<span id="L2440" class="ln">  2440&nbsp;&nbsp;</span>
<span id="L2441" class="ln">  2441&nbsp;&nbsp;</span><span class="comment">// SetMapIndex sets the element associated with key in the map v to elem.</span>
<span id="L2442" class="ln">  2442&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Map].</span>
<span id="L2443" class="ln">  2443&nbsp;&nbsp;</span><span class="comment">// If elem is the zero Value, SetMapIndex deletes the key from the map.</span>
<span id="L2444" class="ln">  2444&nbsp;&nbsp;</span><span class="comment">// Otherwise if v holds a nil map, SetMapIndex will panic.</span>
<span id="L2445" class="ln">  2445&nbsp;&nbsp;</span><span class="comment">// As in Go, key&#39;s elem must be assignable to the map&#39;s key type,</span>
<span id="L2446" class="ln">  2446&nbsp;&nbsp;</span><span class="comment">// and elem&#39;s value must be assignable to the map&#39;s elem type.</span>
<span id="L2447" class="ln">  2447&nbsp;&nbsp;</span>func (v Value) SetMapIndex(key, elem Value) {
<span id="L2448" class="ln">  2448&nbsp;&nbsp;</span>	v.mustBe(Map)
<span id="L2449" class="ln">  2449&nbsp;&nbsp;</span>	v.mustBeExported()
<span id="L2450" class="ln">  2450&nbsp;&nbsp;</span>	key.mustBeExported()
<span id="L2451" class="ln">  2451&nbsp;&nbsp;</span>	tt := (*mapType)(unsafe.Pointer(v.typ()))
<span id="L2452" class="ln">  2452&nbsp;&nbsp;</span>
<span id="L2453" class="ln">  2453&nbsp;&nbsp;</span>	if (tt.Key == stringType || key.kind() == String) &amp;&amp; tt.Key == key.typ() &amp;&amp; tt.Elem.Size() &lt;= maxValSize {
<span id="L2454" class="ln">  2454&nbsp;&nbsp;</span>		k := *(*string)(key.ptr)
<span id="L2455" class="ln">  2455&nbsp;&nbsp;</span>		if elem.typ() == nil {
<span id="L2456" class="ln">  2456&nbsp;&nbsp;</span>			mapdelete_faststr(v.typ(), v.pointer(), k)
<span id="L2457" class="ln">  2457&nbsp;&nbsp;</span>			return
<span id="L2458" class="ln">  2458&nbsp;&nbsp;</span>		}
<span id="L2459" class="ln">  2459&nbsp;&nbsp;</span>		elem.mustBeExported()
<span id="L2460" class="ln">  2460&nbsp;&nbsp;</span>		elem = elem.assignTo(&#34;reflect.Value.SetMapIndex&#34;, tt.Elem, nil)
<span id="L2461" class="ln">  2461&nbsp;&nbsp;</span>		var e unsafe.Pointer
<span id="L2462" class="ln">  2462&nbsp;&nbsp;</span>		if elem.flag&amp;flagIndir != 0 {
<span id="L2463" class="ln">  2463&nbsp;&nbsp;</span>			e = elem.ptr
<span id="L2464" class="ln">  2464&nbsp;&nbsp;</span>		} else {
<span id="L2465" class="ln">  2465&nbsp;&nbsp;</span>			e = unsafe.Pointer(&amp;elem.ptr)
<span id="L2466" class="ln">  2466&nbsp;&nbsp;</span>		}
<span id="L2467" class="ln">  2467&nbsp;&nbsp;</span>		mapassign_faststr(v.typ(), v.pointer(), k, e)
<span id="L2468" class="ln">  2468&nbsp;&nbsp;</span>		return
<span id="L2469" class="ln">  2469&nbsp;&nbsp;</span>	}
<span id="L2470" class="ln">  2470&nbsp;&nbsp;</span>
<span id="L2471" class="ln">  2471&nbsp;&nbsp;</span>	key = key.assignTo(&#34;reflect.Value.SetMapIndex&#34;, tt.Key, nil)
<span id="L2472" class="ln">  2472&nbsp;&nbsp;</span>	var k unsafe.Pointer
<span id="L2473" class="ln">  2473&nbsp;&nbsp;</span>	if key.flag&amp;flagIndir != 0 {
<span id="L2474" class="ln">  2474&nbsp;&nbsp;</span>		k = key.ptr
<span id="L2475" class="ln">  2475&nbsp;&nbsp;</span>	} else {
<span id="L2476" class="ln">  2476&nbsp;&nbsp;</span>		k = unsafe.Pointer(&amp;key.ptr)
<span id="L2477" class="ln">  2477&nbsp;&nbsp;</span>	}
<span id="L2478" class="ln">  2478&nbsp;&nbsp;</span>	if elem.typ() == nil {
<span id="L2479" class="ln">  2479&nbsp;&nbsp;</span>		mapdelete(v.typ(), v.pointer(), k)
<span id="L2480" class="ln">  2480&nbsp;&nbsp;</span>		return
<span id="L2481" class="ln">  2481&nbsp;&nbsp;</span>	}
<span id="L2482" class="ln">  2482&nbsp;&nbsp;</span>	elem.mustBeExported()
<span id="L2483" class="ln">  2483&nbsp;&nbsp;</span>	elem = elem.assignTo(&#34;reflect.Value.SetMapIndex&#34;, tt.Elem, nil)
<span id="L2484" class="ln">  2484&nbsp;&nbsp;</span>	var e unsafe.Pointer
<span id="L2485" class="ln">  2485&nbsp;&nbsp;</span>	if elem.flag&amp;flagIndir != 0 {
<span id="L2486" class="ln">  2486&nbsp;&nbsp;</span>		e = elem.ptr
<span id="L2487" class="ln">  2487&nbsp;&nbsp;</span>	} else {
<span id="L2488" class="ln">  2488&nbsp;&nbsp;</span>		e = unsafe.Pointer(&amp;elem.ptr)
<span id="L2489" class="ln">  2489&nbsp;&nbsp;</span>	}
<span id="L2490" class="ln">  2490&nbsp;&nbsp;</span>	mapassign(v.typ(), v.pointer(), k, e)
<span id="L2491" class="ln">  2491&nbsp;&nbsp;</span>}
<span id="L2492" class="ln">  2492&nbsp;&nbsp;</span>
<span id="L2493" class="ln">  2493&nbsp;&nbsp;</span><span class="comment">// SetUint sets v&#39;s underlying value to x.</span>
<span id="L2494" class="ln">  2494&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Uint], [Uintptr], [Uint8], [Uint16], [Uint32], or [Uint64], or if [Value.CanSet] returns false.</span>
<span id="L2495" class="ln">  2495&nbsp;&nbsp;</span>func (v Value) SetUint(x uint64) {
<span id="L2496" class="ln">  2496&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L2497" class="ln">  2497&nbsp;&nbsp;</span>	switch k := v.kind(); k {
<span id="L2498" class="ln">  2498&nbsp;&nbsp;</span>	default:
<span id="L2499" class="ln">  2499&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.SetUint&#34;, v.kind()})
<span id="L2500" class="ln">  2500&nbsp;&nbsp;</span>	case Uint:
<span id="L2501" class="ln">  2501&nbsp;&nbsp;</span>		*(*uint)(v.ptr) = uint(x)
<span id="L2502" class="ln">  2502&nbsp;&nbsp;</span>	case Uint8:
<span id="L2503" class="ln">  2503&nbsp;&nbsp;</span>		*(*uint8)(v.ptr) = uint8(x)
<span id="L2504" class="ln">  2504&nbsp;&nbsp;</span>	case Uint16:
<span id="L2505" class="ln">  2505&nbsp;&nbsp;</span>		*(*uint16)(v.ptr) = uint16(x)
<span id="L2506" class="ln">  2506&nbsp;&nbsp;</span>	case Uint32:
<span id="L2507" class="ln">  2507&nbsp;&nbsp;</span>		*(*uint32)(v.ptr) = uint32(x)
<span id="L2508" class="ln">  2508&nbsp;&nbsp;</span>	case Uint64:
<span id="L2509" class="ln">  2509&nbsp;&nbsp;</span>		*(*uint64)(v.ptr) = x
<span id="L2510" class="ln">  2510&nbsp;&nbsp;</span>	case Uintptr:
<span id="L2511" class="ln">  2511&nbsp;&nbsp;</span>		*(*uintptr)(v.ptr) = uintptr(x)
<span id="L2512" class="ln">  2512&nbsp;&nbsp;</span>	}
<span id="L2513" class="ln">  2513&nbsp;&nbsp;</span>}
<span id="L2514" class="ln">  2514&nbsp;&nbsp;</span>
<span id="L2515" class="ln">  2515&nbsp;&nbsp;</span><span class="comment">// SetPointer sets the [unsafe.Pointer] value v to x.</span>
<span id="L2516" class="ln">  2516&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not UnsafePointer.</span>
<span id="L2517" class="ln">  2517&nbsp;&nbsp;</span>func (v Value) SetPointer(x unsafe.Pointer) {
<span id="L2518" class="ln">  2518&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L2519" class="ln">  2519&nbsp;&nbsp;</span>	v.mustBe(UnsafePointer)
<span id="L2520" class="ln">  2520&nbsp;&nbsp;</span>	*(*unsafe.Pointer)(v.ptr) = x
<span id="L2521" class="ln">  2521&nbsp;&nbsp;</span>}
<span id="L2522" class="ln">  2522&nbsp;&nbsp;</span>
<span id="L2523" class="ln">  2523&nbsp;&nbsp;</span><span class="comment">// SetString sets v&#39;s underlying value to x.</span>
<span id="L2524" class="ln">  2524&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [String] or if [Value.CanSet] returns false.</span>
<span id="L2525" class="ln">  2525&nbsp;&nbsp;</span>func (v Value) SetString(x string) {
<span id="L2526" class="ln">  2526&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L2527" class="ln">  2527&nbsp;&nbsp;</span>	v.mustBe(String)
<span id="L2528" class="ln">  2528&nbsp;&nbsp;</span>	*(*string)(v.ptr) = x
<span id="L2529" class="ln">  2529&nbsp;&nbsp;</span>}
<span id="L2530" class="ln">  2530&nbsp;&nbsp;</span>
<span id="L2531" class="ln">  2531&nbsp;&nbsp;</span><span class="comment">// Slice returns v[i:j].</span>
<span id="L2532" class="ln">  2532&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Array], [Slice] or [String], or if v is an unaddressable array,</span>
<span id="L2533" class="ln">  2533&nbsp;&nbsp;</span><span class="comment">// or if the indexes are out of bounds.</span>
<span id="L2534" class="ln">  2534&nbsp;&nbsp;</span>func (v Value) Slice(i, j int) Value {
<span id="L2535" class="ln">  2535&nbsp;&nbsp;</span>	var (
<span id="L2536" class="ln">  2536&nbsp;&nbsp;</span>		cap  int
<span id="L2537" class="ln">  2537&nbsp;&nbsp;</span>		typ  *sliceType
<span id="L2538" class="ln">  2538&nbsp;&nbsp;</span>		base unsafe.Pointer
<span id="L2539" class="ln">  2539&nbsp;&nbsp;</span>	)
<span id="L2540" class="ln">  2540&nbsp;&nbsp;</span>	switch kind := v.kind(); kind {
<span id="L2541" class="ln">  2541&nbsp;&nbsp;</span>	default:
<span id="L2542" class="ln">  2542&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.Slice&#34;, v.kind()})
<span id="L2543" class="ln">  2543&nbsp;&nbsp;</span>
<span id="L2544" class="ln">  2544&nbsp;&nbsp;</span>	case Array:
<span id="L2545" class="ln">  2545&nbsp;&nbsp;</span>		if v.flag&amp;flagAddr == 0 {
<span id="L2546" class="ln">  2546&nbsp;&nbsp;</span>			panic(&#34;reflect.Value.Slice: slice of unaddressable array&#34;)
<span id="L2547" class="ln">  2547&nbsp;&nbsp;</span>		}
<span id="L2548" class="ln">  2548&nbsp;&nbsp;</span>		tt := (*arrayType)(unsafe.Pointer(v.typ()))
<span id="L2549" class="ln">  2549&nbsp;&nbsp;</span>		cap = int(tt.Len)
<span id="L2550" class="ln">  2550&nbsp;&nbsp;</span>		typ = (*sliceType)(unsafe.Pointer(tt.Slice))
<span id="L2551" class="ln">  2551&nbsp;&nbsp;</span>		base = v.ptr
<span id="L2552" class="ln">  2552&nbsp;&nbsp;</span>
<span id="L2553" class="ln">  2553&nbsp;&nbsp;</span>	case Slice:
<span id="L2554" class="ln">  2554&nbsp;&nbsp;</span>		typ = (*sliceType)(unsafe.Pointer(v.typ()))
<span id="L2555" class="ln">  2555&nbsp;&nbsp;</span>		s := (*unsafeheader.Slice)(v.ptr)
<span id="L2556" class="ln">  2556&nbsp;&nbsp;</span>		base = s.Data
<span id="L2557" class="ln">  2557&nbsp;&nbsp;</span>		cap = s.Cap
<span id="L2558" class="ln">  2558&nbsp;&nbsp;</span>
<span id="L2559" class="ln">  2559&nbsp;&nbsp;</span>	case String:
<span id="L2560" class="ln">  2560&nbsp;&nbsp;</span>		s := (*unsafeheader.String)(v.ptr)
<span id="L2561" class="ln">  2561&nbsp;&nbsp;</span>		if i &lt; 0 || j &lt; i || j &gt; s.Len {
<span id="L2562" class="ln">  2562&nbsp;&nbsp;</span>			panic(&#34;reflect.Value.Slice: string slice index out of bounds&#34;)
<span id="L2563" class="ln">  2563&nbsp;&nbsp;</span>		}
<span id="L2564" class="ln">  2564&nbsp;&nbsp;</span>		var t unsafeheader.String
<span id="L2565" class="ln">  2565&nbsp;&nbsp;</span>		if i &lt; s.Len {
<span id="L2566" class="ln">  2566&nbsp;&nbsp;</span>			t = unsafeheader.String{Data: arrayAt(s.Data, i, 1, &#34;i &lt; s.Len&#34;), Len: j - i}
<span id="L2567" class="ln">  2567&nbsp;&nbsp;</span>		}
<span id="L2568" class="ln">  2568&nbsp;&nbsp;</span>		return Value{v.typ(), unsafe.Pointer(&amp;t), v.flag}
<span id="L2569" class="ln">  2569&nbsp;&nbsp;</span>	}
<span id="L2570" class="ln">  2570&nbsp;&nbsp;</span>
<span id="L2571" class="ln">  2571&nbsp;&nbsp;</span>	if i &lt; 0 || j &lt; i || j &gt; cap {
<span id="L2572" class="ln">  2572&nbsp;&nbsp;</span>		panic(&#34;reflect.Value.Slice: slice index out of bounds&#34;)
<span id="L2573" class="ln">  2573&nbsp;&nbsp;</span>	}
<span id="L2574" class="ln">  2574&nbsp;&nbsp;</span>
<span id="L2575" class="ln">  2575&nbsp;&nbsp;</span>	<span class="comment">// Declare slice so that gc can see the base pointer in it.</span>
<span id="L2576" class="ln">  2576&nbsp;&nbsp;</span>	var x []unsafe.Pointer
<span id="L2577" class="ln">  2577&nbsp;&nbsp;</span>
<span id="L2578" class="ln">  2578&nbsp;&nbsp;</span>	<span class="comment">// Reinterpret as *unsafeheader.Slice to edit.</span>
<span id="L2579" class="ln">  2579&nbsp;&nbsp;</span>	s := (*unsafeheader.Slice)(unsafe.Pointer(&amp;x))
<span id="L2580" class="ln">  2580&nbsp;&nbsp;</span>	s.Len = j - i
<span id="L2581" class="ln">  2581&nbsp;&nbsp;</span>	s.Cap = cap - i
<span id="L2582" class="ln">  2582&nbsp;&nbsp;</span>	if cap-i &gt; 0 {
<span id="L2583" class="ln">  2583&nbsp;&nbsp;</span>		s.Data = arrayAt(base, i, typ.Elem.Size(), &#34;i &lt; cap&#34;)
<span id="L2584" class="ln">  2584&nbsp;&nbsp;</span>	} else {
<span id="L2585" class="ln">  2585&nbsp;&nbsp;</span>		<span class="comment">// do not advance pointer, to avoid pointing beyond end of slice</span>
<span id="L2586" class="ln">  2586&nbsp;&nbsp;</span>		s.Data = base
<span id="L2587" class="ln">  2587&nbsp;&nbsp;</span>	}
<span id="L2588" class="ln">  2588&nbsp;&nbsp;</span>
<span id="L2589" class="ln">  2589&nbsp;&nbsp;</span>	fl := v.flag.ro() | flagIndir | flag(Slice)
<span id="L2590" class="ln">  2590&nbsp;&nbsp;</span>	return Value{typ.Common(), unsafe.Pointer(&amp;x), fl}
<span id="L2591" class="ln">  2591&nbsp;&nbsp;</span>}
<span id="L2592" class="ln">  2592&nbsp;&nbsp;</span>
<span id="L2593" class="ln">  2593&nbsp;&nbsp;</span><span class="comment">// Slice3 is the 3-index form of the slice operation: it returns v[i:j:k].</span>
<span id="L2594" class="ln">  2594&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Array] or [Slice], or if v is an unaddressable array,</span>
<span id="L2595" class="ln">  2595&nbsp;&nbsp;</span><span class="comment">// or if the indexes are out of bounds.</span>
<span id="L2596" class="ln">  2596&nbsp;&nbsp;</span>func (v Value) Slice3(i, j, k int) Value {
<span id="L2597" class="ln">  2597&nbsp;&nbsp;</span>	var (
<span id="L2598" class="ln">  2598&nbsp;&nbsp;</span>		cap  int
<span id="L2599" class="ln">  2599&nbsp;&nbsp;</span>		typ  *sliceType
<span id="L2600" class="ln">  2600&nbsp;&nbsp;</span>		base unsafe.Pointer
<span id="L2601" class="ln">  2601&nbsp;&nbsp;</span>	)
<span id="L2602" class="ln">  2602&nbsp;&nbsp;</span>	switch kind := v.kind(); kind {
<span id="L2603" class="ln">  2603&nbsp;&nbsp;</span>	default:
<span id="L2604" class="ln">  2604&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.Slice3&#34;, v.kind()})
<span id="L2605" class="ln">  2605&nbsp;&nbsp;</span>
<span id="L2606" class="ln">  2606&nbsp;&nbsp;</span>	case Array:
<span id="L2607" class="ln">  2607&nbsp;&nbsp;</span>		if v.flag&amp;flagAddr == 0 {
<span id="L2608" class="ln">  2608&nbsp;&nbsp;</span>			panic(&#34;reflect.Value.Slice3: slice of unaddressable array&#34;)
<span id="L2609" class="ln">  2609&nbsp;&nbsp;</span>		}
<span id="L2610" class="ln">  2610&nbsp;&nbsp;</span>		tt := (*arrayType)(unsafe.Pointer(v.typ()))
<span id="L2611" class="ln">  2611&nbsp;&nbsp;</span>		cap = int(tt.Len)
<span id="L2612" class="ln">  2612&nbsp;&nbsp;</span>		typ = (*sliceType)(unsafe.Pointer(tt.Slice))
<span id="L2613" class="ln">  2613&nbsp;&nbsp;</span>		base = v.ptr
<span id="L2614" class="ln">  2614&nbsp;&nbsp;</span>
<span id="L2615" class="ln">  2615&nbsp;&nbsp;</span>	case Slice:
<span id="L2616" class="ln">  2616&nbsp;&nbsp;</span>		typ = (*sliceType)(unsafe.Pointer(v.typ()))
<span id="L2617" class="ln">  2617&nbsp;&nbsp;</span>		s := (*unsafeheader.Slice)(v.ptr)
<span id="L2618" class="ln">  2618&nbsp;&nbsp;</span>		base = s.Data
<span id="L2619" class="ln">  2619&nbsp;&nbsp;</span>		cap = s.Cap
<span id="L2620" class="ln">  2620&nbsp;&nbsp;</span>	}
<span id="L2621" class="ln">  2621&nbsp;&nbsp;</span>
<span id="L2622" class="ln">  2622&nbsp;&nbsp;</span>	if i &lt; 0 || j &lt; i || k &lt; j || k &gt; cap {
<span id="L2623" class="ln">  2623&nbsp;&nbsp;</span>		panic(&#34;reflect.Value.Slice3: slice index out of bounds&#34;)
<span id="L2624" class="ln">  2624&nbsp;&nbsp;</span>	}
<span id="L2625" class="ln">  2625&nbsp;&nbsp;</span>
<span id="L2626" class="ln">  2626&nbsp;&nbsp;</span>	<span class="comment">// Declare slice so that the garbage collector</span>
<span id="L2627" class="ln">  2627&nbsp;&nbsp;</span>	<span class="comment">// can see the base pointer in it.</span>
<span id="L2628" class="ln">  2628&nbsp;&nbsp;</span>	var x []unsafe.Pointer
<span id="L2629" class="ln">  2629&nbsp;&nbsp;</span>
<span id="L2630" class="ln">  2630&nbsp;&nbsp;</span>	<span class="comment">// Reinterpret as *unsafeheader.Slice to edit.</span>
<span id="L2631" class="ln">  2631&nbsp;&nbsp;</span>	s := (*unsafeheader.Slice)(unsafe.Pointer(&amp;x))
<span id="L2632" class="ln">  2632&nbsp;&nbsp;</span>	s.Len = j - i
<span id="L2633" class="ln">  2633&nbsp;&nbsp;</span>	s.Cap = k - i
<span id="L2634" class="ln">  2634&nbsp;&nbsp;</span>	if k-i &gt; 0 {
<span id="L2635" class="ln">  2635&nbsp;&nbsp;</span>		s.Data = arrayAt(base, i, typ.Elem.Size(), &#34;i &lt; k &lt;= cap&#34;)
<span id="L2636" class="ln">  2636&nbsp;&nbsp;</span>	} else {
<span id="L2637" class="ln">  2637&nbsp;&nbsp;</span>		<span class="comment">// do not advance pointer, to avoid pointing beyond end of slice</span>
<span id="L2638" class="ln">  2638&nbsp;&nbsp;</span>		s.Data = base
<span id="L2639" class="ln">  2639&nbsp;&nbsp;</span>	}
<span id="L2640" class="ln">  2640&nbsp;&nbsp;</span>
<span id="L2641" class="ln">  2641&nbsp;&nbsp;</span>	fl := v.flag.ro() | flagIndir | flag(Slice)
<span id="L2642" class="ln">  2642&nbsp;&nbsp;</span>	return Value{typ.Common(), unsafe.Pointer(&amp;x), fl}
<span id="L2643" class="ln">  2643&nbsp;&nbsp;</span>}
<span id="L2644" class="ln">  2644&nbsp;&nbsp;</span>
<span id="L2645" class="ln">  2645&nbsp;&nbsp;</span><span class="comment">// String returns the string v&#39;s underlying value, as a string.</span>
<span id="L2646" class="ln">  2646&nbsp;&nbsp;</span><span class="comment">// String is a special case because of Go&#39;s String method convention.</span>
<span id="L2647" class="ln">  2647&nbsp;&nbsp;</span><span class="comment">// Unlike the other getters, it does not panic if v&#39;s Kind is not [String].</span>
<span id="L2648" class="ln">  2648&nbsp;&nbsp;</span><span class="comment">// Instead, it returns a string of the form &#34;&lt;T value&gt;&#34; where T is v&#39;s type.</span>
<span id="L2649" class="ln">  2649&nbsp;&nbsp;</span><span class="comment">// The fmt package treats Values specially. It does not call their String</span>
<span id="L2650" class="ln">  2650&nbsp;&nbsp;</span><span class="comment">// method implicitly but instead prints the concrete values they hold.</span>
<span id="L2651" class="ln">  2651&nbsp;&nbsp;</span>func (v Value) String() string {
<span id="L2652" class="ln">  2652&nbsp;&nbsp;</span>	<span class="comment">// stringNonString is split out to keep String inlineable for string kinds.</span>
<span id="L2653" class="ln">  2653&nbsp;&nbsp;</span>	if v.kind() == String {
<span id="L2654" class="ln">  2654&nbsp;&nbsp;</span>		return *(*string)(v.ptr)
<span id="L2655" class="ln">  2655&nbsp;&nbsp;</span>	}
<span id="L2656" class="ln">  2656&nbsp;&nbsp;</span>	return v.stringNonString()
<span id="L2657" class="ln">  2657&nbsp;&nbsp;</span>}
<span id="L2658" class="ln">  2658&nbsp;&nbsp;</span>
<span id="L2659" class="ln">  2659&nbsp;&nbsp;</span>func (v Value) stringNonString() string {
<span id="L2660" class="ln">  2660&nbsp;&nbsp;</span>	if v.kind() == Invalid {
<span id="L2661" class="ln">  2661&nbsp;&nbsp;</span>		return &#34;&lt;invalid Value&gt;&#34;
<span id="L2662" class="ln">  2662&nbsp;&nbsp;</span>	}
<span id="L2663" class="ln">  2663&nbsp;&nbsp;</span>	<span class="comment">// If you call String on a reflect.Value of other type, it&#39;s better to</span>
<span id="L2664" class="ln">  2664&nbsp;&nbsp;</span>	<span class="comment">// print something than to panic. Useful in debugging.</span>
<span id="L2665" class="ln">  2665&nbsp;&nbsp;</span>	return &#34;&lt;&#34; + v.Type().String() + &#34; Value&gt;&#34;
<span id="L2666" class="ln">  2666&nbsp;&nbsp;</span>}
<span id="L2667" class="ln">  2667&nbsp;&nbsp;</span>
<span id="L2668" class="ln">  2668&nbsp;&nbsp;</span><span class="comment">// TryRecv attempts to receive a value from the channel v but will not block.</span>
<span id="L2669" class="ln">  2669&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Chan].</span>
<span id="L2670" class="ln">  2670&nbsp;&nbsp;</span><span class="comment">// If the receive delivers a value, x is the transferred value and ok is true.</span>
<span id="L2671" class="ln">  2671&nbsp;&nbsp;</span><span class="comment">// If the receive cannot finish without blocking, x is the zero Value and ok is false.</span>
<span id="L2672" class="ln">  2672&nbsp;&nbsp;</span><span class="comment">// If the channel is closed, x is the zero value for the channel&#39;s element type and ok is false.</span>
<span id="L2673" class="ln">  2673&nbsp;&nbsp;</span>func (v Value) TryRecv() (x Value, ok bool) {
<span id="L2674" class="ln">  2674&nbsp;&nbsp;</span>	v.mustBe(Chan)
<span id="L2675" class="ln">  2675&nbsp;&nbsp;</span>	v.mustBeExported()
<span id="L2676" class="ln">  2676&nbsp;&nbsp;</span>	return v.recv(true)
<span id="L2677" class="ln">  2677&nbsp;&nbsp;</span>}
<span id="L2678" class="ln">  2678&nbsp;&nbsp;</span>
<span id="L2679" class="ln">  2679&nbsp;&nbsp;</span><span class="comment">// TrySend attempts to send x on the channel v but will not block.</span>
<span id="L2680" class="ln">  2680&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Chan].</span>
<span id="L2681" class="ln">  2681&nbsp;&nbsp;</span><span class="comment">// It reports whether the value was sent.</span>
<span id="L2682" class="ln">  2682&nbsp;&nbsp;</span><span class="comment">// As in Go, x&#39;s value must be assignable to the channel&#39;s element type.</span>
<span id="L2683" class="ln">  2683&nbsp;&nbsp;</span>func (v Value) TrySend(x Value) bool {
<span id="L2684" class="ln">  2684&nbsp;&nbsp;</span>	v.mustBe(Chan)
<span id="L2685" class="ln">  2685&nbsp;&nbsp;</span>	v.mustBeExported()
<span id="L2686" class="ln">  2686&nbsp;&nbsp;</span>	return v.send(x, true)
<span id="L2687" class="ln">  2687&nbsp;&nbsp;</span>}
<span id="L2688" class="ln">  2688&nbsp;&nbsp;</span>
<span id="L2689" class="ln">  2689&nbsp;&nbsp;</span><span class="comment">// Type returns v&#39;s type.</span>
<span id="L2690" class="ln">  2690&nbsp;&nbsp;</span>func (v Value) Type() Type {
<span id="L2691" class="ln">  2691&nbsp;&nbsp;</span>	if v.flag != 0 &amp;&amp; v.flag&amp;flagMethod == 0 {
<span id="L2692" class="ln">  2692&nbsp;&nbsp;</span>		return (*rtype)(noescape(unsafe.Pointer(v.typ_))) <span class="comment">// inline of toRType(v.typ()), for own inlining in inline test</span>
<span id="L2693" class="ln">  2693&nbsp;&nbsp;</span>	}
<span id="L2694" class="ln">  2694&nbsp;&nbsp;</span>	return v.typeSlow()
<span id="L2695" class="ln">  2695&nbsp;&nbsp;</span>}
<span id="L2696" class="ln">  2696&nbsp;&nbsp;</span>
<span id="L2697" class="ln">  2697&nbsp;&nbsp;</span>func (v Value) typeSlow() Type {
<span id="L2698" class="ln">  2698&nbsp;&nbsp;</span>	if v.flag == 0 {
<span id="L2699" class="ln">  2699&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.Type&#34;, Invalid})
<span id="L2700" class="ln">  2700&nbsp;&nbsp;</span>	}
<span id="L2701" class="ln">  2701&nbsp;&nbsp;</span>
<span id="L2702" class="ln">  2702&nbsp;&nbsp;</span>	typ := v.typ()
<span id="L2703" class="ln">  2703&nbsp;&nbsp;</span>	if v.flag&amp;flagMethod == 0 {
<span id="L2704" class="ln">  2704&nbsp;&nbsp;</span>		return toRType(v.typ())
<span id="L2705" class="ln">  2705&nbsp;&nbsp;</span>	}
<span id="L2706" class="ln">  2706&nbsp;&nbsp;</span>
<span id="L2707" class="ln">  2707&nbsp;&nbsp;</span>	<span class="comment">// Method value.</span>
<span id="L2708" class="ln">  2708&nbsp;&nbsp;</span>	<span class="comment">// v.typ describes the receiver, not the method type.</span>
<span id="L2709" class="ln">  2709&nbsp;&nbsp;</span>	i := int(v.flag) &gt;&gt; flagMethodShift
<span id="L2710" class="ln">  2710&nbsp;&nbsp;</span>	if v.typ().Kind() == abi.Interface {
<span id="L2711" class="ln">  2711&nbsp;&nbsp;</span>		<span class="comment">// Method on interface.</span>
<span id="L2712" class="ln">  2712&nbsp;&nbsp;</span>		tt := (*interfaceType)(unsafe.Pointer(typ))
<span id="L2713" class="ln">  2713&nbsp;&nbsp;</span>		if uint(i) &gt;= uint(len(tt.Methods)) {
<span id="L2714" class="ln">  2714&nbsp;&nbsp;</span>			panic(&#34;reflect: internal error: invalid method index&#34;)
<span id="L2715" class="ln">  2715&nbsp;&nbsp;</span>		}
<span id="L2716" class="ln">  2716&nbsp;&nbsp;</span>		m := &amp;tt.Methods[i]
<span id="L2717" class="ln">  2717&nbsp;&nbsp;</span>		return toRType(typeOffFor(typ, m.Typ))
<span id="L2718" class="ln">  2718&nbsp;&nbsp;</span>	}
<span id="L2719" class="ln">  2719&nbsp;&nbsp;</span>	<span class="comment">// Method on concrete type.</span>
<span id="L2720" class="ln">  2720&nbsp;&nbsp;</span>	ms := typ.ExportedMethods()
<span id="L2721" class="ln">  2721&nbsp;&nbsp;</span>	if uint(i) &gt;= uint(len(ms)) {
<span id="L2722" class="ln">  2722&nbsp;&nbsp;</span>		panic(&#34;reflect: internal error: invalid method index&#34;)
<span id="L2723" class="ln">  2723&nbsp;&nbsp;</span>	}
<span id="L2724" class="ln">  2724&nbsp;&nbsp;</span>	m := ms[i]
<span id="L2725" class="ln">  2725&nbsp;&nbsp;</span>	return toRType(typeOffFor(typ, m.Mtyp))
<span id="L2726" class="ln">  2726&nbsp;&nbsp;</span>}
<span id="L2727" class="ln">  2727&nbsp;&nbsp;</span>
<span id="L2728" class="ln">  2728&nbsp;&nbsp;</span><span class="comment">// CanUint reports whether [Value.Uint] can be used without panicking.</span>
<span id="L2729" class="ln">  2729&nbsp;&nbsp;</span>func (v Value) CanUint() bool {
<span id="L2730" class="ln">  2730&nbsp;&nbsp;</span>	switch v.kind() {
<span id="L2731" class="ln">  2731&nbsp;&nbsp;</span>	case Uint, Uint8, Uint16, Uint32, Uint64, Uintptr:
<span id="L2732" class="ln">  2732&nbsp;&nbsp;</span>		return true
<span id="L2733" class="ln">  2733&nbsp;&nbsp;</span>	default:
<span id="L2734" class="ln">  2734&nbsp;&nbsp;</span>		return false
<span id="L2735" class="ln">  2735&nbsp;&nbsp;</span>	}
<span id="L2736" class="ln">  2736&nbsp;&nbsp;</span>}
<span id="L2737" class="ln">  2737&nbsp;&nbsp;</span>
<span id="L2738" class="ln">  2738&nbsp;&nbsp;</span><span class="comment">// Uint returns v&#39;s underlying value, as a uint64.</span>
<span id="L2739" class="ln">  2739&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Uint], [Uintptr], [Uint8], [Uint16], [Uint32], or [Uint64].</span>
<span id="L2740" class="ln">  2740&nbsp;&nbsp;</span>func (v Value) Uint() uint64 {
<span id="L2741" class="ln">  2741&nbsp;&nbsp;</span>	k := v.kind()
<span id="L2742" class="ln">  2742&nbsp;&nbsp;</span>	p := v.ptr
<span id="L2743" class="ln">  2743&nbsp;&nbsp;</span>	switch k {
<span id="L2744" class="ln">  2744&nbsp;&nbsp;</span>	case Uint:
<span id="L2745" class="ln">  2745&nbsp;&nbsp;</span>		return uint64(*(*uint)(p))
<span id="L2746" class="ln">  2746&nbsp;&nbsp;</span>	case Uint8:
<span id="L2747" class="ln">  2747&nbsp;&nbsp;</span>		return uint64(*(*uint8)(p))
<span id="L2748" class="ln">  2748&nbsp;&nbsp;</span>	case Uint16:
<span id="L2749" class="ln">  2749&nbsp;&nbsp;</span>		return uint64(*(*uint16)(p))
<span id="L2750" class="ln">  2750&nbsp;&nbsp;</span>	case Uint32:
<span id="L2751" class="ln">  2751&nbsp;&nbsp;</span>		return uint64(*(*uint32)(p))
<span id="L2752" class="ln">  2752&nbsp;&nbsp;</span>	case Uint64:
<span id="L2753" class="ln">  2753&nbsp;&nbsp;</span>		return *(*uint64)(p)
<span id="L2754" class="ln">  2754&nbsp;&nbsp;</span>	case Uintptr:
<span id="L2755" class="ln">  2755&nbsp;&nbsp;</span>		return uint64(*(*uintptr)(p))
<span id="L2756" class="ln">  2756&nbsp;&nbsp;</span>	}
<span id="L2757" class="ln">  2757&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.Uint&#34;, v.kind()})
<span id="L2758" class="ln">  2758&nbsp;&nbsp;</span>}
<span id="L2759" class="ln">  2759&nbsp;&nbsp;</span>
<span id="L2760" class="ln">  2760&nbsp;&nbsp;</span><span class="comment">//go:nocheckptr</span>
<span id="L2761" class="ln">  2761&nbsp;&nbsp;</span><span class="comment">// This prevents inlining Value.UnsafeAddr when -d=checkptr is enabled,</span>
<span id="L2762" class="ln">  2762&nbsp;&nbsp;</span><span class="comment">// which ensures cmd/compile can recognize unsafe.Pointer(v.UnsafeAddr())</span>
<span id="L2763" class="ln">  2763&nbsp;&nbsp;</span><span class="comment">// and make an exception.</span>
<span id="L2764" class="ln">  2764&nbsp;&nbsp;</span>
<span id="L2765" class="ln">  2765&nbsp;&nbsp;</span><span class="comment">// UnsafeAddr returns a pointer to v&#39;s data, as a uintptr.</span>
<span id="L2766" class="ln">  2766&nbsp;&nbsp;</span><span class="comment">// It panics if v is not addressable.</span>
<span id="L2767" class="ln">  2767&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2768" class="ln">  2768&nbsp;&nbsp;</span><span class="comment">// It&#39;s preferred to use uintptr(Value.Addr().UnsafePointer()) to get the equivalent result.</span>
<span id="L2769" class="ln">  2769&nbsp;&nbsp;</span>func (v Value) UnsafeAddr() uintptr {
<span id="L2770" class="ln">  2770&nbsp;&nbsp;</span>	if v.typ() == nil {
<span id="L2771" class="ln">  2771&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.UnsafeAddr&#34;, Invalid})
<span id="L2772" class="ln">  2772&nbsp;&nbsp;</span>	}
<span id="L2773" class="ln">  2773&nbsp;&nbsp;</span>	if v.flag&amp;flagAddr == 0 {
<span id="L2774" class="ln">  2774&nbsp;&nbsp;</span>		panic(&#34;reflect.Value.UnsafeAddr of unaddressable value&#34;)
<span id="L2775" class="ln">  2775&nbsp;&nbsp;</span>	}
<span id="L2776" class="ln">  2776&nbsp;&nbsp;</span>	<span class="comment">// The compiler loses track as it converts to uintptr. Force escape.</span>
<span id="L2777" class="ln">  2777&nbsp;&nbsp;</span>	escapes(v.ptr)
<span id="L2778" class="ln">  2778&nbsp;&nbsp;</span>	return uintptr(v.ptr)
<span id="L2779" class="ln">  2779&nbsp;&nbsp;</span>}
<span id="L2780" class="ln">  2780&nbsp;&nbsp;</span>
<span id="L2781" class="ln">  2781&nbsp;&nbsp;</span><span class="comment">// UnsafePointer returns v&#39;s value as a [unsafe.Pointer].</span>
<span id="L2782" class="ln">  2782&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Chan], [Func], [Map], [Pointer], [Slice], or [UnsafePointer].</span>
<span id="L2783" class="ln">  2783&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2784" class="ln">  2784&nbsp;&nbsp;</span><span class="comment">// If v&#39;s Kind is [Func], the returned pointer is an underlying</span>
<span id="L2785" class="ln">  2785&nbsp;&nbsp;</span><span class="comment">// code pointer, but not necessarily enough to identify a</span>
<span id="L2786" class="ln">  2786&nbsp;&nbsp;</span><span class="comment">// single function uniquely. The only guarantee is that the</span>
<span id="L2787" class="ln">  2787&nbsp;&nbsp;</span><span class="comment">// result is zero if and only if v is a nil func Value.</span>
<span id="L2788" class="ln">  2788&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2789" class="ln">  2789&nbsp;&nbsp;</span><span class="comment">// If v&#39;s Kind is [Slice], the returned pointer is to the first</span>
<span id="L2790" class="ln">  2790&nbsp;&nbsp;</span><span class="comment">// element of the slice. If the slice is nil the returned value</span>
<span id="L2791" class="ln">  2791&nbsp;&nbsp;</span><span class="comment">// is nil.  If the slice is empty but non-nil the return value is non-nil.</span>
<span id="L2792" class="ln">  2792&nbsp;&nbsp;</span>func (v Value) UnsafePointer() unsafe.Pointer {
<span id="L2793" class="ln">  2793&nbsp;&nbsp;</span>	k := v.kind()
<span id="L2794" class="ln">  2794&nbsp;&nbsp;</span>	switch k {
<span id="L2795" class="ln">  2795&nbsp;&nbsp;</span>	case Pointer:
<span id="L2796" class="ln">  2796&nbsp;&nbsp;</span>		if v.typ().PtrBytes == 0 {
<span id="L2797" class="ln">  2797&nbsp;&nbsp;</span>			<span class="comment">// Since it is a not-in-heap pointer, all pointers to the heap are</span>
<span id="L2798" class="ln">  2798&nbsp;&nbsp;</span>			<span class="comment">// forbidden! See comment in Value.Elem and issue #48399.</span>
<span id="L2799" class="ln">  2799&nbsp;&nbsp;</span>			if !verifyNotInHeapPtr(*(*uintptr)(v.ptr)) {
<span id="L2800" class="ln">  2800&nbsp;&nbsp;</span>				panic(&#34;reflect: reflect.Value.UnsafePointer on an invalid notinheap pointer&#34;)
<span id="L2801" class="ln">  2801&nbsp;&nbsp;</span>			}
<span id="L2802" class="ln">  2802&nbsp;&nbsp;</span>			return *(*unsafe.Pointer)(v.ptr)
<span id="L2803" class="ln">  2803&nbsp;&nbsp;</span>		}
<span id="L2804" class="ln">  2804&nbsp;&nbsp;</span>		fallthrough
<span id="L2805" class="ln">  2805&nbsp;&nbsp;</span>	case Chan, Map, UnsafePointer:
<span id="L2806" class="ln">  2806&nbsp;&nbsp;</span>		return v.pointer()
<span id="L2807" class="ln">  2807&nbsp;&nbsp;</span>	case Func:
<span id="L2808" class="ln">  2808&nbsp;&nbsp;</span>		if v.flag&amp;flagMethod != 0 {
<span id="L2809" class="ln">  2809&nbsp;&nbsp;</span>			<span class="comment">// As the doc comment says, the returned pointer is an</span>
<span id="L2810" class="ln">  2810&nbsp;&nbsp;</span>			<span class="comment">// underlying code pointer but not necessarily enough to</span>
<span id="L2811" class="ln">  2811&nbsp;&nbsp;</span>			<span class="comment">// identify a single function uniquely. All method expressions</span>
<span id="L2812" class="ln">  2812&nbsp;&nbsp;</span>			<span class="comment">// created via reflect have the same underlying code pointer,</span>
<span id="L2813" class="ln">  2813&nbsp;&nbsp;</span>			<span class="comment">// so their Pointers are equal. The function used here must</span>
<span id="L2814" class="ln">  2814&nbsp;&nbsp;</span>			<span class="comment">// match the one used in makeMethodValue.</span>
<span id="L2815" class="ln">  2815&nbsp;&nbsp;</span>			code := methodValueCallCodePtr()
<span id="L2816" class="ln">  2816&nbsp;&nbsp;</span>			return *(*unsafe.Pointer)(unsafe.Pointer(&amp;code))
<span id="L2817" class="ln">  2817&nbsp;&nbsp;</span>		}
<span id="L2818" class="ln">  2818&nbsp;&nbsp;</span>		p := v.pointer()
<span id="L2819" class="ln">  2819&nbsp;&nbsp;</span>		<span class="comment">// Non-nil func value points at data block.</span>
<span id="L2820" class="ln">  2820&nbsp;&nbsp;</span>		<span class="comment">// First word of data block is actual code.</span>
<span id="L2821" class="ln">  2821&nbsp;&nbsp;</span>		if p != nil {
<span id="L2822" class="ln">  2822&nbsp;&nbsp;</span>			p = *(*unsafe.Pointer)(p)
<span id="L2823" class="ln">  2823&nbsp;&nbsp;</span>		}
<span id="L2824" class="ln">  2824&nbsp;&nbsp;</span>		return p
<span id="L2825" class="ln">  2825&nbsp;&nbsp;</span>
<span id="L2826" class="ln">  2826&nbsp;&nbsp;</span>	case Slice:
<span id="L2827" class="ln">  2827&nbsp;&nbsp;</span>		return (*unsafeheader.Slice)(v.ptr).Data
<span id="L2828" class="ln">  2828&nbsp;&nbsp;</span>	}
<span id="L2829" class="ln">  2829&nbsp;&nbsp;</span>	panic(&amp;ValueError{&#34;reflect.Value.UnsafePointer&#34;, v.kind()})
<span id="L2830" class="ln">  2830&nbsp;&nbsp;</span>}
<span id="L2831" class="ln">  2831&nbsp;&nbsp;</span>
<span id="L2832" class="ln">  2832&nbsp;&nbsp;</span><span class="comment">// StringHeader is the runtime representation of a string.</span>
<span id="L2833" class="ln">  2833&nbsp;&nbsp;</span><span class="comment">// It cannot be used safely or portably and its representation may</span>
<span id="L2834" class="ln">  2834&nbsp;&nbsp;</span><span class="comment">// change in a later release.</span>
<span id="L2835" class="ln">  2835&nbsp;&nbsp;</span><span class="comment">// Moreover, the Data field is not sufficient to guarantee the data</span>
<span id="L2836" class="ln">  2836&nbsp;&nbsp;</span><span class="comment">// it references will not be garbage collected, so programs must keep</span>
<span id="L2837" class="ln">  2837&nbsp;&nbsp;</span><span class="comment">// a separate, correctly typed pointer to the underlying data.</span>
<span id="L2838" class="ln">  2838&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2839" class="ln">  2839&nbsp;&nbsp;</span><span class="comment">// Deprecated: Use unsafe.String or unsafe.StringData instead.</span>
<span id="L2840" class="ln">  2840&nbsp;&nbsp;</span>type StringHeader struct {
<span id="L2841" class="ln">  2841&nbsp;&nbsp;</span>	Data uintptr
<span id="L2842" class="ln">  2842&nbsp;&nbsp;</span>	Len  int
<span id="L2843" class="ln">  2843&nbsp;&nbsp;</span>}
<span id="L2844" class="ln">  2844&nbsp;&nbsp;</span>
<span id="L2845" class="ln">  2845&nbsp;&nbsp;</span><span class="comment">// SliceHeader is the runtime representation of a slice.</span>
<span id="L2846" class="ln">  2846&nbsp;&nbsp;</span><span class="comment">// It cannot be used safely or portably and its representation may</span>
<span id="L2847" class="ln">  2847&nbsp;&nbsp;</span><span class="comment">// change in a later release.</span>
<span id="L2848" class="ln">  2848&nbsp;&nbsp;</span><span class="comment">// Moreover, the Data field is not sufficient to guarantee the data</span>
<span id="L2849" class="ln">  2849&nbsp;&nbsp;</span><span class="comment">// it references will not be garbage collected, so programs must keep</span>
<span id="L2850" class="ln">  2850&nbsp;&nbsp;</span><span class="comment">// a separate, correctly typed pointer to the underlying data.</span>
<span id="L2851" class="ln">  2851&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2852" class="ln">  2852&nbsp;&nbsp;</span><span class="comment">// Deprecated: Use unsafe.Slice or unsafe.SliceData instead.</span>
<span id="L2853" class="ln">  2853&nbsp;&nbsp;</span>type SliceHeader struct {
<span id="L2854" class="ln">  2854&nbsp;&nbsp;</span>	Data uintptr
<span id="L2855" class="ln">  2855&nbsp;&nbsp;</span>	Len  int
<span id="L2856" class="ln">  2856&nbsp;&nbsp;</span>	Cap  int
<span id="L2857" class="ln">  2857&nbsp;&nbsp;</span>}
<span id="L2858" class="ln">  2858&nbsp;&nbsp;</span>
<span id="L2859" class="ln">  2859&nbsp;&nbsp;</span>func typesMustMatch(what string, t1, t2 Type) {
<span id="L2860" class="ln">  2860&nbsp;&nbsp;</span>	if t1 != t2 {
<span id="L2861" class="ln">  2861&nbsp;&nbsp;</span>		panic(what + &#34;: &#34; + t1.String() + &#34; != &#34; + t2.String())
<span id="L2862" class="ln">  2862&nbsp;&nbsp;</span>	}
<span id="L2863" class="ln">  2863&nbsp;&nbsp;</span>}
<span id="L2864" class="ln">  2864&nbsp;&nbsp;</span>
<span id="L2865" class="ln">  2865&nbsp;&nbsp;</span><span class="comment">// arrayAt returns the i-th element of p,</span>
<span id="L2866" class="ln">  2866&nbsp;&nbsp;</span><span class="comment">// an array whose elements are eltSize bytes wide.</span>
<span id="L2867" class="ln">  2867&nbsp;&nbsp;</span><span class="comment">// The array pointed at by p must have at least i+1 elements:</span>
<span id="L2868" class="ln">  2868&nbsp;&nbsp;</span><span class="comment">// it is invalid (but impossible to check here) to pass i &gt;= len,</span>
<span id="L2869" class="ln">  2869&nbsp;&nbsp;</span><span class="comment">// because then the result will point outside the array.</span>
<span id="L2870" class="ln">  2870&nbsp;&nbsp;</span><span class="comment">// whySafe must explain why i &lt; len. (Passing &#34;i &lt; len&#34; is fine;</span>
<span id="L2871" class="ln">  2871&nbsp;&nbsp;</span><span class="comment">// the benefit is to surface this assumption at the call site.)</span>
<span id="L2872" class="ln">  2872&nbsp;&nbsp;</span>func arrayAt(p unsafe.Pointer, i int, eltSize uintptr, whySafe string) unsafe.Pointer {
<span id="L2873" class="ln">  2873&nbsp;&nbsp;</span>	return add(p, uintptr(i)*eltSize, &#34;i &lt; len&#34;)
<span id="L2874" class="ln">  2874&nbsp;&nbsp;</span>}
<span id="L2875" class="ln">  2875&nbsp;&nbsp;</span>
<span id="L2876" class="ln">  2876&nbsp;&nbsp;</span><span class="comment">// Grow increases the slice&#39;s capacity, if necessary, to guarantee space for</span>
<span id="L2877" class="ln">  2877&nbsp;&nbsp;</span><span class="comment">// another n elements. After Grow(n), at least n elements can be appended</span>
<span id="L2878" class="ln">  2878&nbsp;&nbsp;</span><span class="comment">// to the slice without another allocation.</span>
<span id="L2879" class="ln">  2879&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2880" class="ln">  2880&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not a [Slice] or if n is negative or too large to</span>
<span id="L2881" class="ln">  2881&nbsp;&nbsp;</span><span class="comment">// allocate the memory.</span>
<span id="L2882" class="ln">  2882&nbsp;&nbsp;</span>func (v Value) Grow(n int) {
<span id="L2883" class="ln">  2883&nbsp;&nbsp;</span>	v.mustBeAssignable()
<span id="L2884" class="ln">  2884&nbsp;&nbsp;</span>	v.mustBe(Slice)
<span id="L2885" class="ln">  2885&nbsp;&nbsp;</span>	v.grow(n)
<span id="L2886" class="ln">  2886&nbsp;&nbsp;</span>}
<span id="L2887" class="ln">  2887&nbsp;&nbsp;</span>
<span id="L2888" class="ln">  2888&nbsp;&nbsp;</span><span class="comment">// grow is identical to Grow but does not check for assignability.</span>
<span id="L2889" class="ln">  2889&nbsp;&nbsp;</span>func (v Value) grow(n int) {
<span id="L2890" class="ln">  2890&nbsp;&nbsp;</span>	p := (*unsafeheader.Slice)(v.ptr)
<span id="L2891" class="ln">  2891&nbsp;&nbsp;</span>	switch {
<span id="L2892" class="ln">  2892&nbsp;&nbsp;</span>	case n &lt; 0:
<span id="L2893" class="ln">  2893&nbsp;&nbsp;</span>		panic(&#34;reflect.Value.Grow: negative len&#34;)
<span id="L2894" class="ln">  2894&nbsp;&nbsp;</span>	case p.Len+n &lt; 0:
<span id="L2895" class="ln">  2895&nbsp;&nbsp;</span>		panic(&#34;reflect.Value.Grow: slice overflow&#34;)
<span id="L2896" class="ln">  2896&nbsp;&nbsp;</span>	case p.Len+n &gt; p.Cap:
<span id="L2897" class="ln">  2897&nbsp;&nbsp;</span>		t := v.typ().Elem()
<span id="L2898" class="ln">  2898&nbsp;&nbsp;</span>		*p = growslice(t, *p, n)
<span id="L2899" class="ln">  2899&nbsp;&nbsp;</span>	}
<span id="L2900" class="ln">  2900&nbsp;&nbsp;</span>}
<span id="L2901" class="ln">  2901&nbsp;&nbsp;</span>
<span id="L2902" class="ln">  2902&nbsp;&nbsp;</span><span class="comment">// extendSlice extends a slice by n elements.</span>
<span id="L2903" class="ln">  2903&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2904" class="ln">  2904&nbsp;&nbsp;</span><span class="comment">// Unlike Value.grow, which modifies the slice in place and</span>
<span id="L2905" class="ln">  2905&nbsp;&nbsp;</span><span class="comment">// does not change the length of the slice in place,</span>
<span id="L2906" class="ln">  2906&nbsp;&nbsp;</span><span class="comment">// extendSlice returns a new slice value with the length</span>
<span id="L2907" class="ln">  2907&nbsp;&nbsp;</span><span class="comment">// incremented by the number of specified elements.</span>
<span id="L2908" class="ln">  2908&nbsp;&nbsp;</span>func (v Value) extendSlice(n int) Value {
<span id="L2909" class="ln">  2909&nbsp;&nbsp;</span>	v.mustBeExported()
<span id="L2910" class="ln">  2910&nbsp;&nbsp;</span>	v.mustBe(Slice)
<span id="L2911" class="ln">  2911&nbsp;&nbsp;</span>
<span id="L2912" class="ln">  2912&nbsp;&nbsp;</span>	<span class="comment">// Shallow copy the slice header to avoid mutating the source slice.</span>
<span id="L2913" class="ln">  2913&nbsp;&nbsp;</span>	sh := *(*unsafeheader.Slice)(v.ptr)
<span id="L2914" class="ln">  2914&nbsp;&nbsp;</span>	s := &amp;sh
<span id="L2915" class="ln">  2915&nbsp;&nbsp;</span>	v.ptr = unsafe.Pointer(s)
<span id="L2916" class="ln">  2916&nbsp;&nbsp;</span>	v.flag = flagIndir | flag(Slice) <span class="comment">// equivalent flag to MakeSlice</span>
<span id="L2917" class="ln">  2917&nbsp;&nbsp;</span>
<span id="L2918" class="ln">  2918&nbsp;&nbsp;</span>	v.grow(n) <span class="comment">// fine to treat as assignable since we allocate a new slice header</span>
<span id="L2919" class="ln">  2919&nbsp;&nbsp;</span>	s.Len += n
<span id="L2920" class="ln">  2920&nbsp;&nbsp;</span>	return v
<span id="L2921" class="ln">  2921&nbsp;&nbsp;</span>}
<span id="L2922" class="ln">  2922&nbsp;&nbsp;</span>
<span id="L2923" class="ln">  2923&nbsp;&nbsp;</span><span class="comment">// Clear clears the contents of a map or zeros the contents of a slice.</span>
<span id="L2924" class="ln">  2924&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2925" class="ln">  2925&nbsp;&nbsp;</span><span class="comment">// It panics if v&#39;s Kind is not [Map] or [Slice].</span>
<span id="L2926" class="ln">  2926&nbsp;&nbsp;</span>func (v Value) Clear() {
<span id="L2927" class="ln">  2927&nbsp;&nbsp;</span>	switch v.Kind() {
<span id="L2928" class="ln">  2928&nbsp;&nbsp;</span>	case Slice:
<span id="L2929" class="ln">  2929&nbsp;&nbsp;</span>		sh := *(*unsafeheader.Slice)(v.ptr)
<span id="L2930" class="ln">  2930&nbsp;&nbsp;</span>		st := (*sliceType)(unsafe.Pointer(v.typ()))
<span id="L2931" class="ln">  2931&nbsp;&nbsp;</span>		typedarrayclear(st.Elem, sh.Data, sh.Len)
<span id="L2932" class="ln">  2932&nbsp;&nbsp;</span>	case Map:
<span id="L2933" class="ln">  2933&nbsp;&nbsp;</span>		mapclear(v.typ(), v.pointer())
<span id="L2934" class="ln">  2934&nbsp;&nbsp;</span>	default:
<span id="L2935" class="ln">  2935&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Value.Clear&#34;, v.Kind()})
<span id="L2936" class="ln">  2936&nbsp;&nbsp;</span>	}
<span id="L2937" class="ln">  2937&nbsp;&nbsp;</span>}
<span id="L2938" class="ln">  2938&nbsp;&nbsp;</span>
<span id="L2939" class="ln">  2939&nbsp;&nbsp;</span><span class="comment">// Append appends the values x to a slice s and returns the resulting slice.</span>
<span id="L2940" class="ln">  2940&nbsp;&nbsp;</span><span class="comment">// As in Go, each x&#39;s value must be assignable to the slice&#39;s element type.</span>
<span id="L2941" class="ln">  2941&nbsp;&nbsp;</span>func Append(s Value, x ...Value) Value {
<span id="L2942" class="ln">  2942&nbsp;&nbsp;</span>	s.mustBe(Slice)
<span id="L2943" class="ln">  2943&nbsp;&nbsp;</span>	n := s.Len()
<span id="L2944" class="ln">  2944&nbsp;&nbsp;</span>	s = s.extendSlice(len(x))
<span id="L2945" class="ln">  2945&nbsp;&nbsp;</span>	for i, v := range x {
<span id="L2946" class="ln">  2946&nbsp;&nbsp;</span>		s.Index(n + i).Set(v)
<span id="L2947" class="ln">  2947&nbsp;&nbsp;</span>	}
<span id="L2948" class="ln">  2948&nbsp;&nbsp;</span>	return s
<span id="L2949" class="ln">  2949&nbsp;&nbsp;</span>}
<span id="L2950" class="ln">  2950&nbsp;&nbsp;</span>
<span id="L2951" class="ln">  2951&nbsp;&nbsp;</span><span class="comment">// AppendSlice appends a slice t to a slice s and returns the resulting slice.</span>
<span id="L2952" class="ln">  2952&nbsp;&nbsp;</span><span class="comment">// The slices s and t must have the same element type.</span>
<span id="L2953" class="ln">  2953&nbsp;&nbsp;</span>func AppendSlice(s, t Value) Value {
<span id="L2954" class="ln">  2954&nbsp;&nbsp;</span>	s.mustBe(Slice)
<span id="L2955" class="ln">  2955&nbsp;&nbsp;</span>	t.mustBe(Slice)
<span id="L2956" class="ln">  2956&nbsp;&nbsp;</span>	typesMustMatch(&#34;reflect.AppendSlice&#34;, s.Type().Elem(), t.Type().Elem())
<span id="L2957" class="ln">  2957&nbsp;&nbsp;</span>	ns := s.Len()
<span id="L2958" class="ln">  2958&nbsp;&nbsp;</span>	nt := t.Len()
<span id="L2959" class="ln">  2959&nbsp;&nbsp;</span>	s = s.extendSlice(nt)
<span id="L2960" class="ln">  2960&nbsp;&nbsp;</span>	Copy(s.Slice(ns, ns+nt), t)
<span id="L2961" class="ln">  2961&nbsp;&nbsp;</span>	return s
<span id="L2962" class="ln">  2962&nbsp;&nbsp;</span>}
<span id="L2963" class="ln">  2963&nbsp;&nbsp;</span>
<span id="L2964" class="ln">  2964&nbsp;&nbsp;</span><span class="comment">// Copy copies the contents of src into dst until either</span>
<span id="L2965" class="ln">  2965&nbsp;&nbsp;</span><span class="comment">// dst has been filled or src has been exhausted.</span>
<span id="L2966" class="ln">  2966&nbsp;&nbsp;</span><span class="comment">// It returns the number of elements copied.</span>
<span id="L2967" class="ln">  2967&nbsp;&nbsp;</span><span class="comment">// Dst and src each must have kind [Slice] or [Array], and</span>
<span id="L2968" class="ln">  2968&nbsp;&nbsp;</span><span class="comment">// dst and src must have the same element type.</span>
<span id="L2969" class="ln">  2969&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2970" class="ln">  2970&nbsp;&nbsp;</span><span class="comment">// As a special case, src can have kind [String] if the element type of dst is kind [Uint8].</span>
<span id="L2971" class="ln">  2971&nbsp;&nbsp;</span>func Copy(dst, src Value) int {
<span id="L2972" class="ln">  2972&nbsp;&nbsp;</span>	dk := dst.kind()
<span id="L2973" class="ln">  2973&nbsp;&nbsp;</span>	if dk != Array &amp;&amp; dk != Slice {
<span id="L2974" class="ln">  2974&nbsp;&nbsp;</span>		panic(&amp;ValueError{&#34;reflect.Copy&#34;, dk})
<span id="L2975" class="ln">  2975&nbsp;&nbsp;</span>	}
<span id="L2976" class="ln">  2976&nbsp;&nbsp;</span>	if dk == Array {
<span id="L2977" class="ln">  2977&nbsp;&nbsp;</span>		dst.mustBeAssignable()
<span id="L2978" class="ln">  2978&nbsp;&nbsp;</span>	}
<span id="L2979" class="ln">  2979&nbsp;&nbsp;</span>	dst.mustBeExported()
<span id="L2980" class="ln">  2980&nbsp;&nbsp;</span>
<span id="L2981" class="ln">  2981&nbsp;&nbsp;</span>	sk := src.kind()
<span id="L2982" class="ln">  2982&nbsp;&nbsp;</span>	var stringCopy bool
<span id="L2983" class="ln">  2983&nbsp;&nbsp;</span>	if sk != Array &amp;&amp; sk != Slice {
<span id="L2984" class="ln">  2984&nbsp;&nbsp;</span>		stringCopy = sk == String &amp;&amp; dst.typ().Elem().Kind() == abi.Uint8
<span id="L2985" class="ln">  2985&nbsp;&nbsp;</span>		if !stringCopy {
<span id="L2986" class="ln">  2986&nbsp;&nbsp;</span>			panic(&amp;ValueError{&#34;reflect.Copy&#34;, sk})
<span id="L2987" class="ln">  2987&nbsp;&nbsp;</span>		}
<span id="L2988" class="ln">  2988&nbsp;&nbsp;</span>	}
<span id="L2989" class="ln">  2989&nbsp;&nbsp;</span>	src.mustBeExported()
<span id="L2990" class="ln">  2990&nbsp;&nbsp;</span>
<span id="L2991" class="ln">  2991&nbsp;&nbsp;</span>	de := dst.typ().Elem()
<span id="L2992" class="ln">  2992&nbsp;&nbsp;</span>	if !stringCopy {
<span id="L2993" class="ln">  2993&nbsp;&nbsp;</span>		se := src.typ().Elem()
<span id="L2994" class="ln">  2994&nbsp;&nbsp;</span>		typesMustMatch(&#34;reflect.Copy&#34;, toType(de), toType(se))
<span id="L2995" class="ln">  2995&nbsp;&nbsp;</span>	}
<span id="L2996" class="ln">  2996&nbsp;&nbsp;</span>
<span id="L2997" class="ln">  2997&nbsp;&nbsp;</span>	var ds, ss unsafeheader.Slice
<span id="L2998" class="ln">  2998&nbsp;&nbsp;</span>	if dk == Array {
<span id="L2999" class="ln">  2999&nbsp;&nbsp;</span>		ds.Data = dst.ptr
<span id="L3000" class="ln">  3000&nbsp;&nbsp;</span>		ds.Len = dst.Len()
<span id="L3001" class="ln">  3001&nbsp;&nbsp;</span>		ds.Cap = ds.Len
<span id="L3002" class="ln">  3002&nbsp;&nbsp;</span>	} else {
<span id="L3003" class="ln">  3003&nbsp;&nbsp;</span>		ds = *(*unsafeheader.Slice)(dst.ptr)
<span id="L3004" class="ln">  3004&nbsp;&nbsp;</span>	}
<span id="L3005" class="ln">  3005&nbsp;&nbsp;</span>	if sk == Array {
<span id="L3006" class="ln">  3006&nbsp;&nbsp;</span>		ss.Data = src.ptr
<span id="L3007" class="ln">  3007&nbsp;&nbsp;</span>		ss.Len = src.Len()
<span id="L3008" class="ln">  3008&nbsp;&nbsp;</span>		ss.Cap = ss.Len
<span id="L3009" class="ln">  3009&nbsp;&nbsp;</span>	} else if sk == Slice {
<span id="L3010" class="ln">  3010&nbsp;&nbsp;</span>		ss = *(*unsafeheader.Slice)(src.ptr)
<span id="L3011" class="ln">  3011&nbsp;&nbsp;</span>	} else {
<span id="L3012" class="ln">  3012&nbsp;&nbsp;</span>		sh := *(*unsafeheader.String)(src.ptr)
<span id="L3013" class="ln">  3013&nbsp;&nbsp;</span>		ss.Data = sh.Data
<span id="L3014" class="ln">  3014&nbsp;&nbsp;</span>		ss.Len = sh.Len
<span id="L3015" class="ln">  3015&nbsp;&nbsp;</span>		ss.Cap = sh.Len
<span id="L3016" class="ln">  3016&nbsp;&nbsp;</span>	}
<span id="L3017" class="ln">  3017&nbsp;&nbsp;</span>
<span id="L3018" class="ln">  3018&nbsp;&nbsp;</span>	return typedslicecopy(de.Common(), ds, ss)
<span id="L3019" class="ln">  3019&nbsp;&nbsp;</span>}
<span id="L3020" class="ln">  3020&nbsp;&nbsp;</span>
<span id="L3021" class="ln">  3021&nbsp;&nbsp;</span><span class="comment">// A runtimeSelect is a single case passed to rselect.</span>
<span id="L3022" class="ln">  3022&nbsp;&nbsp;</span><span class="comment">// This must match ../runtime/select.go:/runtimeSelect</span>
<span id="L3023" class="ln">  3023&nbsp;&nbsp;</span>type runtimeSelect struct {
<span id="L3024" class="ln">  3024&nbsp;&nbsp;</span>	dir SelectDir      <span class="comment">// SelectSend, SelectRecv or SelectDefault</span>
<span id="L3025" class="ln">  3025&nbsp;&nbsp;</span>	typ *rtype         <span class="comment">// channel type</span>
<span id="L3026" class="ln">  3026&nbsp;&nbsp;</span>	ch  unsafe.Pointer <span class="comment">// channel</span>
<span id="L3027" class="ln">  3027&nbsp;&nbsp;</span>	val unsafe.Pointer <span class="comment">// ptr to data (SendDir) or ptr to receive buffer (RecvDir)</span>
<span id="L3028" class="ln">  3028&nbsp;&nbsp;</span>}
<span id="L3029" class="ln">  3029&nbsp;&nbsp;</span>
<span id="L3030" class="ln">  3030&nbsp;&nbsp;</span><span class="comment">// rselect runs a select. It returns the index of the chosen case.</span>
<span id="L3031" class="ln">  3031&nbsp;&nbsp;</span><span class="comment">// If the case was a receive, val is filled in with the received value.</span>
<span id="L3032" class="ln">  3032&nbsp;&nbsp;</span><span class="comment">// The conventional OK bool indicates whether the receive corresponds</span>
<span id="L3033" class="ln">  3033&nbsp;&nbsp;</span><span class="comment">// to a sent value.</span>
<span id="L3034" class="ln">  3034&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3035" class="ln">  3035&nbsp;&nbsp;</span><span class="comment">// rselect generally doesn&#39;t escape the runtimeSelect slice, except</span>
<span id="L3036" class="ln">  3036&nbsp;&nbsp;</span><span class="comment">// that for the send case the value to send needs to escape. We don&#39;t</span>
<span id="L3037" class="ln">  3037&nbsp;&nbsp;</span><span class="comment">// have a way to represent that in the function signature. So we handle</span>
<span id="L3038" class="ln">  3038&nbsp;&nbsp;</span><span class="comment">// that with a forced escape in function Select.</span>
<span id="L3039" class="ln">  3039&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3040" class="ln">  3040&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3041" class="ln">  3041&nbsp;&nbsp;</span>func rselect([]runtimeSelect) (chosen int, recvOK bool)
<span id="L3042" class="ln">  3042&nbsp;&nbsp;</span>
<span id="L3043" class="ln">  3043&nbsp;&nbsp;</span><span class="comment">// A SelectDir describes the communication direction of a select case.</span>
<span id="L3044" class="ln">  3044&nbsp;&nbsp;</span>type SelectDir int
<span id="L3045" class="ln">  3045&nbsp;&nbsp;</span>
<span id="L3046" class="ln">  3046&nbsp;&nbsp;</span><span class="comment">// NOTE: These values must match ../runtime/select.go:/selectDir.</span>
<span id="L3047" class="ln">  3047&nbsp;&nbsp;</span>
<span id="L3048" class="ln">  3048&nbsp;&nbsp;</span>const (
<span id="L3049" class="ln">  3049&nbsp;&nbsp;</span>	_             SelectDir = iota
<span id="L3050" class="ln">  3050&nbsp;&nbsp;</span>	SelectSend              <span class="comment">// case Chan &lt;- Send</span>
<span id="L3051" class="ln">  3051&nbsp;&nbsp;</span>	SelectRecv              <span class="comment">// case &lt;-Chan:</span>
<span id="L3052" class="ln">  3052&nbsp;&nbsp;</span>	SelectDefault           <span class="comment">// default</span>
<span id="L3053" class="ln">  3053&nbsp;&nbsp;</span>)
<span id="L3054" class="ln">  3054&nbsp;&nbsp;</span>
<span id="L3055" class="ln">  3055&nbsp;&nbsp;</span><span class="comment">// A SelectCase describes a single case in a select operation.</span>
<span id="L3056" class="ln">  3056&nbsp;&nbsp;</span><span class="comment">// The kind of case depends on Dir, the communication direction.</span>
<span id="L3057" class="ln">  3057&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3058" class="ln">  3058&nbsp;&nbsp;</span><span class="comment">// If Dir is SelectDefault, the case represents a default case.</span>
<span id="L3059" class="ln">  3059&nbsp;&nbsp;</span><span class="comment">// Chan and Send must be zero Values.</span>
<span id="L3060" class="ln">  3060&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3061" class="ln">  3061&nbsp;&nbsp;</span><span class="comment">// If Dir is SelectSend, the case represents a send operation.</span>
<span id="L3062" class="ln">  3062&nbsp;&nbsp;</span><span class="comment">// Normally Chan&#39;s underlying value must be a channel, and Send&#39;s underlying value must be</span>
<span id="L3063" class="ln">  3063&nbsp;&nbsp;</span><span class="comment">// assignable to the channel&#39;s element type. As a special case, if Chan is a zero Value,</span>
<span id="L3064" class="ln">  3064&nbsp;&nbsp;</span><span class="comment">// then the case is ignored, and the field Send will also be ignored and may be either zero</span>
<span id="L3065" class="ln">  3065&nbsp;&nbsp;</span><span class="comment">// or non-zero.</span>
<span id="L3066" class="ln">  3066&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3067" class="ln">  3067&nbsp;&nbsp;</span><span class="comment">// If Dir is SelectRecv, the case represents a receive operation.</span>
<span id="L3068" class="ln">  3068&nbsp;&nbsp;</span><span class="comment">// Normally Chan&#39;s underlying value must be a channel and Send must be a zero Value.</span>
<span id="L3069" class="ln">  3069&nbsp;&nbsp;</span><span class="comment">// If Chan is a zero Value, then the case is ignored, but Send must still be a zero Value.</span>
<span id="L3070" class="ln">  3070&nbsp;&nbsp;</span><span class="comment">// When a receive operation is selected, the received Value is returned by Select.</span>
<span id="L3071" class="ln">  3071&nbsp;&nbsp;</span><span class="selection">type SelectCase struct {
<span id="L3072" class="ln">  3072&nbsp;&nbsp;</span>	Dir  SelectDir </span><span class="selection-comment">// direction of case</span><span class="selection">
<span id="L3073" class="ln">  3073&nbsp;&nbsp;</span>	Chan Value     </span><span class="selection-comment">// channel to use (for send or receive)</span><span class="selection">
<span id="L3074" class="ln">  3074&nbsp;&nbsp;</span>	Send Value     </span><span class="selection-comment">// value to send (for send)</span><span class="selection">
<span id="L3075" class="ln">  3075&nbsp;&nbsp;</span>}</span>
<span id="L3076" class="ln">  3076&nbsp;&nbsp;</span>
<span id="L3077" class="ln">  3077&nbsp;&nbsp;</span><span class="comment">// Select executes a select operation described by the list of cases.</span>
<span id="L3078" class="ln">  3078&nbsp;&nbsp;</span><span class="comment">// Like the Go select statement, it blocks until at least one of the cases</span>
<span id="L3079" class="ln">  3079&nbsp;&nbsp;</span><span class="comment">// can proceed, makes a uniform pseudo-random choice,</span>
<span id="L3080" class="ln">  3080&nbsp;&nbsp;</span><span class="comment">// and then executes that case. It returns the index of the chosen case</span>
<span id="L3081" class="ln">  3081&nbsp;&nbsp;</span><span class="comment">// and, if that case was a receive operation, the value received and a</span>
<span id="L3082" class="ln">  3082&nbsp;&nbsp;</span><span class="comment">// boolean indicating whether the value corresponds to a send on the channel</span>
<span id="L3083" class="ln">  3083&nbsp;&nbsp;</span><span class="comment">// (as opposed to a zero value received because the channel is closed).</span>
<span id="L3084" class="ln">  3084&nbsp;&nbsp;</span><span class="comment">// Select supports a maximum of 65536 cases.</span>
<span id="L3085" class="ln">  3085&nbsp;&nbsp;</span>func Select(cases []SelectCase) (chosen int, recv Value, recvOK bool) {
<span id="L3086" class="ln">  3086&nbsp;&nbsp;</span>	if len(cases) &gt; 65536 {
<span id="L3087" class="ln">  3087&nbsp;&nbsp;</span>		panic(&#34;reflect.Select: too many cases (max 65536)&#34;)
<span id="L3088" class="ln">  3088&nbsp;&nbsp;</span>	}
<span id="L3089" class="ln">  3089&nbsp;&nbsp;</span>	<span class="comment">// NOTE: Do not trust that caller is not modifying cases data underfoot.</span>
<span id="L3090" class="ln">  3090&nbsp;&nbsp;</span>	<span class="comment">// The range is safe because the caller cannot modify our copy of the len</span>
<span id="L3091" class="ln">  3091&nbsp;&nbsp;</span>	<span class="comment">// and each iteration makes its own copy of the value c.</span>
<span id="L3092" class="ln">  3092&nbsp;&nbsp;</span>	var runcases []runtimeSelect
<span id="L3093" class="ln">  3093&nbsp;&nbsp;</span>	if len(cases) &gt; 4 {
<span id="L3094" class="ln">  3094&nbsp;&nbsp;</span>		<span class="comment">// Slice is heap allocated due to runtime dependent capacity.</span>
<span id="L3095" class="ln">  3095&nbsp;&nbsp;</span>		runcases = make([]runtimeSelect, len(cases))
<span id="L3096" class="ln">  3096&nbsp;&nbsp;</span>	} else {
<span id="L3097" class="ln">  3097&nbsp;&nbsp;</span>		<span class="comment">// Slice can be stack allocated due to constant capacity.</span>
<span id="L3098" class="ln">  3098&nbsp;&nbsp;</span>		runcases = make([]runtimeSelect, len(cases), 4)
<span id="L3099" class="ln">  3099&nbsp;&nbsp;</span>	}
<span id="L3100" class="ln">  3100&nbsp;&nbsp;</span>
<span id="L3101" class="ln">  3101&nbsp;&nbsp;</span>	haveDefault := false
<span id="L3102" class="ln">  3102&nbsp;&nbsp;</span>	for i, c := range cases {
<span id="L3103" class="ln">  3103&nbsp;&nbsp;</span>		rc := &amp;runcases[i]
<span id="L3104" class="ln">  3104&nbsp;&nbsp;</span>		rc.dir = c.Dir
<span id="L3105" class="ln">  3105&nbsp;&nbsp;</span>		switch c.Dir {
<span id="L3106" class="ln">  3106&nbsp;&nbsp;</span>		default:
<span id="L3107" class="ln">  3107&nbsp;&nbsp;</span>			panic(&#34;reflect.Select: invalid Dir&#34;)
<span id="L3108" class="ln">  3108&nbsp;&nbsp;</span>
<span id="L3109" class="ln">  3109&nbsp;&nbsp;</span>		case SelectDefault: <span class="comment">// default</span>
<span id="L3110" class="ln">  3110&nbsp;&nbsp;</span>			if haveDefault {
<span id="L3111" class="ln">  3111&nbsp;&nbsp;</span>				panic(&#34;reflect.Select: multiple default cases&#34;)
<span id="L3112" class="ln">  3112&nbsp;&nbsp;</span>			}
<span id="L3113" class="ln">  3113&nbsp;&nbsp;</span>			haveDefault = true
<span id="L3114" class="ln">  3114&nbsp;&nbsp;</span>			if c.Chan.IsValid() {
<span id="L3115" class="ln">  3115&nbsp;&nbsp;</span>				panic(&#34;reflect.Select: default case has Chan value&#34;)
<span id="L3116" class="ln">  3116&nbsp;&nbsp;</span>			}
<span id="L3117" class="ln">  3117&nbsp;&nbsp;</span>			if c.Send.IsValid() {
<span id="L3118" class="ln">  3118&nbsp;&nbsp;</span>				panic(&#34;reflect.Select: default case has Send value&#34;)
<span id="L3119" class="ln">  3119&nbsp;&nbsp;</span>			}
<span id="L3120" class="ln">  3120&nbsp;&nbsp;</span>
<span id="L3121" class="ln">  3121&nbsp;&nbsp;</span>		case SelectSend:
<span id="L3122" class="ln">  3122&nbsp;&nbsp;</span>			ch := c.Chan
<span id="L3123" class="ln">  3123&nbsp;&nbsp;</span>			if !ch.IsValid() {
<span id="L3124" class="ln">  3124&nbsp;&nbsp;</span>				break
<span id="L3125" class="ln">  3125&nbsp;&nbsp;</span>			}
<span id="L3126" class="ln">  3126&nbsp;&nbsp;</span>			ch.mustBe(Chan)
<span id="L3127" class="ln">  3127&nbsp;&nbsp;</span>			ch.mustBeExported()
<span id="L3128" class="ln">  3128&nbsp;&nbsp;</span>			tt := (*chanType)(unsafe.Pointer(ch.typ()))
<span id="L3129" class="ln">  3129&nbsp;&nbsp;</span>			if ChanDir(tt.Dir)&amp;SendDir == 0 {
<span id="L3130" class="ln">  3130&nbsp;&nbsp;</span>				panic(&#34;reflect.Select: SendDir case using recv-only channel&#34;)
<span id="L3131" class="ln">  3131&nbsp;&nbsp;</span>			}
<span id="L3132" class="ln">  3132&nbsp;&nbsp;</span>			rc.ch = ch.pointer()
<span id="L3133" class="ln">  3133&nbsp;&nbsp;</span>			rc.typ = toRType(&amp;tt.Type)
<span id="L3134" class="ln">  3134&nbsp;&nbsp;</span>			v := c.Send
<span id="L3135" class="ln">  3135&nbsp;&nbsp;</span>			if !v.IsValid() {
<span id="L3136" class="ln">  3136&nbsp;&nbsp;</span>				panic(&#34;reflect.Select: SendDir case missing Send value&#34;)
<span id="L3137" class="ln">  3137&nbsp;&nbsp;</span>			}
<span id="L3138" class="ln">  3138&nbsp;&nbsp;</span>			v.mustBeExported()
<span id="L3139" class="ln">  3139&nbsp;&nbsp;</span>			v = v.assignTo(&#34;reflect.Select&#34;, tt.Elem, nil)
<span id="L3140" class="ln">  3140&nbsp;&nbsp;</span>			if v.flag&amp;flagIndir != 0 {
<span id="L3141" class="ln">  3141&nbsp;&nbsp;</span>				rc.val = v.ptr
<span id="L3142" class="ln">  3142&nbsp;&nbsp;</span>			} else {
<span id="L3143" class="ln">  3143&nbsp;&nbsp;</span>				rc.val = unsafe.Pointer(&amp;v.ptr)
<span id="L3144" class="ln">  3144&nbsp;&nbsp;</span>			}
<span id="L3145" class="ln">  3145&nbsp;&nbsp;</span>			<span class="comment">// The value to send needs to escape. See the comment at rselect for</span>
<span id="L3146" class="ln">  3146&nbsp;&nbsp;</span>			<span class="comment">// why we need forced escape.</span>
<span id="L3147" class="ln">  3147&nbsp;&nbsp;</span>			escapes(rc.val)
<span id="L3148" class="ln">  3148&nbsp;&nbsp;</span>
<span id="L3149" class="ln">  3149&nbsp;&nbsp;</span>		case SelectRecv:
<span id="L3150" class="ln">  3150&nbsp;&nbsp;</span>			if c.Send.IsValid() {
<span id="L3151" class="ln">  3151&nbsp;&nbsp;</span>				panic(&#34;reflect.Select: RecvDir case has Send value&#34;)
<span id="L3152" class="ln">  3152&nbsp;&nbsp;</span>			}
<span id="L3153" class="ln">  3153&nbsp;&nbsp;</span>			ch := c.Chan
<span id="L3154" class="ln">  3154&nbsp;&nbsp;</span>			if !ch.IsValid() {
<span id="L3155" class="ln">  3155&nbsp;&nbsp;</span>				break
<span id="L3156" class="ln">  3156&nbsp;&nbsp;</span>			}
<span id="L3157" class="ln">  3157&nbsp;&nbsp;</span>			ch.mustBe(Chan)
<span id="L3158" class="ln">  3158&nbsp;&nbsp;</span>			ch.mustBeExported()
<span id="L3159" class="ln">  3159&nbsp;&nbsp;</span>			tt := (*chanType)(unsafe.Pointer(ch.typ()))
<span id="L3160" class="ln">  3160&nbsp;&nbsp;</span>			if ChanDir(tt.Dir)&amp;RecvDir == 0 {
<span id="L3161" class="ln">  3161&nbsp;&nbsp;</span>				panic(&#34;reflect.Select: RecvDir case using send-only channel&#34;)
<span id="L3162" class="ln">  3162&nbsp;&nbsp;</span>			}
<span id="L3163" class="ln">  3163&nbsp;&nbsp;</span>			rc.ch = ch.pointer()
<span id="L3164" class="ln">  3164&nbsp;&nbsp;</span>			rc.typ = toRType(&amp;tt.Type)
<span id="L3165" class="ln">  3165&nbsp;&nbsp;</span>			rc.val = unsafe_New(tt.Elem)
<span id="L3166" class="ln">  3166&nbsp;&nbsp;</span>		}
<span id="L3167" class="ln">  3167&nbsp;&nbsp;</span>	}
<span id="L3168" class="ln">  3168&nbsp;&nbsp;</span>
<span id="L3169" class="ln">  3169&nbsp;&nbsp;</span>	chosen, recvOK = rselect(runcases)
<span id="L3170" class="ln">  3170&nbsp;&nbsp;</span>	if runcases[chosen].dir == SelectRecv {
<span id="L3171" class="ln">  3171&nbsp;&nbsp;</span>		tt := (*chanType)(unsafe.Pointer(runcases[chosen].typ))
<span id="L3172" class="ln">  3172&nbsp;&nbsp;</span>		t := tt.Elem
<span id="L3173" class="ln">  3173&nbsp;&nbsp;</span>		p := runcases[chosen].val
<span id="L3174" class="ln">  3174&nbsp;&nbsp;</span>		fl := flag(t.Kind())
<span id="L3175" class="ln">  3175&nbsp;&nbsp;</span>		if t.IfaceIndir() {
<span id="L3176" class="ln">  3176&nbsp;&nbsp;</span>			recv = Value{t, p, fl | flagIndir}
<span id="L3177" class="ln">  3177&nbsp;&nbsp;</span>		} else {
<span id="L3178" class="ln">  3178&nbsp;&nbsp;</span>			recv = Value{t, *(*unsafe.Pointer)(p), fl}
<span id="L3179" class="ln">  3179&nbsp;&nbsp;</span>		}
<span id="L3180" class="ln">  3180&nbsp;&nbsp;</span>	}
<span id="L3181" class="ln">  3181&nbsp;&nbsp;</span>	return chosen, recv, recvOK
<span id="L3182" class="ln">  3182&nbsp;&nbsp;</span>}
<span id="L3183" class="ln">  3183&nbsp;&nbsp;</span>
<span id="L3184" class="ln">  3184&nbsp;&nbsp;</span><span class="comment">/*
<span id="L3185" class="ln">  3185&nbsp;&nbsp;</span> * constructors
<span id="L3186" class="ln">  3186&nbsp;&nbsp;</span> */</span>
<span id="L3187" class="ln">  3187&nbsp;&nbsp;</span>
<span id="L3188" class="ln">  3188&nbsp;&nbsp;</span><span class="comment">// implemented in package runtime</span>
<span id="L3189" class="ln">  3189&nbsp;&nbsp;</span>
<span id="L3190" class="ln">  3190&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3191" class="ln">  3191&nbsp;&nbsp;</span>func unsafe_New(*abi.Type) unsafe.Pointer
<span id="L3192" class="ln">  3192&nbsp;&nbsp;</span>
<span id="L3193" class="ln">  3193&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3194" class="ln">  3194&nbsp;&nbsp;</span>func unsafe_NewArray(*abi.Type, int) unsafe.Pointer
<span id="L3195" class="ln">  3195&nbsp;&nbsp;</span>
<span id="L3196" class="ln">  3196&nbsp;&nbsp;</span><span class="comment">// MakeSlice creates a new zero-initialized slice value</span>
<span id="L3197" class="ln">  3197&nbsp;&nbsp;</span><span class="comment">// for the specified slice type, length, and capacity.</span>
<span id="L3198" class="ln">  3198&nbsp;&nbsp;</span>func MakeSlice(typ Type, len, cap int) Value {
<span id="L3199" class="ln">  3199&nbsp;&nbsp;</span>	if typ.Kind() != Slice {
<span id="L3200" class="ln">  3200&nbsp;&nbsp;</span>		panic(&#34;reflect.MakeSlice of non-slice type&#34;)
<span id="L3201" class="ln">  3201&nbsp;&nbsp;</span>	}
<span id="L3202" class="ln">  3202&nbsp;&nbsp;</span>	if len &lt; 0 {
<span id="L3203" class="ln">  3203&nbsp;&nbsp;</span>		panic(&#34;reflect.MakeSlice: negative len&#34;)
<span id="L3204" class="ln">  3204&nbsp;&nbsp;</span>	}
<span id="L3205" class="ln">  3205&nbsp;&nbsp;</span>	if cap &lt; 0 {
<span id="L3206" class="ln">  3206&nbsp;&nbsp;</span>		panic(&#34;reflect.MakeSlice: negative cap&#34;)
<span id="L3207" class="ln">  3207&nbsp;&nbsp;</span>	}
<span id="L3208" class="ln">  3208&nbsp;&nbsp;</span>	if len &gt; cap {
<span id="L3209" class="ln">  3209&nbsp;&nbsp;</span>		panic(&#34;reflect.MakeSlice: len &gt; cap&#34;)
<span id="L3210" class="ln">  3210&nbsp;&nbsp;</span>	}
<span id="L3211" class="ln">  3211&nbsp;&nbsp;</span>
<span id="L3212" class="ln">  3212&nbsp;&nbsp;</span>	s := unsafeheader.Slice{Data: unsafe_NewArray(&amp;(typ.Elem().(*rtype).t), cap), Len: len, Cap: cap}
<span id="L3213" class="ln">  3213&nbsp;&nbsp;</span>	return Value{&amp;typ.(*rtype).t, unsafe.Pointer(&amp;s), flagIndir | flag(Slice)}
<span id="L3214" class="ln">  3214&nbsp;&nbsp;</span>}
<span id="L3215" class="ln">  3215&nbsp;&nbsp;</span>
<span id="L3216" class="ln">  3216&nbsp;&nbsp;</span><span class="comment">// MakeChan creates a new channel with the specified type and buffer size.</span>
<span id="L3217" class="ln">  3217&nbsp;&nbsp;</span>func MakeChan(typ Type, buffer int) Value {
<span id="L3218" class="ln">  3218&nbsp;&nbsp;</span>	if typ.Kind() != Chan {
<span id="L3219" class="ln">  3219&nbsp;&nbsp;</span>		panic(&#34;reflect.MakeChan of non-chan type&#34;)
<span id="L3220" class="ln">  3220&nbsp;&nbsp;</span>	}
<span id="L3221" class="ln">  3221&nbsp;&nbsp;</span>	if buffer &lt; 0 {
<span id="L3222" class="ln">  3222&nbsp;&nbsp;</span>		panic(&#34;reflect.MakeChan: negative buffer size&#34;)
<span id="L3223" class="ln">  3223&nbsp;&nbsp;</span>	}
<span id="L3224" class="ln">  3224&nbsp;&nbsp;</span>	if typ.ChanDir() != BothDir {
<span id="L3225" class="ln">  3225&nbsp;&nbsp;</span>		panic(&#34;reflect.MakeChan: unidirectional channel type&#34;)
<span id="L3226" class="ln">  3226&nbsp;&nbsp;</span>	}
<span id="L3227" class="ln">  3227&nbsp;&nbsp;</span>	t := typ.common()
<span id="L3228" class="ln">  3228&nbsp;&nbsp;</span>	ch := makechan(t, buffer)
<span id="L3229" class="ln">  3229&nbsp;&nbsp;</span>	return Value{t, ch, flag(Chan)}
<span id="L3230" class="ln">  3230&nbsp;&nbsp;</span>}
<span id="L3231" class="ln">  3231&nbsp;&nbsp;</span>
<span id="L3232" class="ln">  3232&nbsp;&nbsp;</span><span class="comment">// MakeMap creates a new map with the specified type.</span>
<span id="L3233" class="ln">  3233&nbsp;&nbsp;</span>func MakeMap(typ Type) Value {
<span id="L3234" class="ln">  3234&nbsp;&nbsp;</span>	return MakeMapWithSize(typ, 0)
<span id="L3235" class="ln">  3235&nbsp;&nbsp;</span>}
<span id="L3236" class="ln">  3236&nbsp;&nbsp;</span>
<span id="L3237" class="ln">  3237&nbsp;&nbsp;</span><span class="comment">// MakeMapWithSize creates a new map with the specified type</span>
<span id="L3238" class="ln">  3238&nbsp;&nbsp;</span><span class="comment">// and initial space for approximately n elements.</span>
<span id="L3239" class="ln">  3239&nbsp;&nbsp;</span>func MakeMapWithSize(typ Type, n int) Value {
<span id="L3240" class="ln">  3240&nbsp;&nbsp;</span>	if typ.Kind() != Map {
<span id="L3241" class="ln">  3241&nbsp;&nbsp;</span>		panic(&#34;reflect.MakeMapWithSize of non-map type&#34;)
<span id="L3242" class="ln">  3242&nbsp;&nbsp;</span>	}
<span id="L3243" class="ln">  3243&nbsp;&nbsp;</span>	t := typ.common()
<span id="L3244" class="ln">  3244&nbsp;&nbsp;</span>	m := makemap(t, n)
<span id="L3245" class="ln">  3245&nbsp;&nbsp;</span>	return Value{t, m, flag(Map)}
<span id="L3246" class="ln">  3246&nbsp;&nbsp;</span>}
<span id="L3247" class="ln">  3247&nbsp;&nbsp;</span>
<span id="L3248" class="ln">  3248&nbsp;&nbsp;</span><span class="comment">// Indirect returns the value that v points to.</span>
<span id="L3249" class="ln">  3249&nbsp;&nbsp;</span><span class="comment">// If v is a nil pointer, Indirect returns a zero Value.</span>
<span id="L3250" class="ln">  3250&nbsp;&nbsp;</span><span class="comment">// If v is not a pointer, Indirect returns v.</span>
<span id="L3251" class="ln">  3251&nbsp;&nbsp;</span>func Indirect(v Value) Value {
<span id="L3252" class="ln">  3252&nbsp;&nbsp;</span>	if v.Kind() != Pointer {
<span id="L3253" class="ln">  3253&nbsp;&nbsp;</span>		return v
<span id="L3254" class="ln">  3254&nbsp;&nbsp;</span>	}
<span id="L3255" class="ln">  3255&nbsp;&nbsp;</span>	return v.Elem()
<span id="L3256" class="ln">  3256&nbsp;&nbsp;</span>}
<span id="L3257" class="ln">  3257&nbsp;&nbsp;</span>
<span id="L3258" class="ln">  3258&nbsp;&nbsp;</span><span class="comment">// ValueOf returns a new Value initialized to the concrete value</span>
<span id="L3259" class="ln">  3259&nbsp;&nbsp;</span><span class="comment">// stored in the interface i. ValueOf(nil) returns the zero Value.</span>
<span id="L3260" class="ln">  3260&nbsp;&nbsp;</span>func ValueOf(i any) Value {
<span id="L3261" class="ln">  3261&nbsp;&nbsp;</span>	if i == nil {
<span id="L3262" class="ln">  3262&nbsp;&nbsp;</span>		return Value{}
<span id="L3263" class="ln">  3263&nbsp;&nbsp;</span>	}
<span id="L3264" class="ln">  3264&nbsp;&nbsp;</span>	return unpackEface(i)
<span id="L3265" class="ln">  3265&nbsp;&nbsp;</span>}
<span id="L3266" class="ln">  3266&nbsp;&nbsp;</span>
<span id="L3267" class="ln">  3267&nbsp;&nbsp;</span><span class="comment">// Zero returns a Value representing the zero value for the specified type.</span>
<span id="L3268" class="ln">  3268&nbsp;&nbsp;</span><span class="comment">// The result is different from the zero value of the Value struct,</span>
<span id="L3269" class="ln">  3269&nbsp;&nbsp;</span><span class="comment">// which represents no value at all.</span>
<span id="L3270" class="ln">  3270&nbsp;&nbsp;</span><span class="comment">// For example, Zero(TypeOf(42)) returns a Value with Kind [Int] and value 0.</span>
<span id="L3271" class="ln">  3271&nbsp;&nbsp;</span><span class="comment">// The returned value is neither addressable nor settable.</span>
<span id="L3272" class="ln">  3272&nbsp;&nbsp;</span>func Zero(typ Type) Value {
<span id="L3273" class="ln">  3273&nbsp;&nbsp;</span>	if typ == nil {
<span id="L3274" class="ln">  3274&nbsp;&nbsp;</span>		panic(&#34;reflect: Zero(nil)&#34;)
<span id="L3275" class="ln">  3275&nbsp;&nbsp;</span>	}
<span id="L3276" class="ln">  3276&nbsp;&nbsp;</span>	t := &amp;typ.(*rtype).t
<span id="L3277" class="ln">  3277&nbsp;&nbsp;</span>	fl := flag(t.Kind())
<span id="L3278" class="ln">  3278&nbsp;&nbsp;</span>	if t.IfaceIndir() {
<span id="L3279" class="ln">  3279&nbsp;&nbsp;</span>		var p unsafe.Pointer
<span id="L3280" class="ln">  3280&nbsp;&nbsp;</span>		if t.Size() &lt;= abi.ZeroValSize {
<span id="L3281" class="ln">  3281&nbsp;&nbsp;</span>			p = unsafe.Pointer(&amp;zeroVal[0])
<span id="L3282" class="ln">  3282&nbsp;&nbsp;</span>		} else {
<span id="L3283" class="ln">  3283&nbsp;&nbsp;</span>			p = unsafe_New(t)
<span id="L3284" class="ln">  3284&nbsp;&nbsp;</span>		}
<span id="L3285" class="ln">  3285&nbsp;&nbsp;</span>		return Value{t, p, fl | flagIndir}
<span id="L3286" class="ln">  3286&nbsp;&nbsp;</span>	}
<span id="L3287" class="ln">  3287&nbsp;&nbsp;</span>	return Value{t, nil, fl}
<span id="L3288" class="ln">  3288&nbsp;&nbsp;</span>}
<span id="L3289" class="ln">  3289&nbsp;&nbsp;</span>
<span id="L3290" class="ln">  3290&nbsp;&nbsp;</span><span class="comment">//go:linkname zeroVal runtime.zeroVal</span>
<span id="L3291" class="ln">  3291&nbsp;&nbsp;</span>var zeroVal [abi.ZeroValSize]byte
<span id="L3292" class="ln">  3292&nbsp;&nbsp;</span>
<span id="L3293" class="ln">  3293&nbsp;&nbsp;</span><span class="comment">// New returns a Value representing a pointer to a new zero value</span>
<span id="L3294" class="ln">  3294&nbsp;&nbsp;</span><span class="comment">// for the specified type. That is, the returned Value&#39;s Type is PointerTo(typ).</span>
<span id="L3295" class="ln">  3295&nbsp;&nbsp;</span>func New(typ Type) Value {
<span id="L3296" class="ln">  3296&nbsp;&nbsp;</span>	if typ == nil {
<span id="L3297" class="ln">  3297&nbsp;&nbsp;</span>		panic(&#34;reflect: New(nil)&#34;)
<span id="L3298" class="ln">  3298&nbsp;&nbsp;</span>	}
<span id="L3299" class="ln">  3299&nbsp;&nbsp;</span>	t := &amp;typ.(*rtype).t
<span id="L3300" class="ln">  3300&nbsp;&nbsp;</span>	pt := ptrTo(t)
<span id="L3301" class="ln">  3301&nbsp;&nbsp;</span>	if ifaceIndir(pt) {
<span id="L3302" class="ln">  3302&nbsp;&nbsp;</span>		<span class="comment">// This is a pointer to a not-in-heap type.</span>
<span id="L3303" class="ln">  3303&nbsp;&nbsp;</span>		panic(&#34;reflect: New of type that may not be allocated in heap (possibly undefined cgo C type)&#34;)
<span id="L3304" class="ln">  3304&nbsp;&nbsp;</span>	}
<span id="L3305" class="ln">  3305&nbsp;&nbsp;</span>	ptr := unsafe_New(t)
<span id="L3306" class="ln">  3306&nbsp;&nbsp;</span>	fl := flag(Pointer)
<span id="L3307" class="ln">  3307&nbsp;&nbsp;</span>	return Value{pt, ptr, fl}
<span id="L3308" class="ln">  3308&nbsp;&nbsp;</span>}
<span id="L3309" class="ln">  3309&nbsp;&nbsp;</span>
<span id="L3310" class="ln">  3310&nbsp;&nbsp;</span><span class="comment">// NewAt returns a Value representing a pointer to a value of the</span>
<span id="L3311" class="ln">  3311&nbsp;&nbsp;</span><span class="comment">// specified type, using p as that pointer.</span>
<span id="L3312" class="ln">  3312&nbsp;&nbsp;</span>func NewAt(typ Type, p unsafe.Pointer) Value {
<span id="L3313" class="ln">  3313&nbsp;&nbsp;</span>	fl := flag(Pointer)
<span id="L3314" class="ln">  3314&nbsp;&nbsp;</span>	t := typ.(*rtype)
<span id="L3315" class="ln">  3315&nbsp;&nbsp;</span>	return Value{t.ptrTo(), p, fl}
<span id="L3316" class="ln">  3316&nbsp;&nbsp;</span>}
<span id="L3317" class="ln">  3317&nbsp;&nbsp;</span>
<span id="L3318" class="ln">  3318&nbsp;&nbsp;</span><span class="comment">// assignTo returns a value v that can be assigned directly to dst.</span>
<span id="L3319" class="ln">  3319&nbsp;&nbsp;</span><span class="comment">// It panics if v is not assignable to dst.</span>
<span id="L3320" class="ln">  3320&nbsp;&nbsp;</span><span class="comment">// For a conversion to an interface type, target, if not nil,</span>
<span id="L3321" class="ln">  3321&nbsp;&nbsp;</span><span class="comment">// is a suggested scratch space to use.</span>
<span id="L3322" class="ln">  3322&nbsp;&nbsp;</span><span class="comment">// target must be initialized memory (or nil).</span>
<span id="L3323" class="ln">  3323&nbsp;&nbsp;</span>func (v Value) assignTo(context string, dst *abi.Type, target unsafe.Pointer) Value {
<span id="L3324" class="ln">  3324&nbsp;&nbsp;</span>	if v.flag&amp;flagMethod != 0 {
<span id="L3325" class="ln">  3325&nbsp;&nbsp;</span>		v = makeMethodValue(context, v)
<span id="L3326" class="ln">  3326&nbsp;&nbsp;</span>	}
<span id="L3327" class="ln">  3327&nbsp;&nbsp;</span>
<span id="L3328" class="ln">  3328&nbsp;&nbsp;</span>	switch {
<span id="L3329" class="ln">  3329&nbsp;&nbsp;</span>	case directlyAssignable(dst, v.typ()):
<span id="L3330" class="ln">  3330&nbsp;&nbsp;</span>		<span class="comment">// Overwrite type so that they match.</span>
<span id="L3331" class="ln">  3331&nbsp;&nbsp;</span>		<span class="comment">// Same memory layout, so no harm done.</span>
<span id="L3332" class="ln">  3332&nbsp;&nbsp;</span>		fl := v.flag&amp;(flagAddr|flagIndir) | v.flag.ro()
<span id="L3333" class="ln">  3333&nbsp;&nbsp;</span>		fl |= flag(dst.Kind())
<span id="L3334" class="ln">  3334&nbsp;&nbsp;</span>		return Value{dst, v.ptr, fl}
<span id="L3335" class="ln">  3335&nbsp;&nbsp;</span>
<span id="L3336" class="ln">  3336&nbsp;&nbsp;</span>	case implements(dst, v.typ()):
<span id="L3337" class="ln">  3337&nbsp;&nbsp;</span>		if v.Kind() == Interface &amp;&amp; v.IsNil() {
<span id="L3338" class="ln">  3338&nbsp;&nbsp;</span>			<span class="comment">// A nil ReadWriter passed to nil Reader is OK,</span>
<span id="L3339" class="ln">  3339&nbsp;&nbsp;</span>			<span class="comment">// but using ifaceE2I below will panic.</span>
<span id="L3340" class="ln">  3340&nbsp;&nbsp;</span>			<span class="comment">// Avoid the panic by returning a nil dst (e.g., Reader) explicitly.</span>
<span id="L3341" class="ln">  3341&nbsp;&nbsp;</span>			return Value{dst, nil, flag(Interface)}
<span id="L3342" class="ln">  3342&nbsp;&nbsp;</span>		}
<span id="L3343" class="ln">  3343&nbsp;&nbsp;</span>		x := valueInterface(v, false)
<span id="L3344" class="ln">  3344&nbsp;&nbsp;</span>		if target == nil {
<span id="L3345" class="ln">  3345&nbsp;&nbsp;</span>			target = unsafe_New(dst)
<span id="L3346" class="ln">  3346&nbsp;&nbsp;</span>		}
<span id="L3347" class="ln">  3347&nbsp;&nbsp;</span>		if dst.NumMethod() == 0 {
<span id="L3348" class="ln">  3348&nbsp;&nbsp;</span>			*(*any)(target) = x
<span id="L3349" class="ln">  3349&nbsp;&nbsp;</span>		} else {
<span id="L3350" class="ln">  3350&nbsp;&nbsp;</span>			ifaceE2I(dst, x, target)
<span id="L3351" class="ln">  3351&nbsp;&nbsp;</span>		}
<span id="L3352" class="ln">  3352&nbsp;&nbsp;</span>		return Value{dst, target, flagIndir | flag(Interface)}
<span id="L3353" class="ln">  3353&nbsp;&nbsp;</span>	}
<span id="L3354" class="ln">  3354&nbsp;&nbsp;</span>
<span id="L3355" class="ln">  3355&nbsp;&nbsp;</span>	<span class="comment">// Failed.</span>
<span id="L3356" class="ln">  3356&nbsp;&nbsp;</span>	panic(context + &#34;: value of type &#34; + stringFor(v.typ()) + &#34; is not assignable to type &#34; + stringFor(dst))
<span id="L3357" class="ln">  3357&nbsp;&nbsp;</span>}
<span id="L3358" class="ln">  3358&nbsp;&nbsp;</span>
<span id="L3359" class="ln">  3359&nbsp;&nbsp;</span><span class="comment">// Convert returns the value v converted to type t.</span>
<span id="L3360" class="ln">  3360&nbsp;&nbsp;</span><span class="comment">// If the usual Go conversion rules do not allow conversion</span>
<span id="L3361" class="ln">  3361&nbsp;&nbsp;</span><span class="comment">// of the value v to type t, or if converting v to type t panics, Convert panics.</span>
<span id="L3362" class="ln">  3362&nbsp;&nbsp;</span>func (v Value) Convert(t Type) Value {
<span id="L3363" class="ln">  3363&nbsp;&nbsp;</span>	if v.flag&amp;flagMethod != 0 {
<span id="L3364" class="ln">  3364&nbsp;&nbsp;</span>		v = makeMethodValue(&#34;Convert&#34;, v)
<span id="L3365" class="ln">  3365&nbsp;&nbsp;</span>	}
<span id="L3366" class="ln">  3366&nbsp;&nbsp;</span>	op := convertOp(t.common(), v.typ())
<span id="L3367" class="ln">  3367&nbsp;&nbsp;</span>	if op == nil {
<span id="L3368" class="ln">  3368&nbsp;&nbsp;</span>		panic(&#34;reflect.Value.Convert: value of type &#34; + stringFor(v.typ()) + &#34; cannot be converted to type &#34; + t.String())
<span id="L3369" class="ln">  3369&nbsp;&nbsp;</span>	}
<span id="L3370" class="ln">  3370&nbsp;&nbsp;</span>	return op(v, t)
<span id="L3371" class="ln">  3371&nbsp;&nbsp;</span>}
<span id="L3372" class="ln">  3372&nbsp;&nbsp;</span>
<span id="L3373" class="ln">  3373&nbsp;&nbsp;</span><span class="comment">// CanConvert reports whether the value v can be converted to type t.</span>
<span id="L3374" class="ln">  3374&nbsp;&nbsp;</span><span class="comment">// If v.CanConvert(t) returns true then v.Convert(t) will not panic.</span>
<span id="L3375" class="ln">  3375&nbsp;&nbsp;</span>func (v Value) CanConvert(t Type) bool {
<span id="L3376" class="ln">  3376&nbsp;&nbsp;</span>	vt := v.Type()
<span id="L3377" class="ln">  3377&nbsp;&nbsp;</span>	if !vt.ConvertibleTo(t) {
<span id="L3378" class="ln">  3378&nbsp;&nbsp;</span>		return false
<span id="L3379" class="ln">  3379&nbsp;&nbsp;</span>	}
<span id="L3380" class="ln">  3380&nbsp;&nbsp;</span>	<span class="comment">// Converting from slice to array or to pointer-to-array can panic</span>
<span id="L3381" class="ln">  3381&nbsp;&nbsp;</span>	<span class="comment">// depending on the value.</span>
<span id="L3382" class="ln">  3382&nbsp;&nbsp;</span>	switch {
<span id="L3383" class="ln">  3383&nbsp;&nbsp;</span>	case vt.Kind() == Slice &amp;&amp; t.Kind() == Array:
<span id="L3384" class="ln">  3384&nbsp;&nbsp;</span>		if t.Len() &gt; v.Len() {
<span id="L3385" class="ln">  3385&nbsp;&nbsp;</span>			return false
<span id="L3386" class="ln">  3386&nbsp;&nbsp;</span>		}
<span id="L3387" class="ln">  3387&nbsp;&nbsp;</span>	case vt.Kind() == Slice &amp;&amp; t.Kind() == Pointer &amp;&amp; t.Elem().Kind() == Array:
<span id="L3388" class="ln">  3388&nbsp;&nbsp;</span>		n := t.Elem().Len()
<span id="L3389" class="ln">  3389&nbsp;&nbsp;</span>		if n &gt; v.Len() {
<span id="L3390" class="ln">  3390&nbsp;&nbsp;</span>			return false
<span id="L3391" class="ln">  3391&nbsp;&nbsp;</span>		}
<span id="L3392" class="ln">  3392&nbsp;&nbsp;</span>	}
<span id="L3393" class="ln">  3393&nbsp;&nbsp;</span>	return true
<span id="L3394" class="ln">  3394&nbsp;&nbsp;</span>}
<span id="L3395" class="ln">  3395&nbsp;&nbsp;</span>
<span id="L3396" class="ln">  3396&nbsp;&nbsp;</span><span class="comment">// Comparable reports whether the value v is comparable.</span>
<span id="L3397" class="ln">  3397&nbsp;&nbsp;</span><span class="comment">// If the type of v is an interface, this checks the dynamic type.</span>
<span id="L3398" class="ln">  3398&nbsp;&nbsp;</span><span class="comment">// If this reports true then v.Interface() == x will not panic for any x,</span>
<span id="L3399" class="ln">  3399&nbsp;&nbsp;</span><span class="comment">// nor will v.Equal(u) for any Value u.</span>
<span id="L3400" class="ln">  3400&nbsp;&nbsp;</span>func (v Value) Comparable() bool {
<span id="L3401" class="ln">  3401&nbsp;&nbsp;</span>	k := v.Kind()
<span id="L3402" class="ln">  3402&nbsp;&nbsp;</span>	switch k {
<span id="L3403" class="ln">  3403&nbsp;&nbsp;</span>	case Invalid:
<span id="L3404" class="ln">  3404&nbsp;&nbsp;</span>		return false
<span id="L3405" class="ln">  3405&nbsp;&nbsp;</span>
<span id="L3406" class="ln">  3406&nbsp;&nbsp;</span>	case Array:
<span id="L3407" class="ln">  3407&nbsp;&nbsp;</span>		switch v.Type().Elem().Kind() {
<span id="L3408" class="ln">  3408&nbsp;&nbsp;</span>		case Interface, Array, Struct:
<span id="L3409" class="ln">  3409&nbsp;&nbsp;</span>			for i := 0; i &lt; v.Type().Len(); i++ {
<span id="L3410" class="ln">  3410&nbsp;&nbsp;</span>				if !v.Index(i).Comparable() {
<span id="L3411" class="ln">  3411&nbsp;&nbsp;</span>					return false
<span id="L3412" class="ln">  3412&nbsp;&nbsp;</span>				}
<span id="L3413" class="ln">  3413&nbsp;&nbsp;</span>			}
<span id="L3414" class="ln">  3414&nbsp;&nbsp;</span>			return true
<span id="L3415" class="ln">  3415&nbsp;&nbsp;</span>		}
<span id="L3416" class="ln">  3416&nbsp;&nbsp;</span>		return v.Type().Comparable()
<span id="L3417" class="ln">  3417&nbsp;&nbsp;</span>
<span id="L3418" class="ln">  3418&nbsp;&nbsp;</span>	case Interface:
<span id="L3419" class="ln">  3419&nbsp;&nbsp;</span>		return v.Elem().Comparable()
<span id="L3420" class="ln">  3420&nbsp;&nbsp;</span>
<span id="L3421" class="ln">  3421&nbsp;&nbsp;</span>	case Struct:
<span id="L3422" class="ln">  3422&nbsp;&nbsp;</span>		for i := 0; i &lt; v.NumField(); i++ {
<span id="L3423" class="ln">  3423&nbsp;&nbsp;</span>			if !v.Field(i).Comparable() {
<span id="L3424" class="ln">  3424&nbsp;&nbsp;</span>				return false
<span id="L3425" class="ln">  3425&nbsp;&nbsp;</span>			}
<span id="L3426" class="ln">  3426&nbsp;&nbsp;</span>		}
<span id="L3427" class="ln">  3427&nbsp;&nbsp;</span>		return true
<span id="L3428" class="ln">  3428&nbsp;&nbsp;</span>
<span id="L3429" class="ln">  3429&nbsp;&nbsp;</span>	default:
<span id="L3430" class="ln">  3430&nbsp;&nbsp;</span>		return v.Type().Comparable()
<span id="L3431" class="ln">  3431&nbsp;&nbsp;</span>	}
<span id="L3432" class="ln">  3432&nbsp;&nbsp;</span>}
<span id="L3433" class="ln">  3433&nbsp;&nbsp;</span>
<span id="L3434" class="ln">  3434&nbsp;&nbsp;</span><span class="comment">// Equal reports true if v is equal to u.</span>
<span id="L3435" class="ln">  3435&nbsp;&nbsp;</span><span class="comment">// For two invalid values, Equal will report true.</span>
<span id="L3436" class="ln">  3436&nbsp;&nbsp;</span><span class="comment">// For an interface value, Equal will compare the value within the interface.</span>
<span id="L3437" class="ln">  3437&nbsp;&nbsp;</span><span class="comment">// Otherwise, If the values have different types, Equal will report false.</span>
<span id="L3438" class="ln">  3438&nbsp;&nbsp;</span><span class="comment">// Otherwise, for arrays and structs Equal will compare each element in order,</span>
<span id="L3439" class="ln">  3439&nbsp;&nbsp;</span><span class="comment">// and report false if it finds non-equal elements.</span>
<span id="L3440" class="ln">  3440&nbsp;&nbsp;</span><span class="comment">// During all comparisons, if values of the same type are compared,</span>
<span id="L3441" class="ln">  3441&nbsp;&nbsp;</span><span class="comment">// and the type is not comparable, Equal will panic.</span>
<span id="L3442" class="ln">  3442&nbsp;&nbsp;</span>func (v Value) Equal(u Value) bool {
<span id="L3443" class="ln">  3443&nbsp;&nbsp;</span>	if v.Kind() == Interface {
<span id="L3444" class="ln">  3444&nbsp;&nbsp;</span>		v = v.Elem()
<span id="L3445" class="ln">  3445&nbsp;&nbsp;</span>	}
<span id="L3446" class="ln">  3446&nbsp;&nbsp;</span>	if u.Kind() == Interface {
<span id="L3447" class="ln">  3447&nbsp;&nbsp;</span>		u = u.Elem()
<span id="L3448" class="ln">  3448&nbsp;&nbsp;</span>	}
<span id="L3449" class="ln">  3449&nbsp;&nbsp;</span>
<span id="L3450" class="ln">  3450&nbsp;&nbsp;</span>	if !v.IsValid() || !u.IsValid() {
<span id="L3451" class="ln">  3451&nbsp;&nbsp;</span>		return v.IsValid() == u.IsValid()
<span id="L3452" class="ln">  3452&nbsp;&nbsp;</span>	}
<span id="L3453" class="ln">  3453&nbsp;&nbsp;</span>
<span id="L3454" class="ln">  3454&nbsp;&nbsp;</span>	if v.Kind() != u.Kind() || v.Type() != u.Type() {
<span id="L3455" class="ln">  3455&nbsp;&nbsp;</span>		return false
<span id="L3456" class="ln">  3456&nbsp;&nbsp;</span>	}
<span id="L3457" class="ln">  3457&nbsp;&nbsp;</span>
<span id="L3458" class="ln">  3458&nbsp;&nbsp;</span>	<span class="comment">// Handle each Kind directly rather than calling valueInterface</span>
<span id="L3459" class="ln">  3459&nbsp;&nbsp;</span>	<span class="comment">// to avoid allocating.</span>
<span id="L3460" class="ln">  3460&nbsp;&nbsp;</span>	switch v.Kind() {
<span id="L3461" class="ln">  3461&nbsp;&nbsp;</span>	default:
<span id="L3462" class="ln">  3462&nbsp;&nbsp;</span>		panic(&#34;reflect.Value.Equal: invalid Kind&#34;)
<span id="L3463" class="ln">  3463&nbsp;&nbsp;</span>	case Bool:
<span id="L3464" class="ln">  3464&nbsp;&nbsp;</span>		return v.Bool() == u.Bool()
<span id="L3465" class="ln">  3465&nbsp;&nbsp;</span>	case Int, Int8, Int16, Int32, Int64:
<span id="L3466" class="ln">  3466&nbsp;&nbsp;</span>		return v.Int() == u.Int()
<span id="L3467" class="ln">  3467&nbsp;&nbsp;</span>	case Uint, Uint8, Uint16, Uint32, Uint64, Uintptr:
<span id="L3468" class="ln">  3468&nbsp;&nbsp;</span>		return v.Uint() == u.Uint()
<span id="L3469" class="ln">  3469&nbsp;&nbsp;</span>	case Float32, Float64:
<span id="L3470" class="ln">  3470&nbsp;&nbsp;</span>		return v.Float() == u.Float()
<span id="L3471" class="ln">  3471&nbsp;&nbsp;</span>	case Complex64, Complex128:
<span id="L3472" class="ln">  3472&nbsp;&nbsp;</span>		return v.Complex() == u.Complex()
<span id="L3473" class="ln">  3473&nbsp;&nbsp;</span>	case String:
<span id="L3474" class="ln">  3474&nbsp;&nbsp;</span>		return v.String() == u.String()
<span id="L3475" class="ln">  3475&nbsp;&nbsp;</span>	case Chan, Pointer, UnsafePointer:
<span id="L3476" class="ln">  3476&nbsp;&nbsp;</span>		return v.Pointer() == u.Pointer()
<span id="L3477" class="ln">  3477&nbsp;&nbsp;</span>	case Array:
<span id="L3478" class="ln">  3478&nbsp;&nbsp;</span>		<span class="comment">// u and v have the same type so they have the same length</span>
<span id="L3479" class="ln">  3479&nbsp;&nbsp;</span>		vl := v.Len()
<span id="L3480" class="ln">  3480&nbsp;&nbsp;</span>		if vl == 0 {
<span id="L3481" class="ln">  3481&nbsp;&nbsp;</span>			<span class="comment">// panic on [0]func()</span>
<span id="L3482" class="ln">  3482&nbsp;&nbsp;</span>			if !v.Type().Elem().Comparable() {
<span id="L3483" class="ln">  3483&nbsp;&nbsp;</span>				break
<span id="L3484" class="ln">  3484&nbsp;&nbsp;</span>			}
<span id="L3485" class="ln">  3485&nbsp;&nbsp;</span>			return true
<span id="L3486" class="ln">  3486&nbsp;&nbsp;</span>		}
<span id="L3487" class="ln">  3487&nbsp;&nbsp;</span>		for i := 0; i &lt; vl; i++ {
<span id="L3488" class="ln">  3488&nbsp;&nbsp;</span>			if !v.Index(i).Equal(u.Index(i)) {
<span id="L3489" class="ln">  3489&nbsp;&nbsp;</span>				return false
<span id="L3490" class="ln">  3490&nbsp;&nbsp;</span>			}
<span id="L3491" class="ln">  3491&nbsp;&nbsp;</span>		}
<span id="L3492" class="ln">  3492&nbsp;&nbsp;</span>		return true
<span id="L3493" class="ln">  3493&nbsp;&nbsp;</span>	case Struct:
<span id="L3494" class="ln">  3494&nbsp;&nbsp;</span>		<span class="comment">// u and v have the same type so they have the same fields</span>
<span id="L3495" class="ln">  3495&nbsp;&nbsp;</span>		nf := v.NumField()
<span id="L3496" class="ln">  3496&nbsp;&nbsp;</span>		for i := 0; i &lt; nf; i++ {
<span id="L3497" class="ln">  3497&nbsp;&nbsp;</span>			if !v.Field(i).Equal(u.Field(i)) {
<span id="L3498" class="ln">  3498&nbsp;&nbsp;</span>				return false
<span id="L3499" class="ln">  3499&nbsp;&nbsp;</span>			}
<span id="L3500" class="ln">  3500&nbsp;&nbsp;</span>		}
<span id="L3501" class="ln">  3501&nbsp;&nbsp;</span>		return true
<span id="L3502" class="ln">  3502&nbsp;&nbsp;</span>	case Func, Map, Slice:
<span id="L3503" class="ln">  3503&nbsp;&nbsp;</span>		break
<span id="L3504" class="ln">  3504&nbsp;&nbsp;</span>	}
<span id="L3505" class="ln">  3505&nbsp;&nbsp;</span>	panic(&#34;reflect.Value.Equal: values of type &#34; + v.Type().String() + &#34; are not comparable&#34;)
<span id="L3506" class="ln">  3506&nbsp;&nbsp;</span>}
<span id="L3507" class="ln">  3507&nbsp;&nbsp;</span>
<span id="L3508" class="ln">  3508&nbsp;&nbsp;</span><span class="comment">// convertOp returns the function to convert a value of type src</span>
<span id="L3509" class="ln">  3509&nbsp;&nbsp;</span><span class="comment">// to a value of type dst. If the conversion is illegal, convertOp returns nil.</span>
<span id="L3510" class="ln">  3510&nbsp;&nbsp;</span>func convertOp(dst, src *abi.Type) func(Value, Type) Value {
<span id="L3511" class="ln">  3511&nbsp;&nbsp;</span>	switch Kind(src.Kind()) {
<span id="L3512" class="ln">  3512&nbsp;&nbsp;</span>	case Int, Int8, Int16, Int32, Int64:
<span id="L3513" class="ln">  3513&nbsp;&nbsp;</span>		switch Kind(dst.Kind()) {
<span id="L3514" class="ln">  3514&nbsp;&nbsp;</span>		case Int, Int8, Int16, Int32, Int64, Uint, Uint8, Uint16, Uint32, Uint64, Uintptr:
<span id="L3515" class="ln">  3515&nbsp;&nbsp;</span>			return cvtInt
<span id="L3516" class="ln">  3516&nbsp;&nbsp;</span>		case Float32, Float64:
<span id="L3517" class="ln">  3517&nbsp;&nbsp;</span>			return cvtIntFloat
<span id="L3518" class="ln">  3518&nbsp;&nbsp;</span>		case String:
<span id="L3519" class="ln">  3519&nbsp;&nbsp;</span>			return cvtIntString
<span id="L3520" class="ln">  3520&nbsp;&nbsp;</span>		}
<span id="L3521" class="ln">  3521&nbsp;&nbsp;</span>
<span id="L3522" class="ln">  3522&nbsp;&nbsp;</span>	case Uint, Uint8, Uint16, Uint32, Uint64, Uintptr:
<span id="L3523" class="ln">  3523&nbsp;&nbsp;</span>		switch Kind(dst.Kind()) {
<span id="L3524" class="ln">  3524&nbsp;&nbsp;</span>		case Int, Int8, Int16, Int32, Int64, Uint, Uint8, Uint16, Uint32, Uint64, Uintptr:
<span id="L3525" class="ln">  3525&nbsp;&nbsp;</span>			return cvtUint
<span id="L3526" class="ln">  3526&nbsp;&nbsp;</span>		case Float32, Float64:
<span id="L3527" class="ln">  3527&nbsp;&nbsp;</span>			return cvtUintFloat
<span id="L3528" class="ln">  3528&nbsp;&nbsp;</span>		case String:
<span id="L3529" class="ln">  3529&nbsp;&nbsp;</span>			return cvtUintString
<span id="L3530" class="ln">  3530&nbsp;&nbsp;</span>		}
<span id="L3531" class="ln">  3531&nbsp;&nbsp;</span>
<span id="L3532" class="ln">  3532&nbsp;&nbsp;</span>	case Float32, Float64:
<span id="L3533" class="ln">  3533&nbsp;&nbsp;</span>		switch Kind(dst.Kind()) {
<span id="L3534" class="ln">  3534&nbsp;&nbsp;</span>		case Int, Int8, Int16, Int32, Int64:
<span id="L3535" class="ln">  3535&nbsp;&nbsp;</span>			return cvtFloatInt
<span id="L3536" class="ln">  3536&nbsp;&nbsp;</span>		case Uint, Uint8, Uint16, Uint32, Uint64, Uintptr:
<span id="L3537" class="ln">  3537&nbsp;&nbsp;</span>			return cvtFloatUint
<span id="L3538" class="ln">  3538&nbsp;&nbsp;</span>		case Float32, Float64:
<span id="L3539" class="ln">  3539&nbsp;&nbsp;</span>			return cvtFloat
<span id="L3540" class="ln">  3540&nbsp;&nbsp;</span>		}
<span id="L3541" class="ln">  3541&nbsp;&nbsp;</span>
<span id="L3542" class="ln">  3542&nbsp;&nbsp;</span>	case Complex64, Complex128:
<span id="L3543" class="ln">  3543&nbsp;&nbsp;</span>		switch Kind(dst.Kind()) {
<span id="L3544" class="ln">  3544&nbsp;&nbsp;</span>		case Complex64, Complex128:
<span id="L3545" class="ln">  3545&nbsp;&nbsp;</span>			return cvtComplex
<span id="L3546" class="ln">  3546&nbsp;&nbsp;</span>		}
<span id="L3547" class="ln">  3547&nbsp;&nbsp;</span>
<span id="L3548" class="ln">  3548&nbsp;&nbsp;</span>	case String:
<span id="L3549" class="ln">  3549&nbsp;&nbsp;</span>		if dst.Kind() == abi.Slice &amp;&amp; pkgPathFor(dst.Elem()) == &#34;&#34; {
<span id="L3550" class="ln">  3550&nbsp;&nbsp;</span>			switch Kind(dst.Elem().Kind()) {
<span id="L3551" class="ln">  3551&nbsp;&nbsp;</span>			case Uint8:
<span id="L3552" class="ln">  3552&nbsp;&nbsp;</span>				return cvtStringBytes
<span id="L3553" class="ln">  3553&nbsp;&nbsp;</span>			case Int32:
<span id="L3554" class="ln">  3554&nbsp;&nbsp;</span>				return cvtStringRunes
<span id="L3555" class="ln">  3555&nbsp;&nbsp;</span>			}
<span id="L3556" class="ln">  3556&nbsp;&nbsp;</span>		}
<span id="L3557" class="ln">  3557&nbsp;&nbsp;</span>
<span id="L3558" class="ln">  3558&nbsp;&nbsp;</span>	case Slice:
<span id="L3559" class="ln">  3559&nbsp;&nbsp;</span>		if dst.Kind() == abi.String &amp;&amp; pkgPathFor(src.Elem()) == &#34;&#34; {
<span id="L3560" class="ln">  3560&nbsp;&nbsp;</span>			switch Kind(src.Elem().Kind()) {
<span id="L3561" class="ln">  3561&nbsp;&nbsp;</span>			case Uint8:
<span id="L3562" class="ln">  3562&nbsp;&nbsp;</span>				return cvtBytesString
<span id="L3563" class="ln">  3563&nbsp;&nbsp;</span>			case Int32:
<span id="L3564" class="ln">  3564&nbsp;&nbsp;</span>				return cvtRunesString
<span id="L3565" class="ln">  3565&nbsp;&nbsp;</span>			}
<span id="L3566" class="ln">  3566&nbsp;&nbsp;</span>		}
<span id="L3567" class="ln">  3567&nbsp;&nbsp;</span>		<span class="comment">// &#34;x is a slice, T is a pointer-to-array type,</span>
<span id="L3568" class="ln">  3568&nbsp;&nbsp;</span>		<span class="comment">// and the slice and array types have identical element types.&#34;</span>
<span id="L3569" class="ln">  3569&nbsp;&nbsp;</span>		if dst.Kind() == abi.Pointer &amp;&amp; dst.Elem().Kind() == abi.Array &amp;&amp; src.Elem() == dst.Elem().Elem() {
<span id="L3570" class="ln">  3570&nbsp;&nbsp;</span>			return cvtSliceArrayPtr
<span id="L3571" class="ln">  3571&nbsp;&nbsp;</span>		}
<span id="L3572" class="ln">  3572&nbsp;&nbsp;</span>		<span class="comment">// &#34;x is a slice, T is an array type,</span>
<span id="L3573" class="ln">  3573&nbsp;&nbsp;</span>		<span class="comment">// and the slice and array types have identical element types.&#34;</span>
<span id="L3574" class="ln">  3574&nbsp;&nbsp;</span>		if dst.Kind() == abi.Array &amp;&amp; src.Elem() == dst.Elem() {
<span id="L3575" class="ln">  3575&nbsp;&nbsp;</span>			return cvtSliceArray
<span id="L3576" class="ln">  3576&nbsp;&nbsp;</span>		}
<span id="L3577" class="ln">  3577&nbsp;&nbsp;</span>
<span id="L3578" class="ln">  3578&nbsp;&nbsp;</span>	case Chan:
<span id="L3579" class="ln">  3579&nbsp;&nbsp;</span>		if dst.Kind() == abi.Chan &amp;&amp; specialChannelAssignability(dst, src) {
<span id="L3580" class="ln">  3580&nbsp;&nbsp;</span>			return cvtDirect
<span id="L3581" class="ln">  3581&nbsp;&nbsp;</span>		}
<span id="L3582" class="ln">  3582&nbsp;&nbsp;</span>	}
<span id="L3583" class="ln">  3583&nbsp;&nbsp;</span>
<span id="L3584" class="ln">  3584&nbsp;&nbsp;</span>	<span class="comment">// dst and src have same underlying type.</span>
<span id="L3585" class="ln">  3585&nbsp;&nbsp;</span>	if haveIdenticalUnderlyingType(dst, src, false) {
<span id="L3586" class="ln">  3586&nbsp;&nbsp;</span>		return cvtDirect
<span id="L3587" class="ln">  3587&nbsp;&nbsp;</span>	}
<span id="L3588" class="ln">  3588&nbsp;&nbsp;</span>
<span id="L3589" class="ln">  3589&nbsp;&nbsp;</span>	<span class="comment">// dst and src are non-defined pointer types with same underlying base type.</span>
<span id="L3590" class="ln">  3590&nbsp;&nbsp;</span>	if dst.Kind() == abi.Pointer &amp;&amp; nameFor(dst) == &#34;&#34; &amp;&amp;
<span id="L3591" class="ln">  3591&nbsp;&nbsp;</span>		src.Kind() == abi.Pointer &amp;&amp; nameFor(src) == &#34;&#34; &amp;&amp;
<span id="L3592" class="ln">  3592&nbsp;&nbsp;</span>		haveIdenticalUnderlyingType(elem(dst), elem(src), false) {
<span id="L3593" class="ln">  3593&nbsp;&nbsp;</span>		return cvtDirect
<span id="L3594" class="ln">  3594&nbsp;&nbsp;</span>	}
<span id="L3595" class="ln">  3595&nbsp;&nbsp;</span>
<span id="L3596" class="ln">  3596&nbsp;&nbsp;</span>	if implements(dst, src) {
<span id="L3597" class="ln">  3597&nbsp;&nbsp;</span>		if src.Kind() == abi.Interface {
<span id="L3598" class="ln">  3598&nbsp;&nbsp;</span>			return cvtI2I
<span id="L3599" class="ln">  3599&nbsp;&nbsp;</span>		}
<span id="L3600" class="ln">  3600&nbsp;&nbsp;</span>		return cvtT2I
<span id="L3601" class="ln">  3601&nbsp;&nbsp;</span>	}
<span id="L3602" class="ln">  3602&nbsp;&nbsp;</span>
<span id="L3603" class="ln">  3603&nbsp;&nbsp;</span>	return nil
<span id="L3604" class="ln">  3604&nbsp;&nbsp;</span>}
<span id="L3605" class="ln">  3605&nbsp;&nbsp;</span>
<span id="L3606" class="ln">  3606&nbsp;&nbsp;</span><span class="comment">// makeInt returns a Value of type t equal to bits (possibly truncated),</span>
<span id="L3607" class="ln">  3607&nbsp;&nbsp;</span><span class="comment">// where t is a signed or unsigned int type.</span>
<span id="L3608" class="ln">  3608&nbsp;&nbsp;</span>func makeInt(f flag, bits uint64, t Type) Value {
<span id="L3609" class="ln">  3609&nbsp;&nbsp;</span>	typ := t.common()
<span id="L3610" class="ln">  3610&nbsp;&nbsp;</span>	ptr := unsafe_New(typ)
<span id="L3611" class="ln">  3611&nbsp;&nbsp;</span>	switch typ.Size() {
<span id="L3612" class="ln">  3612&nbsp;&nbsp;</span>	case 1:
<span id="L3613" class="ln">  3613&nbsp;&nbsp;</span>		*(*uint8)(ptr) = uint8(bits)
<span id="L3614" class="ln">  3614&nbsp;&nbsp;</span>	case 2:
<span id="L3615" class="ln">  3615&nbsp;&nbsp;</span>		*(*uint16)(ptr) = uint16(bits)
<span id="L3616" class="ln">  3616&nbsp;&nbsp;</span>	case 4:
<span id="L3617" class="ln">  3617&nbsp;&nbsp;</span>		*(*uint32)(ptr) = uint32(bits)
<span id="L3618" class="ln">  3618&nbsp;&nbsp;</span>	case 8:
<span id="L3619" class="ln">  3619&nbsp;&nbsp;</span>		*(*uint64)(ptr) = bits
<span id="L3620" class="ln">  3620&nbsp;&nbsp;</span>	}
<span id="L3621" class="ln">  3621&nbsp;&nbsp;</span>	return Value{typ, ptr, f | flagIndir | flag(typ.Kind())}
<span id="L3622" class="ln">  3622&nbsp;&nbsp;</span>}
<span id="L3623" class="ln">  3623&nbsp;&nbsp;</span>
<span id="L3624" class="ln">  3624&nbsp;&nbsp;</span><span class="comment">// makeFloat returns a Value of type t equal to v (possibly truncated to float32),</span>
<span id="L3625" class="ln">  3625&nbsp;&nbsp;</span><span class="comment">// where t is a float32 or float64 type.</span>
<span id="L3626" class="ln">  3626&nbsp;&nbsp;</span>func makeFloat(f flag, v float64, t Type) Value {
<span id="L3627" class="ln">  3627&nbsp;&nbsp;</span>	typ := t.common()
<span id="L3628" class="ln">  3628&nbsp;&nbsp;</span>	ptr := unsafe_New(typ)
<span id="L3629" class="ln">  3629&nbsp;&nbsp;</span>	switch typ.Size() {
<span id="L3630" class="ln">  3630&nbsp;&nbsp;</span>	case 4:
<span id="L3631" class="ln">  3631&nbsp;&nbsp;</span>		*(*float32)(ptr) = float32(v)
<span id="L3632" class="ln">  3632&nbsp;&nbsp;</span>	case 8:
<span id="L3633" class="ln">  3633&nbsp;&nbsp;</span>		*(*float64)(ptr) = v
<span id="L3634" class="ln">  3634&nbsp;&nbsp;</span>	}
<span id="L3635" class="ln">  3635&nbsp;&nbsp;</span>	return Value{typ, ptr, f | flagIndir | flag(typ.Kind())}
<span id="L3636" class="ln">  3636&nbsp;&nbsp;</span>}
<span id="L3637" class="ln">  3637&nbsp;&nbsp;</span>
<span id="L3638" class="ln">  3638&nbsp;&nbsp;</span><span class="comment">// makeFloat32 returns a Value of type t equal to v, where t is a float32 type.</span>
<span id="L3639" class="ln">  3639&nbsp;&nbsp;</span>func makeFloat32(f flag, v float32, t Type) Value {
<span id="L3640" class="ln">  3640&nbsp;&nbsp;</span>	typ := t.common()
<span id="L3641" class="ln">  3641&nbsp;&nbsp;</span>	ptr := unsafe_New(typ)
<span id="L3642" class="ln">  3642&nbsp;&nbsp;</span>	*(*float32)(ptr) = v
<span id="L3643" class="ln">  3643&nbsp;&nbsp;</span>	return Value{typ, ptr, f | flagIndir | flag(typ.Kind())}
<span id="L3644" class="ln">  3644&nbsp;&nbsp;</span>}
<span id="L3645" class="ln">  3645&nbsp;&nbsp;</span>
<span id="L3646" class="ln">  3646&nbsp;&nbsp;</span><span class="comment">// makeComplex returns a Value of type t equal to v (possibly truncated to complex64),</span>
<span id="L3647" class="ln">  3647&nbsp;&nbsp;</span><span class="comment">// where t is a complex64 or complex128 type.</span>
<span id="L3648" class="ln">  3648&nbsp;&nbsp;</span>func makeComplex(f flag, v complex128, t Type) Value {
<span id="L3649" class="ln">  3649&nbsp;&nbsp;</span>	typ := t.common()
<span id="L3650" class="ln">  3650&nbsp;&nbsp;</span>	ptr := unsafe_New(typ)
<span id="L3651" class="ln">  3651&nbsp;&nbsp;</span>	switch typ.Size() {
<span id="L3652" class="ln">  3652&nbsp;&nbsp;</span>	case 8:
<span id="L3653" class="ln">  3653&nbsp;&nbsp;</span>		*(*complex64)(ptr) = complex64(v)
<span id="L3654" class="ln">  3654&nbsp;&nbsp;</span>	case 16:
<span id="L3655" class="ln">  3655&nbsp;&nbsp;</span>		*(*complex128)(ptr) = v
<span id="L3656" class="ln">  3656&nbsp;&nbsp;</span>	}
<span id="L3657" class="ln">  3657&nbsp;&nbsp;</span>	return Value{typ, ptr, f | flagIndir | flag(typ.Kind())}
<span id="L3658" class="ln">  3658&nbsp;&nbsp;</span>}
<span id="L3659" class="ln">  3659&nbsp;&nbsp;</span>
<span id="L3660" class="ln">  3660&nbsp;&nbsp;</span>func makeString(f flag, v string, t Type) Value {
<span id="L3661" class="ln">  3661&nbsp;&nbsp;</span>	ret := New(t).Elem()
<span id="L3662" class="ln">  3662&nbsp;&nbsp;</span>	ret.SetString(v)
<span id="L3663" class="ln">  3663&nbsp;&nbsp;</span>	ret.flag = ret.flag&amp;^flagAddr | f
<span id="L3664" class="ln">  3664&nbsp;&nbsp;</span>	return ret
<span id="L3665" class="ln">  3665&nbsp;&nbsp;</span>}
<span id="L3666" class="ln">  3666&nbsp;&nbsp;</span>
<span id="L3667" class="ln">  3667&nbsp;&nbsp;</span>func makeBytes(f flag, v []byte, t Type) Value {
<span id="L3668" class="ln">  3668&nbsp;&nbsp;</span>	ret := New(t).Elem()
<span id="L3669" class="ln">  3669&nbsp;&nbsp;</span>	ret.SetBytes(v)
<span id="L3670" class="ln">  3670&nbsp;&nbsp;</span>	ret.flag = ret.flag&amp;^flagAddr | f
<span id="L3671" class="ln">  3671&nbsp;&nbsp;</span>	return ret
<span id="L3672" class="ln">  3672&nbsp;&nbsp;</span>}
<span id="L3673" class="ln">  3673&nbsp;&nbsp;</span>
<span id="L3674" class="ln">  3674&nbsp;&nbsp;</span>func makeRunes(f flag, v []rune, t Type) Value {
<span id="L3675" class="ln">  3675&nbsp;&nbsp;</span>	ret := New(t).Elem()
<span id="L3676" class="ln">  3676&nbsp;&nbsp;</span>	ret.setRunes(v)
<span id="L3677" class="ln">  3677&nbsp;&nbsp;</span>	ret.flag = ret.flag&amp;^flagAddr | f
<span id="L3678" class="ln">  3678&nbsp;&nbsp;</span>	return ret
<span id="L3679" class="ln">  3679&nbsp;&nbsp;</span>}
<span id="L3680" class="ln">  3680&nbsp;&nbsp;</span>
<span id="L3681" class="ln">  3681&nbsp;&nbsp;</span><span class="comment">// These conversion functions are returned by convertOp</span>
<span id="L3682" class="ln">  3682&nbsp;&nbsp;</span><span class="comment">// for classes of conversions. For example, the first function, cvtInt,</span>
<span id="L3683" class="ln">  3683&nbsp;&nbsp;</span><span class="comment">// takes any value v of signed int type and returns the value converted</span>
<span id="L3684" class="ln">  3684&nbsp;&nbsp;</span><span class="comment">// to type t, where t is any signed or unsigned int type.</span>
<span id="L3685" class="ln">  3685&nbsp;&nbsp;</span>
<span id="L3686" class="ln">  3686&nbsp;&nbsp;</span><span class="comment">// convertOp: intXX -&gt; [u]intXX</span>
<span id="L3687" class="ln">  3687&nbsp;&nbsp;</span>func cvtInt(v Value, t Type) Value {
<span id="L3688" class="ln">  3688&nbsp;&nbsp;</span>	return makeInt(v.flag.ro(), uint64(v.Int()), t)
<span id="L3689" class="ln">  3689&nbsp;&nbsp;</span>}
<span id="L3690" class="ln">  3690&nbsp;&nbsp;</span>
<span id="L3691" class="ln">  3691&nbsp;&nbsp;</span><span class="comment">// convertOp: uintXX -&gt; [u]intXX</span>
<span id="L3692" class="ln">  3692&nbsp;&nbsp;</span>func cvtUint(v Value, t Type) Value {
<span id="L3693" class="ln">  3693&nbsp;&nbsp;</span>	return makeInt(v.flag.ro(), v.Uint(), t)
<span id="L3694" class="ln">  3694&nbsp;&nbsp;</span>}
<span id="L3695" class="ln">  3695&nbsp;&nbsp;</span>
<span id="L3696" class="ln">  3696&nbsp;&nbsp;</span><span class="comment">// convertOp: floatXX -&gt; intXX</span>
<span id="L3697" class="ln">  3697&nbsp;&nbsp;</span>func cvtFloatInt(v Value, t Type) Value {
<span id="L3698" class="ln">  3698&nbsp;&nbsp;</span>	return makeInt(v.flag.ro(), uint64(int64(v.Float())), t)
<span id="L3699" class="ln">  3699&nbsp;&nbsp;</span>}
<span id="L3700" class="ln">  3700&nbsp;&nbsp;</span>
<span id="L3701" class="ln">  3701&nbsp;&nbsp;</span><span class="comment">// convertOp: floatXX -&gt; uintXX</span>
<span id="L3702" class="ln">  3702&nbsp;&nbsp;</span>func cvtFloatUint(v Value, t Type) Value {
<span id="L3703" class="ln">  3703&nbsp;&nbsp;</span>	return makeInt(v.flag.ro(), uint64(v.Float()), t)
<span id="L3704" class="ln">  3704&nbsp;&nbsp;</span>}
<span id="L3705" class="ln">  3705&nbsp;&nbsp;</span>
<span id="L3706" class="ln">  3706&nbsp;&nbsp;</span><span class="comment">// convertOp: intXX -&gt; floatXX</span>
<span id="L3707" class="ln">  3707&nbsp;&nbsp;</span>func cvtIntFloat(v Value, t Type) Value {
<span id="L3708" class="ln">  3708&nbsp;&nbsp;</span>	return makeFloat(v.flag.ro(), float64(v.Int()), t)
<span id="L3709" class="ln">  3709&nbsp;&nbsp;</span>}
<span id="L3710" class="ln">  3710&nbsp;&nbsp;</span>
<span id="L3711" class="ln">  3711&nbsp;&nbsp;</span><span class="comment">// convertOp: uintXX -&gt; floatXX</span>
<span id="L3712" class="ln">  3712&nbsp;&nbsp;</span>func cvtUintFloat(v Value, t Type) Value {
<span id="L3713" class="ln">  3713&nbsp;&nbsp;</span>	return makeFloat(v.flag.ro(), float64(v.Uint()), t)
<span id="L3714" class="ln">  3714&nbsp;&nbsp;</span>}
<span id="L3715" class="ln">  3715&nbsp;&nbsp;</span>
<span id="L3716" class="ln">  3716&nbsp;&nbsp;</span><span class="comment">// convertOp: floatXX -&gt; floatXX</span>
<span id="L3717" class="ln">  3717&nbsp;&nbsp;</span>func cvtFloat(v Value, t Type) Value {
<span id="L3718" class="ln">  3718&nbsp;&nbsp;</span>	if v.Type().Kind() == Float32 &amp;&amp; t.Kind() == Float32 {
<span id="L3719" class="ln">  3719&nbsp;&nbsp;</span>		<span class="comment">// Don&#39;t do any conversion if both types have underlying type float32.</span>
<span id="L3720" class="ln">  3720&nbsp;&nbsp;</span>		<span class="comment">// This avoids converting to float64 and back, which will</span>
<span id="L3721" class="ln">  3721&nbsp;&nbsp;</span>		<span class="comment">// convert a signaling NaN to a quiet NaN. See issue 36400.</span>
<span id="L3722" class="ln">  3722&nbsp;&nbsp;</span>		return makeFloat32(v.flag.ro(), *(*float32)(v.ptr), t)
<span id="L3723" class="ln">  3723&nbsp;&nbsp;</span>	}
<span id="L3724" class="ln">  3724&nbsp;&nbsp;</span>	return makeFloat(v.flag.ro(), v.Float(), t)
<span id="L3725" class="ln">  3725&nbsp;&nbsp;</span>}
<span id="L3726" class="ln">  3726&nbsp;&nbsp;</span>
<span id="L3727" class="ln">  3727&nbsp;&nbsp;</span><span class="comment">// convertOp: complexXX -&gt; complexXX</span>
<span id="L3728" class="ln">  3728&nbsp;&nbsp;</span>func cvtComplex(v Value, t Type) Value {
<span id="L3729" class="ln">  3729&nbsp;&nbsp;</span>	return makeComplex(v.flag.ro(), v.Complex(), t)
<span id="L3730" class="ln">  3730&nbsp;&nbsp;</span>}
<span id="L3731" class="ln">  3731&nbsp;&nbsp;</span>
<span id="L3732" class="ln">  3732&nbsp;&nbsp;</span><span class="comment">// convertOp: intXX -&gt; string</span>
<span id="L3733" class="ln">  3733&nbsp;&nbsp;</span>func cvtIntString(v Value, t Type) Value {
<span id="L3734" class="ln">  3734&nbsp;&nbsp;</span>	s := &#34;\uFFFD&#34;
<span id="L3735" class="ln">  3735&nbsp;&nbsp;</span>	if x := v.Int(); int64(rune(x)) == x {
<span id="L3736" class="ln">  3736&nbsp;&nbsp;</span>		s = string(rune(x))
<span id="L3737" class="ln">  3737&nbsp;&nbsp;</span>	}
<span id="L3738" class="ln">  3738&nbsp;&nbsp;</span>	return makeString(v.flag.ro(), s, t)
<span id="L3739" class="ln">  3739&nbsp;&nbsp;</span>}
<span id="L3740" class="ln">  3740&nbsp;&nbsp;</span>
<span id="L3741" class="ln">  3741&nbsp;&nbsp;</span><span class="comment">// convertOp: uintXX -&gt; string</span>
<span id="L3742" class="ln">  3742&nbsp;&nbsp;</span>func cvtUintString(v Value, t Type) Value {
<span id="L3743" class="ln">  3743&nbsp;&nbsp;</span>	s := &#34;\uFFFD&#34;
<span id="L3744" class="ln">  3744&nbsp;&nbsp;</span>	if x := v.Uint(); uint64(rune(x)) == x {
<span id="L3745" class="ln">  3745&nbsp;&nbsp;</span>		s = string(rune(x))
<span id="L3746" class="ln">  3746&nbsp;&nbsp;</span>	}
<span id="L3747" class="ln">  3747&nbsp;&nbsp;</span>	return makeString(v.flag.ro(), s, t)
<span id="L3748" class="ln">  3748&nbsp;&nbsp;</span>}
<span id="L3749" class="ln">  3749&nbsp;&nbsp;</span>
<span id="L3750" class="ln">  3750&nbsp;&nbsp;</span><span class="comment">// convertOp: []byte -&gt; string</span>
<span id="L3751" class="ln">  3751&nbsp;&nbsp;</span>func cvtBytesString(v Value, t Type) Value {
<span id="L3752" class="ln">  3752&nbsp;&nbsp;</span>	return makeString(v.flag.ro(), string(v.Bytes()), t)
<span id="L3753" class="ln">  3753&nbsp;&nbsp;</span>}
<span id="L3754" class="ln">  3754&nbsp;&nbsp;</span>
<span id="L3755" class="ln">  3755&nbsp;&nbsp;</span><span class="comment">// convertOp: string -&gt; []byte</span>
<span id="L3756" class="ln">  3756&nbsp;&nbsp;</span>func cvtStringBytes(v Value, t Type) Value {
<span id="L3757" class="ln">  3757&nbsp;&nbsp;</span>	return makeBytes(v.flag.ro(), []byte(v.String()), t)
<span id="L3758" class="ln">  3758&nbsp;&nbsp;</span>}
<span id="L3759" class="ln">  3759&nbsp;&nbsp;</span>
<span id="L3760" class="ln">  3760&nbsp;&nbsp;</span><span class="comment">// convertOp: []rune -&gt; string</span>
<span id="L3761" class="ln">  3761&nbsp;&nbsp;</span>func cvtRunesString(v Value, t Type) Value {
<span id="L3762" class="ln">  3762&nbsp;&nbsp;</span>	return makeString(v.flag.ro(), string(v.runes()), t)
<span id="L3763" class="ln">  3763&nbsp;&nbsp;</span>}
<span id="L3764" class="ln">  3764&nbsp;&nbsp;</span>
<span id="L3765" class="ln">  3765&nbsp;&nbsp;</span><span class="comment">// convertOp: string -&gt; []rune</span>
<span id="L3766" class="ln">  3766&nbsp;&nbsp;</span>func cvtStringRunes(v Value, t Type) Value {
<span id="L3767" class="ln">  3767&nbsp;&nbsp;</span>	return makeRunes(v.flag.ro(), []rune(v.String()), t)
<span id="L3768" class="ln">  3768&nbsp;&nbsp;</span>}
<span id="L3769" class="ln">  3769&nbsp;&nbsp;</span>
<span id="L3770" class="ln">  3770&nbsp;&nbsp;</span><span class="comment">// convertOp: []T -&gt; *[N]T</span>
<span id="L3771" class="ln">  3771&nbsp;&nbsp;</span>func cvtSliceArrayPtr(v Value, t Type) Value {
<span id="L3772" class="ln">  3772&nbsp;&nbsp;</span>	n := t.Elem().Len()
<span id="L3773" class="ln">  3773&nbsp;&nbsp;</span>	if n &gt; v.Len() {
<span id="L3774" class="ln">  3774&nbsp;&nbsp;</span>		panic(&#34;reflect: cannot convert slice with length &#34; + itoa.Itoa(v.Len()) + &#34; to pointer to array with length &#34; + itoa.Itoa(n))
<span id="L3775" class="ln">  3775&nbsp;&nbsp;</span>	}
<span id="L3776" class="ln">  3776&nbsp;&nbsp;</span>	h := (*unsafeheader.Slice)(v.ptr)
<span id="L3777" class="ln">  3777&nbsp;&nbsp;</span>	return Value{t.common(), h.Data, v.flag&amp;^(flagIndir|flagAddr|flagKindMask) | flag(Pointer)}
<span id="L3778" class="ln">  3778&nbsp;&nbsp;</span>}
<span id="L3779" class="ln">  3779&nbsp;&nbsp;</span>
<span id="L3780" class="ln">  3780&nbsp;&nbsp;</span><span class="comment">// convertOp: []T -&gt; [N]T</span>
<span id="L3781" class="ln">  3781&nbsp;&nbsp;</span>func cvtSliceArray(v Value, t Type) Value {
<span id="L3782" class="ln">  3782&nbsp;&nbsp;</span>	n := t.Len()
<span id="L3783" class="ln">  3783&nbsp;&nbsp;</span>	if n &gt; v.Len() {
<span id="L3784" class="ln">  3784&nbsp;&nbsp;</span>		panic(&#34;reflect: cannot convert slice with length &#34; + itoa.Itoa(v.Len()) + &#34; to array with length &#34; + itoa.Itoa(n))
<span id="L3785" class="ln">  3785&nbsp;&nbsp;</span>	}
<span id="L3786" class="ln">  3786&nbsp;&nbsp;</span>	h := (*unsafeheader.Slice)(v.ptr)
<span id="L3787" class="ln">  3787&nbsp;&nbsp;</span>	typ := t.common()
<span id="L3788" class="ln">  3788&nbsp;&nbsp;</span>	ptr := h.Data
<span id="L3789" class="ln">  3789&nbsp;&nbsp;</span>	c := unsafe_New(typ)
<span id="L3790" class="ln">  3790&nbsp;&nbsp;</span>	typedmemmove(typ, c, ptr)
<span id="L3791" class="ln">  3791&nbsp;&nbsp;</span>	ptr = c
<span id="L3792" class="ln">  3792&nbsp;&nbsp;</span>
<span id="L3793" class="ln">  3793&nbsp;&nbsp;</span>	return Value{typ, ptr, v.flag&amp;^(flagAddr|flagKindMask) | flag(Array)}
<span id="L3794" class="ln">  3794&nbsp;&nbsp;</span>}
<span id="L3795" class="ln">  3795&nbsp;&nbsp;</span>
<span id="L3796" class="ln">  3796&nbsp;&nbsp;</span><span class="comment">// convertOp: direct copy</span>
<span id="L3797" class="ln">  3797&nbsp;&nbsp;</span>func cvtDirect(v Value, typ Type) Value {
<span id="L3798" class="ln">  3798&nbsp;&nbsp;</span>	f := v.flag
<span id="L3799" class="ln">  3799&nbsp;&nbsp;</span>	t := typ.common()
<span id="L3800" class="ln">  3800&nbsp;&nbsp;</span>	ptr := v.ptr
<span id="L3801" class="ln">  3801&nbsp;&nbsp;</span>	if f&amp;flagAddr != 0 {
<span id="L3802" class="ln">  3802&nbsp;&nbsp;</span>		<span class="comment">// indirect, mutable word - make a copy</span>
<span id="L3803" class="ln">  3803&nbsp;&nbsp;</span>		c := unsafe_New(t)
<span id="L3804" class="ln">  3804&nbsp;&nbsp;</span>		typedmemmove(t, c, ptr)
<span id="L3805" class="ln">  3805&nbsp;&nbsp;</span>		ptr = c
<span id="L3806" class="ln">  3806&nbsp;&nbsp;</span>		f &amp;^= flagAddr
<span id="L3807" class="ln">  3807&nbsp;&nbsp;</span>	}
<span id="L3808" class="ln">  3808&nbsp;&nbsp;</span>	return Value{t, ptr, v.flag.ro() | f} <span class="comment">// v.flag.ro()|f == f?</span>
<span id="L3809" class="ln">  3809&nbsp;&nbsp;</span>}
<span id="L3810" class="ln">  3810&nbsp;&nbsp;</span>
<span id="L3811" class="ln">  3811&nbsp;&nbsp;</span><span class="comment">// convertOp: concrete -&gt; interface</span>
<span id="L3812" class="ln">  3812&nbsp;&nbsp;</span>func cvtT2I(v Value, typ Type) Value {
<span id="L3813" class="ln">  3813&nbsp;&nbsp;</span>	target := unsafe_New(typ.common())
<span id="L3814" class="ln">  3814&nbsp;&nbsp;</span>	x := valueInterface(v, false)
<span id="L3815" class="ln">  3815&nbsp;&nbsp;</span>	if typ.NumMethod() == 0 {
<span id="L3816" class="ln">  3816&nbsp;&nbsp;</span>		*(*any)(target) = x
<span id="L3817" class="ln">  3817&nbsp;&nbsp;</span>	} else {
<span id="L3818" class="ln">  3818&nbsp;&nbsp;</span>		ifaceE2I(typ.common(), x, target)
<span id="L3819" class="ln">  3819&nbsp;&nbsp;</span>	}
<span id="L3820" class="ln">  3820&nbsp;&nbsp;</span>	return Value{typ.common(), target, v.flag.ro() | flagIndir | flag(Interface)}
<span id="L3821" class="ln">  3821&nbsp;&nbsp;</span>}
<span id="L3822" class="ln">  3822&nbsp;&nbsp;</span>
<span id="L3823" class="ln">  3823&nbsp;&nbsp;</span><span class="comment">// convertOp: interface -&gt; interface</span>
<span id="L3824" class="ln">  3824&nbsp;&nbsp;</span>func cvtI2I(v Value, typ Type) Value {
<span id="L3825" class="ln">  3825&nbsp;&nbsp;</span>	if v.IsNil() {
<span id="L3826" class="ln">  3826&nbsp;&nbsp;</span>		ret := Zero(typ)
<span id="L3827" class="ln">  3827&nbsp;&nbsp;</span>		ret.flag |= v.flag.ro()
<span id="L3828" class="ln">  3828&nbsp;&nbsp;</span>		return ret
<span id="L3829" class="ln">  3829&nbsp;&nbsp;</span>	}
<span id="L3830" class="ln">  3830&nbsp;&nbsp;</span>	return cvtT2I(v.Elem(), typ)
<span id="L3831" class="ln">  3831&nbsp;&nbsp;</span>}
<span id="L3832" class="ln">  3832&nbsp;&nbsp;</span>
<span id="L3833" class="ln">  3833&nbsp;&nbsp;</span><span class="comment">// implemented in ../runtime</span>
<span id="L3834" class="ln">  3834&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3835" class="ln">  3835&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3836" class="ln">  3836&nbsp;&nbsp;</span>func chancap(ch unsafe.Pointer) int
<span id="L3837" class="ln">  3837&nbsp;&nbsp;</span>
<span id="L3838" class="ln">  3838&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3839" class="ln">  3839&nbsp;&nbsp;</span>func chanclose(ch unsafe.Pointer)
<span id="L3840" class="ln">  3840&nbsp;&nbsp;</span>
<span id="L3841" class="ln">  3841&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3842" class="ln">  3842&nbsp;&nbsp;</span>func chanlen(ch unsafe.Pointer) int
<span id="L3843" class="ln">  3843&nbsp;&nbsp;</span>
<span id="L3844" class="ln">  3844&nbsp;&nbsp;</span><span class="comment">// Note: some of the noescape annotations below are technically a lie,</span>
<span id="L3845" class="ln">  3845&nbsp;&nbsp;</span><span class="comment">// but safe in the context of this package. Functions like chansend0</span>
<span id="L3846" class="ln">  3846&nbsp;&nbsp;</span><span class="comment">// and mapassign0 don&#39;t escape the referent, but may escape anything</span>
<span id="L3847" class="ln">  3847&nbsp;&nbsp;</span><span class="comment">// the referent points to (they do shallow copies of the referent).</span>
<span id="L3848" class="ln">  3848&nbsp;&nbsp;</span><span class="comment">// We add a 0 to their names and wrap them in functions with the</span>
<span id="L3849" class="ln">  3849&nbsp;&nbsp;</span><span class="comment">// proper escape behavior.</span>
<span id="L3850" class="ln">  3850&nbsp;&nbsp;</span>
<span id="L3851" class="ln">  3851&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3852" class="ln">  3852&nbsp;&nbsp;</span>func chanrecv(ch unsafe.Pointer, nb bool, val unsafe.Pointer) (selected, received bool)
<span id="L3853" class="ln">  3853&nbsp;&nbsp;</span>
<span id="L3854" class="ln">  3854&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3855" class="ln">  3855&nbsp;&nbsp;</span>func chansend0(ch unsafe.Pointer, val unsafe.Pointer, nb bool) bool
<span id="L3856" class="ln">  3856&nbsp;&nbsp;</span>
<span id="L3857" class="ln">  3857&nbsp;&nbsp;</span>func chansend(ch unsafe.Pointer, val unsafe.Pointer, nb bool) bool {
<span id="L3858" class="ln">  3858&nbsp;&nbsp;</span>	contentEscapes(val)
<span id="L3859" class="ln">  3859&nbsp;&nbsp;</span>	return chansend0(ch, val, nb)
<span id="L3860" class="ln">  3860&nbsp;&nbsp;</span>}
<span id="L3861" class="ln">  3861&nbsp;&nbsp;</span>
<span id="L3862" class="ln">  3862&nbsp;&nbsp;</span>func makechan(typ *abi.Type, size int) (ch unsafe.Pointer)
<span id="L3863" class="ln">  3863&nbsp;&nbsp;</span>func makemap(t *abi.Type, cap int) (m unsafe.Pointer)
<span id="L3864" class="ln">  3864&nbsp;&nbsp;</span>
<span id="L3865" class="ln">  3865&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3866" class="ln">  3866&nbsp;&nbsp;</span>func mapaccess(t *abi.Type, m unsafe.Pointer, key unsafe.Pointer) (val unsafe.Pointer)
<span id="L3867" class="ln">  3867&nbsp;&nbsp;</span>
<span id="L3868" class="ln">  3868&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3869" class="ln">  3869&nbsp;&nbsp;</span>func mapaccess_faststr(t *abi.Type, m unsafe.Pointer, key string) (val unsafe.Pointer)
<span id="L3870" class="ln">  3870&nbsp;&nbsp;</span>
<span id="L3871" class="ln">  3871&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3872" class="ln">  3872&nbsp;&nbsp;</span>func mapassign0(t *abi.Type, m unsafe.Pointer, key, val unsafe.Pointer)
<span id="L3873" class="ln">  3873&nbsp;&nbsp;</span>
<span id="L3874" class="ln">  3874&nbsp;&nbsp;</span>func mapassign(t *abi.Type, m unsafe.Pointer, key, val unsafe.Pointer) {
<span id="L3875" class="ln">  3875&nbsp;&nbsp;</span>	contentEscapes(key)
<span id="L3876" class="ln">  3876&nbsp;&nbsp;</span>	contentEscapes(val)
<span id="L3877" class="ln">  3877&nbsp;&nbsp;</span>	mapassign0(t, m, key, val)
<span id="L3878" class="ln">  3878&nbsp;&nbsp;</span>}
<span id="L3879" class="ln">  3879&nbsp;&nbsp;</span>
<span id="L3880" class="ln">  3880&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3881" class="ln">  3881&nbsp;&nbsp;</span>func mapassign_faststr0(t *abi.Type, m unsafe.Pointer, key string, val unsafe.Pointer)
<span id="L3882" class="ln">  3882&nbsp;&nbsp;</span>
<span id="L3883" class="ln">  3883&nbsp;&nbsp;</span>func mapassign_faststr(t *abi.Type, m unsafe.Pointer, key string, val unsafe.Pointer) {
<span id="L3884" class="ln">  3884&nbsp;&nbsp;</span>	contentEscapes((*unsafeheader.String)(unsafe.Pointer(&amp;key)).Data)
<span id="L3885" class="ln">  3885&nbsp;&nbsp;</span>	contentEscapes(val)
<span id="L3886" class="ln">  3886&nbsp;&nbsp;</span>	mapassign_faststr0(t, m, key, val)
<span id="L3887" class="ln">  3887&nbsp;&nbsp;</span>}
<span id="L3888" class="ln">  3888&nbsp;&nbsp;</span>
<span id="L3889" class="ln">  3889&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3890" class="ln">  3890&nbsp;&nbsp;</span>func mapdelete(t *abi.Type, m unsafe.Pointer, key unsafe.Pointer)
<span id="L3891" class="ln">  3891&nbsp;&nbsp;</span>
<span id="L3892" class="ln">  3892&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3893" class="ln">  3893&nbsp;&nbsp;</span>func mapdelete_faststr(t *abi.Type, m unsafe.Pointer, key string)
<span id="L3894" class="ln">  3894&nbsp;&nbsp;</span>
<span id="L3895" class="ln">  3895&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3896" class="ln">  3896&nbsp;&nbsp;</span>func mapiterinit(t *abi.Type, m unsafe.Pointer, it *hiter)
<span id="L3897" class="ln">  3897&nbsp;&nbsp;</span>
<span id="L3898" class="ln">  3898&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3899" class="ln">  3899&nbsp;&nbsp;</span>func mapiterkey(it *hiter) (key unsafe.Pointer)
<span id="L3900" class="ln">  3900&nbsp;&nbsp;</span>
<span id="L3901" class="ln">  3901&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3902" class="ln">  3902&nbsp;&nbsp;</span>func mapiterelem(it *hiter) (elem unsafe.Pointer)
<span id="L3903" class="ln">  3903&nbsp;&nbsp;</span>
<span id="L3904" class="ln">  3904&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3905" class="ln">  3905&nbsp;&nbsp;</span>func mapiternext(it *hiter)
<span id="L3906" class="ln">  3906&nbsp;&nbsp;</span>
<span id="L3907" class="ln">  3907&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3908" class="ln">  3908&nbsp;&nbsp;</span>func maplen(m unsafe.Pointer) int
<span id="L3909" class="ln">  3909&nbsp;&nbsp;</span>
<span id="L3910" class="ln">  3910&nbsp;&nbsp;</span>func mapclear(t *abi.Type, m unsafe.Pointer)
<span id="L3911" class="ln">  3911&nbsp;&nbsp;</span>
<span id="L3912" class="ln">  3912&nbsp;&nbsp;</span><span class="comment">// call calls fn with &#34;stackArgsSize&#34; bytes of stack arguments laid out</span>
<span id="L3913" class="ln">  3913&nbsp;&nbsp;</span><span class="comment">// at stackArgs and register arguments laid out in regArgs. frameSize is</span>
<span id="L3914" class="ln">  3914&nbsp;&nbsp;</span><span class="comment">// the total amount of stack space that will be reserved by call, so this</span>
<span id="L3915" class="ln">  3915&nbsp;&nbsp;</span><span class="comment">// should include enough space to spill register arguments to the stack in</span>
<span id="L3916" class="ln">  3916&nbsp;&nbsp;</span><span class="comment">// case of preemption.</span>
<span id="L3917" class="ln">  3917&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3918" class="ln">  3918&nbsp;&nbsp;</span><span class="comment">// After fn returns, call copies stackArgsSize-stackRetOffset result bytes</span>
<span id="L3919" class="ln">  3919&nbsp;&nbsp;</span><span class="comment">// back into stackArgs+stackRetOffset before returning, for any return</span>
<span id="L3920" class="ln">  3920&nbsp;&nbsp;</span><span class="comment">// values passed on the stack. Register-based return values will be found</span>
<span id="L3921" class="ln">  3921&nbsp;&nbsp;</span><span class="comment">// in the same regArgs structure.</span>
<span id="L3922" class="ln">  3922&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3923" class="ln">  3923&nbsp;&nbsp;</span><span class="comment">// regArgs must also be prepared with an appropriate ReturnIsPtr bitmap</span>
<span id="L3924" class="ln">  3924&nbsp;&nbsp;</span><span class="comment">// indicating which registers will contain pointer-valued return values. The</span>
<span id="L3925" class="ln">  3925&nbsp;&nbsp;</span><span class="comment">// purpose of this bitmap is to keep pointers visible to the GC between</span>
<span id="L3926" class="ln">  3926&nbsp;&nbsp;</span><span class="comment">// returning from reflectcall and actually using them.</span>
<span id="L3927" class="ln">  3927&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3928" class="ln">  3928&nbsp;&nbsp;</span><span class="comment">// If copying result bytes back from the stack, the caller must pass the</span>
<span id="L3929" class="ln">  3929&nbsp;&nbsp;</span><span class="comment">// argument frame type as stackArgsType, so that call can execute appropriate</span>
<span id="L3930" class="ln">  3930&nbsp;&nbsp;</span><span class="comment">// write barriers during the copy.</span>
<span id="L3931" class="ln">  3931&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3932" class="ln">  3932&nbsp;&nbsp;</span><span class="comment">// Arguments passed through to call do not escape. The type is used only in a</span>
<span id="L3933" class="ln">  3933&nbsp;&nbsp;</span><span class="comment">// very limited callee of call, the stackArgs are copied, and regArgs is only</span>
<span id="L3934" class="ln">  3934&nbsp;&nbsp;</span><span class="comment">// used in the call frame.</span>
<span id="L3935" class="ln">  3935&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3936" class="ln">  3936&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3937" class="ln">  3937&nbsp;&nbsp;</span><span class="comment">//go:linkname call runtime.reflectcall</span>
<span id="L3938" class="ln">  3938&nbsp;&nbsp;</span>func call(stackArgsType *abi.Type, f, stackArgs unsafe.Pointer, stackArgsSize, stackRetOffset, frameSize uint32, regArgs *abi.RegArgs)
<span id="L3939" class="ln">  3939&nbsp;&nbsp;</span>
<span id="L3940" class="ln">  3940&nbsp;&nbsp;</span>func ifaceE2I(t *abi.Type, src any, dst unsafe.Pointer)
<span id="L3941" class="ln">  3941&nbsp;&nbsp;</span>
<span id="L3942" class="ln">  3942&nbsp;&nbsp;</span><span class="comment">// memmove copies size bytes to dst from src. No write barriers are used.</span>
<span id="L3943" class="ln">  3943&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3944" class="ln">  3944&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3945" class="ln">  3945&nbsp;&nbsp;</span>func memmove(dst, src unsafe.Pointer, size uintptr)
<span id="L3946" class="ln">  3946&nbsp;&nbsp;</span>
<span id="L3947" class="ln">  3947&nbsp;&nbsp;</span><span class="comment">// typedmemmove copies a value of type t to dst from src.</span>
<span id="L3948" class="ln">  3948&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3949" class="ln">  3949&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3950" class="ln">  3950&nbsp;&nbsp;</span>func typedmemmove(t *abi.Type, dst, src unsafe.Pointer)
<span id="L3951" class="ln">  3951&nbsp;&nbsp;</span>
<span id="L3952" class="ln">  3952&nbsp;&nbsp;</span><span class="comment">// typedmemclr zeros the value at ptr of type t.</span>
<span id="L3953" class="ln">  3953&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3954" class="ln">  3954&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3955" class="ln">  3955&nbsp;&nbsp;</span>func typedmemclr(t *abi.Type, ptr unsafe.Pointer)
<span id="L3956" class="ln">  3956&nbsp;&nbsp;</span>
<span id="L3957" class="ln">  3957&nbsp;&nbsp;</span><span class="comment">// typedmemclrpartial is like typedmemclr but assumes that</span>
<span id="L3958" class="ln">  3958&nbsp;&nbsp;</span><span class="comment">// dst points off bytes into the value and only clears size bytes.</span>
<span id="L3959" class="ln">  3959&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3960" class="ln">  3960&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3961" class="ln">  3961&nbsp;&nbsp;</span>func typedmemclrpartial(t *abi.Type, ptr unsafe.Pointer, off, size uintptr)
<span id="L3962" class="ln">  3962&nbsp;&nbsp;</span>
<span id="L3963" class="ln">  3963&nbsp;&nbsp;</span><span class="comment">// typedslicecopy copies a slice of elemType values from src to dst,</span>
<span id="L3964" class="ln">  3964&nbsp;&nbsp;</span><span class="comment">// returning the number of elements copied.</span>
<span id="L3965" class="ln">  3965&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3966" class="ln">  3966&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3967" class="ln">  3967&nbsp;&nbsp;</span>func typedslicecopy(t *abi.Type, dst, src unsafeheader.Slice) int
<span id="L3968" class="ln">  3968&nbsp;&nbsp;</span>
<span id="L3969" class="ln">  3969&nbsp;&nbsp;</span><span class="comment">// typedarrayclear zeroes the value at ptr of an array of elemType,</span>
<span id="L3970" class="ln">  3970&nbsp;&nbsp;</span><span class="comment">// only clears len elem.</span>
<span id="L3971" class="ln">  3971&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3972" class="ln">  3972&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3973" class="ln">  3973&nbsp;&nbsp;</span>func typedarrayclear(elemType *abi.Type, ptr unsafe.Pointer, len int)
<span id="L3974" class="ln">  3974&nbsp;&nbsp;</span>
<span id="L3975" class="ln">  3975&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3976" class="ln">  3976&nbsp;&nbsp;</span>func typehash(t *abi.Type, p unsafe.Pointer, h uintptr) uintptr
<span id="L3977" class="ln">  3977&nbsp;&nbsp;</span>
<span id="L3978" class="ln">  3978&nbsp;&nbsp;</span>func verifyNotInHeapPtr(p uintptr) bool
<span id="L3979" class="ln">  3979&nbsp;&nbsp;</span>
<span id="L3980" class="ln">  3980&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L3981" class="ln">  3981&nbsp;&nbsp;</span>func growslice(t *abi.Type, old unsafeheader.Slice, num int) unsafeheader.Slice
<span id="L3982" class="ln">  3982&nbsp;&nbsp;</span>
<span id="L3983" class="ln">  3983&nbsp;&nbsp;</span><span class="comment">// Dummy annotation marking that the value x escapes,</span>
<span id="L3984" class="ln">  3984&nbsp;&nbsp;</span><span class="comment">// for use in cases where the reflect code is so clever that</span>
<span id="L3985" class="ln">  3985&nbsp;&nbsp;</span><span class="comment">// the compiler cannot follow.</span>
<span id="L3986" class="ln">  3986&nbsp;&nbsp;</span>func escapes(x any) {
<span id="L3987" class="ln">  3987&nbsp;&nbsp;</span>	if dummy.b {
<span id="L3988" class="ln">  3988&nbsp;&nbsp;</span>		dummy.x = x
<span id="L3989" class="ln">  3989&nbsp;&nbsp;</span>	}
<span id="L3990" class="ln">  3990&nbsp;&nbsp;</span>}
<span id="L3991" class="ln">  3991&nbsp;&nbsp;</span>
<span id="L3992" class="ln">  3992&nbsp;&nbsp;</span>var dummy struct {
<span id="L3993" class="ln">  3993&nbsp;&nbsp;</span>	b bool
<span id="L3994" class="ln">  3994&nbsp;&nbsp;</span>	x any
<span id="L3995" class="ln">  3995&nbsp;&nbsp;</span>}
<span id="L3996" class="ln">  3996&nbsp;&nbsp;</span>
<span id="L3997" class="ln">  3997&nbsp;&nbsp;</span><span class="comment">// Dummy annotation marking that the content of value x</span>
<span id="L3998" class="ln">  3998&nbsp;&nbsp;</span><span class="comment">// escapes (i.e. modeling roughly heap=*x),</span>
<span id="L3999" class="ln">  3999&nbsp;&nbsp;</span><span class="comment">// for use in cases where the reflect code is so clever that</span>
<span id="L4000" class="ln">  4000&nbsp;&nbsp;</span><span class="comment">// the compiler cannot follow.</span>
<span id="L4001" class="ln">  4001&nbsp;&nbsp;</span>func contentEscapes(x unsafe.Pointer) {
<span id="L4002" class="ln">  4002&nbsp;&nbsp;</span>	if dummy.b {
<span id="L4003" class="ln">  4003&nbsp;&nbsp;</span>		escapes(*(*any)(x)) <span class="comment">// the dereference may not always be safe, but never executed</span>
<span id="L4004" class="ln">  4004&nbsp;&nbsp;</span>	}
<span id="L4005" class="ln">  4005&nbsp;&nbsp;</span>}
<span id="L4006" class="ln">  4006&nbsp;&nbsp;</span>
<span id="L4007" class="ln">  4007&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L4008" class="ln">  4008&nbsp;&nbsp;</span>func noescape(p unsafe.Pointer) unsafe.Pointer {
<span id="L4009" class="ln">  4009&nbsp;&nbsp;</span>	x := uintptr(p)
<span id="L4010" class="ln">  4010&nbsp;&nbsp;</span>	return unsafe.Pointer(x ^ 0)
<span id="L4011" class="ln">  4011&nbsp;&nbsp;</span>}
<span id="L4012" class="ln">  4012&nbsp;&nbsp;</span>
</pre><p><a href="value.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
