<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/regexp/syntax/doc.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="doc.go#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/regexp">regexp</a>/<a href="http://localhost:8080/src/regexp/syntax">syntax</a>/<span class="text-muted">doc.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/regexp/syntax">regexp/syntax</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2012 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// DO NOT EDIT. This file is generated by mksyntaxgo from the RE2 distribution.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">/*
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>Package syntax parses regular expressions into parse trees and compiles
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>parse trees into programs. Most clients of regular expressions will use the
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>facilities of package regexp (such as Compile and Match) instead of this package.
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span># Syntax
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>The regular expression syntax understood by this package when parsing with the Perl flag is as follows.
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>Parts of the syntax can be disabled by passing alternate flags to Parse.
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>Single characters:
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	.              any character, possibly including newline (flag s=true)
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	[xyz]          character class
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	[^xyz]         negated character class
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	\d             Perl character class
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	\D             negated Perl character class
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	[[:alpha:]]    ASCII character class
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	[[:^alpha:]]   negated ASCII character class
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	\pN            Unicode character class (one-letter name)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	\p{Greek}      Unicode character class
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	\PN            negated Unicode character class (one-letter name)
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	\P{Greek}      negated Unicode character class
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>Composites:
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	xy             x followed by y
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	x|y            x or y (prefer x)
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>Repetitions:
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	x*             zero or more x, prefer more
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	x+             one or more x, prefer more
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	x?             zero or one x, prefer one
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	x{n,m}         n or n+1 or ... or m x, prefer more
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	x{n,}          n or more x, prefer more
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	x{n}           exactly n x
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	x*?            zero or more x, prefer fewer
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	x+?            one or more x, prefer fewer
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	x??            zero or one x, prefer zero
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	x{n,m}?        n or n+1 or ... or m x, prefer fewer
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	x{n,}?         n or more x, prefer fewer
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	x{n}?          exactly n x
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>Implementation restriction: The counting forms x{n,m}, x{n,}, and x{n}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>reject forms that create a minimum or maximum repetition count above 1000.
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>Unlimited repetitions are not subject to this restriction.
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>Grouping:
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	(re)           numbered capturing group (submatch)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	(?P&lt;name&gt;re)   named &amp; numbered capturing group (submatch)
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	(?&lt;name&gt;re)    named &amp; numbered capturing group (submatch)
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	(?:re)         non-capturing group
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	(?flags)       set flags within current group; non-capturing
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	(?flags:re)    set flags during re; non-capturing
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z). The flags are:
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	i              case-insensitive (default false)
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	m              multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false)
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	s              let . match \n (default false)
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	U              ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false)
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>Empty strings:
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	^              at beginning of text or line (flag m=true)
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	$              at end of text (like \z not \Z) or line (flag m=true)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	\A             at beginning of text
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	\b             at ASCII word boundary (\w on one side and \W, \A, or \z on the other)
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	\B             not at ASCII word boundary
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	\z             at end of text
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>Escape sequences:
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	\a             bell (== \007)
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	\f             form feed (== \014)
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	\t             horizontal tab (== \011)
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	\n             newline (== \012)
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	\r             carriage return (== \015)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	\v             vertical tab character (== \013)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	\*             literal *, for any punctuation character *
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	\123           octal character code (up to three digits)
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	\x7F           hex character code (exactly two digits)
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	\x{10FFFF}     hex character code
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	\Q...\E        literal text ... even if ... has punctuation
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>Character class elements:
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	x              single character
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	A-Z            character range (inclusive)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	\d             Perl character class
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	[:foo:]        ASCII character class foo
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	\p{Foo}        Unicode character class Foo
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	\pF            Unicode character class F (one-letter name)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>Named character classes as character class elements:
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	[\d]           digits (== \d)
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	[^\d]          not digits (== \D)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	[\D]           not digits (== \D)
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	[^\D]          not not digits (== \d)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	[[:name:]]     named ASCII class inside character class (== [:name:])
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	[^[:name:]]    named ASCII class inside negated character class (== [:^name:])
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	[\p{Name}]     named Unicode property inside character class (== \p{Name})
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	[^\p{Name}]    named Unicode property inside negated character class (== \P{Name})
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>Perl character classes (all ASCII-only):
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	\d             digits (== [0-9])
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	\D             not digits (== [^0-9])
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	\s             whitespace (== [\t\n\f\r ])
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	\S             not whitespace (== [^\t\n\f\r ])
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	\w             word characters (== [0-9A-Za-z_])
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	\W             not word characters (== [^0-9A-Za-z_])
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>ASCII character classes:
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	[[:alnum:]]    alphanumeric (== [0-9A-Za-z])
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	[[:alpha:]]    alphabetic (== [A-Za-z])
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	[[:ascii:]]    ASCII (== [\x00-\x7F])
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	[[:blank:]]    blank (== [\t ])
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	[[:cntrl:]]    control (== [\x00-\x1F\x7F])
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	[[:digit:]]    digits (== [0-9])
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	[[:graph:]]    graphical (== [!-~] == [A-Za-z0-9!&#34;#$%&amp;&#39;()*+,\-./:;&lt;=&gt;?@[\\\]^_`{|}~])
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	[[:lower:]]    lower case (== [a-z])
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	[[:print:]]    printable (== [ -~] == [ [:graph:]])
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	[[:punct:]]    punctuation (== [!-/:-@[-`{-~])
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	[[:space:]]    whitespace (== [\t\n\v\f\r ])
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	[[:upper:]]    upper case (== [A-Z])
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	[[:word:]]     word characters (== [0-9A-Za-z_])
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	[[:xdigit:]]   hex digit (== [0-9A-Fa-f])
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>Unicode character classes are those in unicode.Categories and unicode.Scripts.
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>*/</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>package syntax
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
</pre><p><a href="doc.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
