<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/regexp/syntax/parse.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./parse.go?s=24543:24593#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/regexp">regexp</a>/<a href="http://localhost:8080/src/regexp/syntax">syntax</a>/<span class="text-muted">parse.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/regexp/syntax">regexp/syntax</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package syntax
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;unicode&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>)
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// An Error describes a failure to parse a regular expression</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// and gives the offending expression.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>type Error struct {
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	Code ErrorCode
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	Expr string
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>}
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>func (e *Error) Error() string {
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	return &#34;error parsing regexp: &#34; + e.Code.String() + &#34;: `&#34; + e.Expr + &#34;`&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>}
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// An ErrorCode describes a failure to parse a regular expression.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>type ErrorCode string
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>const (
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	<span class="comment">// Unexpected error</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	ErrInternalError ErrorCode = &#34;regexp/syntax: internal error&#34;
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	<span class="comment">// Parse errors</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	ErrInvalidCharClass      ErrorCode = &#34;invalid character class&#34;
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	ErrInvalidCharRange      ErrorCode = &#34;invalid character class range&#34;
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	ErrInvalidEscape         ErrorCode = &#34;invalid escape sequence&#34;
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	ErrInvalidNamedCapture   ErrorCode = &#34;invalid named capture&#34;
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	ErrInvalidPerlOp         ErrorCode = &#34;invalid or unsupported Perl syntax&#34;
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	ErrInvalidRepeatOp       ErrorCode = &#34;invalid nested repetition operator&#34;
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	ErrInvalidRepeatSize     ErrorCode = &#34;invalid repeat count&#34;
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	ErrInvalidUTF8           ErrorCode = &#34;invalid UTF-8&#34;
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	ErrMissingBracket        ErrorCode = &#34;missing closing ]&#34;
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	ErrMissingParen          ErrorCode = &#34;missing closing )&#34;
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	ErrMissingRepeatArgument ErrorCode = &#34;missing argument to repetition operator&#34;
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	ErrTrailingBackslash     ErrorCode = &#34;trailing backslash at end of expression&#34;
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	ErrUnexpectedParen       ErrorCode = &#34;unexpected )&#34;
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	ErrNestingDepth          ErrorCode = &#34;expression nests too deeply&#34;
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	ErrLarge                 ErrorCode = &#34;expression too large&#34;
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>)
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>func (e ErrorCode) String() string {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	return string(e)
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// Flags control the behavior of the parser and record information about regexp context.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>type Flags uint16
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>const (
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	FoldCase      Flags = 1 &lt;&lt; iota <span class="comment">// case-insensitive match</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	Literal                         <span class="comment">// treat pattern as literal string</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	ClassNL                         <span class="comment">// allow character classes like [^a-z] and [[:space:]] to match newline</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	DotNL                           <span class="comment">// allow . to match newline</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	OneLine                         <span class="comment">// treat ^ and $ as only matching at beginning and end of text</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	NonGreedy                       <span class="comment">// make repetition operators default to non-greedy</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	PerlX                           <span class="comment">// allow Perl extensions</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	UnicodeGroups                   <span class="comment">// allow \p{Han}, \P{Han} for Unicode group and negation</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	WasDollar                       <span class="comment">// regexp OpEndText was $, not \z</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	Simple                          <span class="comment">// regexp contains no counted repetition</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	MatchNL = ClassNL | DotNL
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	Perl        = ClassNL | OneLine | PerlX | UnicodeGroups <span class="comment">// as close to Perl as possible</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	POSIX Flags = 0                                         <span class="comment">// POSIX syntax</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>)
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// Pseudo-ops for parsing stack.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>const (
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	opLeftParen = opPseudo + iota
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	opVerticalBar
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>)
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// maxHeight is the maximum height of a regexp parse tree.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// It is somewhat arbitrarily chosen, but the idea is to be large enough</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// that no one will actually hit in real use but at the same time small enough</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// that recursion on the Regexp tree will not hit the 1GB Go stack limit.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// The maximum amount of stack for a single recursive frame is probably</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// closer to 1kB, so this could potentially be raised, but it seems unlikely</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// that people have regexps nested even this deeply.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// We ran a test on Google&#39;s C++ code base and turned up only</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// a single use case with depth &gt; 100; it had depth 128.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// Using depth 1000 should be plenty of margin.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// As an optimization, we don&#39;t even bother calculating heights</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// until we&#39;ve allocated at least maxHeight Regexp structures.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>const maxHeight = 1000
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// maxSize is the maximum size of a compiled regexp in Insts.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// It too is somewhat arbitrarily chosen, but the idea is to be large enough</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// to allow significant regexps while at the same time small enough that</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// the compiled form will not take up too much memory.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// 128 MB is enough for a 3.3 million Inst structures, which roughly</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// corresponds to a 3.3 MB regexp.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>const (
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	maxSize  = 128 &lt;&lt; 20 / instSize
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	instSize = 5 * 8 <span class="comment">// byte, 2 uint32, slice is 5 64-bit words</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>)
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// maxRunes is the maximum number of runes allowed in a regexp tree</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// counting the runes in all the nodes.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// Ignoring character classes p.numRunes is always less than the length of the regexp.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// Character classes can make it much larger: each \pL adds 1292 runes.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// 128 MB is enough for 32M runes, which is over 26k \pL instances.</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// Note that repetitions do not make copies of the rune slices,</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// so \pL{1000} is only one rune slice, not 1000.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// We could keep a cache of character classes we&#39;ve seen,</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// so that all the \pL we see use the same rune list,</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// but that doesn&#39;t remove the problem entirely:</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// consider something like [\pL01234][\pL01235][\pL01236]...[\pL^&amp;*()].</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// And because the Rune slice is exposed directly in the Regexp,</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// there is not an opportunity to change the representation to allow</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// partial sharing between different character classes.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// So the limit is the best we can do.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>const (
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	maxRunes = 128 &lt;&lt; 20 / runeSize
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	runeSize = 4 <span class="comment">// rune is int32</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>)
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>type parser struct {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	flags       Flags     <span class="comment">// parse mode flags</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	stack       []*Regexp <span class="comment">// stack of parsed expressions</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	free        *Regexp
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	numCap      int <span class="comment">// number of capturing groups seen</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	wholeRegexp string
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	tmpClass    []rune            <span class="comment">// temporary char class work space</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	numRegexp   int               <span class="comment">// number of regexps allocated</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	numRunes    int               <span class="comment">// number of runes in char classes</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	repeats     int64             <span class="comment">// product of all repetitions seen</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	height      map[*Regexp]int   <span class="comment">// regexp height, for height limit check</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	size        map[*Regexp]int64 <span class="comment">// regexp compiled size, for size limit check</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>func (p *parser) newRegexp(op Op) *Regexp {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	re := p.free
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	if re != nil {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		p.free = re.Sub0[0]
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		*re = Regexp{}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	} else {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		re = new(Regexp)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		p.numRegexp++
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	re.Op = op
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	return re
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>func (p *parser) reuse(re *Regexp) {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	if p.height != nil {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		delete(p.height, re)
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	re.Sub0[0] = p.free
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	p.free = re
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>func (p *parser) checkLimits(re *Regexp) {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	if p.numRunes &gt; maxRunes {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		panic(ErrLarge)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	p.checkSize(re)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	p.checkHeight(re)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>func (p *parser) checkSize(re *Regexp) {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	if p.size == nil {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		<span class="comment">// We haven&#39;t started tracking size yet.</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		<span class="comment">// Do a relatively cheap check to see if we need to start.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		<span class="comment">// Maintain the product of all the repeats we&#39;ve seen</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		<span class="comment">// and don&#39;t track if the total number of regexp nodes</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		<span class="comment">// we&#39;ve seen times the repeat product is in budget.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		if p.repeats == 0 {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>			p.repeats = 1
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		if re.Op == OpRepeat {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>			n := re.Max
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>			if n == -1 {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>				n = re.Min
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>			}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>			if n &lt;= 0 {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>				n = 1
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>			}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>			if int64(n) &gt; maxSize/p.repeats {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>				p.repeats = maxSize
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>			} else {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>				p.repeats *= int64(n)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>			}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		if int64(p.numRegexp) &lt; maxSize/p.repeats {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>			return
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		<span class="comment">// We need to start tracking size.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		<span class="comment">// Make the map and belatedly populate it</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		<span class="comment">// with info about everything we&#39;ve constructed so far.</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		p.size = make(map[*Regexp]int64)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		for _, re := range p.stack {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>			p.checkSize(re)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	if p.calcSize(re, true) &gt; maxSize {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		panic(ErrLarge)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>func (p *parser) calcSize(re *Regexp, force bool) int64 {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	if !force {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		if size, ok := p.size[re]; ok {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			return size
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	var size int64
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	switch re.Op {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	case OpLiteral:
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		size = int64(len(re.Rune))
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	case OpCapture, OpStar:
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		<span class="comment">// star can be 1+ or 2+; assume 2 pessimistically</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		size = 2 + p.calcSize(re.Sub[0], false)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	case OpPlus, OpQuest:
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		size = 1 + p.calcSize(re.Sub[0], false)
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	case OpConcat:
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		for _, sub := range re.Sub {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>			size += p.calcSize(sub, false)
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	case OpAlternate:
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		for _, sub := range re.Sub {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>			size += p.calcSize(sub, false)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		if len(re.Sub) &gt; 1 {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>			size += int64(len(re.Sub)) - 1
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	case OpRepeat:
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		sub := p.calcSize(re.Sub[0], false)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		if re.Max == -1 {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			if re.Min == 0 {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>				size = 2 + sub <span class="comment">// x*</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			} else {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>				size = 1 + int64(re.Min)*sub <span class="comment">// xxx+</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>			}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>			break
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		<span class="comment">// x{2,5} = xx(x(x(x)?)?)?</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		size = int64(re.Max)*sub + int64(re.Max-re.Min)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	if size &lt; 1 {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		size = 1
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	p.size[re] = size
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	return size
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>}
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>func (p *parser) checkHeight(re *Regexp) {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	if p.numRegexp &lt; maxHeight {
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		return
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	if p.height == nil {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		p.height = make(map[*Regexp]int)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		for _, re := range p.stack {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>			p.checkHeight(re)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	if p.calcHeight(re, true) &gt; maxHeight {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		panic(ErrNestingDepth)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>func (p *parser) calcHeight(re *Regexp, force bool) int {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	if !force {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		if h, ok := p.height[re]; ok {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>			return h
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	h := 1
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	for _, sub := range re.Sub {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		hsub := p.calcHeight(sub, false)
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		if h &lt; 1+hsub {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			h = 1 + hsub
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	p.height[re] = h
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	return h
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// Parse stack manipulation.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// push pushes the regexp re onto the parse stack and returns the regexp.</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>func (p *parser) push(re *Regexp) *Regexp {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	p.numRunes += len(re.Rune)
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	if re.Op == OpCharClass &amp;&amp; len(re.Rune) == 2 &amp;&amp; re.Rune[0] == re.Rune[1] {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		<span class="comment">// Single rune.</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		if p.maybeConcat(re.Rune[0], p.flags&amp;^FoldCase) {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>			return nil
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		re.Op = OpLiteral
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		re.Rune = re.Rune[:1]
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		re.Flags = p.flags &amp;^ FoldCase
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	} else if re.Op == OpCharClass &amp;&amp; len(re.Rune) == 4 &amp;&amp;
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		re.Rune[0] == re.Rune[1] &amp;&amp; re.Rune[2] == re.Rune[3] &amp;&amp;
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		unicode.SimpleFold(re.Rune[0]) == re.Rune[2] &amp;&amp;
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		unicode.SimpleFold(re.Rune[2]) == re.Rune[0] ||
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		re.Op == OpCharClass &amp;&amp; len(re.Rune) == 2 &amp;&amp;
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>			re.Rune[0]+1 == re.Rune[1] &amp;&amp;
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>			unicode.SimpleFold(re.Rune[0]) == re.Rune[1] &amp;&amp;
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>			unicode.SimpleFold(re.Rune[1]) == re.Rune[0] {
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		<span class="comment">// Case-insensitive rune like [Aa] or [Δδ].</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		if p.maybeConcat(re.Rune[0], p.flags|FoldCase) {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			return nil
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		<span class="comment">// Rewrite as (case-insensitive) literal.</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		re.Op = OpLiteral
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		re.Rune = re.Rune[:1]
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		re.Flags = p.flags | FoldCase
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	} else {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		<span class="comment">// Incremental concatenation.</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		p.maybeConcat(-1, 0)
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	p.stack = append(p.stack, re)
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	p.checkLimits(re)
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	return re
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span><span class="comment">// maybeConcat implements incremental concatenation</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span><span class="comment">// of literal runes into string nodes. The parser calls this</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">// before each push, so only the top fragment of the stack</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">// might need processing. Since this is called before a push,</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">// the topmost literal is no longer subject to operators like *</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// (Otherwise ab* would turn into (ab)*.)</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">// If r &gt;= 0 and there&#39;s a node left over, maybeConcat uses it</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// to push r with the given flags.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">// maybeConcat reports whether r was pushed.</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>func (p *parser) maybeConcat(r rune, flags Flags) bool {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	n := len(p.stack)
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	if n &lt; 2 {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		return false
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	re1 := p.stack[n-1]
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	re2 := p.stack[n-2]
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	if re1.Op != OpLiteral || re2.Op != OpLiteral || re1.Flags&amp;FoldCase != re2.Flags&amp;FoldCase {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		return false
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	<span class="comment">// Push re1 into re2.</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	re2.Rune = append(re2.Rune, re1.Rune...)
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	<span class="comment">// Reuse re1 if possible.</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	if r &gt;= 0 {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		re1.Rune = re1.Rune0[:1]
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>		re1.Rune[0] = r
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		re1.Flags = flags
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		return true
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	}
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	p.stack = p.stack[:n-1]
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	p.reuse(re1)
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	return false <span class="comment">// did not push r</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// literal pushes a literal regexp for the rune r on the stack.</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>func (p *parser) literal(r rune) {
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	re := p.newRegexp(OpLiteral)
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	re.Flags = p.flags
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	if p.flags&amp;FoldCase != 0 {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		r = minFoldRune(r)
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	re.Rune0[0] = r
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	re.Rune = re.Rune0[:1]
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	p.push(re)
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>}
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">// minFoldRune returns the minimum rune fold-equivalent to r.</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>func minFoldRune(r rune) rune {
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	if r &lt; minFold || r &gt; maxFold {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		return r
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	m := r
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	r0 := r
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	for r = unicode.SimpleFold(r); r != r0; r = unicode.SimpleFold(r) {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		m = min(m, r)
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	return m
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span><span class="comment">// op pushes a regexp with the given op onto the stack</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">// and returns that regexp.</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>func (p *parser) op(op Op) *Regexp {
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	re := p.newRegexp(op)
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	re.Flags = p.flags
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	return p.push(re)
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span><span class="comment">// repeat replaces the top stack element with itself repeated according to op, min, max.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span><span class="comment">// before is the regexp suffix starting at the repetition operator.</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span><span class="comment">// after is the regexp suffix following after the repetition operator.</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span><span class="comment">// repeat returns an updated &#39;after&#39; and an error, if any.</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>func (p *parser) repeat(op Op, min, max int, before, after, lastRepeat string) (string, error) {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	flags := p.flags
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	if p.flags&amp;PerlX != 0 {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		if len(after) &gt; 0 &amp;&amp; after[0] == &#39;?&#39; {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>			after = after[1:]
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>			flags ^= NonGreedy
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		if lastRepeat != &#34;&#34; {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>			<span class="comment">// In Perl it is not allowed to stack repetition operators:</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			<span class="comment">// a** is a syntax error, not a doubled star, and a++ means</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>			<span class="comment">// something else entirely, which we don&#39;t support!</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>			return &#34;&#34;, &amp;Error{ErrInvalidRepeatOp, lastRepeat[:len(lastRepeat)-len(after)]}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	n := len(p.stack)
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	if n == 0 {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		return &#34;&#34;, &amp;Error{ErrMissingRepeatArgument, before[:len(before)-len(after)]}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	sub := p.stack[n-1]
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	if sub.Op &gt;= opPseudo {
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		return &#34;&#34;, &amp;Error{ErrMissingRepeatArgument, before[:len(before)-len(after)]}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	}
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	re := p.newRegexp(op)
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	re.Min = min
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	re.Max = max
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	re.Flags = flags
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	re.Sub = re.Sub0[:1]
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	re.Sub[0] = sub
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	p.stack[n-1] = re
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	p.checkLimits(re)
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	if op == OpRepeat &amp;&amp; (min &gt;= 2 || max &gt;= 2) &amp;&amp; !repeatIsValid(re, 1000) {
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		return &#34;&#34;, &amp;Error{ErrInvalidRepeatSize, before[:len(before)-len(after)]}
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	return after, nil
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span><span class="comment">// repeatIsValid reports whether the repetition re is valid.</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span><span class="comment">// Valid means that the combination of the top-level repetition</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span><span class="comment">// and any inner repetitions does not exceed n copies of the</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span><span class="comment">// innermost thing.</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span><span class="comment">// This function rewalks the regexp tree and is called for every repetition,</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span><span class="comment">// so we have to worry about inducing quadratic behavior in the parser.</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// We avoid this by only calling repeatIsValid when min or max &gt;= 2.</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">// In that case the depth of any &gt;= 2 nesting can only get to 9 without</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span><span class="comment">// triggering a parse error, so each subtree can only be rewalked 9 times.</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>func repeatIsValid(re *Regexp, n int) bool {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	if re.Op == OpRepeat {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		m := re.Max
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		if m == 0 {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>			return true
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		if m &lt; 0 {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>			m = re.Min
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		if m &gt; n {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>			return false
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		if m &gt; 0 {
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>			n /= m
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>		}
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	}
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	for _, sub := range re.Sub {
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		if !repeatIsValid(sub, n) {
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>			return false
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		}
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	return true
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span><span class="comment">// concat replaces the top of the stack (above the topmost &#39;|&#39; or &#39;(&#39;) with its concatenation.</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>func (p *parser) concat() *Regexp {
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	p.maybeConcat(-1, 0)
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	<span class="comment">// Scan down to find pseudo-operator | or (.</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	i := len(p.stack)
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	for i &gt; 0 &amp;&amp; p.stack[i-1].Op &lt; opPseudo {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		i--
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	subs := p.stack[i:]
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	p.stack = p.stack[:i]
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	<span class="comment">// Empty concatenation is special case.</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	if len(subs) == 0 {
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		return p.push(p.newRegexp(OpEmptyMatch))
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	}
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	return p.push(p.collapse(subs, OpConcat))
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span><span class="comment">// alternate replaces the top of the stack (above the topmost &#39;(&#39;) with its alternation.</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>func (p *parser) alternate() *Regexp {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	<span class="comment">// Scan down to find pseudo-operator (.</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	<span class="comment">// There are no | above (.</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	i := len(p.stack)
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	for i &gt; 0 &amp;&amp; p.stack[i-1].Op &lt; opPseudo {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		i--
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	subs := p.stack[i:]
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	p.stack = p.stack[:i]
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	<span class="comment">// Make sure top class is clean.</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	<span class="comment">// All the others already are (see swapVerticalBar).</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	if len(subs) &gt; 0 {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		cleanAlt(subs[len(subs)-1])
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	}
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	<span class="comment">// Empty alternate is special case</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	<span class="comment">// (shouldn&#39;t happen but easy to handle).</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	if len(subs) == 0 {
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		return p.push(p.newRegexp(OpNoMatch))
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	}
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	return p.push(p.collapse(subs, OpAlternate))
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span><span class="comment">// cleanAlt cleans re for eventual inclusion in an alternation.</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>func cleanAlt(re *Regexp) {
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	switch re.Op {
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	case OpCharClass:
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		re.Rune = cleanClass(&amp;re.Rune)
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		if len(re.Rune) == 2 &amp;&amp; re.Rune[0] == 0 &amp;&amp; re.Rune[1] == unicode.MaxRune {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>			re.Rune = nil
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>			re.Op = OpAnyChar
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>			return
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		}
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		if len(re.Rune) == 4 &amp;&amp; re.Rune[0] == 0 &amp;&amp; re.Rune[1] == &#39;\n&#39;-1 &amp;&amp; re.Rune[2] == &#39;\n&#39;+1 &amp;&amp; re.Rune[3] == unicode.MaxRune {
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>			re.Rune = nil
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>			re.Op = OpAnyCharNotNL
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>			return
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		}
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		if cap(re.Rune)-len(re.Rune) &gt; 100 {
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>			<span class="comment">// re.Rune will not grow any more.</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>			<span class="comment">// Make a copy or inline to reclaim storage.</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>			re.Rune = append(re.Rune0[:0], re.Rune...)
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>		}
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	}
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>}
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span><span class="comment">// collapse returns the result of applying op to sub.</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span><span class="comment">// If sub contains op nodes, they all get hoisted up</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span><span class="comment">// so that there is never a concat of a concat or an</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span><span class="comment">// alternate of an alternate.</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>func (p *parser) collapse(subs []*Regexp, op Op) *Regexp {
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	if len(subs) == 1 {
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		return subs[0]
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	re := p.newRegexp(op)
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	re.Sub = re.Sub0[:0]
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	for _, sub := range subs {
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>		if sub.Op == op {
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>			re.Sub = append(re.Sub, sub.Sub...)
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>			p.reuse(sub)
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		} else {
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>			re.Sub = append(re.Sub, sub)
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		}
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	if op == OpAlternate {
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		re.Sub = p.factor(re.Sub)
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		if len(re.Sub) == 1 {
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>			old := re
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>			re = re.Sub[0]
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>			p.reuse(old)
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>		}
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	}
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	return re
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>}
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span><span class="comment">// factor factors common prefixes from the alternation list sub.</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span><span class="comment">// It returns a replacement list that reuses the same storage and</span>
<span id="L577" class="ln">   577&nbsp;&nbsp;</span><span class="comment">// frees (passes to p.reuse) any removed *Regexps.</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span><span class="comment">// For example,</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span><span class="comment">//	ABC|ABD|AEF|BCX|BCY</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span><span class="comment">// simplifies by literal prefix extraction to</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span><span class="comment">//	A(B(C|D)|EF)|BC(X|Y)</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span><span class="comment">// which simplifies by character class introduction to</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span><span class="comment">//	A(B[CD]|EF)|BC[XY]</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>func (p *parser) factor(sub []*Regexp) []*Regexp {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	if len(sub) &lt; 2 {
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		return sub
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	}
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	<span class="comment">// Round 1: Factor out common literal prefixes.</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	var str []rune
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	var strflags Flags
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	start := 0
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	out := sub[:0]
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	for i := 0; i &lt;= len(sub); i++ {
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>		<span class="comment">// Invariant: the Regexps that were in sub[0:start] have been</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		<span class="comment">// used or marked for reuse, and the slice space has been reused</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		<span class="comment">// for out (len(out) &lt;= start).</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>		<span class="comment">// Invariant: sub[start:i] consists of regexps that all begin</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		<span class="comment">// with str as modified by strflags.</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		var istr []rune
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		var iflags Flags
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		if i &lt; len(sub) {
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>			istr, iflags = p.leadingString(sub[i])
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>			if iflags == strflags {
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>				same := 0
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>				for same &lt; len(str) &amp;&amp; same &lt; len(istr) &amp;&amp; str[same] == istr[same] {
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>					same++
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>				}
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>				if same &gt; 0 {
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>					<span class="comment">// Matches at least one rune in current range.</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>					<span class="comment">// Keep going around.</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>					str = str[:same]
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>					continue
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>				}
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>			}
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		}
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		<span class="comment">// Found end of a run with common leading literal string:</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		<span class="comment">// sub[start:i] all begin with str[0:len(str)], but sub[i]</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>		<span class="comment">// does not even begin with str[0].</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		<span class="comment">// Factor out common string and append factored expression to out.</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		if i == start {
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>			<span class="comment">// Nothing to do - run of length 0.</span>
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		} else if i == start+1 {
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>			<span class="comment">// Just one: don&#39;t bother factoring.</span>
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>			out = append(out, sub[start])
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		} else {
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>			<span class="comment">// Construct factored form: prefix(suffix1|suffix2|...)</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>			prefix := p.newRegexp(OpLiteral)
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>			prefix.Flags = strflags
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>			prefix.Rune = append(prefix.Rune[:0], str...)
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>			for j := start; j &lt; i; j++ {
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>				sub[j] = p.removeLeadingString(sub[j], len(str))
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>				p.checkLimits(sub[j])
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>			}
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>			suffix := p.collapse(sub[start:i], OpAlternate) <span class="comment">// recurse</span>
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>			re := p.newRegexp(OpConcat)
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>			re.Sub = append(re.Sub[:0], prefix, suffix)
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>			out = append(out, re)
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		}
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		<span class="comment">// Prepare for next iteration.</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>		start = i
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		str = istr
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		strflags = iflags
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	}
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	sub = out
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	<span class="comment">// Round 2: Factor out common simple prefixes,</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	<span class="comment">// just the first piece of each concatenation.</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	<span class="comment">// This will be good enough a lot of the time.</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	<span class="comment">// Complex subexpressions (e.g. involving quantifiers)</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	<span class="comment">// are not safe to factor because that collapses their</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	<span class="comment">// distinct paths through the automaton, which affects</span>
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	<span class="comment">// correctness in some cases.</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	start = 0
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	out = sub[:0]
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	var first *Regexp
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>	for i := 0; i &lt;= len(sub); i++ {
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>		<span class="comment">// Invariant: the Regexps that were in sub[0:start] have been</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>		<span class="comment">// used or marked for reuse, and the slice space has been reused</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		<span class="comment">// for out (len(out) &lt;= start).</span>
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		<span class="comment">// Invariant: sub[start:i] consists of regexps that all begin with ifirst.</span>
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		var ifirst *Regexp
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>		if i &lt; len(sub) {
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>			ifirst = p.leadingRegexp(sub[i])
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>			if first != nil &amp;&amp; first.Equal(ifirst) &amp;&amp;
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>				<span class="comment">// first must be a character class OR a fixed repeat of a character class.</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>				(isCharClass(first) || (first.Op == OpRepeat &amp;&amp; first.Min == first.Max &amp;&amp; isCharClass(first.Sub[0]))) {
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>				continue
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>			}
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		}
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>		<span class="comment">// Found end of a run with common leading regexp:</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>		<span class="comment">// sub[start:i] all begin with first but sub[i] does not.</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		<span class="comment">// Factor out common regexp and append factored expression to out.</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>		if i == start {
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>			<span class="comment">// Nothing to do - run of length 0.</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		} else if i == start+1 {
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>			<span class="comment">// Just one: don&#39;t bother factoring.</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>			out = append(out, sub[start])
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>		} else {
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>			<span class="comment">// Construct factored form: prefix(suffix1|suffix2|...)</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>			prefix := first
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>			for j := start; j &lt; i; j++ {
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>				reuse := j != start <span class="comment">// prefix came from sub[start]</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>				sub[j] = p.removeLeadingRegexp(sub[j], reuse)
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>				p.checkLimits(sub[j])
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>			}
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>			suffix := p.collapse(sub[start:i], OpAlternate) <span class="comment">// recurse</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>			re := p.newRegexp(OpConcat)
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>			re.Sub = append(re.Sub[:0], prefix, suffix)
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>			out = append(out, re)
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>		}
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>		<span class="comment">// Prepare for next iteration.</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>		start = i
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>		first = ifirst
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	}
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	sub = out
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	<span class="comment">// Round 3: Collapse runs of single literals into character classes.</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	start = 0
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>	out = sub[:0]
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	for i := 0; i &lt;= len(sub); i++ {
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>		<span class="comment">// Invariant: the Regexps that were in sub[0:start] have been</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		<span class="comment">// used or marked for reuse, and the slice space has been reused</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		<span class="comment">// for out (len(out) &lt;= start).</span>
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		<span class="comment">// Invariant: sub[start:i] consists of regexps that are either</span>
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		<span class="comment">// literal runes or character classes.</span>
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		if i &lt; len(sub) &amp;&amp; isCharClass(sub[i]) {
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>			continue
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		}
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		<span class="comment">// sub[i] is not a char or char class;</span>
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		<span class="comment">// emit char class for sub[start:i]...</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		if i == start {
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>			<span class="comment">// Nothing to do - run of length 0.</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>		} else if i == start+1 {
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>			out = append(out, sub[start])
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>		} else {
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>			<span class="comment">// Make new char class.</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>			<span class="comment">// Start with most complex regexp in sub[start].</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>			max := start
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>			for j := start + 1; j &lt; i; j++ {
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>				if sub[max].Op &lt; sub[j].Op || sub[max].Op == sub[j].Op &amp;&amp; len(sub[max].Rune) &lt; len(sub[j].Rune) {
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>					max = j
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>				}
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>			}
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>			sub[start], sub[max] = sub[max], sub[start]
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>			for j := start + 1; j &lt; i; j++ {
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>				mergeCharClass(sub[start], sub[j])
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>				p.reuse(sub[j])
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>			}
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>			cleanAlt(sub[start])
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>			out = append(out, sub[start])
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>		}
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>		<span class="comment">// ... and then emit sub[i].</span>
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>		if i &lt; len(sub) {
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>			out = append(out, sub[i])
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		}
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>		start = i + 1
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>	}
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	sub = out
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	<span class="comment">// Round 4: Collapse runs of empty matches into a single empty match.</span>
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	start = 0
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>	out = sub[:0]
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	for i := range sub {
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		if i+1 &lt; len(sub) &amp;&amp; sub[i].Op == OpEmptyMatch &amp;&amp; sub[i+1].Op == OpEmptyMatch {
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>			continue
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		}
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		out = append(out, sub[i])
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>	}
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	sub = out
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>	return sub
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>}
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>
<span id="L777" class="ln">   777&nbsp;&nbsp;</span><span class="comment">// leadingString returns the leading literal string that re begins with.</span>
<span id="L778" class="ln">   778&nbsp;&nbsp;</span><span class="comment">// The string refers to storage in re or its children.</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>func (p *parser) leadingString(re *Regexp) ([]rune, Flags) {
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	if re.Op == OpConcat &amp;&amp; len(re.Sub) &gt; 0 {
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>		re = re.Sub[0]
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	}
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>	if re.Op != OpLiteral {
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>		return nil, 0
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>	}
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	return re.Rune, re.Flags &amp; FoldCase
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>}
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>
<span id="L789" class="ln">   789&nbsp;&nbsp;</span><span class="comment">// removeLeadingString removes the first n leading runes</span>
<span id="L790" class="ln">   790&nbsp;&nbsp;</span><span class="comment">// from the beginning of re. It returns the replacement for re.</span>
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>func (p *parser) removeLeadingString(re *Regexp, n int) *Regexp {
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>	if re.Op == OpConcat &amp;&amp; len(re.Sub) &gt; 0 {
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>		<span class="comment">// Removing a leading string in a concatenation</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>		<span class="comment">// might simplify the concatenation.</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>		sub := re.Sub[0]
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>		sub = p.removeLeadingString(sub, n)
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>		re.Sub[0] = sub
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>		if sub.Op == OpEmptyMatch {
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>			p.reuse(sub)
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>			switch len(re.Sub) {
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>			case 0, 1:
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>				<span class="comment">// Impossible but handle.</span>
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>				re.Op = OpEmptyMatch
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>				re.Sub = nil
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>			case 2:
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>				old := re
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>				re = re.Sub[1]
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>				p.reuse(old)
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>			default:
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>				copy(re.Sub, re.Sub[1:])
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>				re.Sub = re.Sub[:len(re.Sub)-1]
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>			}
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>		}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>		return re
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>	}
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>	if re.Op == OpLiteral {
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>		re.Rune = re.Rune[:copy(re.Rune, re.Rune[n:])]
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>		if len(re.Rune) == 0 {
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>			re.Op = OpEmptyMatch
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>		}
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>	}
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>	return re
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>}
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>
<span id="L826" class="ln">   826&nbsp;&nbsp;</span><span class="comment">// leadingRegexp returns the leading regexp that re begins with.</span>
<span id="L827" class="ln">   827&nbsp;&nbsp;</span><span class="comment">// The regexp refers to storage in re or its children.</span>
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>func (p *parser) leadingRegexp(re *Regexp) *Regexp {
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	if re.Op == OpEmptyMatch {
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>		return nil
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>	}
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>	if re.Op == OpConcat &amp;&amp; len(re.Sub) &gt; 0 {
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>		sub := re.Sub[0]
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>		if sub.Op == OpEmptyMatch {
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>			return nil
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>		}
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>		return sub
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>	}
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>	return re
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>}
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>
<span id="L842" class="ln">   842&nbsp;&nbsp;</span><span class="comment">// removeLeadingRegexp removes the leading regexp in re.</span>
<span id="L843" class="ln">   843&nbsp;&nbsp;</span><span class="comment">// It returns the replacement for re.</span>
<span id="L844" class="ln">   844&nbsp;&nbsp;</span><span class="comment">// If reuse is true, it passes the removed regexp (if no longer needed) to p.reuse.</span>
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>func (p *parser) removeLeadingRegexp(re *Regexp, reuse bool) *Regexp {
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>	if re.Op == OpConcat &amp;&amp; len(re.Sub) &gt; 0 {
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>		if reuse {
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>			p.reuse(re.Sub[0])
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>		}
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>		re.Sub = re.Sub[:copy(re.Sub, re.Sub[1:])]
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>		switch len(re.Sub) {
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>		case 0:
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>			re.Op = OpEmptyMatch
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>			re.Sub = nil
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>		case 1:
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>			old := re
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>			re = re.Sub[0]
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>			p.reuse(old)
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>		}
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>		return re
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>	}
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>	if reuse {
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>		p.reuse(re)
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	}
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>	return p.newRegexp(OpEmptyMatch)
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>}
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>func literalRegexp(s string, flags Flags) *Regexp {
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>	re := &amp;Regexp{Op: OpLiteral}
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>	re.Flags = flags
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>	re.Rune = re.Rune0[:0] <span class="comment">// use local storage for small strings</span>
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>	for _, c := range s {
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>		if len(re.Rune) &gt;= cap(re.Rune) {
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>			<span class="comment">// string is too long to fit in Rune0.  let Go handle it</span>
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>			re.Rune = []rune(s)
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>			break
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>		}
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>		re.Rune = append(re.Rune, c)
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>	}
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>	return re
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>}
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>
<span id="L883" class="ln">   883&nbsp;&nbsp;</span><span class="comment">// Parsing.</span>
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span><span class="comment">// Parse parses a regular expression string s, controlled by the specified</span>
<span id="L886" class="ln">   886&nbsp;&nbsp;</span><span class="comment">// Flags, and returns a regular expression parse tree. The syntax is</span>
<span id="L887" class="ln">   887&nbsp;&nbsp;</span><span class="comment">// described in the top-level comment.</span>
<span id="L888" class="ln">   888&nbsp;&nbsp;</span><span class="selection">func Parse(s string, flags Flags) (*Regexp, error)</span> {
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>	return parse(s, flags)
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>}
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>func parse(s string, flags Flags) (_ *Regexp, err error) {
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>	defer func() {
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>		switch r := recover(); r {
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>		default:
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>			panic(r)
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>		case nil:
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>			<span class="comment">// ok</span>
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>		case ErrLarge: <span class="comment">// too big</span>
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>			err = &amp;Error{Code: ErrLarge, Expr: s}
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>		case ErrNestingDepth:
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>			err = &amp;Error{Code: ErrNestingDepth, Expr: s}
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>		}
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>	}()
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>	if flags&amp;Literal != 0 {
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>		<span class="comment">// Trivial parser for literal string.</span>
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>		if err := checkUTF8(s); err != nil {
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>			return nil, err
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>		}
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>		return literalRegexp(s, flags), nil
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>	}
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>	<span class="comment">// Otherwise, must do real work.</span>
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>	var (
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>		p          parser
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>		c          rune
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>		op         Op
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>		lastRepeat string
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>	)
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>	p.flags = flags
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>	p.wholeRegexp = s
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>	t := s
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>	for t != &#34;&#34; {
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>		repeat := &#34;&#34;
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>	BigSwitch:
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>		switch t[0] {
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>		default:
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>			if c, t, err = nextRune(t); err != nil {
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>				return nil, err
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>			}
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>			p.literal(c)
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>		case &#39;(&#39;:
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>			if p.flags&amp;PerlX != 0 &amp;&amp; len(t) &gt;= 2 &amp;&amp; t[1] == &#39;?&#39; {
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>				<span class="comment">// Flag changes and non-capturing groups.</span>
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>				if t, err = p.parsePerlFlags(t); err != nil {
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>					return nil, err
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>				}
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>				break
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>			}
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>			p.numCap++
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>			p.op(opLeftParen).Cap = p.numCap
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>			t = t[1:]
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>		case &#39;|&#39;:
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>			if err = p.parseVerticalBar(); err != nil {
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>				return nil, err
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>			}
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>			t = t[1:]
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>		case &#39;)&#39;:
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>			if err = p.parseRightParen(); err != nil {
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>				return nil, err
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>			}
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>			t = t[1:]
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>		case &#39;^&#39;:
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>			if p.flags&amp;OneLine != 0 {
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>				p.op(OpBeginText)
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>			} else {
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>				p.op(OpBeginLine)
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>			}
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>			t = t[1:]
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>		case &#39;$&#39;:
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>			if p.flags&amp;OneLine != 0 {
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>				p.op(OpEndText).Flags |= WasDollar
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>			} else {
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>				p.op(OpEndLine)
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>			}
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>			t = t[1:]
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>		case &#39;.&#39;:
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>			if p.flags&amp;DotNL != 0 {
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>				p.op(OpAnyChar)
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>			} else {
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>				p.op(OpAnyCharNotNL)
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>			}
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>			t = t[1:]
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>		case &#39;[&#39;:
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>			if t, err = p.parseClass(t); err != nil {
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>				return nil, err
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>			}
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>		case &#39;*&#39;, &#39;+&#39;, &#39;?&#39;:
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>			before := t
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>			switch t[0] {
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>			case &#39;*&#39;:
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>				op = OpStar
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>			case &#39;+&#39;:
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>				op = OpPlus
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>			case &#39;?&#39;:
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>				op = OpQuest
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>			}
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>			after := t[1:]
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>			if after, err = p.repeat(op, 0, 0, before, after, lastRepeat); err != nil {
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>				return nil, err
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>			}
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>			repeat = before
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>			t = after
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>		case &#39;{&#39;:
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>			op = OpRepeat
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>			before := t
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>			min, max, after, ok := p.parseRepeat(t)
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>			if !ok {
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>				<span class="comment">// If the repeat cannot be parsed, { is a literal.</span>
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>				p.literal(&#39;{&#39;)
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>				t = t[1:]
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>				break
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>			}
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>			if min &lt; 0 || min &gt; 1000 || max &gt; 1000 || max &gt;= 0 &amp;&amp; min &gt; max {
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>				<span class="comment">// Numbers were too big, or max is present and min &gt; max.</span>
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>				return nil, &amp;Error{ErrInvalidRepeatSize, before[:len(before)-len(after)]}
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>			}
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>			if after, err = p.repeat(op, min, max, before, after, lastRepeat); err != nil {
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>				return nil, err
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>			}
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>			repeat = before
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>			t = after
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>		case &#39;\\&#39;:
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>			if p.flags&amp;PerlX != 0 &amp;&amp; len(t) &gt;= 2 {
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>				switch t[1] {
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>				case &#39;A&#39;:
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>					p.op(OpBeginText)
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>					t = t[2:]
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>					break BigSwitch
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>				case &#39;b&#39;:
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>					p.op(OpWordBoundary)
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>					t = t[2:]
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>					break BigSwitch
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>				case &#39;B&#39;:
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>					p.op(OpNoWordBoundary)
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>					t = t[2:]
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>					break BigSwitch
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>				case &#39;C&#39;:
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>					<span class="comment">// any byte; not supported</span>
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>					return nil, &amp;Error{ErrInvalidEscape, t[:2]}
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>				case &#39;Q&#39;:
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>					<span class="comment">// \Q ... \E: the ... is always literals</span>
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>					var lit string
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>					lit, t, _ = strings.Cut(t[2:], `\E`)
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>					for lit != &#34;&#34; {
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>						c, rest, err := nextRune(lit)
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>						if err != nil {
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>							return nil, err
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>						}
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>						p.literal(c)
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>						lit = rest
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>					}
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>					break BigSwitch
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>				case &#39;z&#39;:
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>					p.op(OpEndText)
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>					t = t[2:]
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>					break BigSwitch
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>				}
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>			}
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>			re := p.newRegexp(OpCharClass)
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>			re.Flags = p.flags
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>			<span class="comment">// Look for Unicode character group like \p{Han}</span>
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>			if len(t) &gt;= 2 &amp;&amp; (t[1] == &#39;p&#39; || t[1] == &#39;P&#39;) {
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>				r, rest, err := p.parseUnicodeClass(t, re.Rune0[:0])
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>				if err != nil {
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>					return nil, err
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>				}
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>				if r != nil {
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>					re.Rune = r
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>					t = rest
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>					p.push(re)
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>					break BigSwitch
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>				}
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>			}
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>			<span class="comment">// Perl character class escape.</span>
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>			if r, rest := p.parsePerlClassEscape(t, re.Rune0[:0]); r != nil {
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>				re.Rune = r
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>				t = rest
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>				p.push(re)
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>				break BigSwitch
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>			}
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>			p.reuse(re)
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>			<span class="comment">// Ordinary single-character escape.</span>
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>			if c, t, err = p.parseEscape(t); err != nil {
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>				return nil, err
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>			}
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>			p.literal(c)
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>		}
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>		lastRepeat = repeat
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>	}
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>	p.concat()
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>	if p.swapVerticalBar() {
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>		<span class="comment">// pop vertical bar</span>
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>		p.stack = p.stack[:len(p.stack)-1]
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>	}
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>	p.alternate()
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>	n := len(p.stack)
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>	if n != 1 {
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>		return nil, &amp;Error{ErrMissingParen, s}
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>	}
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>	return p.stack[0], nil
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>}
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span><span class="comment">// parseRepeat parses {min} (max=min) or {min,} (max=-1) or {min,max}.</span>
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span><span class="comment">// If s is not of that form, it returns ok == false.</span>
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span><span class="comment">// If s has the right form but the values are too big, it returns min == -1, ok == true.</span>
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>func (p *parser) parseRepeat(s string) (min, max int, rest string, ok bool) {
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>	if s == &#34;&#34; || s[0] != &#39;{&#39; {
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>		return
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>	}
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>	s = s[1:]
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>	var ok1 bool
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>	if min, s, ok1 = p.parseInt(s); !ok1 {
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>		return
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>	}
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>	if s == &#34;&#34; {
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>		return
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>	}
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>	if s[0] != &#39;,&#39; {
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>		max = min
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>	} else {
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>		s = s[1:]
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>		if s == &#34;&#34; {
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>			return
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>		}
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>		if s[0] == &#39;}&#39; {
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>			max = -1
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>		} else if max, s, ok1 = p.parseInt(s); !ok1 {
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>			return
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>		} else if max &lt; 0 {
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>			<span class="comment">// parseInt found too big a number</span>
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>			min = -1
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>		}
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>	}
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>	if s == &#34;&#34; || s[0] != &#39;}&#39; {
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>		return
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>	}
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>	rest = s[1:]
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>	ok = true
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>	return
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>}
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span><span class="comment">// parsePerlFlags parses a Perl flag setting or non-capturing group or both,</span>
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span><span class="comment">// like (?i) or (?: or (?i:.  It removes the prefix from s and updates the parse state.</span>
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span><span class="comment">// The caller must have ensured that s begins with &#34;(?&#34;.</span>
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>func (p *parser) parsePerlFlags(s string) (rest string, err error) {
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>	t := s
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>	<span class="comment">// Check for named captures, first introduced in Python&#39;s regexp library.</span>
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>	<span class="comment">// As usual, there are three slightly different syntaxes:</span>
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>	<span class="comment">//   (?P&lt;name&gt;expr)   the original, introduced by Python</span>
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>	<span class="comment">//   (?&lt;name&gt;expr)    the .NET alteration, adopted by Perl 5.10</span>
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>	<span class="comment">//   (?&#39;name&#39;expr)    another .NET alteration, adopted by Perl 5.10</span>
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>	<span class="comment">// Perl 5.10 gave in and implemented the Python version too,</span>
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>	<span class="comment">// but they claim that the last two are the preferred forms.</span>
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>	<span class="comment">// PCRE and languages based on it (specifically, PHP and Ruby)</span>
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>	<span class="comment">// support all three as well. EcmaScript 4 uses only the Python form.</span>
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>	<span class="comment">// In both the open source world (via Code Search) and the</span>
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>	<span class="comment">// Google source tree, (?P&lt;expr&gt;name) and (?&lt;expr&gt;name) are the</span>
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>	<span class="comment">// dominant forms of named captures and both are supported.</span>
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>	startsWithP := len(t) &gt; 4 &amp;&amp; t[2] == &#39;P&#39; &amp;&amp; t[3] == &#39;&lt;&#39;
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>	startsWithName := len(t) &gt; 3 &amp;&amp; t[2] == &#39;&lt;&#39;
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>	if startsWithP || startsWithName {
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>		<span class="comment">// position of expr start</span>
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>		exprStartPos := 4
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>		if startsWithName {
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>			exprStartPos = 3
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>		}
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>		<span class="comment">// Pull out name.</span>
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>		end := strings.IndexRune(t, &#39;&gt;&#39;)
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>		if end &lt; 0 {
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>			if err = checkUTF8(t); err != nil {
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>				return &#34;&#34;, err
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>			}
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>			return &#34;&#34;, &amp;Error{ErrInvalidNamedCapture, s}
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>		}
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>		capture := t[:end+1]        <span class="comment">// &#34;(?P&lt;name&gt;&#34; or &#34;(?&lt;name&gt;&#34;</span>
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>		name := t[exprStartPos:end] <span class="comment">// &#34;name&#34;</span>
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>		if err = checkUTF8(name); err != nil {
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>			return &#34;&#34;, err
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>		}
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>		if !isValidCaptureName(name) {
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>			return &#34;&#34;, &amp;Error{ErrInvalidNamedCapture, capture}
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>		}
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>		<span class="comment">// Like ordinary capture, but named.</span>
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>		p.numCap++
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>		re := p.op(opLeftParen)
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>		re.Cap = p.numCap
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>		re.Name = name
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>		return t[end+1:], nil
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>	}
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>	<span class="comment">// Non-capturing group. Might also twiddle Perl flags.</span>
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>	var c rune
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>	t = t[2:] <span class="comment">// skip (?</span>
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>	flags := p.flags
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>	sign := +1
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>	sawFlag := false
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>Loop:
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>	for t != &#34;&#34; {
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>		if c, t, err = nextRune(t); err != nil {
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>			return &#34;&#34;, err
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>		}
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>		switch c {
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>		default:
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>			break Loop
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>		<span class="comment">// Flags.</span>
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>		case &#39;i&#39;:
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>			flags |= FoldCase
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>			sawFlag = true
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>		case &#39;m&#39;:
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>			flags &amp;^= OneLine
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>			sawFlag = true
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>		case &#39;s&#39;:
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>			flags |= DotNL
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>			sawFlag = true
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>		case &#39;U&#39;:
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>			flags |= NonGreedy
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>			sawFlag = true
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>		<span class="comment">// Switch to negation.</span>
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>		case &#39;-&#39;:
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>			if sign &lt; 0 {
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>				break Loop
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>			}
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>			sign = -1
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>			<span class="comment">// Invert flags so that | above turn into &amp;^ and vice versa.</span>
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>			<span class="comment">// We&#39;ll invert flags again before using it below.</span>
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>			flags = ^flags
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>			sawFlag = false
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>		<span class="comment">// End of flags, starting group or not.</span>
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>		case &#39;:&#39;, &#39;)&#39;:
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>			if sign &lt; 0 {
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>				if !sawFlag {
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>					break Loop
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>				}
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>				flags = ^flags
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>			}
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>			if c == &#39;:&#39; {
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>				<span class="comment">// Open new group</span>
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>				p.op(opLeftParen)
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>			}
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>			p.flags = flags
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>			return t, nil
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>		}
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span>	}
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span>	return &#34;&#34;, &amp;Error{ErrInvalidPerlOp, s[:len(s)-len(t)]}
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span>}
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span>
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span><span class="comment">// isValidCaptureName reports whether name</span>
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span><span class="comment">// is a valid capture name: [A-Za-z0-9_]+.</span>
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span><span class="comment">// PCRE limits names to 32 bytes.</span>
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span><span class="comment">// Python rejects names starting with digits.</span>
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span><span class="comment">// We don&#39;t enforce either of those.</span>
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>func isValidCaptureName(name string) bool {
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>	if name == &#34;&#34; {
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>		return false
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>	}
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>	for _, c := range name {
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>		if c != &#39;_&#39; &amp;&amp; !isalnum(c) {
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>			return false
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>		}
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>	}
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>	return true
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>}
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span><span class="comment">// parseInt parses a decimal integer.</span>
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>func (p *parser) parseInt(s string) (n int, rest string, ok bool) {
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>	if s == &#34;&#34; || s[0] &lt; &#39;0&#39; || &#39;9&#39; &lt; s[0] {
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>		return
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>	}
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>	<span class="comment">// Disallow leading zeros.</span>
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>	if len(s) &gt;= 2 &amp;&amp; s[0] == &#39;0&#39; &amp;&amp; &#39;0&#39; &lt;= s[1] &amp;&amp; s[1] &lt;= &#39;9&#39; {
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>		return
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>	}
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>	t := s
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span>	for s != &#34;&#34; &amp;&amp; &#39;0&#39; &lt;= s[0] &amp;&amp; s[0] &lt;= &#39;9&#39; {
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>		s = s[1:]
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span>	}
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span>	rest = s
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span>	ok = true
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span>	<span class="comment">// Have digits, compute value.</span>
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span>	t = t[:len(t)-len(s)]
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span>	for i := 0; i &lt; len(t); i++ {
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>		<span class="comment">// Avoid overflow.</span>
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span>		if n &gt;= 1e8 {
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span>			n = -1
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span>			break
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span>		}
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span>		n = n*10 + int(t[i]) - &#39;0&#39;
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>	}
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span>	return
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span>}
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span>
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span><span class="comment">// can this be represented as a character class?</span>
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span><span class="comment">// single-rune literal string, char class, ., and .|\n.</span>
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>func isCharClass(re *Regexp) bool {
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span>	return re.Op == OpLiteral &amp;&amp; len(re.Rune) == 1 ||
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span>		re.Op == OpCharClass ||
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span>		re.Op == OpAnyCharNotNL ||
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span>		re.Op == OpAnyChar
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span>}
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span>
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span><span class="comment">// does re match r?</span>
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span>func matchRune(re *Regexp, r rune) bool {
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span>	switch re.Op {
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span>	case OpLiteral:
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span>		return len(re.Rune) == 1 &amp;&amp; re.Rune[0] == r
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span>	case OpCharClass:
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span>		for i := 0; i &lt; len(re.Rune); i += 2 {
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span>			if re.Rune[i] &lt;= r &amp;&amp; r &lt;= re.Rune[i+1] {
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>				return true
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span>			}
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span>		}
<span id="L1323" class="ln">  1323&nbsp;&nbsp;</span>		return false
<span id="L1324" class="ln">  1324&nbsp;&nbsp;</span>	case OpAnyCharNotNL:
<span id="L1325" class="ln">  1325&nbsp;&nbsp;</span>		return r != &#39;\n&#39;
<span id="L1326" class="ln">  1326&nbsp;&nbsp;</span>	case OpAnyChar:
<span id="L1327" class="ln">  1327&nbsp;&nbsp;</span>		return true
<span id="L1328" class="ln">  1328&nbsp;&nbsp;</span>	}
<span id="L1329" class="ln">  1329&nbsp;&nbsp;</span>	return false
<span id="L1330" class="ln">  1330&nbsp;&nbsp;</span>}
<span id="L1331" class="ln">  1331&nbsp;&nbsp;</span>
<span id="L1332" class="ln">  1332&nbsp;&nbsp;</span><span class="comment">// parseVerticalBar handles a | in the input.</span>
<span id="L1333" class="ln">  1333&nbsp;&nbsp;</span>func (p *parser) parseVerticalBar() error {
<span id="L1334" class="ln">  1334&nbsp;&nbsp;</span>	p.concat()
<span id="L1335" class="ln">  1335&nbsp;&nbsp;</span>
<span id="L1336" class="ln">  1336&nbsp;&nbsp;</span>	<span class="comment">// The concatenation we just parsed is on top of the stack.</span>
<span id="L1337" class="ln">  1337&nbsp;&nbsp;</span>	<span class="comment">// If it sits above an opVerticalBar, swap it below</span>
<span id="L1338" class="ln">  1338&nbsp;&nbsp;</span>	<span class="comment">// (things below an opVerticalBar become an alternation).</span>
<span id="L1339" class="ln">  1339&nbsp;&nbsp;</span>	<span class="comment">// Otherwise, push a new vertical bar.</span>
<span id="L1340" class="ln">  1340&nbsp;&nbsp;</span>	if !p.swapVerticalBar() {
<span id="L1341" class="ln">  1341&nbsp;&nbsp;</span>		p.op(opVerticalBar)
<span id="L1342" class="ln">  1342&nbsp;&nbsp;</span>	}
<span id="L1343" class="ln">  1343&nbsp;&nbsp;</span>
<span id="L1344" class="ln">  1344&nbsp;&nbsp;</span>	return nil
<span id="L1345" class="ln">  1345&nbsp;&nbsp;</span>}
<span id="L1346" class="ln">  1346&nbsp;&nbsp;</span>
<span id="L1347" class="ln">  1347&nbsp;&nbsp;</span><span class="comment">// mergeCharClass makes dst = dst|src.</span>
<span id="L1348" class="ln">  1348&nbsp;&nbsp;</span><span class="comment">// The caller must ensure that dst.Op &gt;= src.Op,</span>
<span id="L1349" class="ln">  1349&nbsp;&nbsp;</span><span class="comment">// to reduce the amount of copying.</span>
<span id="L1350" class="ln">  1350&nbsp;&nbsp;</span>func mergeCharClass(dst, src *Regexp) {
<span id="L1351" class="ln">  1351&nbsp;&nbsp;</span>	switch dst.Op {
<span id="L1352" class="ln">  1352&nbsp;&nbsp;</span>	case OpAnyChar:
<span id="L1353" class="ln">  1353&nbsp;&nbsp;</span>		<span class="comment">// src doesn&#39;t add anything.</span>
<span id="L1354" class="ln">  1354&nbsp;&nbsp;</span>	case OpAnyCharNotNL:
<span id="L1355" class="ln">  1355&nbsp;&nbsp;</span>		<span class="comment">// src might add \n</span>
<span id="L1356" class="ln">  1356&nbsp;&nbsp;</span>		if matchRune(src, &#39;\n&#39;) {
<span id="L1357" class="ln">  1357&nbsp;&nbsp;</span>			dst.Op = OpAnyChar
<span id="L1358" class="ln">  1358&nbsp;&nbsp;</span>		}
<span id="L1359" class="ln">  1359&nbsp;&nbsp;</span>	case OpCharClass:
<span id="L1360" class="ln">  1360&nbsp;&nbsp;</span>		<span class="comment">// src is simpler, so either literal or char class</span>
<span id="L1361" class="ln">  1361&nbsp;&nbsp;</span>		if src.Op == OpLiteral {
<span id="L1362" class="ln">  1362&nbsp;&nbsp;</span>			dst.Rune = appendLiteral(dst.Rune, src.Rune[0], src.Flags)
<span id="L1363" class="ln">  1363&nbsp;&nbsp;</span>		} else {
<span id="L1364" class="ln">  1364&nbsp;&nbsp;</span>			dst.Rune = appendClass(dst.Rune, src.Rune)
<span id="L1365" class="ln">  1365&nbsp;&nbsp;</span>		}
<span id="L1366" class="ln">  1366&nbsp;&nbsp;</span>	case OpLiteral:
<span id="L1367" class="ln">  1367&nbsp;&nbsp;</span>		<span class="comment">// both literal</span>
<span id="L1368" class="ln">  1368&nbsp;&nbsp;</span>		if src.Rune[0] == dst.Rune[0] &amp;&amp; src.Flags == dst.Flags {
<span id="L1369" class="ln">  1369&nbsp;&nbsp;</span>			break
<span id="L1370" class="ln">  1370&nbsp;&nbsp;</span>		}
<span id="L1371" class="ln">  1371&nbsp;&nbsp;</span>		dst.Op = OpCharClass
<span id="L1372" class="ln">  1372&nbsp;&nbsp;</span>		dst.Rune = appendLiteral(dst.Rune[:0], dst.Rune[0], dst.Flags)
<span id="L1373" class="ln">  1373&nbsp;&nbsp;</span>		dst.Rune = appendLiteral(dst.Rune, src.Rune[0], src.Flags)
<span id="L1374" class="ln">  1374&nbsp;&nbsp;</span>	}
<span id="L1375" class="ln">  1375&nbsp;&nbsp;</span>}
<span id="L1376" class="ln">  1376&nbsp;&nbsp;</span>
<span id="L1377" class="ln">  1377&nbsp;&nbsp;</span><span class="comment">// If the top of the stack is an element followed by an opVerticalBar</span>
<span id="L1378" class="ln">  1378&nbsp;&nbsp;</span><span class="comment">// swapVerticalBar swaps the two and returns true.</span>
<span id="L1379" class="ln">  1379&nbsp;&nbsp;</span><span class="comment">// Otherwise it returns false.</span>
<span id="L1380" class="ln">  1380&nbsp;&nbsp;</span>func (p *parser) swapVerticalBar() bool {
<span id="L1381" class="ln">  1381&nbsp;&nbsp;</span>	<span class="comment">// If above and below vertical bar are literal or char class,</span>
<span id="L1382" class="ln">  1382&nbsp;&nbsp;</span>	<span class="comment">// can merge into a single char class.</span>
<span id="L1383" class="ln">  1383&nbsp;&nbsp;</span>	n := len(p.stack)
<span id="L1384" class="ln">  1384&nbsp;&nbsp;</span>	if n &gt;= 3 &amp;&amp; p.stack[n-2].Op == opVerticalBar &amp;&amp; isCharClass(p.stack[n-1]) &amp;&amp; isCharClass(p.stack[n-3]) {
<span id="L1385" class="ln">  1385&nbsp;&nbsp;</span>		re1 := p.stack[n-1]
<span id="L1386" class="ln">  1386&nbsp;&nbsp;</span>		re3 := p.stack[n-3]
<span id="L1387" class="ln">  1387&nbsp;&nbsp;</span>		<span class="comment">// Make re3 the more complex of the two.</span>
<span id="L1388" class="ln">  1388&nbsp;&nbsp;</span>		if re1.Op &gt; re3.Op {
<span id="L1389" class="ln">  1389&nbsp;&nbsp;</span>			re1, re3 = re3, re1
<span id="L1390" class="ln">  1390&nbsp;&nbsp;</span>			p.stack[n-3] = re3
<span id="L1391" class="ln">  1391&nbsp;&nbsp;</span>		}
<span id="L1392" class="ln">  1392&nbsp;&nbsp;</span>		mergeCharClass(re3, re1)
<span id="L1393" class="ln">  1393&nbsp;&nbsp;</span>		p.reuse(re1)
<span id="L1394" class="ln">  1394&nbsp;&nbsp;</span>		p.stack = p.stack[:n-1]
<span id="L1395" class="ln">  1395&nbsp;&nbsp;</span>		return true
<span id="L1396" class="ln">  1396&nbsp;&nbsp;</span>	}
<span id="L1397" class="ln">  1397&nbsp;&nbsp;</span>
<span id="L1398" class="ln">  1398&nbsp;&nbsp;</span>	if n &gt;= 2 {
<span id="L1399" class="ln">  1399&nbsp;&nbsp;</span>		re1 := p.stack[n-1]
<span id="L1400" class="ln">  1400&nbsp;&nbsp;</span>		re2 := p.stack[n-2]
<span id="L1401" class="ln">  1401&nbsp;&nbsp;</span>		if re2.Op == opVerticalBar {
<span id="L1402" class="ln">  1402&nbsp;&nbsp;</span>			if n &gt;= 3 {
<span id="L1403" class="ln">  1403&nbsp;&nbsp;</span>				<span class="comment">// Now out of reach.</span>
<span id="L1404" class="ln">  1404&nbsp;&nbsp;</span>				<span class="comment">// Clean opportunistically.</span>
<span id="L1405" class="ln">  1405&nbsp;&nbsp;</span>				cleanAlt(p.stack[n-3])
<span id="L1406" class="ln">  1406&nbsp;&nbsp;</span>			}
<span id="L1407" class="ln">  1407&nbsp;&nbsp;</span>			p.stack[n-2] = re1
<span id="L1408" class="ln">  1408&nbsp;&nbsp;</span>			p.stack[n-1] = re2
<span id="L1409" class="ln">  1409&nbsp;&nbsp;</span>			return true
<span id="L1410" class="ln">  1410&nbsp;&nbsp;</span>		}
<span id="L1411" class="ln">  1411&nbsp;&nbsp;</span>	}
<span id="L1412" class="ln">  1412&nbsp;&nbsp;</span>	return false
<span id="L1413" class="ln">  1413&nbsp;&nbsp;</span>}
<span id="L1414" class="ln">  1414&nbsp;&nbsp;</span>
<span id="L1415" class="ln">  1415&nbsp;&nbsp;</span><span class="comment">// parseRightParen handles a ) in the input.</span>
<span id="L1416" class="ln">  1416&nbsp;&nbsp;</span>func (p *parser) parseRightParen() error {
<span id="L1417" class="ln">  1417&nbsp;&nbsp;</span>	p.concat()
<span id="L1418" class="ln">  1418&nbsp;&nbsp;</span>	if p.swapVerticalBar() {
<span id="L1419" class="ln">  1419&nbsp;&nbsp;</span>		<span class="comment">// pop vertical bar</span>
<span id="L1420" class="ln">  1420&nbsp;&nbsp;</span>		p.stack = p.stack[:len(p.stack)-1]
<span id="L1421" class="ln">  1421&nbsp;&nbsp;</span>	}
<span id="L1422" class="ln">  1422&nbsp;&nbsp;</span>	p.alternate()
<span id="L1423" class="ln">  1423&nbsp;&nbsp;</span>
<span id="L1424" class="ln">  1424&nbsp;&nbsp;</span>	n := len(p.stack)
<span id="L1425" class="ln">  1425&nbsp;&nbsp;</span>	if n &lt; 2 {
<span id="L1426" class="ln">  1426&nbsp;&nbsp;</span>		return &amp;Error{ErrUnexpectedParen, p.wholeRegexp}
<span id="L1427" class="ln">  1427&nbsp;&nbsp;</span>	}
<span id="L1428" class="ln">  1428&nbsp;&nbsp;</span>	re1 := p.stack[n-1]
<span id="L1429" class="ln">  1429&nbsp;&nbsp;</span>	re2 := p.stack[n-2]
<span id="L1430" class="ln">  1430&nbsp;&nbsp;</span>	p.stack = p.stack[:n-2]
<span id="L1431" class="ln">  1431&nbsp;&nbsp;</span>	if re2.Op != opLeftParen {
<span id="L1432" class="ln">  1432&nbsp;&nbsp;</span>		return &amp;Error{ErrUnexpectedParen, p.wholeRegexp}
<span id="L1433" class="ln">  1433&nbsp;&nbsp;</span>	}
<span id="L1434" class="ln">  1434&nbsp;&nbsp;</span>	<span class="comment">// Restore flags at time of paren.</span>
<span id="L1435" class="ln">  1435&nbsp;&nbsp;</span>	p.flags = re2.Flags
<span id="L1436" class="ln">  1436&nbsp;&nbsp;</span>	if re2.Cap == 0 {
<span id="L1437" class="ln">  1437&nbsp;&nbsp;</span>		<span class="comment">// Just for grouping.</span>
<span id="L1438" class="ln">  1438&nbsp;&nbsp;</span>		p.push(re1)
<span id="L1439" class="ln">  1439&nbsp;&nbsp;</span>	} else {
<span id="L1440" class="ln">  1440&nbsp;&nbsp;</span>		re2.Op = OpCapture
<span id="L1441" class="ln">  1441&nbsp;&nbsp;</span>		re2.Sub = re2.Sub0[:1]
<span id="L1442" class="ln">  1442&nbsp;&nbsp;</span>		re2.Sub[0] = re1
<span id="L1443" class="ln">  1443&nbsp;&nbsp;</span>		p.push(re2)
<span id="L1444" class="ln">  1444&nbsp;&nbsp;</span>	}
<span id="L1445" class="ln">  1445&nbsp;&nbsp;</span>	return nil
<span id="L1446" class="ln">  1446&nbsp;&nbsp;</span>}
<span id="L1447" class="ln">  1447&nbsp;&nbsp;</span>
<span id="L1448" class="ln">  1448&nbsp;&nbsp;</span><span class="comment">// parseEscape parses an escape sequence at the beginning of s</span>
<span id="L1449" class="ln">  1449&nbsp;&nbsp;</span><span class="comment">// and returns the rune.</span>
<span id="L1450" class="ln">  1450&nbsp;&nbsp;</span>func (p *parser) parseEscape(s string) (r rune, rest string, err error) {
<span id="L1451" class="ln">  1451&nbsp;&nbsp;</span>	t := s[1:]
<span id="L1452" class="ln">  1452&nbsp;&nbsp;</span>	if t == &#34;&#34; {
<span id="L1453" class="ln">  1453&nbsp;&nbsp;</span>		return 0, &#34;&#34;, &amp;Error{ErrTrailingBackslash, &#34;&#34;}
<span id="L1454" class="ln">  1454&nbsp;&nbsp;</span>	}
<span id="L1455" class="ln">  1455&nbsp;&nbsp;</span>	c, t, err := nextRune(t)
<span id="L1456" class="ln">  1456&nbsp;&nbsp;</span>	if err != nil {
<span id="L1457" class="ln">  1457&nbsp;&nbsp;</span>		return 0, &#34;&#34;, err
<span id="L1458" class="ln">  1458&nbsp;&nbsp;</span>	}
<span id="L1459" class="ln">  1459&nbsp;&nbsp;</span>
<span id="L1460" class="ln">  1460&nbsp;&nbsp;</span>Switch:
<span id="L1461" class="ln">  1461&nbsp;&nbsp;</span>	switch c {
<span id="L1462" class="ln">  1462&nbsp;&nbsp;</span>	default:
<span id="L1463" class="ln">  1463&nbsp;&nbsp;</span>		if c &lt; utf8.RuneSelf &amp;&amp; !isalnum(c) {
<span id="L1464" class="ln">  1464&nbsp;&nbsp;</span>			<span class="comment">// Escaped non-word characters are always themselves.</span>
<span id="L1465" class="ln">  1465&nbsp;&nbsp;</span>			<span class="comment">// PCRE is not quite so rigorous: it accepts things like</span>
<span id="L1466" class="ln">  1466&nbsp;&nbsp;</span>			<span class="comment">// \q, but we don&#39;t. We once rejected \_, but too many</span>
<span id="L1467" class="ln">  1467&nbsp;&nbsp;</span>			<span class="comment">// programs and people insist on using it, so allow \_.</span>
<span id="L1468" class="ln">  1468&nbsp;&nbsp;</span>			return c, t, nil
<span id="L1469" class="ln">  1469&nbsp;&nbsp;</span>		}
<span id="L1470" class="ln">  1470&nbsp;&nbsp;</span>
<span id="L1471" class="ln">  1471&nbsp;&nbsp;</span>	<span class="comment">// Octal escapes.</span>
<span id="L1472" class="ln">  1472&nbsp;&nbsp;</span>	case &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;:
<span id="L1473" class="ln">  1473&nbsp;&nbsp;</span>		<span class="comment">// Single non-zero digit is a backreference; not supported</span>
<span id="L1474" class="ln">  1474&nbsp;&nbsp;</span>		if t == &#34;&#34; || t[0] &lt; &#39;0&#39; || t[0] &gt; &#39;7&#39; {
<span id="L1475" class="ln">  1475&nbsp;&nbsp;</span>			break
<span id="L1476" class="ln">  1476&nbsp;&nbsp;</span>		}
<span id="L1477" class="ln">  1477&nbsp;&nbsp;</span>		fallthrough
<span id="L1478" class="ln">  1478&nbsp;&nbsp;</span>	case &#39;0&#39;:
<span id="L1479" class="ln">  1479&nbsp;&nbsp;</span>		<span class="comment">// Consume up to three octal digits; already have one.</span>
<span id="L1480" class="ln">  1480&nbsp;&nbsp;</span>		r = c - &#39;0&#39;
<span id="L1481" class="ln">  1481&nbsp;&nbsp;</span>		for i := 1; i &lt; 3; i++ {
<span id="L1482" class="ln">  1482&nbsp;&nbsp;</span>			if t == &#34;&#34; || t[0] &lt; &#39;0&#39; || t[0] &gt; &#39;7&#39; {
<span id="L1483" class="ln">  1483&nbsp;&nbsp;</span>				break
<span id="L1484" class="ln">  1484&nbsp;&nbsp;</span>			}
<span id="L1485" class="ln">  1485&nbsp;&nbsp;</span>			r = r*8 + rune(t[0]) - &#39;0&#39;
<span id="L1486" class="ln">  1486&nbsp;&nbsp;</span>			t = t[1:]
<span id="L1487" class="ln">  1487&nbsp;&nbsp;</span>		}
<span id="L1488" class="ln">  1488&nbsp;&nbsp;</span>		return r, t, nil
<span id="L1489" class="ln">  1489&nbsp;&nbsp;</span>
<span id="L1490" class="ln">  1490&nbsp;&nbsp;</span>	<span class="comment">// Hexadecimal escapes.</span>
<span id="L1491" class="ln">  1491&nbsp;&nbsp;</span>	case &#39;x&#39;:
<span id="L1492" class="ln">  1492&nbsp;&nbsp;</span>		if t == &#34;&#34; {
<span id="L1493" class="ln">  1493&nbsp;&nbsp;</span>			break
<span id="L1494" class="ln">  1494&nbsp;&nbsp;</span>		}
<span id="L1495" class="ln">  1495&nbsp;&nbsp;</span>		if c, t, err = nextRune(t); err != nil {
<span id="L1496" class="ln">  1496&nbsp;&nbsp;</span>			return 0, &#34;&#34;, err
<span id="L1497" class="ln">  1497&nbsp;&nbsp;</span>		}
<span id="L1498" class="ln">  1498&nbsp;&nbsp;</span>		if c == &#39;{&#39; {
<span id="L1499" class="ln">  1499&nbsp;&nbsp;</span>			<span class="comment">// Any number of digits in braces.</span>
<span id="L1500" class="ln">  1500&nbsp;&nbsp;</span>			<span class="comment">// Perl accepts any text at all; it ignores all text</span>
<span id="L1501" class="ln">  1501&nbsp;&nbsp;</span>			<span class="comment">// after the first non-hex digit. We require only hex digits,</span>
<span id="L1502" class="ln">  1502&nbsp;&nbsp;</span>			<span class="comment">// and at least one.</span>
<span id="L1503" class="ln">  1503&nbsp;&nbsp;</span>			nhex := 0
<span id="L1504" class="ln">  1504&nbsp;&nbsp;</span>			r = 0
<span id="L1505" class="ln">  1505&nbsp;&nbsp;</span>			for {
<span id="L1506" class="ln">  1506&nbsp;&nbsp;</span>				if t == &#34;&#34; {
<span id="L1507" class="ln">  1507&nbsp;&nbsp;</span>					break Switch
<span id="L1508" class="ln">  1508&nbsp;&nbsp;</span>				}
<span id="L1509" class="ln">  1509&nbsp;&nbsp;</span>				if c, t, err = nextRune(t); err != nil {
<span id="L1510" class="ln">  1510&nbsp;&nbsp;</span>					return 0, &#34;&#34;, err
<span id="L1511" class="ln">  1511&nbsp;&nbsp;</span>				}
<span id="L1512" class="ln">  1512&nbsp;&nbsp;</span>				if c == &#39;}&#39; {
<span id="L1513" class="ln">  1513&nbsp;&nbsp;</span>					break
<span id="L1514" class="ln">  1514&nbsp;&nbsp;</span>				}
<span id="L1515" class="ln">  1515&nbsp;&nbsp;</span>				v := unhex(c)
<span id="L1516" class="ln">  1516&nbsp;&nbsp;</span>				if v &lt; 0 {
<span id="L1517" class="ln">  1517&nbsp;&nbsp;</span>					break Switch
<span id="L1518" class="ln">  1518&nbsp;&nbsp;</span>				}
<span id="L1519" class="ln">  1519&nbsp;&nbsp;</span>				r = r*16 + v
<span id="L1520" class="ln">  1520&nbsp;&nbsp;</span>				if r &gt; unicode.MaxRune {
<span id="L1521" class="ln">  1521&nbsp;&nbsp;</span>					break Switch
<span id="L1522" class="ln">  1522&nbsp;&nbsp;</span>				}
<span id="L1523" class="ln">  1523&nbsp;&nbsp;</span>				nhex++
<span id="L1524" class="ln">  1524&nbsp;&nbsp;</span>			}
<span id="L1525" class="ln">  1525&nbsp;&nbsp;</span>			if nhex == 0 {
<span id="L1526" class="ln">  1526&nbsp;&nbsp;</span>				break Switch
<span id="L1527" class="ln">  1527&nbsp;&nbsp;</span>			}
<span id="L1528" class="ln">  1528&nbsp;&nbsp;</span>			return r, t, nil
<span id="L1529" class="ln">  1529&nbsp;&nbsp;</span>		}
<span id="L1530" class="ln">  1530&nbsp;&nbsp;</span>
<span id="L1531" class="ln">  1531&nbsp;&nbsp;</span>		<span class="comment">// Easy case: two hex digits.</span>
<span id="L1532" class="ln">  1532&nbsp;&nbsp;</span>		x := unhex(c)
<span id="L1533" class="ln">  1533&nbsp;&nbsp;</span>		if c, t, err = nextRune(t); err != nil {
<span id="L1534" class="ln">  1534&nbsp;&nbsp;</span>			return 0, &#34;&#34;, err
<span id="L1535" class="ln">  1535&nbsp;&nbsp;</span>		}
<span id="L1536" class="ln">  1536&nbsp;&nbsp;</span>		y := unhex(c)
<span id="L1537" class="ln">  1537&nbsp;&nbsp;</span>		if x &lt; 0 || y &lt; 0 {
<span id="L1538" class="ln">  1538&nbsp;&nbsp;</span>			break
<span id="L1539" class="ln">  1539&nbsp;&nbsp;</span>		}
<span id="L1540" class="ln">  1540&nbsp;&nbsp;</span>		return x*16 + y, t, nil
<span id="L1541" class="ln">  1541&nbsp;&nbsp;</span>
<span id="L1542" class="ln">  1542&nbsp;&nbsp;</span>	<span class="comment">// C escapes. There is no case &#39;b&#39;, to avoid misparsing</span>
<span id="L1543" class="ln">  1543&nbsp;&nbsp;</span>	<span class="comment">// the Perl word-boundary \b as the C backspace \b</span>
<span id="L1544" class="ln">  1544&nbsp;&nbsp;</span>	<span class="comment">// when in POSIX mode. In Perl, /\b/ means word-boundary</span>
<span id="L1545" class="ln">  1545&nbsp;&nbsp;</span>	<span class="comment">// but /[\b]/ means backspace. We don&#39;t support that.</span>
<span id="L1546" class="ln">  1546&nbsp;&nbsp;</span>	<span class="comment">// If you want a backspace, embed a literal backspace</span>
<span id="L1547" class="ln">  1547&nbsp;&nbsp;</span>	<span class="comment">// character or use \x08.</span>
<span id="L1548" class="ln">  1548&nbsp;&nbsp;</span>	case &#39;a&#39;:
<span id="L1549" class="ln">  1549&nbsp;&nbsp;</span>		return &#39;\a&#39;, t, err
<span id="L1550" class="ln">  1550&nbsp;&nbsp;</span>	case &#39;f&#39;:
<span id="L1551" class="ln">  1551&nbsp;&nbsp;</span>		return &#39;\f&#39;, t, err
<span id="L1552" class="ln">  1552&nbsp;&nbsp;</span>	case &#39;n&#39;:
<span id="L1553" class="ln">  1553&nbsp;&nbsp;</span>		return &#39;\n&#39;, t, err
<span id="L1554" class="ln">  1554&nbsp;&nbsp;</span>	case &#39;r&#39;:
<span id="L1555" class="ln">  1555&nbsp;&nbsp;</span>		return &#39;\r&#39;, t, err
<span id="L1556" class="ln">  1556&nbsp;&nbsp;</span>	case &#39;t&#39;:
<span id="L1557" class="ln">  1557&nbsp;&nbsp;</span>		return &#39;\t&#39;, t, err
<span id="L1558" class="ln">  1558&nbsp;&nbsp;</span>	case &#39;v&#39;:
<span id="L1559" class="ln">  1559&nbsp;&nbsp;</span>		return &#39;\v&#39;, t, err
<span id="L1560" class="ln">  1560&nbsp;&nbsp;</span>	}
<span id="L1561" class="ln">  1561&nbsp;&nbsp;</span>	return 0, &#34;&#34;, &amp;Error{ErrInvalidEscape, s[:len(s)-len(t)]}
<span id="L1562" class="ln">  1562&nbsp;&nbsp;</span>}
<span id="L1563" class="ln">  1563&nbsp;&nbsp;</span>
<span id="L1564" class="ln">  1564&nbsp;&nbsp;</span><span class="comment">// parseClassChar parses a character class character at the beginning of s</span>
<span id="L1565" class="ln">  1565&nbsp;&nbsp;</span><span class="comment">// and returns it.</span>
<span id="L1566" class="ln">  1566&nbsp;&nbsp;</span>func (p *parser) parseClassChar(s, wholeClass string) (r rune, rest string, err error) {
<span id="L1567" class="ln">  1567&nbsp;&nbsp;</span>	if s == &#34;&#34; {
<span id="L1568" class="ln">  1568&nbsp;&nbsp;</span>		return 0, &#34;&#34;, &amp;Error{Code: ErrMissingBracket, Expr: wholeClass}
<span id="L1569" class="ln">  1569&nbsp;&nbsp;</span>	}
<span id="L1570" class="ln">  1570&nbsp;&nbsp;</span>
<span id="L1571" class="ln">  1571&nbsp;&nbsp;</span>	<span class="comment">// Allow regular escape sequences even though</span>
<span id="L1572" class="ln">  1572&nbsp;&nbsp;</span>	<span class="comment">// many need not be escaped in this context.</span>
<span id="L1573" class="ln">  1573&nbsp;&nbsp;</span>	if s[0] == &#39;\\&#39; {
<span id="L1574" class="ln">  1574&nbsp;&nbsp;</span>		return p.parseEscape(s)
<span id="L1575" class="ln">  1575&nbsp;&nbsp;</span>	}
<span id="L1576" class="ln">  1576&nbsp;&nbsp;</span>
<span id="L1577" class="ln">  1577&nbsp;&nbsp;</span>	return nextRune(s)
<span id="L1578" class="ln">  1578&nbsp;&nbsp;</span>}
<span id="L1579" class="ln">  1579&nbsp;&nbsp;</span>
<span id="L1580" class="ln">  1580&nbsp;&nbsp;</span>type charGroup struct {
<span id="L1581" class="ln">  1581&nbsp;&nbsp;</span>	sign  int
<span id="L1582" class="ln">  1582&nbsp;&nbsp;</span>	class []rune
<span id="L1583" class="ln">  1583&nbsp;&nbsp;</span>}
<span id="L1584" class="ln">  1584&nbsp;&nbsp;</span>
<span id="L1585" class="ln">  1585&nbsp;&nbsp;</span><span class="comment">// parsePerlClassEscape parses a leading Perl character class escape like \d</span>
<span id="L1586" class="ln">  1586&nbsp;&nbsp;</span><span class="comment">// from the beginning of s. If one is present, it appends the characters to r</span>
<span id="L1587" class="ln">  1587&nbsp;&nbsp;</span><span class="comment">// and returns the new slice r and the remainder of the string.</span>
<span id="L1588" class="ln">  1588&nbsp;&nbsp;</span>func (p *parser) parsePerlClassEscape(s string, r []rune) (out []rune, rest string) {
<span id="L1589" class="ln">  1589&nbsp;&nbsp;</span>	if p.flags&amp;PerlX == 0 || len(s) &lt; 2 || s[0] != &#39;\\&#39; {
<span id="L1590" class="ln">  1590&nbsp;&nbsp;</span>		return
<span id="L1591" class="ln">  1591&nbsp;&nbsp;</span>	}
<span id="L1592" class="ln">  1592&nbsp;&nbsp;</span>	g := perlGroup[s[0:2]]
<span id="L1593" class="ln">  1593&nbsp;&nbsp;</span>	if g.sign == 0 {
<span id="L1594" class="ln">  1594&nbsp;&nbsp;</span>		return
<span id="L1595" class="ln">  1595&nbsp;&nbsp;</span>	}
<span id="L1596" class="ln">  1596&nbsp;&nbsp;</span>	return p.appendGroup(r, g), s[2:]
<span id="L1597" class="ln">  1597&nbsp;&nbsp;</span>}
<span id="L1598" class="ln">  1598&nbsp;&nbsp;</span>
<span id="L1599" class="ln">  1599&nbsp;&nbsp;</span><span class="comment">// parseNamedClass parses a leading POSIX named character class like [:alnum:]</span>
<span id="L1600" class="ln">  1600&nbsp;&nbsp;</span><span class="comment">// from the beginning of s. If one is present, it appends the characters to r</span>
<span id="L1601" class="ln">  1601&nbsp;&nbsp;</span><span class="comment">// and returns the new slice r and the remainder of the string.</span>
<span id="L1602" class="ln">  1602&nbsp;&nbsp;</span>func (p *parser) parseNamedClass(s string, r []rune) (out []rune, rest string, err error) {
<span id="L1603" class="ln">  1603&nbsp;&nbsp;</span>	if len(s) &lt; 2 || s[0] != &#39;[&#39; || s[1] != &#39;:&#39; {
<span id="L1604" class="ln">  1604&nbsp;&nbsp;</span>		return
<span id="L1605" class="ln">  1605&nbsp;&nbsp;</span>	}
<span id="L1606" class="ln">  1606&nbsp;&nbsp;</span>
<span id="L1607" class="ln">  1607&nbsp;&nbsp;</span>	i := strings.Index(s[2:], &#34;:]&#34;)
<span id="L1608" class="ln">  1608&nbsp;&nbsp;</span>	if i &lt; 0 {
<span id="L1609" class="ln">  1609&nbsp;&nbsp;</span>		return
<span id="L1610" class="ln">  1610&nbsp;&nbsp;</span>	}
<span id="L1611" class="ln">  1611&nbsp;&nbsp;</span>	i += 2
<span id="L1612" class="ln">  1612&nbsp;&nbsp;</span>	name, s := s[0:i+2], s[i+2:]
<span id="L1613" class="ln">  1613&nbsp;&nbsp;</span>	g := posixGroup[name]
<span id="L1614" class="ln">  1614&nbsp;&nbsp;</span>	if g.sign == 0 {
<span id="L1615" class="ln">  1615&nbsp;&nbsp;</span>		return nil, &#34;&#34;, &amp;Error{ErrInvalidCharRange, name}
<span id="L1616" class="ln">  1616&nbsp;&nbsp;</span>	}
<span id="L1617" class="ln">  1617&nbsp;&nbsp;</span>	return p.appendGroup(r, g), s, nil
<span id="L1618" class="ln">  1618&nbsp;&nbsp;</span>}
<span id="L1619" class="ln">  1619&nbsp;&nbsp;</span>
<span id="L1620" class="ln">  1620&nbsp;&nbsp;</span>func (p *parser) appendGroup(r []rune, g charGroup) []rune {
<span id="L1621" class="ln">  1621&nbsp;&nbsp;</span>	if p.flags&amp;FoldCase == 0 {
<span id="L1622" class="ln">  1622&nbsp;&nbsp;</span>		if g.sign &lt; 0 {
<span id="L1623" class="ln">  1623&nbsp;&nbsp;</span>			r = appendNegatedClass(r, g.class)
<span id="L1624" class="ln">  1624&nbsp;&nbsp;</span>		} else {
<span id="L1625" class="ln">  1625&nbsp;&nbsp;</span>			r = appendClass(r, g.class)
<span id="L1626" class="ln">  1626&nbsp;&nbsp;</span>		}
<span id="L1627" class="ln">  1627&nbsp;&nbsp;</span>	} else {
<span id="L1628" class="ln">  1628&nbsp;&nbsp;</span>		tmp := p.tmpClass[:0]
<span id="L1629" class="ln">  1629&nbsp;&nbsp;</span>		tmp = appendFoldedClass(tmp, g.class)
<span id="L1630" class="ln">  1630&nbsp;&nbsp;</span>		p.tmpClass = tmp
<span id="L1631" class="ln">  1631&nbsp;&nbsp;</span>		tmp = cleanClass(&amp;p.tmpClass)
<span id="L1632" class="ln">  1632&nbsp;&nbsp;</span>		if g.sign &lt; 0 {
<span id="L1633" class="ln">  1633&nbsp;&nbsp;</span>			r = appendNegatedClass(r, tmp)
<span id="L1634" class="ln">  1634&nbsp;&nbsp;</span>		} else {
<span id="L1635" class="ln">  1635&nbsp;&nbsp;</span>			r = appendClass(r, tmp)
<span id="L1636" class="ln">  1636&nbsp;&nbsp;</span>		}
<span id="L1637" class="ln">  1637&nbsp;&nbsp;</span>	}
<span id="L1638" class="ln">  1638&nbsp;&nbsp;</span>	return r
<span id="L1639" class="ln">  1639&nbsp;&nbsp;</span>}
<span id="L1640" class="ln">  1640&nbsp;&nbsp;</span>
<span id="L1641" class="ln">  1641&nbsp;&nbsp;</span>var anyTable = &amp;unicode.RangeTable{
<span id="L1642" class="ln">  1642&nbsp;&nbsp;</span>	R16: []unicode.Range16{{Lo: 0, Hi: 1&lt;&lt;16 - 1, Stride: 1}},
<span id="L1643" class="ln">  1643&nbsp;&nbsp;</span>	R32: []unicode.Range32{{Lo: 1 &lt;&lt; 16, Hi: unicode.MaxRune, Stride: 1}},
<span id="L1644" class="ln">  1644&nbsp;&nbsp;</span>}
<span id="L1645" class="ln">  1645&nbsp;&nbsp;</span>
<span id="L1646" class="ln">  1646&nbsp;&nbsp;</span><span class="comment">// unicodeTable returns the unicode.RangeTable identified by name</span>
<span id="L1647" class="ln">  1647&nbsp;&nbsp;</span><span class="comment">// and the table of additional fold-equivalent code points.</span>
<span id="L1648" class="ln">  1648&nbsp;&nbsp;</span>func unicodeTable(name string) (*unicode.RangeTable, *unicode.RangeTable) {
<span id="L1649" class="ln">  1649&nbsp;&nbsp;</span>	<span class="comment">// Special case: &#34;Any&#34; means any.</span>
<span id="L1650" class="ln">  1650&nbsp;&nbsp;</span>	if name == &#34;Any&#34; {
<span id="L1651" class="ln">  1651&nbsp;&nbsp;</span>		return anyTable, anyTable
<span id="L1652" class="ln">  1652&nbsp;&nbsp;</span>	}
<span id="L1653" class="ln">  1653&nbsp;&nbsp;</span>	if t := unicode.Categories[name]; t != nil {
<span id="L1654" class="ln">  1654&nbsp;&nbsp;</span>		return t, unicode.FoldCategory[name]
<span id="L1655" class="ln">  1655&nbsp;&nbsp;</span>	}
<span id="L1656" class="ln">  1656&nbsp;&nbsp;</span>	if t := unicode.Scripts[name]; t != nil {
<span id="L1657" class="ln">  1657&nbsp;&nbsp;</span>		return t, unicode.FoldScript[name]
<span id="L1658" class="ln">  1658&nbsp;&nbsp;</span>	}
<span id="L1659" class="ln">  1659&nbsp;&nbsp;</span>	return nil, nil
<span id="L1660" class="ln">  1660&nbsp;&nbsp;</span>}
<span id="L1661" class="ln">  1661&nbsp;&nbsp;</span>
<span id="L1662" class="ln">  1662&nbsp;&nbsp;</span><span class="comment">// parseUnicodeClass parses a leading Unicode character class like \p{Han}</span>
<span id="L1663" class="ln">  1663&nbsp;&nbsp;</span><span class="comment">// from the beginning of s. If one is present, it appends the characters to r</span>
<span id="L1664" class="ln">  1664&nbsp;&nbsp;</span><span class="comment">// and returns the new slice r and the remainder of the string.</span>
<span id="L1665" class="ln">  1665&nbsp;&nbsp;</span>func (p *parser) parseUnicodeClass(s string, r []rune) (out []rune, rest string, err error) {
<span id="L1666" class="ln">  1666&nbsp;&nbsp;</span>	if p.flags&amp;UnicodeGroups == 0 || len(s) &lt; 2 || s[0] != &#39;\\&#39; || s[1] != &#39;p&#39; &amp;&amp; s[1] != &#39;P&#39; {
<span id="L1667" class="ln">  1667&nbsp;&nbsp;</span>		return
<span id="L1668" class="ln">  1668&nbsp;&nbsp;</span>	}
<span id="L1669" class="ln">  1669&nbsp;&nbsp;</span>
<span id="L1670" class="ln">  1670&nbsp;&nbsp;</span>	<span class="comment">// Committed to parse or return error.</span>
<span id="L1671" class="ln">  1671&nbsp;&nbsp;</span>	sign := +1
<span id="L1672" class="ln">  1672&nbsp;&nbsp;</span>	if s[1] == &#39;P&#39; {
<span id="L1673" class="ln">  1673&nbsp;&nbsp;</span>		sign = -1
<span id="L1674" class="ln">  1674&nbsp;&nbsp;</span>	}
<span id="L1675" class="ln">  1675&nbsp;&nbsp;</span>	t := s[2:]
<span id="L1676" class="ln">  1676&nbsp;&nbsp;</span>	c, t, err := nextRune(t)
<span id="L1677" class="ln">  1677&nbsp;&nbsp;</span>	if err != nil {
<span id="L1678" class="ln">  1678&nbsp;&nbsp;</span>		return
<span id="L1679" class="ln">  1679&nbsp;&nbsp;</span>	}
<span id="L1680" class="ln">  1680&nbsp;&nbsp;</span>	var seq, name string
<span id="L1681" class="ln">  1681&nbsp;&nbsp;</span>	if c != &#39;{&#39; {
<span id="L1682" class="ln">  1682&nbsp;&nbsp;</span>		<span class="comment">// Single-letter name.</span>
<span id="L1683" class="ln">  1683&nbsp;&nbsp;</span>		seq = s[:len(s)-len(t)]
<span id="L1684" class="ln">  1684&nbsp;&nbsp;</span>		name = seq[2:]
<span id="L1685" class="ln">  1685&nbsp;&nbsp;</span>	} else {
<span id="L1686" class="ln">  1686&nbsp;&nbsp;</span>		<span class="comment">// Name is in braces.</span>
<span id="L1687" class="ln">  1687&nbsp;&nbsp;</span>		end := strings.IndexRune(s, &#39;}&#39;)
<span id="L1688" class="ln">  1688&nbsp;&nbsp;</span>		if end &lt; 0 {
<span id="L1689" class="ln">  1689&nbsp;&nbsp;</span>			if err = checkUTF8(s); err != nil {
<span id="L1690" class="ln">  1690&nbsp;&nbsp;</span>				return
<span id="L1691" class="ln">  1691&nbsp;&nbsp;</span>			}
<span id="L1692" class="ln">  1692&nbsp;&nbsp;</span>			return nil, &#34;&#34;, &amp;Error{ErrInvalidCharRange, s}
<span id="L1693" class="ln">  1693&nbsp;&nbsp;</span>		}
<span id="L1694" class="ln">  1694&nbsp;&nbsp;</span>		seq, t = s[:end+1], s[end+1:]
<span id="L1695" class="ln">  1695&nbsp;&nbsp;</span>		name = s[3:end]
<span id="L1696" class="ln">  1696&nbsp;&nbsp;</span>		if err = checkUTF8(name); err != nil {
<span id="L1697" class="ln">  1697&nbsp;&nbsp;</span>			return
<span id="L1698" class="ln">  1698&nbsp;&nbsp;</span>		}
<span id="L1699" class="ln">  1699&nbsp;&nbsp;</span>	}
<span id="L1700" class="ln">  1700&nbsp;&nbsp;</span>
<span id="L1701" class="ln">  1701&nbsp;&nbsp;</span>	<span class="comment">// Group can have leading negation too.  \p{^Han} == \P{Han}, \P{^Han} == \p{Han}.</span>
<span id="L1702" class="ln">  1702&nbsp;&nbsp;</span>	if name != &#34;&#34; &amp;&amp; name[0] == &#39;^&#39; {
<span id="L1703" class="ln">  1703&nbsp;&nbsp;</span>		sign = -sign
<span id="L1704" class="ln">  1704&nbsp;&nbsp;</span>		name = name[1:]
<span id="L1705" class="ln">  1705&nbsp;&nbsp;</span>	}
<span id="L1706" class="ln">  1706&nbsp;&nbsp;</span>
<span id="L1707" class="ln">  1707&nbsp;&nbsp;</span>	tab, fold := unicodeTable(name)
<span id="L1708" class="ln">  1708&nbsp;&nbsp;</span>	if tab == nil {
<span id="L1709" class="ln">  1709&nbsp;&nbsp;</span>		return nil, &#34;&#34;, &amp;Error{ErrInvalidCharRange, seq}
<span id="L1710" class="ln">  1710&nbsp;&nbsp;</span>	}
<span id="L1711" class="ln">  1711&nbsp;&nbsp;</span>
<span id="L1712" class="ln">  1712&nbsp;&nbsp;</span>	if p.flags&amp;FoldCase == 0 || fold == nil {
<span id="L1713" class="ln">  1713&nbsp;&nbsp;</span>		if sign &gt; 0 {
<span id="L1714" class="ln">  1714&nbsp;&nbsp;</span>			r = appendTable(r, tab)
<span id="L1715" class="ln">  1715&nbsp;&nbsp;</span>		} else {
<span id="L1716" class="ln">  1716&nbsp;&nbsp;</span>			r = appendNegatedTable(r, tab)
<span id="L1717" class="ln">  1717&nbsp;&nbsp;</span>		}
<span id="L1718" class="ln">  1718&nbsp;&nbsp;</span>	} else {
<span id="L1719" class="ln">  1719&nbsp;&nbsp;</span>		<span class="comment">// Merge and clean tab and fold in a temporary buffer.</span>
<span id="L1720" class="ln">  1720&nbsp;&nbsp;</span>		<span class="comment">// This is necessary for the negative case and just tidy</span>
<span id="L1721" class="ln">  1721&nbsp;&nbsp;</span>		<span class="comment">// for the positive case.</span>
<span id="L1722" class="ln">  1722&nbsp;&nbsp;</span>		tmp := p.tmpClass[:0]
<span id="L1723" class="ln">  1723&nbsp;&nbsp;</span>		tmp = appendTable(tmp, tab)
<span id="L1724" class="ln">  1724&nbsp;&nbsp;</span>		tmp = appendTable(tmp, fold)
<span id="L1725" class="ln">  1725&nbsp;&nbsp;</span>		p.tmpClass = tmp
<span id="L1726" class="ln">  1726&nbsp;&nbsp;</span>		tmp = cleanClass(&amp;p.tmpClass)
<span id="L1727" class="ln">  1727&nbsp;&nbsp;</span>		if sign &gt; 0 {
<span id="L1728" class="ln">  1728&nbsp;&nbsp;</span>			r = appendClass(r, tmp)
<span id="L1729" class="ln">  1729&nbsp;&nbsp;</span>		} else {
<span id="L1730" class="ln">  1730&nbsp;&nbsp;</span>			r = appendNegatedClass(r, tmp)
<span id="L1731" class="ln">  1731&nbsp;&nbsp;</span>		}
<span id="L1732" class="ln">  1732&nbsp;&nbsp;</span>	}
<span id="L1733" class="ln">  1733&nbsp;&nbsp;</span>	return r, t, nil
<span id="L1734" class="ln">  1734&nbsp;&nbsp;</span>}
<span id="L1735" class="ln">  1735&nbsp;&nbsp;</span>
<span id="L1736" class="ln">  1736&nbsp;&nbsp;</span><span class="comment">// parseClass parses a character class at the beginning of s</span>
<span id="L1737" class="ln">  1737&nbsp;&nbsp;</span><span class="comment">// and pushes it onto the parse stack.</span>
<span id="L1738" class="ln">  1738&nbsp;&nbsp;</span>func (p *parser) parseClass(s string) (rest string, err error) {
<span id="L1739" class="ln">  1739&nbsp;&nbsp;</span>	t := s[1:] <span class="comment">// chop [</span>
<span id="L1740" class="ln">  1740&nbsp;&nbsp;</span>	re := p.newRegexp(OpCharClass)
<span id="L1741" class="ln">  1741&nbsp;&nbsp;</span>	re.Flags = p.flags
<span id="L1742" class="ln">  1742&nbsp;&nbsp;</span>	re.Rune = re.Rune0[:0]
<span id="L1743" class="ln">  1743&nbsp;&nbsp;</span>
<span id="L1744" class="ln">  1744&nbsp;&nbsp;</span>	sign := +1
<span id="L1745" class="ln">  1745&nbsp;&nbsp;</span>	if t != &#34;&#34; &amp;&amp; t[0] == &#39;^&#39; {
<span id="L1746" class="ln">  1746&nbsp;&nbsp;</span>		sign = -1
<span id="L1747" class="ln">  1747&nbsp;&nbsp;</span>		t = t[1:]
<span id="L1748" class="ln">  1748&nbsp;&nbsp;</span>
<span id="L1749" class="ln">  1749&nbsp;&nbsp;</span>		<span class="comment">// If character class does not match \n, add it here,</span>
<span id="L1750" class="ln">  1750&nbsp;&nbsp;</span>		<span class="comment">// so that negation later will do the right thing.</span>
<span id="L1751" class="ln">  1751&nbsp;&nbsp;</span>		if p.flags&amp;ClassNL == 0 {
<span id="L1752" class="ln">  1752&nbsp;&nbsp;</span>			re.Rune = append(re.Rune, &#39;\n&#39;, &#39;\n&#39;)
<span id="L1753" class="ln">  1753&nbsp;&nbsp;</span>		}
<span id="L1754" class="ln">  1754&nbsp;&nbsp;</span>	}
<span id="L1755" class="ln">  1755&nbsp;&nbsp;</span>
<span id="L1756" class="ln">  1756&nbsp;&nbsp;</span>	class := re.Rune
<span id="L1757" class="ln">  1757&nbsp;&nbsp;</span>	first := true <span class="comment">// ] and - are okay as first char in class</span>
<span id="L1758" class="ln">  1758&nbsp;&nbsp;</span>	for t == &#34;&#34; || t[0] != &#39;]&#39; || first {
<span id="L1759" class="ln">  1759&nbsp;&nbsp;</span>		<span class="comment">// POSIX: - is only okay unescaped as first or last in class.</span>
<span id="L1760" class="ln">  1760&nbsp;&nbsp;</span>		<span class="comment">// Perl: - is okay anywhere.</span>
<span id="L1761" class="ln">  1761&nbsp;&nbsp;</span>		if t != &#34;&#34; &amp;&amp; t[0] == &#39;-&#39; &amp;&amp; p.flags&amp;PerlX == 0 &amp;&amp; !first &amp;&amp; (len(t) == 1 || t[1] != &#39;]&#39;) {
<span id="L1762" class="ln">  1762&nbsp;&nbsp;</span>			_, size := utf8.DecodeRuneInString(t[1:])
<span id="L1763" class="ln">  1763&nbsp;&nbsp;</span>			return &#34;&#34;, &amp;Error{Code: ErrInvalidCharRange, Expr: t[:1+size]}
<span id="L1764" class="ln">  1764&nbsp;&nbsp;</span>		}
<span id="L1765" class="ln">  1765&nbsp;&nbsp;</span>		first = false
<span id="L1766" class="ln">  1766&nbsp;&nbsp;</span>
<span id="L1767" class="ln">  1767&nbsp;&nbsp;</span>		<span class="comment">// Look for POSIX [:alnum:] etc.</span>
<span id="L1768" class="ln">  1768&nbsp;&nbsp;</span>		if len(t) &gt; 2 &amp;&amp; t[0] == &#39;[&#39; &amp;&amp; t[1] == &#39;:&#39; {
<span id="L1769" class="ln">  1769&nbsp;&nbsp;</span>			nclass, nt, err := p.parseNamedClass(t, class)
<span id="L1770" class="ln">  1770&nbsp;&nbsp;</span>			if err != nil {
<span id="L1771" class="ln">  1771&nbsp;&nbsp;</span>				return &#34;&#34;, err
<span id="L1772" class="ln">  1772&nbsp;&nbsp;</span>			}
<span id="L1773" class="ln">  1773&nbsp;&nbsp;</span>			if nclass != nil {
<span id="L1774" class="ln">  1774&nbsp;&nbsp;</span>				class, t = nclass, nt
<span id="L1775" class="ln">  1775&nbsp;&nbsp;</span>				continue
<span id="L1776" class="ln">  1776&nbsp;&nbsp;</span>			}
<span id="L1777" class="ln">  1777&nbsp;&nbsp;</span>		}
<span id="L1778" class="ln">  1778&nbsp;&nbsp;</span>
<span id="L1779" class="ln">  1779&nbsp;&nbsp;</span>		<span class="comment">// Look for Unicode character group like \p{Han}.</span>
<span id="L1780" class="ln">  1780&nbsp;&nbsp;</span>		nclass, nt, err := p.parseUnicodeClass(t, class)
<span id="L1781" class="ln">  1781&nbsp;&nbsp;</span>		if err != nil {
<span id="L1782" class="ln">  1782&nbsp;&nbsp;</span>			return &#34;&#34;, err
<span id="L1783" class="ln">  1783&nbsp;&nbsp;</span>		}
<span id="L1784" class="ln">  1784&nbsp;&nbsp;</span>		if nclass != nil {
<span id="L1785" class="ln">  1785&nbsp;&nbsp;</span>			class, t = nclass, nt
<span id="L1786" class="ln">  1786&nbsp;&nbsp;</span>			continue
<span id="L1787" class="ln">  1787&nbsp;&nbsp;</span>		}
<span id="L1788" class="ln">  1788&nbsp;&nbsp;</span>
<span id="L1789" class="ln">  1789&nbsp;&nbsp;</span>		<span class="comment">// Look for Perl character class symbols (extension).</span>
<span id="L1790" class="ln">  1790&nbsp;&nbsp;</span>		if nclass, nt := p.parsePerlClassEscape(t, class); nclass != nil {
<span id="L1791" class="ln">  1791&nbsp;&nbsp;</span>			class, t = nclass, nt
<span id="L1792" class="ln">  1792&nbsp;&nbsp;</span>			continue
<span id="L1793" class="ln">  1793&nbsp;&nbsp;</span>		}
<span id="L1794" class="ln">  1794&nbsp;&nbsp;</span>
<span id="L1795" class="ln">  1795&nbsp;&nbsp;</span>		<span class="comment">// Single character or simple range.</span>
<span id="L1796" class="ln">  1796&nbsp;&nbsp;</span>		rng := t
<span id="L1797" class="ln">  1797&nbsp;&nbsp;</span>		var lo, hi rune
<span id="L1798" class="ln">  1798&nbsp;&nbsp;</span>		if lo, t, err = p.parseClassChar(t, s); err != nil {
<span id="L1799" class="ln">  1799&nbsp;&nbsp;</span>			return &#34;&#34;, err
<span id="L1800" class="ln">  1800&nbsp;&nbsp;</span>		}
<span id="L1801" class="ln">  1801&nbsp;&nbsp;</span>		hi = lo
<span id="L1802" class="ln">  1802&nbsp;&nbsp;</span>		<span class="comment">// [a-] means (a|-) so check for final ].</span>
<span id="L1803" class="ln">  1803&nbsp;&nbsp;</span>		if len(t) &gt;= 2 &amp;&amp; t[0] == &#39;-&#39; &amp;&amp; t[1] != &#39;]&#39; {
<span id="L1804" class="ln">  1804&nbsp;&nbsp;</span>			t = t[1:]
<span id="L1805" class="ln">  1805&nbsp;&nbsp;</span>			if hi, t, err = p.parseClassChar(t, s); err != nil {
<span id="L1806" class="ln">  1806&nbsp;&nbsp;</span>				return &#34;&#34;, err
<span id="L1807" class="ln">  1807&nbsp;&nbsp;</span>			}
<span id="L1808" class="ln">  1808&nbsp;&nbsp;</span>			if hi &lt; lo {
<span id="L1809" class="ln">  1809&nbsp;&nbsp;</span>				rng = rng[:len(rng)-len(t)]
<span id="L1810" class="ln">  1810&nbsp;&nbsp;</span>				return &#34;&#34;, &amp;Error{Code: ErrInvalidCharRange, Expr: rng}
<span id="L1811" class="ln">  1811&nbsp;&nbsp;</span>			}
<span id="L1812" class="ln">  1812&nbsp;&nbsp;</span>		}
<span id="L1813" class="ln">  1813&nbsp;&nbsp;</span>		if p.flags&amp;FoldCase == 0 {
<span id="L1814" class="ln">  1814&nbsp;&nbsp;</span>			class = appendRange(class, lo, hi)
<span id="L1815" class="ln">  1815&nbsp;&nbsp;</span>		} else {
<span id="L1816" class="ln">  1816&nbsp;&nbsp;</span>			class = appendFoldedRange(class, lo, hi)
<span id="L1817" class="ln">  1817&nbsp;&nbsp;</span>		}
<span id="L1818" class="ln">  1818&nbsp;&nbsp;</span>	}
<span id="L1819" class="ln">  1819&nbsp;&nbsp;</span>	t = t[1:] <span class="comment">// chop ]</span>
<span id="L1820" class="ln">  1820&nbsp;&nbsp;</span>
<span id="L1821" class="ln">  1821&nbsp;&nbsp;</span>	<span class="comment">// Use &amp;re.Rune instead of &amp;class to avoid allocation.</span>
<span id="L1822" class="ln">  1822&nbsp;&nbsp;</span>	re.Rune = class
<span id="L1823" class="ln">  1823&nbsp;&nbsp;</span>	class = cleanClass(&amp;re.Rune)
<span id="L1824" class="ln">  1824&nbsp;&nbsp;</span>	if sign &lt; 0 {
<span id="L1825" class="ln">  1825&nbsp;&nbsp;</span>		class = negateClass(class)
<span id="L1826" class="ln">  1826&nbsp;&nbsp;</span>	}
<span id="L1827" class="ln">  1827&nbsp;&nbsp;</span>	re.Rune = class
<span id="L1828" class="ln">  1828&nbsp;&nbsp;</span>	p.push(re)
<span id="L1829" class="ln">  1829&nbsp;&nbsp;</span>	return t, nil
<span id="L1830" class="ln">  1830&nbsp;&nbsp;</span>}
<span id="L1831" class="ln">  1831&nbsp;&nbsp;</span>
<span id="L1832" class="ln">  1832&nbsp;&nbsp;</span><span class="comment">// cleanClass sorts the ranges (pairs of elements of r),</span>
<span id="L1833" class="ln">  1833&nbsp;&nbsp;</span><span class="comment">// merges them, and eliminates duplicates.</span>
<span id="L1834" class="ln">  1834&nbsp;&nbsp;</span>func cleanClass(rp *[]rune) []rune {
<span id="L1835" class="ln">  1835&nbsp;&nbsp;</span>
<span id="L1836" class="ln">  1836&nbsp;&nbsp;</span>	<span class="comment">// Sort by lo increasing, hi decreasing to break ties.</span>
<span id="L1837" class="ln">  1837&nbsp;&nbsp;</span>	sort.Sort(ranges{rp})
<span id="L1838" class="ln">  1838&nbsp;&nbsp;</span>
<span id="L1839" class="ln">  1839&nbsp;&nbsp;</span>	r := *rp
<span id="L1840" class="ln">  1840&nbsp;&nbsp;</span>	if len(r) &lt; 2 {
<span id="L1841" class="ln">  1841&nbsp;&nbsp;</span>		return r
<span id="L1842" class="ln">  1842&nbsp;&nbsp;</span>	}
<span id="L1843" class="ln">  1843&nbsp;&nbsp;</span>
<span id="L1844" class="ln">  1844&nbsp;&nbsp;</span>	<span class="comment">// Merge abutting, overlapping.</span>
<span id="L1845" class="ln">  1845&nbsp;&nbsp;</span>	w := 2 <span class="comment">// write index</span>
<span id="L1846" class="ln">  1846&nbsp;&nbsp;</span>	for i := 2; i &lt; len(r); i += 2 {
<span id="L1847" class="ln">  1847&nbsp;&nbsp;</span>		lo, hi := r[i], r[i+1]
<span id="L1848" class="ln">  1848&nbsp;&nbsp;</span>		if lo &lt;= r[w-1]+1 {
<span id="L1849" class="ln">  1849&nbsp;&nbsp;</span>			<span class="comment">// merge with previous range</span>
<span id="L1850" class="ln">  1850&nbsp;&nbsp;</span>			if hi &gt; r[w-1] {
<span id="L1851" class="ln">  1851&nbsp;&nbsp;</span>				r[w-1] = hi
<span id="L1852" class="ln">  1852&nbsp;&nbsp;</span>			}
<span id="L1853" class="ln">  1853&nbsp;&nbsp;</span>			continue
<span id="L1854" class="ln">  1854&nbsp;&nbsp;</span>		}
<span id="L1855" class="ln">  1855&nbsp;&nbsp;</span>		<span class="comment">// new disjoint range</span>
<span id="L1856" class="ln">  1856&nbsp;&nbsp;</span>		r[w] = lo
<span id="L1857" class="ln">  1857&nbsp;&nbsp;</span>		r[w+1] = hi
<span id="L1858" class="ln">  1858&nbsp;&nbsp;</span>		w += 2
<span id="L1859" class="ln">  1859&nbsp;&nbsp;</span>	}
<span id="L1860" class="ln">  1860&nbsp;&nbsp;</span>
<span id="L1861" class="ln">  1861&nbsp;&nbsp;</span>	return r[:w]
<span id="L1862" class="ln">  1862&nbsp;&nbsp;</span>}
<span id="L1863" class="ln">  1863&nbsp;&nbsp;</span>
<span id="L1864" class="ln">  1864&nbsp;&nbsp;</span><span class="comment">// inCharClass reports whether r is in the class.</span>
<span id="L1865" class="ln">  1865&nbsp;&nbsp;</span><span class="comment">// It assumes the class has been cleaned by cleanClass.</span>
<span id="L1866" class="ln">  1866&nbsp;&nbsp;</span>func inCharClass(r rune, class []rune) bool {
<span id="L1867" class="ln">  1867&nbsp;&nbsp;</span>	_, ok := sort.Find(len(class)/2, func(i int) int {
<span id="L1868" class="ln">  1868&nbsp;&nbsp;</span>		lo, hi := class[2*i], class[2*i+1]
<span id="L1869" class="ln">  1869&nbsp;&nbsp;</span>		if r &gt; hi {
<span id="L1870" class="ln">  1870&nbsp;&nbsp;</span>			return +1
<span id="L1871" class="ln">  1871&nbsp;&nbsp;</span>		}
<span id="L1872" class="ln">  1872&nbsp;&nbsp;</span>		if r &lt; lo {
<span id="L1873" class="ln">  1873&nbsp;&nbsp;</span>			return -1
<span id="L1874" class="ln">  1874&nbsp;&nbsp;</span>		}
<span id="L1875" class="ln">  1875&nbsp;&nbsp;</span>		return 0
<span id="L1876" class="ln">  1876&nbsp;&nbsp;</span>	})
<span id="L1877" class="ln">  1877&nbsp;&nbsp;</span>	return ok
<span id="L1878" class="ln">  1878&nbsp;&nbsp;</span>}
<span id="L1879" class="ln">  1879&nbsp;&nbsp;</span>
<span id="L1880" class="ln">  1880&nbsp;&nbsp;</span><span class="comment">// appendLiteral returns the result of appending the literal x to the class r.</span>
<span id="L1881" class="ln">  1881&nbsp;&nbsp;</span>func appendLiteral(r []rune, x rune, flags Flags) []rune {
<span id="L1882" class="ln">  1882&nbsp;&nbsp;</span>	if flags&amp;FoldCase != 0 {
<span id="L1883" class="ln">  1883&nbsp;&nbsp;</span>		return appendFoldedRange(r, x, x)
<span id="L1884" class="ln">  1884&nbsp;&nbsp;</span>	}
<span id="L1885" class="ln">  1885&nbsp;&nbsp;</span>	return appendRange(r, x, x)
<span id="L1886" class="ln">  1886&nbsp;&nbsp;</span>}
<span id="L1887" class="ln">  1887&nbsp;&nbsp;</span>
<span id="L1888" class="ln">  1888&nbsp;&nbsp;</span><span class="comment">// appendRange returns the result of appending the range lo-hi to the class r.</span>
<span id="L1889" class="ln">  1889&nbsp;&nbsp;</span>func appendRange(r []rune, lo, hi rune) []rune {
<span id="L1890" class="ln">  1890&nbsp;&nbsp;</span>	<span class="comment">// Expand last range or next to last range if it overlaps or abuts.</span>
<span id="L1891" class="ln">  1891&nbsp;&nbsp;</span>	<span class="comment">// Checking two ranges helps when appending case-folded</span>
<span id="L1892" class="ln">  1892&nbsp;&nbsp;</span>	<span class="comment">// alphabets, so that one range can be expanding A-Z and the</span>
<span id="L1893" class="ln">  1893&nbsp;&nbsp;</span>	<span class="comment">// other expanding a-z.</span>
<span id="L1894" class="ln">  1894&nbsp;&nbsp;</span>	n := len(r)
<span id="L1895" class="ln">  1895&nbsp;&nbsp;</span>	for i := 2; i &lt;= 4; i += 2 { <span class="comment">// twice, using i=2, i=4</span>
<span id="L1896" class="ln">  1896&nbsp;&nbsp;</span>		if n &gt;= i {
<span id="L1897" class="ln">  1897&nbsp;&nbsp;</span>			rlo, rhi := r[n-i], r[n-i+1]
<span id="L1898" class="ln">  1898&nbsp;&nbsp;</span>			if lo &lt;= rhi+1 &amp;&amp; rlo &lt;= hi+1 {
<span id="L1899" class="ln">  1899&nbsp;&nbsp;</span>				if lo &lt; rlo {
<span id="L1900" class="ln">  1900&nbsp;&nbsp;</span>					r[n-i] = lo
<span id="L1901" class="ln">  1901&nbsp;&nbsp;</span>				}
<span id="L1902" class="ln">  1902&nbsp;&nbsp;</span>				if hi &gt; rhi {
<span id="L1903" class="ln">  1903&nbsp;&nbsp;</span>					r[n-i+1] = hi
<span id="L1904" class="ln">  1904&nbsp;&nbsp;</span>				}
<span id="L1905" class="ln">  1905&nbsp;&nbsp;</span>				return r
<span id="L1906" class="ln">  1906&nbsp;&nbsp;</span>			}
<span id="L1907" class="ln">  1907&nbsp;&nbsp;</span>		}
<span id="L1908" class="ln">  1908&nbsp;&nbsp;</span>	}
<span id="L1909" class="ln">  1909&nbsp;&nbsp;</span>
<span id="L1910" class="ln">  1910&nbsp;&nbsp;</span>	return append(r, lo, hi)
<span id="L1911" class="ln">  1911&nbsp;&nbsp;</span>}
<span id="L1912" class="ln">  1912&nbsp;&nbsp;</span>
<span id="L1913" class="ln">  1913&nbsp;&nbsp;</span>const (
<span id="L1914" class="ln">  1914&nbsp;&nbsp;</span>	<span class="comment">// minimum and maximum runes involved in folding.</span>
<span id="L1915" class="ln">  1915&nbsp;&nbsp;</span>	<span class="comment">// checked during test.</span>
<span id="L1916" class="ln">  1916&nbsp;&nbsp;</span>	minFold = 0x0041
<span id="L1917" class="ln">  1917&nbsp;&nbsp;</span>	maxFold = 0x1e943
<span id="L1918" class="ln">  1918&nbsp;&nbsp;</span>)
<span id="L1919" class="ln">  1919&nbsp;&nbsp;</span>
<span id="L1920" class="ln">  1920&nbsp;&nbsp;</span><span class="comment">// appendFoldedRange returns the result of appending the range lo-hi</span>
<span id="L1921" class="ln">  1921&nbsp;&nbsp;</span><span class="comment">// and its case folding-equivalent runes to the class r.</span>
<span id="L1922" class="ln">  1922&nbsp;&nbsp;</span>func appendFoldedRange(r []rune, lo, hi rune) []rune {
<span id="L1923" class="ln">  1923&nbsp;&nbsp;</span>	<span class="comment">// Optimizations.</span>
<span id="L1924" class="ln">  1924&nbsp;&nbsp;</span>	if lo &lt;= minFold &amp;&amp; hi &gt;= maxFold {
<span id="L1925" class="ln">  1925&nbsp;&nbsp;</span>		<span class="comment">// Range is full: folding can&#39;t add more.</span>
<span id="L1926" class="ln">  1926&nbsp;&nbsp;</span>		return appendRange(r, lo, hi)
<span id="L1927" class="ln">  1927&nbsp;&nbsp;</span>	}
<span id="L1928" class="ln">  1928&nbsp;&nbsp;</span>	if hi &lt; minFold || lo &gt; maxFold {
<span id="L1929" class="ln">  1929&nbsp;&nbsp;</span>		<span class="comment">// Range is outside folding possibilities.</span>
<span id="L1930" class="ln">  1930&nbsp;&nbsp;</span>		return appendRange(r, lo, hi)
<span id="L1931" class="ln">  1931&nbsp;&nbsp;</span>	}
<span id="L1932" class="ln">  1932&nbsp;&nbsp;</span>	if lo &lt; minFold {
<span id="L1933" class="ln">  1933&nbsp;&nbsp;</span>		<span class="comment">// [lo, minFold-1] needs no folding.</span>
<span id="L1934" class="ln">  1934&nbsp;&nbsp;</span>		r = appendRange(r, lo, minFold-1)
<span id="L1935" class="ln">  1935&nbsp;&nbsp;</span>		lo = minFold
<span id="L1936" class="ln">  1936&nbsp;&nbsp;</span>	}
<span id="L1937" class="ln">  1937&nbsp;&nbsp;</span>	if hi &gt; maxFold {
<span id="L1938" class="ln">  1938&nbsp;&nbsp;</span>		<span class="comment">// [maxFold+1, hi] needs no folding.</span>
<span id="L1939" class="ln">  1939&nbsp;&nbsp;</span>		r = appendRange(r, maxFold+1, hi)
<span id="L1940" class="ln">  1940&nbsp;&nbsp;</span>		hi = maxFold
<span id="L1941" class="ln">  1941&nbsp;&nbsp;</span>	}
<span id="L1942" class="ln">  1942&nbsp;&nbsp;</span>
<span id="L1943" class="ln">  1943&nbsp;&nbsp;</span>	<span class="comment">// Brute force. Depend on appendRange to coalesce ranges on the fly.</span>
<span id="L1944" class="ln">  1944&nbsp;&nbsp;</span>	for c := lo; c &lt;= hi; c++ {
<span id="L1945" class="ln">  1945&nbsp;&nbsp;</span>		r = appendRange(r, c, c)
<span id="L1946" class="ln">  1946&nbsp;&nbsp;</span>		f := unicode.SimpleFold(c)
<span id="L1947" class="ln">  1947&nbsp;&nbsp;</span>		for f != c {
<span id="L1948" class="ln">  1948&nbsp;&nbsp;</span>			r = appendRange(r, f, f)
<span id="L1949" class="ln">  1949&nbsp;&nbsp;</span>			f = unicode.SimpleFold(f)
<span id="L1950" class="ln">  1950&nbsp;&nbsp;</span>		}
<span id="L1951" class="ln">  1951&nbsp;&nbsp;</span>	}
<span id="L1952" class="ln">  1952&nbsp;&nbsp;</span>	return r
<span id="L1953" class="ln">  1953&nbsp;&nbsp;</span>}
<span id="L1954" class="ln">  1954&nbsp;&nbsp;</span>
<span id="L1955" class="ln">  1955&nbsp;&nbsp;</span><span class="comment">// appendClass returns the result of appending the class x to the class r.</span>
<span id="L1956" class="ln">  1956&nbsp;&nbsp;</span><span class="comment">// It assume x is clean.</span>
<span id="L1957" class="ln">  1957&nbsp;&nbsp;</span>func appendClass(r []rune, x []rune) []rune {
<span id="L1958" class="ln">  1958&nbsp;&nbsp;</span>	for i := 0; i &lt; len(x); i += 2 {
<span id="L1959" class="ln">  1959&nbsp;&nbsp;</span>		r = appendRange(r, x[i], x[i+1])
<span id="L1960" class="ln">  1960&nbsp;&nbsp;</span>	}
<span id="L1961" class="ln">  1961&nbsp;&nbsp;</span>	return r
<span id="L1962" class="ln">  1962&nbsp;&nbsp;</span>}
<span id="L1963" class="ln">  1963&nbsp;&nbsp;</span>
<span id="L1964" class="ln">  1964&nbsp;&nbsp;</span><span class="comment">// appendFoldedClass returns the result of appending the case folding of the class x to the class r.</span>
<span id="L1965" class="ln">  1965&nbsp;&nbsp;</span>func appendFoldedClass(r []rune, x []rune) []rune {
<span id="L1966" class="ln">  1966&nbsp;&nbsp;</span>	for i := 0; i &lt; len(x); i += 2 {
<span id="L1967" class="ln">  1967&nbsp;&nbsp;</span>		r = appendFoldedRange(r, x[i], x[i+1])
<span id="L1968" class="ln">  1968&nbsp;&nbsp;</span>	}
<span id="L1969" class="ln">  1969&nbsp;&nbsp;</span>	return r
<span id="L1970" class="ln">  1970&nbsp;&nbsp;</span>}
<span id="L1971" class="ln">  1971&nbsp;&nbsp;</span>
<span id="L1972" class="ln">  1972&nbsp;&nbsp;</span><span class="comment">// appendNegatedClass returns the result of appending the negation of the class x to the class r.</span>
<span id="L1973" class="ln">  1973&nbsp;&nbsp;</span><span class="comment">// It assumes x is clean.</span>
<span id="L1974" class="ln">  1974&nbsp;&nbsp;</span>func appendNegatedClass(r []rune, x []rune) []rune {
<span id="L1975" class="ln">  1975&nbsp;&nbsp;</span>	nextLo := &#39;\u0000&#39;
<span id="L1976" class="ln">  1976&nbsp;&nbsp;</span>	for i := 0; i &lt; len(x); i += 2 {
<span id="L1977" class="ln">  1977&nbsp;&nbsp;</span>		lo, hi := x[i], x[i+1]
<span id="L1978" class="ln">  1978&nbsp;&nbsp;</span>		if nextLo &lt;= lo-1 {
<span id="L1979" class="ln">  1979&nbsp;&nbsp;</span>			r = appendRange(r, nextLo, lo-1)
<span id="L1980" class="ln">  1980&nbsp;&nbsp;</span>		}
<span id="L1981" class="ln">  1981&nbsp;&nbsp;</span>		nextLo = hi + 1
<span id="L1982" class="ln">  1982&nbsp;&nbsp;</span>	}
<span id="L1983" class="ln">  1983&nbsp;&nbsp;</span>	if nextLo &lt;= unicode.MaxRune {
<span id="L1984" class="ln">  1984&nbsp;&nbsp;</span>		r = appendRange(r, nextLo, unicode.MaxRune)
<span id="L1985" class="ln">  1985&nbsp;&nbsp;</span>	}
<span id="L1986" class="ln">  1986&nbsp;&nbsp;</span>	return r
<span id="L1987" class="ln">  1987&nbsp;&nbsp;</span>}
<span id="L1988" class="ln">  1988&nbsp;&nbsp;</span>
<span id="L1989" class="ln">  1989&nbsp;&nbsp;</span><span class="comment">// appendTable returns the result of appending x to the class r.</span>
<span id="L1990" class="ln">  1990&nbsp;&nbsp;</span>func appendTable(r []rune, x *unicode.RangeTable) []rune {
<span id="L1991" class="ln">  1991&nbsp;&nbsp;</span>	for _, xr := range x.R16 {
<span id="L1992" class="ln">  1992&nbsp;&nbsp;</span>		lo, hi, stride := rune(xr.Lo), rune(xr.Hi), rune(xr.Stride)
<span id="L1993" class="ln">  1993&nbsp;&nbsp;</span>		if stride == 1 {
<span id="L1994" class="ln">  1994&nbsp;&nbsp;</span>			r = appendRange(r, lo, hi)
<span id="L1995" class="ln">  1995&nbsp;&nbsp;</span>			continue
<span id="L1996" class="ln">  1996&nbsp;&nbsp;</span>		}
<span id="L1997" class="ln">  1997&nbsp;&nbsp;</span>		for c := lo; c &lt;= hi; c += stride {
<span id="L1998" class="ln">  1998&nbsp;&nbsp;</span>			r = appendRange(r, c, c)
<span id="L1999" class="ln">  1999&nbsp;&nbsp;</span>		}
<span id="L2000" class="ln">  2000&nbsp;&nbsp;</span>	}
<span id="L2001" class="ln">  2001&nbsp;&nbsp;</span>	for _, xr := range x.R32 {
<span id="L2002" class="ln">  2002&nbsp;&nbsp;</span>		lo, hi, stride := rune(xr.Lo), rune(xr.Hi), rune(xr.Stride)
<span id="L2003" class="ln">  2003&nbsp;&nbsp;</span>		if stride == 1 {
<span id="L2004" class="ln">  2004&nbsp;&nbsp;</span>			r = appendRange(r, lo, hi)
<span id="L2005" class="ln">  2005&nbsp;&nbsp;</span>			continue
<span id="L2006" class="ln">  2006&nbsp;&nbsp;</span>		}
<span id="L2007" class="ln">  2007&nbsp;&nbsp;</span>		for c := lo; c &lt;= hi; c += stride {
<span id="L2008" class="ln">  2008&nbsp;&nbsp;</span>			r = appendRange(r, c, c)
<span id="L2009" class="ln">  2009&nbsp;&nbsp;</span>		}
<span id="L2010" class="ln">  2010&nbsp;&nbsp;</span>	}
<span id="L2011" class="ln">  2011&nbsp;&nbsp;</span>	return r
<span id="L2012" class="ln">  2012&nbsp;&nbsp;</span>}
<span id="L2013" class="ln">  2013&nbsp;&nbsp;</span>
<span id="L2014" class="ln">  2014&nbsp;&nbsp;</span><span class="comment">// appendNegatedTable returns the result of appending the negation of x to the class r.</span>
<span id="L2015" class="ln">  2015&nbsp;&nbsp;</span>func appendNegatedTable(r []rune, x *unicode.RangeTable) []rune {
<span id="L2016" class="ln">  2016&nbsp;&nbsp;</span>	nextLo := &#39;\u0000&#39; <span class="comment">// lo end of next class to add</span>
<span id="L2017" class="ln">  2017&nbsp;&nbsp;</span>	for _, xr := range x.R16 {
<span id="L2018" class="ln">  2018&nbsp;&nbsp;</span>		lo, hi, stride := rune(xr.Lo), rune(xr.Hi), rune(xr.Stride)
<span id="L2019" class="ln">  2019&nbsp;&nbsp;</span>		if stride == 1 {
<span id="L2020" class="ln">  2020&nbsp;&nbsp;</span>			if nextLo &lt;= lo-1 {
<span id="L2021" class="ln">  2021&nbsp;&nbsp;</span>				r = appendRange(r, nextLo, lo-1)
<span id="L2022" class="ln">  2022&nbsp;&nbsp;</span>			}
<span id="L2023" class="ln">  2023&nbsp;&nbsp;</span>			nextLo = hi + 1
<span id="L2024" class="ln">  2024&nbsp;&nbsp;</span>			continue
<span id="L2025" class="ln">  2025&nbsp;&nbsp;</span>		}
<span id="L2026" class="ln">  2026&nbsp;&nbsp;</span>		for c := lo; c &lt;= hi; c += stride {
<span id="L2027" class="ln">  2027&nbsp;&nbsp;</span>			if nextLo &lt;= c-1 {
<span id="L2028" class="ln">  2028&nbsp;&nbsp;</span>				r = appendRange(r, nextLo, c-1)
<span id="L2029" class="ln">  2029&nbsp;&nbsp;</span>			}
<span id="L2030" class="ln">  2030&nbsp;&nbsp;</span>			nextLo = c + 1
<span id="L2031" class="ln">  2031&nbsp;&nbsp;</span>		}
<span id="L2032" class="ln">  2032&nbsp;&nbsp;</span>	}
<span id="L2033" class="ln">  2033&nbsp;&nbsp;</span>	for _, xr := range x.R32 {
<span id="L2034" class="ln">  2034&nbsp;&nbsp;</span>		lo, hi, stride := rune(xr.Lo), rune(xr.Hi), rune(xr.Stride)
<span id="L2035" class="ln">  2035&nbsp;&nbsp;</span>		if stride == 1 {
<span id="L2036" class="ln">  2036&nbsp;&nbsp;</span>			if nextLo &lt;= lo-1 {
<span id="L2037" class="ln">  2037&nbsp;&nbsp;</span>				r = appendRange(r, nextLo, lo-1)
<span id="L2038" class="ln">  2038&nbsp;&nbsp;</span>			}
<span id="L2039" class="ln">  2039&nbsp;&nbsp;</span>			nextLo = hi + 1
<span id="L2040" class="ln">  2040&nbsp;&nbsp;</span>			continue
<span id="L2041" class="ln">  2041&nbsp;&nbsp;</span>		}
<span id="L2042" class="ln">  2042&nbsp;&nbsp;</span>		for c := lo; c &lt;= hi; c += stride {
<span id="L2043" class="ln">  2043&nbsp;&nbsp;</span>			if nextLo &lt;= c-1 {
<span id="L2044" class="ln">  2044&nbsp;&nbsp;</span>				r = appendRange(r, nextLo, c-1)
<span id="L2045" class="ln">  2045&nbsp;&nbsp;</span>			}
<span id="L2046" class="ln">  2046&nbsp;&nbsp;</span>			nextLo = c + 1
<span id="L2047" class="ln">  2047&nbsp;&nbsp;</span>		}
<span id="L2048" class="ln">  2048&nbsp;&nbsp;</span>	}
<span id="L2049" class="ln">  2049&nbsp;&nbsp;</span>	if nextLo &lt;= unicode.MaxRune {
<span id="L2050" class="ln">  2050&nbsp;&nbsp;</span>		r = appendRange(r, nextLo, unicode.MaxRune)
<span id="L2051" class="ln">  2051&nbsp;&nbsp;</span>	}
<span id="L2052" class="ln">  2052&nbsp;&nbsp;</span>	return r
<span id="L2053" class="ln">  2053&nbsp;&nbsp;</span>}
<span id="L2054" class="ln">  2054&nbsp;&nbsp;</span>
<span id="L2055" class="ln">  2055&nbsp;&nbsp;</span><span class="comment">// negateClass overwrites r and returns r&#39;s negation.</span>
<span id="L2056" class="ln">  2056&nbsp;&nbsp;</span><span class="comment">// It assumes the class r is already clean.</span>
<span id="L2057" class="ln">  2057&nbsp;&nbsp;</span>func negateClass(r []rune) []rune {
<span id="L2058" class="ln">  2058&nbsp;&nbsp;</span>	nextLo := &#39;\u0000&#39; <span class="comment">// lo end of next class to add</span>
<span id="L2059" class="ln">  2059&nbsp;&nbsp;</span>	w := 0             <span class="comment">// write index</span>
<span id="L2060" class="ln">  2060&nbsp;&nbsp;</span>	for i := 0; i &lt; len(r); i += 2 {
<span id="L2061" class="ln">  2061&nbsp;&nbsp;</span>		lo, hi := r[i], r[i+1]
<span id="L2062" class="ln">  2062&nbsp;&nbsp;</span>		if nextLo &lt;= lo-1 {
<span id="L2063" class="ln">  2063&nbsp;&nbsp;</span>			r[w] = nextLo
<span id="L2064" class="ln">  2064&nbsp;&nbsp;</span>			r[w+1] = lo - 1
<span id="L2065" class="ln">  2065&nbsp;&nbsp;</span>			w += 2
<span id="L2066" class="ln">  2066&nbsp;&nbsp;</span>		}
<span id="L2067" class="ln">  2067&nbsp;&nbsp;</span>		nextLo = hi + 1
<span id="L2068" class="ln">  2068&nbsp;&nbsp;</span>	}
<span id="L2069" class="ln">  2069&nbsp;&nbsp;</span>	r = r[:w]
<span id="L2070" class="ln">  2070&nbsp;&nbsp;</span>	if nextLo &lt;= unicode.MaxRune {
<span id="L2071" class="ln">  2071&nbsp;&nbsp;</span>		<span class="comment">// It&#39;s possible for the negation to have one more</span>
<span id="L2072" class="ln">  2072&nbsp;&nbsp;</span>		<span class="comment">// range - this one - than the original class, so use append.</span>
<span id="L2073" class="ln">  2073&nbsp;&nbsp;</span>		r = append(r, nextLo, unicode.MaxRune)
<span id="L2074" class="ln">  2074&nbsp;&nbsp;</span>	}
<span id="L2075" class="ln">  2075&nbsp;&nbsp;</span>	return r
<span id="L2076" class="ln">  2076&nbsp;&nbsp;</span>}
<span id="L2077" class="ln">  2077&nbsp;&nbsp;</span>
<span id="L2078" class="ln">  2078&nbsp;&nbsp;</span><span class="comment">// ranges implements sort.Interface on a []rune.</span>
<span id="L2079" class="ln">  2079&nbsp;&nbsp;</span><span class="comment">// The choice of receiver type definition is strange</span>
<span id="L2080" class="ln">  2080&nbsp;&nbsp;</span><span class="comment">// but avoids an allocation since we already have</span>
<span id="L2081" class="ln">  2081&nbsp;&nbsp;</span><span class="comment">// a *[]rune.</span>
<span id="L2082" class="ln">  2082&nbsp;&nbsp;</span>type ranges struct {
<span id="L2083" class="ln">  2083&nbsp;&nbsp;</span>	p *[]rune
<span id="L2084" class="ln">  2084&nbsp;&nbsp;</span>}
<span id="L2085" class="ln">  2085&nbsp;&nbsp;</span>
<span id="L2086" class="ln">  2086&nbsp;&nbsp;</span>func (ra ranges) Less(i, j int) bool {
<span id="L2087" class="ln">  2087&nbsp;&nbsp;</span>	p := *ra.p
<span id="L2088" class="ln">  2088&nbsp;&nbsp;</span>	i *= 2
<span id="L2089" class="ln">  2089&nbsp;&nbsp;</span>	j *= 2
<span id="L2090" class="ln">  2090&nbsp;&nbsp;</span>	return p[i] &lt; p[j] || p[i] == p[j] &amp;&amp; p[i+1] &gt; p[j+1]
<span id="L2091" class="ln">  2091&nbsp;&nbsp;</span>}
<span id="L2092" class="ln">  2092&nbsp;&nbsp;</span>
<span id="L2093" class="ln">  2093&nbsp;&nbsp;</span>func (ra ranges) Len() int {
<span id="L2094" class="ln">  2094&nbsp;&nbsp;</span>	return len(*ra.p) / 2
<span id="L2095" class="ln">  2095&nbsp;&nbsp;</span>}
<span id="L2096" class="ln">  2096&nbsp;&nbsp;</span>
<span id="L2097" class="ln">  2097&nbsp;&nbsp;</span>func (ra ranges) Swap(i, j int) {
<span id="L2098" class="ln">  2098&nbsp;&nbsp;</span>	p := *ra.p
<span id="L2099" class="ln">  2099&nbsp;&nbsp;</span>	i *= 2
<span id="L2100" class="ln">  2100&nbsp;&nbsp;</span>	j *= 2
<span id="L2101" class="ln">  2101&nbsp;&nbsp;</span>	p[i], p[i+1], p[j], p[j+1] = p[j], p[j+1], p[i], p[i+1]
<span id="L2102" class="ln">  2102&nbsp;&nbsp;</span>}
<span id="L2103" class="ln">  2103&nbsp;&nbsp;</span>
<span id="L2104" class="ln">  2104&nbsp;&nbsp;</span>func checkUTF8(s string) error {
<span id="L2105" class="ln">  2105&nbsp;&nbsp;</span>	for s != &#34;&#34; {
<span id="L2106" class="ln">  2106&nbsp;&nbsp;</span>		rune, size := utf8.DecodeRuneInString(s)
<span id="L2107" class="ln">  2107&nbsp;&nbsp;</span>		if rune == utf8.RuneError &amp;&amp; size == 1 {
<span id="L2108" class="ln">  2108&nbsp;&nbsp;</span>			return &amp;Error{Code: ErrInvalidUTF8, Expr: s}
<span id="L2109" class="ln">  2109&nbsp;&nbsp;</span>		}
<span id="L2110" class="ln">  2110&nbsp;&nbsp;</span>		s = s[size:]
<span id="L2111" class="ln">  2111&nbsp;&nbsp;</span>	}
<span id="L2112" class="ln">  2112&nbsp;&nbsp;</span>	return nil
<span id="L2113" class="ln">  2113&nbsp;&nbsp;</span>}
<span id="L2114" class="ln">  2114&nbsp;&nbsp;</span>
<span id="L2115" class="ln">  2115&nbsp;&nbsp;</span>func nextRune(s string) (c rune, t string, err error) {
<span id="L2116" class="ln">  2116&nbsp;&nbsp;</span>	c, size := utf8.DecodeRuneInString(s)
<span id="L2117" class="ln">  2117&nbsp;&nbsp;</span>	if c == utf8.RuneError &amp;&amp; size == 1 {
<span id="L2118" class="ln">  2118&nbsp;&nbsp;</span>		return 0, &#34;&#34;, &amp;Error{Code: ErrInvalidUTF8, Expr: s}
<span id="L2119" class="ln">  2119&nbsp;&nbsp;</span>	}
<span id="L2120" class="ln">  2120&nbsp;&nbsp;</span>	return c, s[size:], nil
<span id="L2121" class="ln">  2121&nbsp;&nbsp;</span>}
<span id="L2122" class="ln">  2122&nbsp;&nbsp;</span>
<span id="L2123" class="ln">  2123&nbsp;&nbsp;</span>func isalnum(c rune) bool {
<span id="L2124" class="ln">  2124&nbsp;&nbsp;</span>	return &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; || &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39; || &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39;
<span id="L2125" class="ln">  2125&nbsp;&nbsp;</span>}
<span id="L2126" class="ln">  2126&nbsp;&nbsp;</span>
<span id="L2127" class="ln">  2127&nbsp;&nbsp;</span>func unhex(c rune) rune {
<span id="L2128" class="ln">  2128&nbsp;&nbsp;</span>	if &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; {
<span id="L2129" class="ln">  2129&nbsp;&nbsp;</span>		return c - &#39;0&#39;
<span id="L2130" class="ln">  2130&nbsp;&nbsp;</span>	}
<span id="L2131" class="ln">  2131&nbsp;&nbsp;</span>	if &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;f&#39; {
<span id="L2132" class="ln">  2132&nbsp;&nbsp;</span>		return c - &#39;a&#39; + 10
<span id="L2133" class="ln">  2133&nbsp;&nbsp;</span>	}
<span id="L2134" class="ln">  2134&nbsp;&nbsp;</span>	if &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;F&#39; {
<span id="L2135" class="ln">  2135&nbsp;&nbsp;</span>		return c - &#39;A&#39; + 10
<span id="L2136" class="ln">  2136&nbsp;&nbsp;</span>	}
<span id="L2137" class="ln">  2137&nbsp;&nbsp;</span>	return -1
<span id="L2138" class="ln">  2138&nbsp;&nbsp;</span>}
<span id="L2139" class="ln">  2139&nbsp;&nbsp;</span>
</pre><p><a href="parse.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
