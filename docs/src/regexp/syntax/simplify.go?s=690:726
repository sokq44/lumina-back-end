<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/regexp/syntax/simplify.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./simplify.go?s=690:726#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/regexp">regexp</a>/<a href="http://localhost:8080/src/regexp/syntax">syntax</a>/<span class="text-muted">simplify.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/regexp/syntax">regexp/syntax</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package syntax
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// Simplify returns a regexp equivalent to re but without counted repetitions</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// and with various other simplifications, such as rewriting /(?:a+)+/ to /a+/.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// The resulting regexp will execute correctly but its string representation</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// will not produce the same parse tree, because capturing parentheses</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// may have been duplicated or removed. For example, the simplified form</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// for /(x){1,2}/ is /(x)(x)?/ but both parentheses capture as $1.</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// The returned regexp may share structure with or be the original.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="selection">func (re *Regexp) Simplify() *Regexp</span> {
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	if re == nil {
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>		return nil
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	}
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	switch re.Op {
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	case OpCapture, OpConcat, OpAlternate:
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>		<span class="comment">// Simplify children, building new Regexp if children change.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>		nre := re
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>		for i, sub := range re.Sub {
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>			nsub := sub.Simplify()
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>			if nre == re &amp;&amp; nsub != sub {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>				<span class="comment">// Start a copy.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>				nre = new(Regexp)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>				*nre = *re
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>				nre.Rune = nil
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>				nre.Sub = append(nre.Sub0[:0], re.Sub[:i]...)
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>			}
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>			if nre != re {
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>				nre.Sub = append(nre.Sub, nsub)
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>			}
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>		}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>		return nre
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	case OpStar, OpPlus, OpQuest:
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>		sub := re.Sub[0].Simplify()
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>		return simplify1(re.Op, re.Flags, sub, re)
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	case OpRepeat:
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>		<span class="comment">// Special special case: x{0} matches the empty string</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>		<span class="comment">// and doesn&#39;t even need to consider x.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>		if re.Min == 0 &amp;&amp; re.Max == 0 {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>			return &amp;Regexp{Op: OpEmptyMatch}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>		}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		<span class="comment">// The fun begins.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		sub := re.Sub[0].Simplify()
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		<span class="comment">// x{n,} means at least n matches of x.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		if re.Max == -1 {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>			<span class="comment">// Special case: x{0,} is x*.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>			if re.Min == 0 {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>				return simplify1(OpStar, re.Flags, sub, nil)
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>			}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>			<span class="comment">// Special case: x{1,} is x+.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>			if re.Min == 1 {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>				return simplify1(OpPlus, re.Flags, sub, nil)
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>			}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>			<span class="comment">// General case: x{4,} is xxxx+.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>			nre := &amp;Regexp{Op: OpConcat}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>			nre.Sub = nre.Sub0[:0]
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>			for i := 0; i &lt; re.Min-1; i++ {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>				nre.Sub = append(nre.Sub, sub)
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>			}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>			nre.Sub = append(nre.Sub, simplify1(OpPlus, re.Flags, sub, nil))
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>			return nre
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>		<span class="comment">// Special case x{0} handled above.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		<span class="comment">// Special case: x{1} is just x.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		if re.Min == 1 &amp;&amp; re.Max == 1 {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>			return sub
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		<span class="comment">// General case: x{n,m} means n copies of x and m copies of x?</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		<span class="comment">// The machine will do less work if we nest the final m copies,</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		<span class="comment">// so that x{2,5} = xx(x(x(x)?)?)?</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		<span class="comment">// Build leading prefix: xx.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		var prefix *Regexp
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		if re.Min &gt; 0 {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>			prefix = &amp;Regexp{Op: OpConcat}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>			prefix.Sub = prefix.Sub0[:0]
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>			for i := 0; i &lt; re.Min; i++ {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>				prefix.Sub = append(prefix.Sub, sub)
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>			}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		}
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		<span class="comment">// Build and attach suffix: (x(x(x)?)?)?</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		if re.Max &gt; re.Min {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>			suffix := simplify1(OpQuest, re.Flags, sub, nil)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>			for i := re.Min + 1; i &lt; re.Max; i++ {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>				nre2 := &amp;Regexp{Op: OpConcat}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>				nre2.Sub = append(nre2.Sub0[:0], sub, suffix)
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>				suffix = simplify1(OpQuest, re.Flags, nre2, nil)
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>			}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>			if prefix == nil {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>				return suffix
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>			prefix.Sub = append(prefix.Sub, suffix)
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		if prefix != nil {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>			return prefix
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		<span class="comment">// Some degenerate case like min &gt; max or min &lt; max &lt; 0.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		<span class="comment">// Handle as impossible match.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		return &amp;Regexp{Op: OpNoMatch}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	return re
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// simplify1 implements Simplify for the unary OpStar,</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// OpPlus, and OpQuest operators. It returns the simple regexp</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// equivalent to</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">//	Regexp{Op: op, Flags: flags, Sub: {sub}}</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// under the assumption that sub is already simple, and</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// without first allocating that structure. If the regexp</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// to be returned turns out to be equivalent to re, simplify1</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// returns re instead.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// simplify1 is factored out of Simplify because the implementation</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// for other operators generates these unary expressions.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// Letting them call simplify1 makes sure the expressions they</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// generate are simple.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>func simplify1(op Op, flags Flags, sub, re *Regexp) *Regexp {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// Special case: repeat the empty string as much as</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	<span class="comment">// you want, but it&#39;s still the empty string.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	if sub.Op == OpEmptyMatch {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		return sub
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// The operators are idempotent if the flags match.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	if op == sub.Op &amp;&amp; flags&amp;NonGreedy == sub.Flags&amp;NonGreedy {
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		return sub
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	if re != nil &amp;&amp; re.Op == op &amp;&amp; re.Flags&amp;NonGreedy == flags&amp;NonGreedy &amp;&amp; sub == re.Sub[0] {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		return re
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	re = &amp;Regexp{Op: op, Flags: flags}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	re.Sub = append(re.Sub0[:0], sub)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	return re
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
</pre><p><a href="simplify.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
