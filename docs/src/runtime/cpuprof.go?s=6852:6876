<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/runtime/cpuprof.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./cpuprof.go?s=6852:6876#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/runtime">runtime</a>/<span class="text-muted">cpuprof.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/runtime">runtime</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// CPU profiling.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// The signal handler for the profiling clock tick adds a new stack trace</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// to a log of recent traces. The log is read by a user goroutine that</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// turns it into formatted profile data. If the reader does not keep up</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// with the log, those writes will be recorded as a count of lost records.</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// The actual profile buffer is in profbuf.go.</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>package runtime
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>import (
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;internal/abi&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;runtime/internal/sys&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;unsafe&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>)
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>const (
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	maxCPUProfStack = 64
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	<span class="comment">// profBufWordCount is the size of the CPU profile buffer&#39;s storage for the</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	<span class="comment">// header and stack of each sample, measured in 64-bit words. Every sample</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	<span class="comment">// has a required header of two words. With a small additional header (a</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	<span class="comment">// word or two) and stacks at the profiler&#39;s maximum length of 64 frames,</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	<span class="comment">// that capacity can support 1900 samples or 19 thread-seconds at a 100 Hz</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	<span class="comment">// sample rate, at a cost of 1 MiB.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	profBufWordCount = 1 &lt;&lt; 17
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	<span class="comment">// profBufTagCount is the size of the CPU profile buffer&#39;s storage for the</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	<span class="comment">// goroutine tags associated with each sample. A capacity of 1&lt;&lt;14 means</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	<span class="comment">// room for 16k samples, or 160 thread-seconds at a 100 Hz sample rate.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	profBufTagCount = 1 &lt;&lt; 14
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>type cpuProfile struct {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	lock mutex
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	on   bool     <span class="comment">// profiling is on</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	log  *profBuf <span class="comment">// profile events written here</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// extra holds extra stacks accumulated in addNonGo</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	<span class="comment">// corresponding to profiling signals arriving on</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	<span class="comment">// non-Go-created threads. Those stacks are written</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">// to log the next time a normal Go thread gets the</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// signal handler.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// Assuming the stacks are 2 words each (we don&#39;t get</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	<span class="comment">// a full traceback from those threads), plus one word</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">// size for framing, 100 Hz profiling would generate</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// 300 words per second.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// Hopefully a normal Go thread will get the profiling</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">// signal at least once every few seconds.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	extra      [1000]uintptr
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	numExtra   int
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	lostExtra  uint64 <span class="comment">// count of frames lost because extra is full</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	lostAtomic uint64 <span class="comment">// count of frames lost because of being in atomic64 on mips/arm; updated racily</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>var cpuprof cpuProfile
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// SetCPUProfileRate sets the CPU profiling rate to hz samples per second.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// If hz &lt;= 0, SetCPUProfileRate turns off profiling.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// If the profiler is on, the rate cannot be changed without first turning it off.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// Most clients should use the [runtime/pprof] package or</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// the [testing] package&#39;s -test.cpuprofile flag instead of calling</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// SetCPUProfileRate directly.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>func SetCPUProfileRate(hz int) {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	<span class="comment">// Clamp hz to something reasonable.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	if hz &lt; 0 {
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		hz = 0
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	if hz &gt; 1000000 {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		hz = 1000000
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	lock(&amp;cpuprof.lock)
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	if hz &gt; 0 {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		if cpuprof.on || cpuprof.log != nil {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>			print(&#34;runtime: cannot set cpu profile rate until previous profile has finished.\n&#34;)
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>			unlock(&amp;cpuprof.lock)
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>			return
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		cpuprof.on = true
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		cpuprof.log = newProfBuf(1, profBufWordCount, profBufTagCount)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		hdr := [1]uint64{uint64(hz)}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		cpuprof.log.write(nil, nanotime(), hdr[:], nil)
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		setcpuprofilerate(int32(hz))
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	} else if cpuprof.on {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		setcpuprofilerate(0)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		cpuprof.on = false
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		cpuprof.addExtra()
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		cpuprof.log.close()
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	unlock(&amp;cpuprof.lock)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// add adds the stack trace to the profile.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// It is called from signal handlers and other limited environments</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// and cannot allocate memory or acquire locks that might be</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// held at the time of the signal, nor can it use substantial amounts</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// of stack.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>func (p *cpuProfile) add(tagPtr *unsafe.Pointer, stk []uintptr) {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	<span class="comment">// Simple cas-lock to coordinate with setcpuprofilerate.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	for !prof.signalLock.CompareAndSwap(0, 1) {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		<span class="comment">// TODO: Is it safe to osyield here? https://go.dev/issue/52672</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		osyield()
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	if prof.hz.Load() != 0 { <span class="comment">// implies cpuprof.log != nil</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		if p.numExtra &gt; 0 || p.lostExtra &gt; 0 || p.lostAtomic &gt; 0 {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>			p.addExtra()
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		hdr := [1]uint64{1}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		<span class="comment">// Note: write &#34;knows&#34; that the argument is &amp;gp.labels,</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		<span class="comment">// because otherwise its write barrier behavior may not</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		<span class="comment">// be correct. See the long comment there before</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		<span class="comment">// changing the argument here.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		cpuprof.log.write(tagPtr, nanotime(), hdr[:], stk)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	prof.signalLock.Store(0)
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// addNonGo adds the non-Go stack trace to the profile.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// It is called from a non-Go thread, so we cannot use much stack at all,</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// nor do anything that needs a g or an m.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// In particular, we can&#39;t call cpuprof.log.write.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// Instead, we copy the stack into cpuprof.extra,</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// which will be drained the next time a Go thread</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// gets the signal handling event.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>func (p *cpuProfile) addNonGo(stk []uintptr) {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	<span class="comment">// Simple cas-lock to coordinate with SetCPUProfileRate.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// (Other calls to add or addNonGo should be blocked out</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">// by the fact that only one SIGPROF can be handled by the</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	<span class="comment">// process at a time. If not, this lock will serialize those too.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// The use of timer_create(2) on Linux to request process-targeted</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">// signals may have changed this.)</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	for !prof.signalLock.CompareAndSwap(0, 1) {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		<span class="comment">// TODO: Is it safe to osyield here? https://go.dev/issue/52672</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		osyield()
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	if cpuprof.numExtra+1+len(stk) &lt; len(cpuprof.extra) {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		i := cpuprof.numExtra
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		cpuprof.extra[i] = uintptr(1 + len(stk))
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		copy(cpuprof.extra[i+1:], stk)
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		cpuprof.numExtra += 1 + len(stk)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	} else {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		cpuprof.lostExtra++
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	prof.signalLock.Store(0)
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// addExtra adds the &#34;extra&#34; profiling events,</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">// queued by addNonGo, to the profile log.</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">// addExtra is called either from a signal handler on a Go thread</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// or from an ordinary goroutine; either way it can use stack</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// and has a g. The world may be stopped, though.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>func (p *cpuProfile) addExtra() {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// Copy accumulated non-Go profile events.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	hdr := [1]uint64{1}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	for i := 0; i &lt; p.numExtra; {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		p.log.write(nil, 0, hdr[:], p.extra[i+1:i+int(p.extra[i])])
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		i += int(p.extra[i])
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	p.numExtra = 0
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	<span class="comment">// Report any lost events.</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	if p.lostExtra &gt; 0 {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		hdr := [1]uint64{p.lostExtra}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		lostStk := [2]uintptr{
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>			abi.FuncPCABIInternal(_LostExternalCode) + sys.PCQuantum,
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>			abi.FuncPCABIInternal(_ExternalCode) + sys.PCQuantum,
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		p.log.write(nil, 0, hdr[:], lostStk[:])
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		p.lostExtra = 0
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	if p.lostAtomic &gt; 0 {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		hdr := [1]uint64{p.lostAtomic}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		lostStk := [2]uintptr{
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>			abi.FuncPCABIInternal(_LostSIGPROFDuringAtomic64) + sys.PCQuantum,
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>			abi.FuncPCABIInternal(_System) + sys.PCQuantum,
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		p.log.write(nil, 0, hdr[:], lostStk[:])
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		p.lostAtomic = 0
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// CPUProfile panics.</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// It formerly provided raw access to chunks of</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// a pprof-format profile generated by the runtime.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// The details of generating that format have changed,</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// so this functionality has been removed.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// Deprecated: Use the [runtime/pprof] package,</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// or the handlers in the [net/http/pprof] package,</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">// or the [testing] package&#39;s -test.cpuprofile flag instead.</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="selection">func CPUProfile() []byte</span> {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	panic(&#34;CPUProfile no longer available&#34;)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">//go:linkname runtime_pprof_runtime_cyclesPerSecond runtime/pprof.runtime_cyclesPerSecond</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>func runtime_pprof_runtime_cyclesPerSecond() int64 {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	return ticksPerSecond()
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// readProfile, provided to runtime/pprof, returns the next chunk of</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// binary CPU profiling stack trace data, blocking until data is available.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span><span class="comment">// If profiling is turned off and all the profile data accumulated while it was</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// on has been returned, readProfile returns eof=true.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// The caller must save the returned data and tags before calling readProfile again.</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// The returned data contains a whole number of records, and tags contains</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// exactly one entry per record.</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">//go:linkname runtime_pprof_readProfile runtime/pprof.readProfile</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>func runtime_pprof_readProfile() ([]uint64, []unsafe.Pointer, bool) {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	lock(&amp;cpuprof.lock)
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	log := cpuprof.log
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	unlock(&amp;cpuprof.lock)
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	readMode := profBufBlocking
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	if GOOS == &#34;darwin&#34; || GOOS == &#34;ios&#34; {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		readMode = profBufNonBlocking <span class="comment">// For #61768; on Darwin notes are not async-signal-safe.  See sigNoteSetup in os_darwin.go.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	data, tags, eof := log.read(readMode)
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	if len(data) == 0 &amp;&amp; eof {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		lock(&amp;cpuprof.lock)
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		cpuprof.log = nil
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		unlock(&amp;cpuprof.lock)
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	}
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	return data, tags, eof
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>
</pre><p><a href="cpuprof.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
