<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/runtime/debug/mod.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./mod.go?s=4402:4461#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/runtime">runtime</a>/<a href="http://localhost:8080/src/runtime/debug">debug</a>/<span class="text-muted">mod.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/runtime/debug">runtime/debug</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2018 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package debug
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;runtime&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>)
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// exported from runtime.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>func modinfo() string
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// ReadBuildInfo returns the build information embedded</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// in the running binary. The information is available only</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// in binaries built with module support.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>func ReadBuildInfo() (info *BuildInfo, ok bool) {
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	data := modinfo()
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	if len(data) &lt; 32 {
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>		return nil, false
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	}
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	data = data[16 : len(data)-16]
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	bi, err := ParseBuildInfo(data)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	if err != nil {
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>		return nil, false
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	}
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	<span class="comment">// The go version is stored separately from other build info, mostly for</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	<span class="comment">// historical reasons. It is not part of the modinfo() string, and</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	<span class="comment">// ParseBuildInfo does not recognize it. We inject it here to hide this</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	<span class="comment">// awkwardness from the user.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	bi.GoVersion = runtime.Version()
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	return bi, true
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>}
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// BuildInfo represents the build information read from a Go binary.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>type BuildInfo struct {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// GoVersion is the version of the Go toolchain that built the binary</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	<span class="comment">// (for example, &#34;go1.19.2&#34;).</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	GoVersion string
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// Path is the package path of the main package for the binary</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// (for example, &#34;golang.org/x/tools/cmd/stringer&#34;).</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	Path string
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// Main describes the module that contains the main package for the binary.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	Main Module
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	<span class="comment">// Deps describes all the dependency modules, both direct and indirect,</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	<span class="comment">// that contributed packages to the build of this binary.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	Deps []*Module
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// Settings describes the build settings used to build the binary.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	Settings []BuildSetting
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>}
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// A Module describes a single module included in a build.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>type Module struct {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	Path    string  <span class="comment">// module path</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	Version string  <span class="comment">// module version</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	Sum     string  <span class="comment">// checksum</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	Replace *Module <span class="comment">// replaced by this module</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>}
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// A BuildSetting is a key-value pair describing one setting that influenced a build.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// Defined keys include:</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">//   - -buildmode: the buildmode flag used (typically &#34;exe&#34;)</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">//   - -compiler: the compiler toolchain flag used (typically &#34;gc&#34;)</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">//   - CGO_ENABLED: the effective CGO_ENABLED environment variable</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">//   - CGO_CFLAGS: the effective CGO_CFLAGS environment variable</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">//   - CGO_CPPFLAGS: the effective CGO_CPPFLAGS environment variable</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//   - CGO_CXXFLAGS:  the effective CGO_CXXFLAGS environment variable</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">//   - CGO_LDFLAGS: the effective CGO_LDFLAGS environment variable</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">//   - GOARCH: the architecture target</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">//   - GOAMD64/GOARM/GO386/etc: the architecture feature level for GOARCH</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">//   - GOOS: the operating system target</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">//   - vcs: the version control system for the source tree where the build ran</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">//   - vcs.revision: the revision identifier for the current commit or checkout</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">//   - vcs.time: the modification time associated with vcs.revision, in RFC3339 format</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">//   - vcs.modified: true or false indicating whether the source tree had local modifications</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>type BuildSetting struct {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// Key and Value describe the build setting.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// Key must not contain an equals sign, space, tab, or newline.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// Value must not contain newlines (&#39;\n&#39;).</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	Key, Value string
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>}
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// quoteKey reports whether key is required to be quoted.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>func quoteKey(key string) bool {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	return len(key) == 0 || strings.ContainsAny(key, &#34;= \t\r\n\&#34;`&#34;)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// quoteValue reports whether value is required to be quoted.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>func quoteValue(value string) bool {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	return strings.ContainsAny(value, &#34; \t\r\n\&#34;`&#34;)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>func (bi *BuildInfo) String() string {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	buf := new(strings.Builder)
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	if bi.GoVersion != &#34;&#34; {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		fmt.Fprintf(buf, &#34;go\t%s\n&#34;, bi.GoVersion)
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	if bi.Path != &#34;&#34; {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		fmt.Fprintf(buf, &#34;path\t%s\n&#34;, bi.Path)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	var formatMod func(string, Module)
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	formatMod = func(word string, m Module) {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		buf.WriteString(word)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		buf.WriteByte(&#39;\t&#39;)
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		buf.WriteString(m.Path)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		buf.WriteByte(&#39;\t&#39;)
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		buf.WriteString(m.Version)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		if m.Replace == nil {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			buf.WriteByte(&#39;\t&#39;)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			buf.WriteString(m.Sum)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		} else {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			buf.WriteByte(&#39;\n&#39;)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			formatMod(&#34;=&gt;&#34;, *m.Replace)
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		buf.WriteByte(&#39;\n&#39;)
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	if bi.Main != (Module{}) {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		formatMod(&#34;mod&#34;, bi.Main)
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	for _, dep := range bi.Deps {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		formatMod(&#34;dep&#34;, *dep)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	for _, s := range bi.Settings {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		key := s.Key
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		if quoteKey(key) {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>			key = strconv.Quote(key)
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		value := s.Value
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		if quoteValue(value) {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>			value = strconv.Quote(value)
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		fmt.Fprintf(buf, &#34;build\t%s=%s\n&#34;, key, value)
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	return buf.String()
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="selection">func ParseBuildInfo(data string) (bi *BuildInfo, err error)</span> {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	lineNum := 1
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	defer func() {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		if err != nil {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>			err = fmt.Errorf(&#34;could not parse Go build info: line %d: %w&#34;, lineNum, err)
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	}()
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	var (
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		pathLine  = &#34;path\t&#34;
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		modLine   = &#34;mod\t&#34;
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		depLine   = &#34;dep\t&#34;
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		repLine   = &#34;=&gt;\t&#34;
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		buildLine = &#34;build\t&#34;
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		newline   = &#34;\n&#34;
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		tab       = &#34;\t&#34;
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	readModuleLine := func(elem []string) (Module, error) {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		if len(elem) != 2 &amp;&amp; len(elem) != 3 {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>			return Module{}, fmt.Errorf(&#34;expected 2 or 3 columns; got %d&#34;, len(elem))
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		version := elem[1]
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		sum := &#34;&#34;
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		if len(elem) == 3 {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>			sum = elem[2]
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		return Module{
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>			Path:    elem[0],
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>			Version: version,
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>			Sum:     sum,
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		}, nil
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	bi = new(BuildInfo)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	var (
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		last *Module
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		line string
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		ok   bool
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	)
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	<span class="comment">// Reverse of BuildInfo.String(), except for go version.</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	for len(data) &gt; 0 {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		line, data, ok = strings.Cut(data, newline)
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		if !ok {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			break
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		switch {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		case strings.HasPrefix(line, pathLine):
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>			elem := line[len(pathLine):]
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>			bi.Path = string(elem)
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		case strings.HasPrefix(line, modLine):
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>			elem := strings.Split(line[len(modLine):], tab)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>			last = &amp;bi.Main
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>			*last, err = readModuleLine(elem)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			if err != nil {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>				return nil, err
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		case strings.HasPrefix(line, depLine):
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>			elem := strings.Split(line[len(depLine):], tab)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>			last = new(Module)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>			bi.Deps = append(bi.Deps, last)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>			*last, err = readModuleLine(elem)
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>			if err != nil {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>				return nil, err
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>			}
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		case strings.HasPrefix(line, repLine):
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>			elem := strings.Split(line[len(repLine):], tab)
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>			if len(elem) != 3 {
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>				return nil, fmt.Errorf(&#34;expected 3 columns for replacement; got %d&#34;, len(elem))
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>			}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			if last == nil {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>				return nil, fmt.Errorf(&#34;replacement with no module on previous line&#34;)
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>			}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>			last.Replace = &amp;Module{
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>				Path:    string(elem[0]),
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>				Version: string(elem[1]),
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>				Sum:     string(elem[2]),
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>			last = nil
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		case strings.HasPrefix(line, buildLine):
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>			kv := line[len(buildLine):]
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>			if len(kv) &lt; 1 {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>				return nil, fmt.Errorf(&#34;build line missing &#39;=&#39;&#34;)
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>			var key, rawValue string
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>			switch kv[0] {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>			case &#39;=&#39;:
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>				return nil, fmt.Errorf(&#34;build line with missing key&#34;)
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>			case &#39;`&#39;, &#39;&#34;&#39;:
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>				rawKey, err := strconv.QuotedPrefix(kv)
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>				if err != nil {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>					return nil, fmt.Errorf(&#34;invalid quoted key in build line&#34;)
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>				}
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>				if len(kv) == len(rawKey) {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>					return nil, fmt.Errorf(&#34;build line missing &#39;=&#39; after quoted key&#34;)
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>				}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>				if c := kv[len(rawKey)]; c != &#39;=&#39; {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>					return nil, fmt.Errorf(&#34;unexpected character after quoted key: %q&#34;, c)
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>				}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>				key, _ = strconv.Unquote(rawKey)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>				rawValue = kv[len(rawKey)+1:]
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>			default:
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>				var ok bool
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>				key, rawValue, ok = strings.Cut(kv, &#34;=&#34;)
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>				if !ok {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>					return nil, fmt.Errorf(&#34;build line missing &#39;=&#39; after key&#34;)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>				}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>				if quoteKey(key) {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>					return nil, fmt.Errorf(&#34;unquoted key %q must be quoted&#34;, key)
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>				}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>			}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>			var value string
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>			if len(rawValue) &gt; 0 {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>				switch rawValue[0] {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>				case &#39;`&#39;, &#39;&#34;&#39;:
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>					var err error
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>					value, err = strconv.Unquote(rawValue)
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>					if err != nil {
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>						return nil, fmt.Errorf(&#34;invalid quoted value in build line&#34;)
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>					}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>				default:
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>					value = rawValue
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>					if quoteValue(value) {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>						return nil, fmt.Errorf(&#34;unquoted value %q must be quoted&#34;, value)
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>					}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>				}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>			}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>			bi.Settings = append(bi.Settings, BuildSetting{Key: key, Value: value})
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		lineNum++
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	return bi, nil
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
</pre><p><a href="mod.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
