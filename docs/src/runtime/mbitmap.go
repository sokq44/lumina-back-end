<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/runtime/mbitmap.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="mbitmap.go#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/runtime">runtime</a>/<span class="text-muted">mbitmap.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/runtime">runtime</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package runtime
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;internal/goarch&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;runtime/internal/atomic&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;runtime/internal/sys&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;unsafe&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>)
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// addb returns the byte pointer p+n.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrier</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>func addb(p *byte, n uintptr) *byte {
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	<span class="comment">// Note: wrote out full expression instead of calling add(p, n)</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	<span class="comment">// to reduce the number of temporaries generated by the</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	<span class="comment">// compiler for this trivial expression during inlining.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	return (*byte)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + n))
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>}
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// subtractb returns the byte pointer p-n.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrier</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>func subtractb(p *byte, n uintptr) *byte {
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	<span class="comment">// Note: wrote out full expression instead of calling add(p, -n)</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	<span class="comment">// to reduce the number of temporaries generated by the</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	<span class="comment">// compiler for this trivial expression during inlining.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	return (*byte)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) - n))
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// add1 returns the byte pointer p+1.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrier</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>func add1(p *byte) *byte {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	<span class="comment">// Note: wrote out full expression instead of calling addb(p, 1)</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// to reduce the number of temporaries generated by the</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	<span class="comment">// compiler for this trivial expression during inlining.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	return (*byte)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 1))
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// subtract1 returns the byte pointer p-1.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// nosplit because it is used during write barriers and must not be preempted.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrier</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>func subtract1(p *byte) *byte {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	<span class="comment">// Note: wrote out full expression instead of calling subtractb(p, 1)</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">// to reduce the number of temporaries generated by the</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">// compiler for this trivial expression during inlining.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	return (*byte)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) - 1))
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// markBits provides access to the mark bit for an object in the heap.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// bytep points to the byte holding the mark bit.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// mask is a byte with a single bit set that can be &amp;ed with *bytep</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// to see if the bit has been set.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// *m.byte&amp;m.mask != 0 indicates the mark bit is set.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// index can be used along with span information to generate</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// the address of the object in the heap.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// We maintain one set of mark bits for allocation and one for</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// marking purposes.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>type markBits struct {
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	bytep *uint8
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	mask  uint8
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	index uintptr
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>func (s *mspan) allocBitsForIndex(allocBitIndex uintptr) markBits {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	bytep, mask := s.allocBits.bitp(allocBitIndex)
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	return markBits{bytep, mask, allocBitIndex}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// refillAllocCache takes 8 bytes s.allocBits starting at whichByte</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// and negates them so that ctz (count trailing zeros) instructions</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// can be used. It then places these 8 bytes into the cached 64 bit</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// s.allocCache.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>func (s *mspan) refillAllocCache(whichByte uint16) {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	bytes := (*[8]uint8)(unsafe.Pointer(s.allocBits.bytep(uintptr(whichByte))))
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	aCache := uint64(0)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	aCache |= uint64(bytes[0])
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	aCache |= uint64(bytes[1]) &lt;&lt; (1 * 8)
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	aCache |= uint64(bytes[2]) &lt;&lt; (2 * 8)
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	aCache |= uint64(bytes[3]) &lt;&lt; (3 * 8)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	aCache |= uint64(bytes[4]) &lt;&lt; (4 * 8)
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	aCache |= uint64(bytes[5]) &lt;&lt; (5 * 8)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	aCache |= uint64(bytes[6]) &lt;&lt; (6 * 8)
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	aCache |= uint64(bytes[7]) &lt;&lt; (7 * 8)
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	s.allocCache = ^aCache
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// nextFreeIndex returns the index of the next free object in s at</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// or after s.freeindex.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// There are hardware instructions that can be used to make this</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// faster if profiling warrants it.</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>func (s *mspan) nextFreeIndex() uint16 {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	sfreeindex := s.freeindex
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	snelems := s.nelems
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	if sfreeindex == snelems {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		return sfreeindex
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	if sfreeindex &gt; snelems {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		throw(&#34;s.freeindex &gt; s.nelems&#34;)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	aCache := s.allocCache
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	bitIndex := sys.TrailingZeros64(aCache)
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	for bitIndex == 64 {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		<span class="comment">// Move index to start of next cached bits.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		sfreeindex = (sfreeindex + 64) &amp;^ (64 - 1)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		if sfreeindex &gt;= snelems {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			s.freeindex = snelems
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			return snelems
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		whichByte := sfreeindex / 8
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		<span class="comment">// Refill s.allocCache with the next 64 alloc bits.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		s.refillAllocCache(whichByte)
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		aCache = s.allocCache
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		bitIndex = sys.TrailingZeros64(aCache)
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		<span class="comment">// nothing available in cached bits</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		<span class="comment">// grab the next 8 bytes and try again.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	result := sfreeindex + uint16(bitIndex)
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	if result &gt;= snelems {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		s.freeindex = snelems
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		return snelems
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	s.allocCache &gt;&gt;= uint(bitIndex + 1)
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	sfreeindex = result + 1
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	if sfreeindex%64 == 0 &amp;&amp; sfreeindex != snelems {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		<span class="comment">// We just incremented s.freeindex so it isn&#39;t 0.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		<span class="comment">// As each 1 in s.allocCache was encountered and used for allocation</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		<span class="comment">// it was shifted away. At this point s.allocCache contains all 0s.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		<span class="comment">// Refill s.allocCache so that it corresponds</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		<span class="comment">// to the bits at s.allocBits starting at s.freeindex.</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		whichByte := sfreeindex / 8
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		s.refillAllocCache(whichByte)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	s.freeindex = sfreeindex
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	return result
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">// isFree reports whether the index&#39;th object in s is unallocated.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// The caller must ensure s.state is mSpanInUse, and there must have</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// been no preemption points since ensuring this (which could allow a</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// GC transition, which would allow the state to change).</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>func (s *mspan) isFree(index uintptr) bool {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	if index &lt; uintptr(s.freeIndexForScan) {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		return false
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	bytep, mask := s.allocBits.bitp(index)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	return *bytep&amp;mask == 0
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// divideByElemSize returns n/s.elemsize.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// n must be within [0, s.npages*_PageSize),</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// or may be exactly s.npages*_PageSize</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// if s.elemsize is from sizeclasses.go.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// nosplit, because it is called by objIndex, which is nosplit</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>func (s *mspan) divideByElemSize(n uintptr) uintptr {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	const doubleCheck = false
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	<span class="comment">// See explanation in mksizeclasses.go&#39;s computeDivMagic.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	q := uintptr((uint64(n) * uint64(s.divMul)) &gt;&gt; 32)
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	if doubleCheck &amp;&amp; q != n/s.elemsize {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		println(n, &#34;/&#34;, s.elemsize, &#34;should be&#34;, n/s.elemsize, &#34;but got&#34;, q)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		throw(&#34;bad magic division&#34;)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	return q
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// nosplit, because it is called by other nosplit code like findObject</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>func (s *mspan) objIndex(p uintptr) uintptr {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	return s.divideByElemSize(p - s.base())
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>func markBitsForAddr(p uintptr) markBits {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	s := spanOf(p)
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	objIndex := s.objIndex(p)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	return s.markBitsForIndex(objIndex)
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>func (s *mspan) markBitsForIndex(objIndex uintptr) markBits {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	bytep, mask := s.gcmarkBits.bitp(objIndex)
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	return markBits{bytep, mask, objIndex}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>func (s *mspan) markBitsForBase() markBits {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	return markBits{&amp;s.gcmarkBits.x, uint8(1), 0}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// isMarked reports whether mark bit m is set.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>func (m markBits) isMarked() bool {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	return *m.bytep&amp;m.mask != 0
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// setMarked sets the marked bit in the markbits, atomically.</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>func (m markBits) setMarked() {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	<span class="comment">// Might be racing with other updates, so use atomic update always.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	<span class="comment">// We used to be clever here and use a non-atomic update in certain</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	<span class="comment">// cases, but it&#39;s not worth the risk.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	atomic.Or8(m.bytep, m.mask)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// setMarkedNonAtomic sets the marked bit in the markbits, non-atomically.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>func (m markBits) setMarkedNonAtomic() {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	*m.bytep |= m.mask
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// clearMarked clears the marked bit in the markbits, atomically.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>func (m markBits) clearMarked() {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	<span class="comment">// Might be racing with other updates, so use atomic update always.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	<span class="comment">// We used to be clever here and use a non-atomic update in certain</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	<span class="comment">// cases, but it&#39;s not worth the risk.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	atomic.And8(m.bytep, ^m.mask)
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// markBitsForSpan returns the markBits for the span base address base.</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>func markBitsForSpan(base uintptr) (mbits markBits) {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	mbits = markBitsForAddr(base)
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	if mbits.mask != 1 {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		throw(&#34;markBitsForSpan: unaligned start&#34;)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	return mbits
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// advance advances the markBits to the next object in the span.</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>func (m *markBits) advance() {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	if m.mask == 1&lt;&lt;7 {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		m.bytep = (*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(m.bytep)) + 1))
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		m.mask = 1
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	} else {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		m.mask = m.mask &lt;&lt; 1
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	m.index++
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// clobberdeadPtr is a special value that is used by the compiler to</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// clobber dead stack slots, when -clobberdead flag is set.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>const clobberdeadPtr = uintptr(0xdeaddead | 0xdeaddead&lt;&lt;((^uintptr(0)&gt;&gt;63)*32))
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// badPointer throws bad pointer in heap panic.</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>func badPointer(s *mspan, p, refBase, refOff uintptr) {
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	<span class="comment">// Typically this indicates an incorrect use</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	<span class="comment">// of unsafe or cgo to store a bad pointer in</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	<span class="comment">// the Go heap. It may also indicate a runtime</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	<span class="comment">// bug.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	<span class="comment">// TODO(austin): We could be more aggressive</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	<span class="comment">// and detect pointers to unallocated objects</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	<span class="comment">// in allocated spans.</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	printlock()
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	print(&#34;runtime: pointer &#34;, hex(p))
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	if s != nil {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		state := s.state.get()
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		if state != mSpanInUse {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>			print(&#34; to unallocated span&#34;)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		} else {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>			print(&#34; to unused region of span&#34;)
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		print(&#34; span.base()=&#34;, hex(s.base()), &#34; span.limit=&#34;, hex(s.limit), &#34; span.state=&#34;, state)
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	print(&#34;\n&#34;)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	if refBase != 0 {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		print(&#34;runtime: found in object at *(&#34;, hex(refBase), &#34;+&#34;, hex(refOff), &#34;)\n&#34;)
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		gcDumpObject(&#34;object&#34;, refBase, refOff)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	getg().m.traceback = 2
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	throw(&#34;found bad pointer in Go heap (incorrect use of unsafe or cgo?)&#34;)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// findObject returns the base address for the heap object containing</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">// the address p, the object&#39;s span, and the index of the object in s.</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// If p does not point into a heap object, it returns base == 0.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// If p points is an invalid heap pointer and debug.invalidptr != 0,</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// findObject panics.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">// refBase and refOff optionally give the base address of the object</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">// in which the pointer p was found and the byte offset at which it</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span><span class="comment">// was found. These are used for error reporting.</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">// It is nosplit so it is safe for p to be a pointer to the current goroutine&#39;s stack.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// Since p is a uintptr, it would not be adjusted if the stack were to move.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>func findObject(p, refBase, refOff uintptr) (base uintptr, s *mspan, objIndex uintptr) {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	s = spanOf(p)
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	<span class="comment">// If s is nil, the virtual address has never been part of the heap.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	<span class="comment">// This pointer may be to some mmap&#39;d region, so we allow it.</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	if s == nil {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		if (GOARCH == &#34;amd64&#34; || GOARCH == &#34;arm64&#34;) &amp;&amp; p == clobberdeadPtr &amp;&amp; debug.invalidptr != 0 {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>			<span class="comment">// Crash if clobberdeadPtr is seen. Only on AMD64 and ARM64 for now,</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>			<span class="comment">// as they are the only platform where compiler&#39;s clobberdead mode is</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>			<span class="comment">// implemented. On these platforms clobberdeadPtr cannot be a valid address.</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>			badPointer(s, p, refBase, refOff)
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		return
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	<span class="comment">// If p is a bad pointer, it may not be in s&#39;s bounds.</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	<span class="comment">// Check s.state to synchronize with span initialization</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	<span class="comment">// before checking other fields. See also spanOfHeap.</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	if state := s.state.get(); state != mSpanInUse || p &lt; s.base() || p &gt;= s.limit {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		<span class="comment">// Pointers into stacks are also ok, the runtime manages these explicitly.</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		if state == mSpanManual {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>			return
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		<span class="comment">// The following ensures that we are rigorous about what data</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		<span class="comment">// structures hold valid pointers.</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		if debug.invalidptr != 0 {
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>			badPointer(s, p, refBase, refOff)
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		return
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	objIndex = s.objIndex(p)
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	base = s.base() + objIndex*s.elemsize
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	return
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">// reflect_verifyNotInHeapPtr reports whether converting the not-in-heap pointer into a unsafe.Pointer is ok.</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">//go:linkname reflect_verifyNotInHeapPtr reflect.verifyNotInHeapPtr</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>func reflect_verifyNotInHeapPtr(p uintptr) bool {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	<span class="comment">// Conversion to a pointer is ok as long as findObject above does not call badPointer.</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	<span class="comment">// Since we&#39;re already promised that p doesn&#39;t point into the heap, just disallow heap</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	<span class="comment">// pointers and the special clobbered pointer.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	return spanOf(p) == nil &amp;&amp; p != clobberdeadPtr
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>const ptrBits = 8 * goarch.PtrSize
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span><span class="comment">// bulkBarrierBitmap executes write barriers for copying from [src,</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span><span class="comment">// src+size) to [dst, dst+size) using a 1-bit pointer bitmap. src is</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// assumed to start maskOffset bytes into the data covered by the</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// bitmap in bits (which may not be a multiple of 8).</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// This is used by bulkBarrierPreWrite for writes to data and BSS.</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>func bulkBarrierBitmap(dst, src, size, maskOffset uintptr, bits *uint8) {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	word := maskOffset / goarch.PtrSize
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	bits = addb(bits, word/8)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	mask := uint8(1) &lt;&lt; (word % 8)
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	buf := &amp;getg().m.p.ptr().wbBuf
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	for i := uintptr(0); i &lt; size; i += goarch.PtrSize {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		if mask == 0 {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			bits = addb(bits, 1)
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>			if *bits == 0 {
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>				<span class="comment">// Skip 8 words.</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>				i += 7 * goarch.PtrSize
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>				continue
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>			}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>			mask = 1
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		if *bits&amp;mask != 0 {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>			dstx := (*uintptr)(unsafe.Pointer(dst + i))
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>			if src == 0 {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>				p := buf.get1()
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>				p[0] = *dstx
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>			} else {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>				srcx := (*uintptr)(unsafe.Pointer(src + i))
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>				p := buf.get2()
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>				p[0] = *dstx
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>				p[1] = *srcx
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>			}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		mask &lt;&lt;= 1
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	}
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span><span class="comment">// typeBitsBulkBarrier executes a write barrier for every</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span><span class="comment">// pointer that would be copied from [src, src+size) to [dst,</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span><span class="comment">// dst+size) by a memmove using the type bitmap to locate those</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">// pointer slots.</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">// The type typ must correspond exactly to [src, src+size) and [dst, dst+size).</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span><span class="comment">// dst, src, and size must be pointer-aligned.</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// The type typ must have a plain bitmap, not a GC program.</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">// The only use of this function is in channel sends, and the</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span><span class="comment">// 64 kB channel element limit takes care of this for us.</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span><span class="comment">// Must not be preempted because it typically runs right before memmove,</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span><span class="comment">// and the GC must observe them as an atomic action.</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span><span class="comment">// Callers must perform cgo checks if goexperiment.CgoCheck2.</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>func typeBitsBulkBarrier(typ *_type, dst, src, size uintptr) {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	if typ == nil {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		throw(&#34;runtime: typeBitsBulkBarrier without type&#34;)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	if typ.Size_ != size {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		println(&#34;runtime: typeBitsBulkBarrier with type &#34;, toRType(typ).string(), &#34; of size &#34;, typ.Size_, &#34; but memory size&#34;, size)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		throw(&#34;runtime: invalid typeBitsBulkBarrier&#34;)
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	if typ.Kind_&amp;kindGCProg != 0 {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		println(&#34;runtime: typeBitsBulkBarrier with type &#34;, toRType(typ).string(), &#34; with GC prog&#34;)
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		throw(&#34;runtime: invalid typeBitsBulkBarrier&#34;)
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	if !writeBarrier.enabled {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		return
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	ptrmask := typ.GCData
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	buf := &amp;getg().m.p.ptr().wbBuf
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	var bits uint32
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	for i := uintptr(0); i &lt; typ.PtrBytes; i += goarch.PtrSize {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		if i&amp;(goarch.PtrSize*8-1) == 0 {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>			bits = uint32(*ptrmask)
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>			ptrmask = addb(ptrmask, 1)
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		} else {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			bits = bits &gt;&gt; 1
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		if bits&amp;1 != 0 {
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>			dstx := (*uintptr)(unsafe.Pointer(dst + i))
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>			srcx := (*uintptr)(unsafe.Pointer(src + i))
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>			p := buf.get2()
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>			p[0] = *dstx
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>			p[1] = *srcx
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>}
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span><span class="comment">// countAlloc returns the number of objects allocated in span s by</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span><span class="comment">// scanning the mark bitmap.</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>func (s *mspan) countAlloc() int {
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	count := 0
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	bytes := divRoundUp(uintptr(s.nelems), 8)
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	<span class="comment">// Iterate over each 8-byte chunk and count allocations</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	<span class="comment">// with an intrinsic. Note that newMarkBits guarantees that</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	<span class="comment">// gcmarkBits will be 8-byte aligned, so we don&#39;t have to</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	<span class="comment">// worry about edge cases, irrelevant bits will simply be zero.</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	for i := uintptr(0); i &lt; bytes; i += 8 {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		<span class="comment">// Extract 64 bits from the byte pointer and get a OnesCount.</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		<span class="comment">// Note that the unsafe cast here doesn&#39;t preserve endianness,</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		<span class="comment">// but that&#39;s OK. We only care about how many bits are 1, not</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		<span class="comment">// about the order we discover them in.</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		mrkBits := *(*uint64)(unsafe.Pointer(s.gcmarkBits.bytep(i)))
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		count += sys.OnesCount64(mrkBits)
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	}
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	return count
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span><span class="comment">// Read the bytes starting at the aligned pointer p into a uintptr.</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span><span class="comment">// Read is little-endian.</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>func readUintptr(p *byte) uintptr {
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	x := *(*uintptr)(unsafe.Pointer(p))
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	if goarch.BigEndian {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		if goarch.PtrSize == 8 {
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>			return uintptr(sys.Bswap64(uint64(x)))
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		return uintptr(sys.Bswap32(uint32(x)))
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	}
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	return x
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>}
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>var debugPtrmask struct {
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	lock mutex
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	data *byte
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">// progToPointerMask returns the 1-bit pointer mask output by the GC program prog.</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span><span class="comment">// size the size of the region described by prog, in bytes.</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span><span class="comment">// The resulting bitvector will have no more than size/goarch.PtrSize bits.</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>func progToPointerMask(prog *byte, size uintptr) bitvector {
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	n := (size/goarch.PtrSize + 7) / 8
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	x := (*[1 &lt;&lt; 30]byte)(persistentalloc(n+1, 1, &amp;memstats.buckhash_sys))[:n+1]
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	x[len(x)-1] = 0xa1 <span class="comment">// overflow check sentinel</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	n = runGCProg(prog, &amp;x[0])
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	if x[len(x)-1] != 0xa1 {
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		throw(&#34;progToPointerMask: overflow&#34;)
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	}
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	return bitvector{int32(n), &amp;x[0]}
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span><span class="comment">// Packed GC pointer bitmaps, aka GC programs.</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span><span class="comment">// For large types containing arrays, the type information has a</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span><span class="comment">// natural repetition that can be encoded to save space in the</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span><span class="comment">// binary and in the memory representation of the type information.</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span><span class="comment">// The encoding is a simple Lempel-Ziv style bytecode machine</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span><span class="comment">// with the following instructions:</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span><span class="comment">//	00000000: stop</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span><span class="comment">//	0nnnnnnn: emit n bits copied from the next (n+7)/8 bytes</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span><span class="comment">//	10000000 n c: repeat the previous n bits c times; n, c are varints</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span><span class="comment">//	1nnnnnnn c: repeat the previous n bits c times; c is a varint</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span><span class="comment">// runGCProg returns the number of 1-bit entries written to memory.</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>func runGCProg(prog, dst *byte) uintptr {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	dstStart := dst
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	<span class="comment">// Bits waiting to be written to memory.</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	var bits uintptr
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	var nbits uintptr
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	p := prog
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>Run:
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	for {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>		<span class="comment">// Flush accumulated full bytes.</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		<span class="comment">// The rest of the loop assumes that nbits &lt;= 7.</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		for ; nbits &gt;= 8; nbits -= 8 {
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>			*dst = uint8(bits)
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>			dst = add1(dst)
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>			bits &gt;&gt;= 8
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		}
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		<span class="comment">// Process one instruction.</span>
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		inst := uintptr(*p)
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		p = add1(p)
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		n := inst &amp; 0x7F
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		if inst&amp;0x80 == 0 {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>			<span class="comment">// Literal bits; n == 0 means end of program.</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>			if n == 0 {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>				<span class="comment">// Program is over.</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>				break Run
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>			}
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>			nbyte := n / 8
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>			for i := uintptr(0); i &lt; nbyte; i++ {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>				bits |= uintptr(*p) &lt;&lt; nbits
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>				p = add1(p)
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>				*dst = uint8(bits)
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>				dst = add1(dst)
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>				bits &gt;&gt;= 8
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>			}
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>			if n %= 8; n &gt; 0 {
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>				bits |= uintptr(*p) &lt;&lt; nbits
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>				p = add1(p)
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>				nbits += n
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>			}
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>			continue Run
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		}
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>		<span class="comment">// Repeat. If n == 0, it is encoded in a varint in the next bytes.</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		if n == 0 {
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>			for off := uint(0); ; off += 7 {
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>				x := uintptr(*p)
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>				p = add1(p)
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>				n |= (x &amp; 0x7F) &lt;&lt; off
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>				if x&amp;0x80 == 0 {
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>					break
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>				}
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>			}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		}
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		<span class="comment">// Count is encoded in a varint in the next bytes.</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>		c := uintptr(0)
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		for off := uint(0); ; off += 7 {
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>			x := uintptr(*p)
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>			p = add1(p)
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>			c |= (x &amp; 0x7F) &lt;&lt; off
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>			if x&amp;0x80 == 0 {
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>				break
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>			}
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>		}
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>		c *= n <span class="comment">// now total number of bits to copy</span>
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		<span class="comment">// If the number of bits being repeated is small, load them</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		<span class="comment">// into a register and use that register for the entire loop</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		<span class="comment">// instead of repeatedly reading from memory.</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		<span class="comment">// Handling fewer than 8 bits here makes the general loop simpler.</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		<span class="comment">// The cutoff is goarch.PtrSize*8 - 7 to guarantee that when we add</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		<span class="comment">// the pattern to a bit buffer holding at most 7 bits (a partial byte)</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		<span class="comment">// it will not overflow.</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		src := dst
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		const maxBits = goarch.PtrSize*8 - 7
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		if n &lt;= maxBits {
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>			<span class="comment">// Start with bits in output buffer.</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>			pattern := bits
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>			npattern := nbits
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>			<span class="comment">// If we need more bits, fetch them from memory.</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>			src = subtract1(src)
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>			for npattern &lt; n {
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>				pattern &lt;&lt;= 8
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>				pattern |= uintptr(*src)
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>				src = subtract1(src)
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>				npattern += 8
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>			}
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>			<span class="comment">// We started with the whole bit output buffer,</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>			<span class="comment">// and then we loaded bits from whole bytes.</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>			<span class="comment">// Either way, we might now have too many instead of too few.</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>			<span class="comment">// Discard the extra.</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>			if npattern &gt; n {
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>				pattern &gt;&gt;= npattern - n
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>				npattern = n
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>			}
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>			<span class="comment">// Replicate pattern to at most maxBits.</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>			if npattern == 1 {
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>				<span class="comment">// One bit being repeated.</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>				<span class="comment">// If the bit is 1, make the pattern all 1s.</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>				<span class="comment">// If the bit is 0, the pattern is already all 0s,</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>				<span class="comment">// but we can claim that the number of bits</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>				<span class="comment">// in the word is equal to the number we need (c),</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>				<span class="comment">// because right shift of bits will zero fill.</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>				if pattern == 1 {
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>					pattern = 1&lt;&lt;maxBits - 1
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>					npattern = maxBits
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>				} else {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>					npattern = c
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>				}
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>			} else {
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>				b := pattern
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>				nb := npattern
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>				if nb+nb &lt;= maxBits {
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>					<span class="comment">// Double pattern until the whole uintptr is filled.</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>					for nb &lt;= goarch.PtrSize*8 {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>						b |= b &lt;&lt; nb
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>						nb += nb
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>					}
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>					<span class="comment">// Trim away incomplete copy of original pattern in high bits.</span>
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>					<span class="comment">// TODO(rsc): Replace with table lookup or loop on systems without divide?</span>
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>					nb = maxBits / npattern * npattern
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>					b &amp;= 1&lt;&lt;nb - 1
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>					pattern = b
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>					npattern = nb
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>				}
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>			}
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			<span class="comment">// Add pattern to bit buffer and flush bit buffer, c/npattern times.</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>			<span class="comment">// Since pattern contains &gt;8 bits, there will be full bytes to flush</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>			<span class="comment">// on each iteration.</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>			for ; c &gt;= npattern; c -= npattern {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>				bits |= pattern &lt;&lt; nbits
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>				nbits += npattern
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>				for nbits &gt;= 8 {
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>					*dst = uint8(bits)
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>					dst = add1(dst)
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>					bits &gt;&gt;= 8
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>					nbits -= 8
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>				}
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>			}
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>			<span class="comment">// Add final fragment to bit buffer.</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>			if c &gt; 0 {
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>				pattern &amp;= 1&lt;&lt;c - 1
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>				bits |= pattern &lt;&lt; nbits
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>				nbits += c
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>			}
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>			continue Run
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		}
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>		<span class="comment">// Repeat; n too large to fit in a register.</span>
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>		<span class="comment">// Since nbits &lt;= 7, we know the first few bytes of repeated data</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>		<span class="comment">// are already written to memory.</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		off := n - nbits <span class="comment">// n &gt; nbits because n &gt; maxBits and nbits &lt;= 7</span>
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>		<span class="comment">// Leading src fragment.</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>		src = subtractb(src, (off+7)/8)
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>		if frag := off &amp; 7; frag != 0 {
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>			bits |= uintptr(*src) &gt;&gt; (8 - frag) &lt;&lt; nbits
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>			src = add1(src)
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>			nbits += frag
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>			c -= frag
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		}
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>		<span class="comment">// Main loop: load one byte, write another.</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>		<span class="comment">// The bits are rotating through the bit buffer.</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		for i := c / 8; i &gt; 0; i-- {
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>			bits |= uintptr(*src) &lt;&lt; nbits
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>			src = add1(src)
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>			*dst = uint8(bits)
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>			dst = add1(dst)
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>			bits &gt;&gt;= 8
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>		}
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>		<span class="comment">// Final src fragment.</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>		if c %= 8; c &gt; 0 {
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>			bits |= (uintptr(*src) &amp; (1&lt;&lt;c - 1)) &lt;&lt; nbits
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>			nbits += c
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>		}
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>	}
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	<span class="comment">// Write any final bits out, using full-byte writes, even for the final byte.</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>	totalBits := (uintptr(unsafe.Pointer(dst))-uintptr(unsafe.Pointer(dstStart)))*8 + nbits
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	nbits += -nbits &amp; 7
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	for ; nbits &gt; 0; nbits -= 8 {
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		*dst = uint8(bits)
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>		dst = add1(dst)
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>		bits &gt;&gt;= 8
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>	}
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>	return totalBits
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>}
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span><span class="comment">// materializeGCProg allocates space for the (1-bit) pointer bitmask</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span><span class="comment">// for an object of size ptrdata.  Then it fills that space with the</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span><span class="comment">// pointer bitmask specified by the program prog.</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span><span class="comment">// The bitmask starts at s.startAddr.</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span><span class="comment">// The result must be deallocated with dematerializeGCProg.</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>func materializeGCProg(ptrdata uintptr, prog *byte) *mspan {
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	<span class="comment">// Each word of ptrdata needs one bit in the bitmap.</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	bitmapBytes := divRoundUp(ptrdata, 8*goarch.PtrSize)
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	<span class="comment">// Compute the number of pages needed for bitmapBytes.</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	pages := divRoundUp(bitmapBytes, pageSize)
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	s := mheap_.allocManual(pages, spanAllocPtrScalarBits)
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	runGCProg(addb(prog, 4), (*byte)(unsafe.Pointer(s.startAddr)))
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	return s
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>}
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>func dematerializeGCProg(s *mspan) {
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	mheap_.freeManual(s, spanAllocPtrScalarBits)
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>}
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>func dumpGCProg(p *byte) {
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	nptr := 0
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	for {
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		x := *p
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		p = add1(p)
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>		if x == 0 {
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>			print(&#34;\t&#34;, nptr, &#34; end\n&#34;)
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>			break
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		if x&amp;0x80 == 0 {
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>			print(&#34;\t&#34;, nptr, &#34; lit &#34;, x, &#34;:&#34;)
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>			n := int(x+7) / 8
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>			for i := 0; i &lt; n; i++ {
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>				print(&#34; &#34;, hex(*p))
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>				p = add1(p)
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>			}
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>			print(&#34;\n&#34;)
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>			nptr += int(x)
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>		} else {
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>			nbit := int(x &amp;^ 0x80)
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>			if nbit == 0 {
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>				for nb := uint(0); ; nb += 7 {
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>					x := *p
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>					p = add1(p)
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>					nbit |= int(x&amp;0x7f) &lt;&lt; nb
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>					if x&amp;0x80 == 0 {
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>						break
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>					}
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>				}
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>			}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>			count := 0
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>			for nb := uint(0); ; nb += 7 {
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>				x := *p
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>				p = add1(p)
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>				count |= int(x&amp;0x7f) &lt;&lt; nb
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>				if x&amp;0x80 == 0 {
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>					break
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>				}
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>			}
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>			print(&#34;\t&#34;, nptr, &#34; repeat &#34;, nbit, &#34; × &#34;, count, &#34;\n&#34;)
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>			nptr += nbit * count
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>		}
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	}
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>}
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span><span class="comment">// Testing.</span>
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span><span class="comment">// reflect_gcbits returns the GC type info for x, for testing.</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span><span class="comment">// The result is the bitmap entries (0 or 1), one entry per byte.</span>
<span id="L771" class="ln">   771&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L772" class="ln">   772&nbsp;&nbsp;</span><span class="comment">//go:linkname reflect_gcbits reflect.gcbits</span>
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>func reflect_gcbits(x any) []byte {
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>	return getgcmask(x)
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>}
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>
</pre><p><a href="mbitmap.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
