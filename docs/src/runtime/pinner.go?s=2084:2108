<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/runtime/pinner.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./pinner.go?s=2084:2108#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/runtime">runtime</a>/<span class="text-muted">pinner.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/runtime">runtime</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2023 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package runtime
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;runtime/internal/atomic&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;unsafe&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>)
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// A Pinner is a set of Go objects each pinned to a fixed location in memory. The</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// [Pinner.Pin] method pins one object, while [Pinner.Unpin] unpins all pinned</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// objects. See their comments for more information.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>type Pinner struct {
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	*pinner
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>}
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// Pin pins a Go object, preventing it from being moved or freed by the garbage</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// collector until the [Pinner.Unpin] method has been called.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// A pointer to a pinned object can be directly stored in C memory or can be</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// contained in Go memory passed to C functions. If the pinned object itself</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// contains pointers to Go objects, these objects must be pinned separately if they</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// are going to be accessed from C code.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// The argument must be a pointer of any type or an [unsafe.Pointer].</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// It&#39;s safe to call Pin on non-Go pointers, in which case Pin will do nothing.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>func (p *Pinner) Pin(pointer any) {
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	if p.pinner == nil {
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>		<span class="comment">// Check the pinner cache first.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>		mp := acquirem()
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>		if pp := mp.p.ptr(); pp != nil {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>			p.pinner = pp.pinnerCache
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>			pp.pinnerCache = nil
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>		}
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>		releasem(mp)
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>		if p.pinner == nil {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>			<span class="comment">// Didn&#39;t get anything from the pinner cache.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>			p.pinner = new(pinner)
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>			p.refs = p.refStore[:0]
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>			<span class="comment">// We set this finalizer once and never clear it. Thus, if the</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>			<span class="comment">// pinner gets cached, we&#39;ll reuse it, along with its finalizer.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>			<span class="comment">// This lets us avoid the relatively expensive SetFinalizer call</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>			<span class="comment">// when reusing from the cache. The finalizer however has to be</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>			<span class="comment">// resilient to an empty pinner being finalized, which is done</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>			<span class="comment">// by checking p.refs&#39; length.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>			SetFinalizer(p.pinner, func(i *pinner) {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>				if len(i.refs) != 0 {
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>					i.unpin() <span class="comment">// only required to make the test idempotent</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>					pinnerLeakPanic()
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>				}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>			})
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	ptr := pinnerGetPtr(&amp;pointer)
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	if setPinned(ptr, true) {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		p.refs = append(p.refs, ptr)
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// Unpin unpins all pinned objects of the [Pinner].</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="selection">func (p *Pinner) Unpin()</span> {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	p.pinner.unpin()
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	mp := acquirem()
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	if pp := mp.p.ptr(); pp != nil &amp;&amp; pp.pinnerCache == nil {
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		<span class="comment">// Put the pinner back in the cache, but only if the</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		<span class="comment">// cache is empty. If application code is reusing Pinners</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		<span class="comment">// on its own, we want to leave the backing store in place</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>		<span class="comment">// so reuse is more efficient.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		pp.pinnerCache = p.pinner
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		p.pinner = nil
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	releasem(mp)
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>const (
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	pinnerSize         = 64
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	pinnerRefStoreSize = (pinnerSize - unsafe.Sizeof([]unsafe.Pointer{})) / unsafe.Sizeof(unsafe.Pointer(nil))
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>)
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>type pinner struct {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	refs     []unsafe.Pointer
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	refStore [pinnerRefStoreSize]unsafe.Pointer
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>func (p *pinner) unpin() {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	if p == nil || p.refs == nil {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		return
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	for i := range p.refs {
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		setPinned(p.refs[i], false)
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// The following two lines make all pointers to references</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// in p.refs unreachable, either by deleting them or dropping</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// p.refs&#39; backing store (if it was not backed by refStore).</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	p.refStore = [pinnerRefStoreSize]unsafe.Pointer{}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	p.refs = p.refStore[:0]
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>func pinnerGetPtr(i *any) unsafe.Pointer {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	e := efaceOf(i)
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	etyp := e._type
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	if etyp == nil {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		panic(errorString(&#34;runtime.Pinner: argument is nil&#34;))
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	if kind := etyp.Kind_ &amp; kindMask; kind != kindPtr &amp;&amp; kind != kindUnsafePointer {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		panic(errorString(&#34;runtime.Pinner: argument is not a pointer: &#34; + toRType(etyp).string()))
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	if inUserArenaChunk(uintptr(e.data)) {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		<span class="comment">// Arena-allocated objects are not eligible for pinning.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		panic(errorString(&#34;runtime.Pinner: object was allocated into an arena&#34;))
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	return e.data
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>}
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// isPinned checks if a Go pointer is pinned.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// nosplit, because it&#39;s called from nosplit code in cgocheck.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>func isPinned(ptr unsafe.Pointer) bool {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	span := spanOfHeap(uintptr(ptr))
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	if span == nil {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		<span class="comment">// this code is only called for Go pointer, so this must be a</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		<span class="comment">// linker-allocated global object.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		return true
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	pinnerBits := span.getPinnerBits()
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// these pinnerBits might get unlinked by a concurrently running sweep, but</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// that&#39;s OK because gcBits don&#39;t get cleared until the following GC cycle</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// (nextMarkBitArenaEpoch)</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	if pinnerBits == nil {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		return false
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	objIndex := span.objIndex(uintptr(ptr))
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	pinState := pinnerBits.ofObject(objIndex)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	KeepAlive(ptr) <span class="comment">// make sure ptr is alive until we are done so the span can&#39;t be freed</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	return pinState.isPinned()
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// setPinned marks or unmarks a Go pointer as pinned, when the ptr is a Go pointer.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// It will be ignored while try to pin a non-Go pointer,</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// and it will be panic while try to unpin a non-Go pointer,</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// which should not happen in normal usage.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>func setPinned(ptr unsafe.Pointer, pin bool) bool {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	span := spanOfHeap(uintptr(ptr))
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	if span == nil {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		if !pin {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>			panic(errorString(&#34;tried to unpin non-Go pointer&#34;))
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		<span class="comment">// This is a linker-allocated, zero size object or other object,</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		<span class="comment">// nothing to do, silently ignore it.</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		return false
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	<span class="comment">// ensure that the span is swept, b/c sweeping accesses the specials list</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	<span class="comment">// w/o locks.</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	mp := acquirem()
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	span.ensureSwept()
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	KeepAlive(ptr) <span class="comment">// make sure ptr is still alive after span is swept</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	objIndex := span.objIndex(uintptr(ptr))
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	lock(&amp;span.speciallock) <span class="comment">// guard against concurrent calls of setPinned on same span</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	pinnerBits := span.getPinnerBits()
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	if pinnerBits == nil {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		pinnerBits = span.newPinnerBits()
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		span.setPinnerBits(pinnerBits)
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	pinState := pinnerBits.ofObject(objIndex)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	if pin {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		if pinState.isPinned() {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>			<span class="comment">// multiple pins on same object, set multipin bit</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>			pinState.setMultiPinned(true)
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>			<span class="comment">// and increase the pin counter</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>			<span class="comment">// TODO(mknyszek): investigate if systemstack is necessary here</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>			systemstack(func() {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>				offset := objIndex * span.elemsize
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>				span.incPinCounter(offset)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>			})
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		} else {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>			<span class="comment">// set pin bit</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>			pinState.setPinned(true)
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	} else {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		<span class="comment">// unpin</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		if pinState.isPinned() {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>			if pinState.isMultiPinned() {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>				var exists bool
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>				<span class="comment">// TODO(mknyszek): investigate if systemstack is necessary here</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>				systemstack(func() {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>					offset := objIndex * span.elemsize
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>					exists = span.decPinCounter(offset)
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>				})
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>				if !exists {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>					<span class="comment">// counter is 0, clear multipin bit</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>					pinState.setMultiPinned(false)
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>				}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			} else {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>				<span class="comment">// no multipins recorded. unpin object.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>				pinState.setPinned(false)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>			}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		} else {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>			<span class="comment">// unpinning unpinned object, bail out</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>			throw(&#34;runtime.Pinner: object already unpinned&#34;)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	unlock(&amp;span.speciallock)
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	releasem(mp)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	return true
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>type pinState struct {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	bytep   *uint8
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	byteVal uint8
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	mask    uint8
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// nosplit, because it&#39;s called by isPinned, which is nosplit</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>func (v *pinState) isPinned() bool {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	return (v.byteVal &amp; v.mask) != 0
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>func (v *pinState) isMultiPinned() bool {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	return (v.byteVal &amp; (v.mask &lt;&lt; 1)) != 0
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>func (v *pinState) setPinned(val bool) {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	v.set(val, false)
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>func (v *pinState) setMultiPinned(val bool) {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	v.set(val, true)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// set sets the pin bit of the pinState to val. If multipin is true, it</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// sets/unsets the multipin bit instead.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>func (v *pinState) set(val bool, multipin bool) {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	mask := v.mask
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	if multipin {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		mask &lt;&lt;= 1
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	if val {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		atomic.Or8(v.bytep, mask)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	} else {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		atomic.And8(v.bytep, ^mask)
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// pinnerBits is the same type as gcBits but has different methods.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>type pinnerBits gcBits
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// ofObject returns the pinState of the n&#39;th object.</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// nosplit, because it&#39;s called by isPinned, which is nosplit</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>func (p *pinnerBits) ofObject(n uintptr) pinState {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	bytep, mask := (*gcBits)(p).bitp(n * 2)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	byteVal := atomic.Load8(bytep)
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	return pinState{bytep, byteVal, mask}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>func (s *mspan) pinnerBitSize() uintptr {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	return divRoundUp(uintptr(s.nelems)*2, 8)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// newPinnerBits returns a pointer to 8 byte aligned bytes to be used for this</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">// span&#39;s pinner bits. newPinneBits is used to mark objects that are pinned.</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// They are copied when the span is swept.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>func (s *mspan) newPinnerBits() *pinnerBits {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	return (*pinnerBits)(newMarkBits(uintptr(s.nelems) * 2))
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">// nosplit, because it&#39;s called by isPinned, which is nosplit</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>func (s *mspan) getPinnerBits() *pinnerBits {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	return (*pinnerBits)(atomic.Loadp(unsafe.Pointer(&amp;s.pinnerBits)))
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>func (s *mspan) setPinnerBits(p *pinnerBits) {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	atomicstorep(unsafe.Pointer(&amp;s.pinnerBits), unsafe.Pointer(p))
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// refreshPinnerBits replaces pinnerBits with a fresh copy in the arenas for the</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">// next GC cycle. If it does not contain any pinned objects, pinnerBits of the</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// span is set to nil.</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>func (s *mspan) refreshPinnerBits() {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	p := s.getPinnerBits()
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	if p == nil {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		return
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	hasPins := false
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	bytes := alignUp(s.pinnerBitSize(), 8)
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	<span class="comment">// Iterate over each 8-byte chunk and check for pins. Note that</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	<span class="comment">// newPinnerBits guarantees that pinnerBits will be 8-byte aligned, so we</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	<span class="comment">// don&#39;t have to worry about edge cases, irrelevant bits will simply be</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	<span class="comment">// zero.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	for _, x := range unsafe.Slice((*uint64)(unsafe.Pointer(&amp;p.x)), bytes/8) {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		if x != 0 {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>			hasPins = true
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>			break
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	if hasPins {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		newPinnerBits := s.newPinnerBits()
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		memmove(unsafe.Pointer(&amp;newPinnerBits.x), unsafe.Pointer(&amp;p.x), bytes)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		s.setPinnerBits(newPinnerBits)
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	} else {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		s.setPinnerBits(nil)
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">// incPinCounter is only called for multiple pins of the same object and records</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span><span class="comment">// the _additional_ pins.</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>func (span *mspan) incPinCounter(offset uintptr) {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	var rec *specialPinCounter
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	ref, exists := span.specialFindSplicePoint(offset, _KindSpecialPinCounter)
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	if !exists {
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		lock(&amp;mheap_.speciallock)
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		rec = (*specialPinCounter)(mheap_.specialPinCounterAlloc.alloc())
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		unlock(&amp;mheap_.speciallock)
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		<span class="comment">// splice in record, fill in offset.</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		rec.special.offset = uint16(offset)
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		rec.special.kind = _KindSpecialPinCounter
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		rec.special.next = *ref
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		*ref = (*special)(unsafe.Pointer(rec))
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		spanHasSpecials(span)
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	} else {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		rec = (*specialPinCounter)(unsafe.Pointer(*ref))
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	rec.counter++
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>}
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span><span class="comment">// decPinCounter decreases the counter. If the counter reaches 0, the counter</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span><span class="comment">// special is deleted and false is returned. Otherwise true is returned.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>func (span *mspan) decPinCounter(offset uintptr) bool {
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	ref, exists := span.specialFindSplicePoint(offset, _KindSpecialPinCounter)
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	if !exists {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		throw(&#34;runtime.Pinner: decreased non-existing pin counter&#34;)
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	counter := (*specialPinCounter)(unsafe.Pointer(*ref))
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	counter.counter--
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	if counter.counter == 0 {
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		*ref = counter.special.next
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		if span.specials == nil {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>			spanHasNoSpecials(span)
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>		lock(&amp;mheap_.speciallock)
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		mheap_.specialPinCounterAlloc.free(unsafe.Pointer(counter))
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		unlock(&amp;mheap_.speciallock)
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		return false
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	return true
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span><span class="comment">// only for tests</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>func pinnerGetPinCounter(addr unsafe.Pointer) *uintptr {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	_, span, objIndex := findObject(uintptr(addr), 0, 0)
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	offset := objIndex * span.elemsize
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	t, exists := span.specialFindSplicePoint(offset, _KindSpecialPinCounter)
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	if !exists {
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>		return nil
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	}
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	counter := (*specialPinCounter)(unsafe.Pointer(*t))
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	return &amp;counter.counter
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span><span class="comment">// to be able to test that the GC panics when a pinned pointer is leaking, this</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">// panic function is a variable, that can be overwritten by a test.</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>var pinnerLeakPanic = func() {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	panic(errorString(&#34;runtime.Pinner: found leaking pinned pointer; forgot to call Unpin()?&#34;))
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>
</pre><p><a href="pinner.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
