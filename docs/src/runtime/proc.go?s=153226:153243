<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/runtime/proc.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./proc.go?s=153226:153243#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/runtime">runtime</a>/<span class="text-muted">proc.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/runtime">runtime</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2014 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package runtime
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;internal/abi&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;internal/cpu&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;internal/goarch&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;internal/goexperiment&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;internal/goos&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;runtime/internal/atomic&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;runtime/internal/sys&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;unsafe&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// set using cmd/go/internal/modload.ModInfoProg</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>var modinfo string
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// Goroutine scheduler</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// The scheduler&#39;s job is to distribute ready-to-run goroutines over worker threads.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// The main concepts are:</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// G - goroutine.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// M - worker thread, or machine.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// P - processor, a resource that is required to execute Go code.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">//     M must have an associated P to execute Go code, however it can be</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">//     blocked or in a syscall w/o an associated P.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// Design doc at https://golang.org/s/go11sched.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// Worker thread parking/unparking.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// We need to balance between keeping enough running worker threads to utilize</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// available hardware parallelism and parking excessive running worker threads</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// to conserve CPU resources and power. This is not simple for two reasons:</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// (1) scheduler state is intentionally distributed (in particular, per-P work</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// queues), so it is not possible to compute global predicates on fast paths;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// (2) for optimal thread management we would need to know the future (don&#39;t park</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// a worker thread when a new goroutine will be readied in near future).</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// Three rejected approaches that would work badly:</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// 1. Centralize all scheduler state (would inhibit scalability).</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// 2. Direct goroutine handoff. That is, when we ready a new goroutine and there</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//    is a spare P, unpark a thread and handoff it the thread and the goroutine.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//    This would lead to thread state thrashing, as the thread that readied the</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//    goroutine can be out of work the very next moment, we will need to park it.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//    Also, it would destroy locality of computation as we want to preserve</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//    dependent goroutines on the same thread; and introduce additional latency.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// 3. Unpark an additional thread whenever we ready a goroutine and there is an</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//    idle P, but don&#39;t do handoff. This would lead to excessive thread parking/</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//    unparking as the additional threads will instantly park without discovering</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//    any work to do.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// The current approach:</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// This approach applies to three primary sources of potential work: readying a</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// goroutine, new/modified-earlier timers, and idle-priority GC. See below for</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// additional details.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// We unpark an additional thread when we submit work if (this is wakep()):</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// 1. There is an idle P, and</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// 2. There are no &#34;spinning&#34; worker threads.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// A worker thread is considered spinning if it is out of local work and did</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// not find work in the global run queue or netpoller; the spinning state is</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// denoted in m.spinning and in sched.nmspinning. Threads unparked this way are</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// also considered spinning; we don&#39;t do goroutine handoff so such threads are</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// out of work initially. Spinning threads spin on looking for work in per-P</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// run queues and timer heaps or from the GC before parking. If a spinning</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// thread finds work it takes itself out of the spinning state and proceeds to</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// execution. If it does not find work it takes itself out of the spinning</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// state and then parks.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// If there is at least one spinning thread (sched.nmspinning&gt;1), we don&#39;t</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// unpark new threads when submitting work. To compensate for that, if the last</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// spinning thread finds work and stops spinning, it must unpark a new spinning</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// thread. This approach smooths out unjustified spikes of thread unparking,</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// but at the same time guarantees eventual maximal CPU parallelism</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// utilization.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// The main implementation complication is that we need to be very careful</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// during spinning-&gt;non-spinning thread transition. This transition can race</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// with submission of new work, and either one part or another needs to unpark</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// another worker thread. If they both fail to do that, we can end up with</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// semi-persistent CPU underutilization.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// The general pattern for submission is:</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// 1. Submit work to the local or global run queue, timer heap, or GC state.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// 2. #StoreLoad-style memory barrier.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// 3. Check sched.nmspinning.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// The general pattern for spinning-&gt;non-spinning transition is:</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// 1. Decrement nmspinning.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// 2. #StoreLoad-style memory barrier.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// 3. Check all per-P work queues and GC for new work.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// Note that all this complexity does not apply to global run queue as we are</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// not sloppy about thread unparking when submitting to global queue. Also see</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// comments for nmspinning manipulation.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// How these different sources of work behave varies, though it doesn&#39;t affect</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// the synchronization approach:</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// * Ready goroutine: this is an obvious source of work; the goroutine is</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">//   immediately ready and must run on some thread eventually.</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// * New/modified-earlier timer: The current timer implementation (see time.go)</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">//   uses netpoll in a thread with no work available to wait for the soonest</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">//   timer. If there is no thread waiting, we want a new spinning thread to go</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">//   wait.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// * Idle-priority GC: The GC wakes a stopped idle thread to contribute to</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">//   background GC work (note: currently disabled per golang.org/issue/19112).</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">//   Also see golang.org/issue/44313, as this should be extended to all GC</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">//   workers.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>var (
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	m0           m
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	g0           g
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	mcache0      *mcache
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	raceprocctx0 uintptr
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	raceFiniLock mutex
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// This slice records the initializing tasks that need to be</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// done to start up the runtime. It is built by the linker.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>var runtime_inittasks []*initTask
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// main_init_done is a signal used by cgocallbackg that initialization</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// has been completed. It is made before _cgo_notify_runtime_init_done,</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// so all cgo calls can rely on it existing. When main_init is complete,</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// it is closed, meaning cgocallbackg can reliably receive from it.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>var main_init_done chan bool
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">//go:linkname main_main main.main</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>func main_main()
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// mainStarted indicates that the main M has started.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>var mainStarted bool
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// runtimeInitTime is the nanotime() at which the runtime started.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>var runtimeInitTime int64
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// Value to use for signal mask for newly created M&#39;s.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>var initSigmask sigset
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// The main goroutine.</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>func main() {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	mp := getg().m
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">// Racectx of m0-&gt;g0 is used only as the parent of the main goroutine.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// It must not be used for anything else.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	mp.g0.racectx = 0
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">// Max stack size is 1 GB on 64-bit, 250 MB on 32-bit.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">// Using decimal instead of binary GB and MB because</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// they look nicer in the stack overflow failure message.</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	if goarch.PtrSize == 8 {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		maxstacksize = 1000000000
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	} else {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		maxstacksize = 250000000
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">// An upper limit for max stack size. Used to avoid random crashes</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">// after calling SetMaxStack and trying to allocate a stack that is too big,</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// since stackalloc works with 32-bit sizes.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	maxstackceiling = 2 * maxstacksize
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	<span class="comment">// Allow newproc to start new Ms.</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	mainStarted = true
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	if GOARCH != &#34;wasm&#34; { <span class="comment">// no threads on wasm yet, so no sysmon</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		systemstack(func() {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>			newm(sysmon, nil, -1)
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		})
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	<span class="comment">// Lock the main goroutine onto this, the main OS thread,</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	<span class="comment">// during initialization. Most programs won&#39;t care, but a few</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	<span class="comment">// do require certain calls to be made by the main thread.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	<span class="comment">// Those can arrange for main.main to run in the main thread</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	<span class="comment">// by calling runtime.LockOSThread during initialization</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	<span class="comment">// to preserve the lock.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	lockOSThread()
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	if mp != &amp;m0 {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		throw(&#34;runtime.main not on m0&#34;)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	<span class="comment">// Record when the world started.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	<span class="comment">// Must be before doInit for tracing init.</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	runtimeInitTime = nanotime()
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	if runtimeInitTime == 0 {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		throw(&#34;nanotime returning zero&#34;)
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	if debug.inittrace != 0 {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		inittrace.id = getg().goid
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		inittrace.active = true
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	doInit(runtime_inittasks) <span class="comment">// Must be before defer.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	<span class="comment">// Defer unlock so that runtime.Goexit during init does the unlock too.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	needUnlock := true
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	defer func() {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		if needUnlock {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>			unlockOSThread()
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	}()
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	gcenable()
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	main_init_done = make(chan bool)
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	if iscgo {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		if _cgo_pthread_key_created == nil {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>			throw(&#34;_cgo_pthread_key_created missing&#34;)
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		if _cgo_thread_start == nil {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			throw(&#34;_cgo_thread_start missing&#34;)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		if GOOS != &#34;windows&#34; {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>			if _cgo_setenv == nil {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>				throw(&#34;_cgo_setenv missing&#34;)
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>			}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>			if _cgo_unsetenv == nil {
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>				throw(&#34;_cgo_unsetenv missing&#34;)
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>			}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		if _cgo_notify_runtime_init_done == nil {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>			throw(&#34;_cgo_notify_runtime_init_done missing&#34;)
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		<span class="comment">// Set the x_crosscall2_ptr C function pointer variable point to crosscall2.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		if set_crosscall2 == nil {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>			throw(&#34;set_crosscall2 missing&#34;)
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		set_crosscall2()
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		<span class="comment">// Start the template thread in case we enter Go from</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		<span class="comment">// a C-created thread and need to create a new thread.</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		startTemplateThread()
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		cgocall(_cgo_notify_runtime_init_done, nil)
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	}
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	<span class="comment">// Run the initializing tasks. Depending on build mode this</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	<span class="comment">// list can arrive a few different ways, but it will always</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	<span class="comment">// contain the init tasks computed by the linker for all the</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	<span class="comment">// packages in the program (excluding those added at runtime</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	<span class="comment">// by package plugin). Run through the modules in dependency</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	<span class="comment">// order (the order they are initialized by the dynamic</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	<span class="comment">// loader, i.e. they are added to the moduledata linked list).</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	for m := &amp;firstmoduledata; m != nil; m = m.next {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		doInit(m.inittasks)
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	<span class="comment">// Disable init tracing after main init done to avoid overhead</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	<span class="comment">// of collecting statistics in malloc and newproc</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	inittrace.active = false
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	close(main_init_done)
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	needUnlock = false
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	unlockOSThread()
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	if isarchive || islibrary {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		<span class="comment">// A program compiled with -buildmode=c-archive or c-shared</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		<span class="comment">// has a main, but it is not executed.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		return
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	fn := main_main <span class="comment">// make an indirect call, as the linker doesn&#39;t know the address of the main package when laying down the runtime</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	fn()
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	if raceenabled {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		runExitHooks(0) <span class="comment">// run hooks now, since racefini does not return</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		racefini()
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	<span class="comment">// Make racy client program work: if panicking on</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	<span class="comment">// another goroutine at the same time as main returns,</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	<span class="comment">// let the other goroutine finish printing the panic trace.</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	<span class="comment">// Once it does, it will exit. See issues 3934 and 20018.</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	if runningPanicDefers.Load() != 0 {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		<span class="comment">// Running deferred functions should not take long.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		for c := 0; c &lt; 1000; c++ {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			if runningPanicDefers.Load() == 0 {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>				break
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>			}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>			Gosched()
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	if panicking.Load() != 0 {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		gopark(nil, nil, waitReasonPanicWait, traceBlockForever, 1)
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	runExitHooks(0)
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	exit(0)
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	for {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		var x *int32
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		*x = 0
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span><span class="comment">// os_beforeExit is called from os.Exit(0).</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span><span class="comment">//go:linkname os_beforeExit os.runtime_beforeExit</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>func os_beforeExit(exitCode int) {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	runExitHooks(exitCode)
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	if exitCode == 0 &amp;&amp; raceenabled {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		racefini()
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">// start forcegc helper goroutine</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>func init() {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	go forcegchelper()
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>func forcegchelper() {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	forcegc.g = getg()
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	lockInit(&amp;forcegc.lock, lockRankForcegc)
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	for {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		lock(&amp;forcegc.lock)
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		if forcegc.idle.Load() {
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>			throw(&#34;forcegc: phase error&#34;)
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		forcegc.idle.Store(true)
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		goparkunlock(&amp;forcegc.lock, waitReasonForceGCIdle, traceBlockSystemGoroutine, 1)
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		<span class="comment">// this goroutine is explicitly resumed by sysmon</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		if debug.gctrace &gt; 0 {
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>			println(&#34;GC forced&#34;)
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		<span class="comment">// Time-triggered, fully concurrent.</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		gcStart(gcTrigger{kind: gcTriggerTime, now: nanotime()})
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// Gosched yields the processor, allowing other goroutines to run. It does not</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">// suspend the current goroutine, so execution resumes automatically.</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>func Gosched() {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	checkTimeouts()
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	mcall(gosched_m)
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span><span class="comment">// goschedguarded yields the processor like gosched, but also checks</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// for forbidden states and opts out of the yield in those cases.</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>func goschedguarded() {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	mcall(goschedguarded_m)
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// goschedIfBusy yields the processor like gosched, but only does so if</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// there are no idle Ps or if we&#39;re on the only P and there&#39;s nothing in</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">// the run queue. In both cases, there is freely available idle time.</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>func goschedIfBusy() {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	gp := getg()
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	<span class="comment">// Call gosched if gp.preempt is set; we may be in a tight loop that</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	<span class="comment">// doesn&#39;t otherwise yield.</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	if !gp.preempt &amp;&amp; sched.npidle.Load() &gt; 0 {
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		return
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	mcall(gosched_m)
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// Puts the current goroutine into a waiting state and calls unlockf on the</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// system stack.</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// If unlockf returns false, the goroutine is resumed.</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">// unlockf must not access this G&#39;s stack, as it may be moved between</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span><span class="comment">// the call to gopark and the call to unlockf.</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span><span class="comment">// Note that because unlockf is called after putting the G into a waiting</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span><span class="comment">// state, the G may have already been readied by the time unlockf is called</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span><span class="comment">// unless there is external synchronization preventing the G from being</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">// readied. If unlockf returns false, it must guarantee that the G cannot be</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">// externally readied.</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">// Reason explains why the goroutine has been parked. It is displayed in stack</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span><span class="comment">// traces and heap dumps. Reasons should be unique and descriptive. Do not</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span><span class="comment">// re-use reasons, add new ones.</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>func gopark(unlockf func(*g, unsafe.Pointer) bool, lock unsafe.Pointer, reason waitReason, traceReason traceBlockReason, traceskip int) {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	if reason != waitReasonSleep {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		checkTimeouts() <span class="comment">// timeouts may expire while two goroutines keep the scheduler busy</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	}
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	mp := acquirem()
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	gp := mp.curg
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	status := readgstatus(gp)
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	if status != _Grunning &amp;&amp; status != _Gscanrunning {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		throw(&#34;gopark: bad g status&#34;)
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	mp.waitlock = lock
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	mp.waitunlockf = unlockf
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	gp.waitreason = reason
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	mp.waitTraceBlockReason = traceReason
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	mp.waitTraceSkip = traceskip
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	releasem(mp)
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	<span class="comment">// can&#39;t do anything that might move the G between Ms here.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	mcall(park_m)
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span><span class="comment">// Puts the current goroutine into a waiting state and unlocks the lock.</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span><span class="comment">// The goroutine can be made runnable again by calling goready(gp).</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>func goparkunlock(lock *mutex, reason waitReason, traceReason traceBlockReason, traceskip int) {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	gopark(parkunlock_c, unsafe.Pointer(lock), reason, traceReason, traceskip)
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>func goready(gp *g, traceskip int) {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	systemstack(func() {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		ready(gp, traceskip, true)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	})
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>func acquireSudog() *sudog {
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	<span class="comment">// Delicate dance: the semaphore implementation calls</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	<span class="comment">// acquireSudog, acquireSudog calls new(sudog),</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	<span class="comment">// new calls malloc, malloc can call the garbage collector,</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	<span class="comment">// and the garbage collector calls the semaphore implementation</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	<span class="comment">// in stopTheWorld.</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	<span class="comment">// Break the cycle by doing acquirem/releasem around new(sudog).</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	<span class="comment">// The acquirem/releasem increments m.locks during new(sudog),</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	<span class="comment">// which keeps the garbage collector from being invoked.</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	mp := acquirem()
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	pp := mp.p.ptr()
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	if len(pp.sudogcache) == 0 {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		lock(&amp;sched.sudoglock)
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		<span class="comment">// First, try to grab a batch from central cache.</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		for len(pp.sudogcache) &lt; cap(pp.sudogcache)/2 &amp;&amp; sched.sudogcache != nil {
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>			s := sched.sudogcache
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>			sched.sudogcache = s.next
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>			s.next = nil
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>			pp.sudogcache = append(pp.sudogcache, s)
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>		}
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		unlock(&amp;sched.sudoglock)
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		<span class="comment">// If the central cache is empty, allocate a new one.</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		if len(pp.sudogcache) == 0 {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>			pp.sudogcache = append(pp.sudogcache, new(sudog))
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	}
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	n := len(pp.sudogcache)
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	s := pp.sudogcache[n-1]
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	pp.sudogcache[n-1] = nil
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	pp.sudogcache = pp.sudogcache[:n-1]
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	if s.elem != nil {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		throw(&#34;acquireSudog: found s.elem != nil in cache&#34;)
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	releasem(mp)
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	return s
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>}
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>func releaseSudog(s *sudog) {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	if s.elem != nil {
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		throw(&#34;runtime: sudog with non-nil elem&#34;)
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	}
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	if s.isSelect {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		throw(&#34;runtime: sudog with non-false isSelect&#34;)
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	}
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	if s.next != nil {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		throw(&#34;runtime: sudog with non-nil next&#34;)
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	}
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	if s.prev != nil {
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>		throw(&#34;runtime: sudog with non-nil prev&#34;)
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	}
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	if s.waitlink != nil {
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		throw(&#34;runtime: sudog with non-nil waitlink&#34;)
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	if s.c != nil {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		throw(&#34;runtime: sudog with non-nil c&#34;)
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	}
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	gp := getg()
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	if gp.param != nil {
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>		throw(&#34;runtime: releaseSudog with non-nil gp.param&#34;)
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	mp := acquirem() <span class="comment">// avoid rescheduling to another P</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	pp := mp.p.ptr()
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	if len(pp.sudogcache) == cap(pp.sudogcache) {
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>		<span class="comment">// Transfer half of local cache to the central cache.</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>		var first, last *sudog
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		for len(pp.sudogcache) &gt; cap(pp.sudogcache)/2 {
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>			n := len(pp.sudogcache)
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>			p := pp.sudogcache[n-1]
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>			pp.sudogcache[n-1] = nil
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>			pp.sudogcache = pp.sudogcache[:n-1]
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>			if first == nil {
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>				first = p
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>			} else {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>				last.next = p
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>			}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>			last = p
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		lock(&amp;sched.sudoglock)
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		last.next = sched.sudogcache
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		sched.sudogcache = first
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		unlock(&amp;sched.sudoglock)
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	pp.sudogcache = append(pp.sudogcache, s)
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	releasem(mp)
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>}
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span><span class="comment">// called from assembly.</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>func badmcall(fn func(*g)) {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	throw(&#34;runtime: mcall called on m-&gt;g0 stack&#34;)
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>func badmcall2(fn func(*g)) {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	throw(&#34;runtime: mcall function returned&#34;)
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>}
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>func badreflectcall() {
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	panic(plainError(&#34;arg size to reflect.call more than 1GB&#34;))
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>}
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>func badmorestackg0() {
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	if !crashStackImplemented {
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		writeErrStr(&#34;fatal: morestack on g0\n&#34;)
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>		return
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	g := getg()
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	switchToCrashStack(func() {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		print(&#34;runtime: morestack on g0, stack [&#34;, hex(g.stack.lo), &#34; &#34;, hex(g.stack.hi), &#34;], sp=&#34;, hex(g.sched.sp), &#34;, called from\n&#34;)
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		g.m.traceback = 2 <span class="comment">// include pc and sp in stack trace</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		traceback1(g.sched.pc, g.sched.sp, g.sched.lr, g, 0)
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		print(&#34;\n&#34;)
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		throw(&#34;morestack on g0&#34;)
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	})
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>}
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>func badmorestackgsignal() {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	writeErrStr(&#34;fatal: morestack on gsignal\n&#34;)
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>}
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>func badctxt() {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	throw(&#34;ctxt != 0&#34;)
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>}
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span><span class="comment">// gcrash is a fake g that can be used when crashing due to bad</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span><span class="comment">// stack conditions.</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>var gcrash g
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>var crashingG atomic.Pointer[g]
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span><span class="comment">// Switch to crashstack and call fn, with special handling of</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span><span class="comment">// concurrent and recursive cases.</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span><span class="comment">// Nosplit as it is called in a bad stack condition (we know</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span><span class="comment">// morestack would fail).</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>func switchToCrashStack(fn func()) {
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	me := getg()
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	if crashingG.CompareAndSwapNoWB(nil, me) {
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		switchToCrashStack0(fn) <span class="comment">// should never return</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		abort()
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	if crashingG.Load() == me {
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		<span class="comment">// recursive crashing. too bad.</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>		writeErrStr(&#34;fatal: recursive switchToCrashStack\n&#34;)
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>		abort()
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	}
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	<span class="comment">// Another g is crashing. Give it some time, hopefully it will finish traceback.</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	usleep_no_g(100)
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	writeErrStr(&#34;fatal: concurrent switchToCrashStack\n&#34;)
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	abort()
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span><span class="comment">// Disable crash stack on Windows for now. Apparently, throwing an exception</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span><span class="comment">// on a non-system-allocated crash stack causes EXCEPTION_STACK_OVERFLOW and</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span><span class="comment">// hangs the process (see issue 63938).</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>const crashStackImplemented = (GOARCH == &#34;amd64&#34; || GOARCH == &#34;arm64&#34; || GOARCH == &#34;mips64&#34; || GOARCH == &#34;mips64le&#34; || GOARCH == &#34;ppc64&#34; || GOARCH == &#34;ppc64le&#34; || GOARCH == &#34;riscv64&#34; || GOARCH == &#34;wasm&#34;) &amp;&amp; GOOS != &#34;windows&#34;
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>func switchToCrashStack0(fn func()) <span class="comment">// in assembly</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>func lockedOSThread() bool {
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	gp := getg()
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	return gp.lockedm != 0 &amp;&amp; gp.m.lockedg != 0
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>}
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>var (
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	<span class="comment">// allgs contains all Gs ever created (including dead Gs), and thus</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	<span class="comment">// never shrinks.</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	<span class="comment">// Access via the slice is protected by allglock or stop-the-world.</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	<span class="comment">// Readers that cannot take the lock may (carefully!) use the atomic</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	<span class="comment">// variables below.</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	allglock mutex
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	allgs    []*g
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	<span class="comment">// allglen and allgptr are atomic variables that contain len(allgs) and</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	<span class="comment">// &amp;allgs[0] respectively. Proper ordering depends on totally-ordered</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	<span class="comment">// loads and stores. Writes are protected by allglock.</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	<span class="comment">// allgptr is updated before allglen. Readers should read allglen</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	<span class="comment">// before allgptr to ensure that allglen is always &lt;= len(allgptr). New</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	<span class="comment">// Gs appended during the race can be missed. For a consistent view of</span>
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	<span class="comment">// all Gs, allglock must be held.</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	<span class="comment">// allgptr copies should always be stored as a concrete type or</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	<span class="comment">// unsafe.Pointer, not uintptr, to ensure that GC can still reach it</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	<span class="comment">// even if it points to a stale array.</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	allglen uintptr
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	allgptr **g
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>)
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>func allgadd(gp *g) {
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	if readgstatus(gp) == _Gidle {
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		throw(&#34;allgadd: bad status Gidle&#34;)
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	}
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	lock(&amp;allglock)
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	allgs = append(allgs, gp)
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	if &amp;allgs[0] != allgptr {
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		atomicstorep(unsafe.Pointer(&amp;allgptr), unsafe.Pointer(&amp;allgs[0]))
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	}
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	atomic.Storeuintptr(&amp;allglen, uintptr(len(allgs)))
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	unlock(&amp;allglock)
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>}
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>
<span id="L632" class="ln">   632&nbsp;&nbsp;</span><span class="comment">// allGsSnapshot returns a snapshot of the slice of all Gs.</span>
<span id="L633" class="ln">   633&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L634" class="ln">   634&nbsp;&nbsp;</span><span class="comment">// The world must be stopped or allglock must be held.</span>
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>func allGsSnapshot() []*g {
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	assertWorldStoppedOrLockHeld(&amp;allglock)
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	<span class="comment">// Because the world is stopped or allglock is held, allgadd</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	<span class="comment">// cannot happen concurrently with this. allgs grows</span>
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>	<span class="comment">// monotonically and existing entries never change, so we can</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>	<span class="comment">// simply return a copy of the slice header. For added safety,</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	<span class="comment">// we trim everything past len because that can still change.</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	return allgs[:len(allgs):len(allgs)]
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>}
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>
<span id="L646" class="ln">   646&nbsp;&nbsp;</span><span class="comment">// atomicAllG returns &amp;allgs[0] and len(allgs) for use with atomicAllGIndex.</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>func atomicAllG() (**g, uintptr) {
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	length := atomic.Loaduintptr(&amp;allglen)
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	ptr := (**g)(atomic.Loadp(unsafe.Pointer(&amp;allgptr)))
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	return ptr, length
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>}
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span><span class="comment">// atomicAllGIndex returns ptr[i] with the allgptr returned from atomicAllG.</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>func atomicAllGIndex(ptr **g, i uintptr) *g {
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	return *(**g)(add(unsafe.Pointer(ptr), i*goarch.PtrSize))
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>}
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span><span class="comment">// forEachG calls fn on every G from allgs.</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span><span class="comment">// forEachG takes a lock to exclude concurrent addition of new Gs.</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>func forEachG(fn func(gp *g)) {
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	lock(&amp;allglock)
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	for _, gp := range allgs {
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>		fn(gp)
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	}
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	unlock(&amp;allglock)
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>}
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>
<span id="L669" class="ln">   669&nbsp;&nbsp;</span><span class="comment">// forEachGRace calls fn on every G from allgs.</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span><span class="comment">// forEachGRace avoids locking, but does not exclude addition of new Gs during</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span><span class="comment">// execution, which may be missed.</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>func forEachGRace(fn func(gp *g)) {
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>	ptr, length := atomicAllG()
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	for i := uintptr(0); i &lt; length; i++ {
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		gp := atomicAllGIndex(ptr, i)
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>		fn(gp)
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	}
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	return
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>}
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>const (
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	<span class="comment">// Number of goroutine ids to grab from sched.goidgen to local per-P cache at once.</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	<span class="comment">// 16 seems to provide enough amortization, but other than that it&#39;s mostly arbitrary number.</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	_GoidCacheBatch = 16
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>)
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span><span class="comment">// cpuinit sets up CPU feature flags and calls internal/cpu.Initialize. env should be the complete</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span><span class="comment">// value of the GODEBUG environment variable.</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>func cpuinit(env string) {
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>	switch GOOS {
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	case &#34;aix&#34;, &#34;darwin&#34;, &#34;ios&#34;, &#34;dragonfly&#34;, &#34;freebsd&#34;, &#34;netbsd&#34;, &#34;openbsd&#34;, &#34;illumos&#34;, &#34;solaris&#34;, &#34;linux&#34;:
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>		cpu.DebugOptions = true
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>	}
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	cpu.Initialize(env)
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	<span class="comment">// Support cpu feature variables are used in code generated by the compiler</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	<span class="comment">// to guard execution of instructions that can not be assumed to be always supported.</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>	switch GOARCH {
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>	case &#34;386&#34;, &#34;amd64&#34;:
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		x86HasPOPCNT = cpu.X86.HasPOPCNT
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>		x86HasSSE41 = cpu.X86.HasSSE41
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>		x86HasFMA = cpu.X86.HasFMA
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	case &#34;arm&#34;:
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		armHasVFPv4 = cpu.ARM.HasVFPv4
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	case &#34;arm64&#34;:
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>		arm64HasATOMICS = cpu.ARM64.HasATOMICS
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	}
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>}
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span><span class="comment">// getGodebugEarly extracts the environment variable GODEBUG from the environment on</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span><span class="comment">// Unix-like operating systems and returns it. This function exists to extract GODEBUG</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span><span class="comment">// early before much of the runtime is initialized.</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>func getGodebugEarly() string {
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	const prefix = &#34;GODEBUG=&#34;
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>	var env string
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	switch GOOS {
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	case &#34;aix&#34;, &#34;darwin&#34;, &#34;ios&#34;, &#34;dragonfly&#34;, &#34;freebsd&#34;, &#34;netbsd&#34;, &#34;openbsd&#34;, &#34;illumos&#34;, &#34;solaris&#34;, &#34;linux&#34;:
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		<span class="comment">// Similar to goenv_unix but extracts the environment value for</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		<span class="comment">// GODEBUG directly.</span>
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		<span class="comment">// TODO(moehrmann): remove when general goenvs() can be called before cpuinit()</span>
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		n := int32(0)
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		for argv_index(argv, argc+1+n) != nil {
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>			n++
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>		}
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		for i := int32(0); i &lt; n; i++ {
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>			p := argv_index(argv, argc+1+i)
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>			s := unsafe.String(p, findnull(p))
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>			if hasPrefix(s, prefix) {
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>				env = gostring(p)[len(prefix):]
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>				break
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>			}
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>		}
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>	}
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>	return env
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>}
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span><span class="comment">// The bootstrap sequence is:</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L744" class="ln">   744&nbsp;&nbsp;</span><span class="comment">//	call osinit</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span><span class="comment">//	call schedinit</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span><span class="comment">//	make &amp; queue new G</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span><span class="comment">//	call runtime·mstart</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L749" class="ln">   749&nbsp;&nbsp;</span><span class="comment">// The new G calls runtime·main.</span>
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>func schedinit() {
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	lockInit(&amp;sched.lock, lockRankSched)
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	lockInit(&amp;sched.sysmonlock, lockRankSysmon)
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	lockInit(&amp;sched.deferlock, lockRankDefer)
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	lockInit(&amp;sched.sudoglock, lockRankSudog)
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	lockInit(&amp;deadlock, lockRankDeadlock)
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	lockInit(&amp;paniclk, lockRankPanic)
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>	lockInit(&amp;allglock, lockRankAllg)
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>	lockInit(&amp;allpLock, lockRankAllp)
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>	lockInit(&amp;reflectOffs.lock, lockRankReflectOffs)
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>	lockInit(&amp;finlock, lockRankFin)
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	lockInit(&amp;cpuprof.lock, lockRankCpuprof)
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	allocmLock.init(lockRankAllocmR, lockRankAllocmRInternal, lockRankAllocmW)
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	execLock.init(lockRankExecR, lockRankExecRInternal, lockRankExecW)
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	traceLockInit()
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>	<span class="comment">// Enforce that this lock is always a leaf lock.</span>
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	<span class="comment">// All of this lock&#39;s critical sections should be</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	<span class="comment">// extremely short.</span>
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	lockInit(&amp;memstats.heapStats.noPLock, lockRankLeafRank)
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>	<span class="comment">// raceinit must be the first call to race detector.</span>
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>	<span class="comment">// In particular, it must be done before mallocinit below calls racemapshadow.</span>
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	gp := getg()
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>	if raceenabled {
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>		gp.racectx, raceprocctx0 = raceinit()
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>	}
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>	sched.maxmcount = 10000
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	<span class="comment">// The world starts stopped.</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	worldStopped()
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	ticks.init() <span class="comment">// run as early as possible</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>	moduledataverify()
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>	stackinit()
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>	mallocinit()
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	godebug := getGodebugEarly()
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	initPageTrace(godebug) <span class="comment">// must run after mallocinit but before anything allocates</span>
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>	cpuinit(godebug)       <span class="comment">// must run before alginit</span>
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>	randinit()             <span class="comment">// must run before alginit, mcommoninit</span>
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	alginit()              <span class="comment">// maps, hash, rand must not be used before this call</span>
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	mcommoninit(gp.m, -1)
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>	modulesinit()   <span class="comment">// provides activeModules</span>
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>	typelinksinit() <span class="comment">// uses maps, activeModules</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>	itabsinit()     <span class="comment">// uses activeModules</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>	stkobjinit()    <span class="comment">// must run before GC starts</span>
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>	sigsave(&amp;gp.m.sigmask)
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>	initSigmask = gp.m.sigmask
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	goargs()
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>	goenvs()
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>	secure()
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	checkfds()
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>	parsedebugvars()
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>	gcinit()
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>	<span class="comment">// Allocate stack space that can be used when crashing due to bad stack</span>
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>	<span class="comment">// conditions, e.g. morestack on g0.</span>
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>	gcrash.stack = stackalloc(16384)
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>	gcrash.stackguard0 = gcrash.stack.lo + 1000
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	gcrash.stackguard1 = gcrash.stack.lo + 1000
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>	<span class="comment">// if disableMemoryProfiling is set, update MemProfileRate to 0 to turn off memprofile.</span>
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	<span class="comment">// Note: parsedebugvars may update MemProfileRate, but when disableMemoryProfiling is</span>
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>	<span class="comment">// set to true by the linker, it means that nothing is consuming the profile, it is</span>
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>	<span class="comment">// safe to set MemProfileRate to 0.</span>
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>	if disableMemoryProfiling {
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>		MemProfileRate = 0
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>	}
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>	sched.lastpoll.Store(nanotime())
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>	procs := ncpu
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>	if n, ok := atoi32(gogetenv(&#34;GOMAXPROCS&#34;)); ok &amp;&amp; n &gt; 0 {
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>		procs = n
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>	}
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>	if procresize(procs) != nil {
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>		throw(&#34;unknown runnable goroutine during bootstrap&#34;)
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	}
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>	<span class="comment">// World is effectively started now, as P&#39;s can run.</span>
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>	worldStarted()
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>	if buildVersion == &#34;&#34; {
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>		<span class="comment">// Condition should never trigger. This code just serves</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>		<span class="comment">// to ensure runtime·buildVersion is kept in the resulting binary.</span>
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>		buildVersion = &#34;unknown&#34;
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>	}
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>	if len(modinfo) == 1 {
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>		<span class="comment">// Condition should never trigger. This code just serves</span>
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>		<span class="comment">// to ensure runtime·modinfo is kept in the resulting binary.</span>
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>		modinfo = &#34;&#34;
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>	}
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>}
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>func dumpgstatus(gp *g) {
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>	thisg := getg()
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>	print(&#34;runtime:   gp: gp=&#34;, gp, &#34;, goid=&#34;, gp.goid, &#34;, gp-&gt;atomicstatus=&#34;, readgstatus(gp), &#34;\n&#34;)
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>	print(&#34;runtime: getg:  g=&#34;, thisg, &#34;, goid=&#34;, thisg.goid, &#34;,  g-&gt;atomicstatus=&#34;, readgstatus(thisg), &#34;\n&#34;)
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>}
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>
<span id="L853" class="ln">   853&nbsp;&nbsp;</span><span class="comment">// sched.lock must be held.</span>
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>func checkmcount() {
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>	assertLockHeld(&amp;sched.lock)
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>	<span class="comment">// Exclude extra M&#39;s, which are used for cgocallback from threads</span>
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>	<span class="comment">// created in C.</span>
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>	<span class="comment">// The purpose of the SetMaxThreads limit is to avoid accidental fork</span>
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>	<span class="comment">// bomb from something like millions of goroutines blocking on system</span>
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>	<span class="comment">// calls, causing the runtime to create millions of threads. By</span>
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>	<span class="comment">// definition, this isn&#39;t a problem for threads created in C, so we</span>
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	<span class="comment">// exclude them from the limit. See https://go.dev/issue/60004.</span>
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>	count := mcount() - int32(extraMInUse.Load()) - int32(extraMLength.Load())
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>	if count &gt; sched.maxmcount {
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>		print(&#34;runtime: program exceeds &#34;, sched.maxmcount, &#34;-thread limit\n&#34;)
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>		throw(&#34;thread exhaustion&#34;)
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>	}
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>}
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>
<span id="L872" class="ln">   872&nbsp;&nbsp;</span><span class="comment">// mReserveID returns the next ID to use for a new m. This new m is immediately</span>
<span id="L873" class="ln">   873&nbsp;&nbsp;</span><span class="comment">// considered &#39;running&#39; by checkdead.</span>
<span id="L874" class="ln">   874&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L875" class="ln">   875&nbsp;&nbsp;</span><span class="comment">// sched.lock must be held.</span>
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>func mReserveID() int64 {
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>	assertLockHeld(&amp;sched.lock)
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>	if sched.mnext+1 &lt; sched.mnext {
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>		throw(&#34;runtime: thread ID overflow&#34;)
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>	}
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>	id := sched.mnext
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>	sched.mnext++
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>	checkmcount()
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>	return id
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>}
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>
<span id="L888" class="ln">   888&nbsp;&nbsp;</span><span class="comment">// Pre-allocated ID may be passed as &#39;id&#39;, or omitted by passing -1.</span>
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>func mcommoninit(mp *m, id int64) {
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>	gp := getg()
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>	<span class="comment">// g0 stack won&#39;t make sense for user (and is not necessary unwindable).</span>
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>	if gp != gp.m.g0 {
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>		callers(1, mp.createstack[:])
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	}
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>	if id &gt;= 0 {
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>		mp.id = id
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>	} else {
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>		mp.id = mReserveID()
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>	}
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>	mrandinit(mp)
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>	mpreinit(mp)
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>	if mp.gsignal != nil {
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>		mp.gsignal.stackguard1 = mp.gsignal.stack.lo + stackGuard
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>	}
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>	<span class="comment">// Add to allm so garbage collector doesn&#39;t free g-&gt;m</span>
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>	<span class="comment">// when it is just in a register or thread-local storage.</span>
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>	mp.alllink = allm
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>	<span class="comment">// NumCgoCall() and others iterate over allm w/o schedlock,</span>
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>	<span class="comment">// so we need to publish it safely.</span>
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>	atomicstorep(unsafe.Pointer(&amp;allm), unsafe.Pointer(mp))
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>	<span class="comment">// Allocate memory to hold a cgo traceback if the cgo call crashes.</span>
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>	if iscgo || GOOS == &#34;solaris&#34; || GOOS == &#34;illumos&#34; || GOOS == &#34;windows&#34; {
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>		mp.cgoCallers = new(cgoCallers)
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>	}
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>}
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>func (mp *m) becomeSpinning() {
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>	mp.spinning = true
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>	sched.nmspinning.Add(1)
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	sched.needspinning.Store(0)
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>}
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>func (mp *m) hasCgoOnStack() bool {
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>	return mp.ncgo &gt; 0 || mp.isextra
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>}
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>const (
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>	<span class="comment">// osHasLowResTimer indicates that the platform&#39;s internal timer system has a low resolution,</span>
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>	<span class="comment">// typically on the order of 1 ms or more.</span>
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>	osHasLowResTimer = GOOS == &#34;windows&#34; || GOOS == &#34;openbsd&#34; || GOOS == &#34;netbsd&#34;
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>	<span class="comment">// osHasLowResClockInt is osHasLowResClock but in integer form, so it can be used to create</span>
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>	<span class="comment">// constants conditionally.</span>
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>	osHasLowResClockInt = goos.IsWindows
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>	<span class="comment">// osHasLowResClock indicates that timestamps produced by nanotime on the platform have a</span>
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>	<span class="comment">// low resolution, typically on the order of 1 ms or more.</span>
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>	osHasLowResClock = osHasLowResClockInt &gt; 0
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>)
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>
<span id="L951" class="ln">   951&nbsp;&nbsp;</span><span class="comment">// Mark gp ready to run.</span>
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>func ready(gp *g, traceskip int, next bool) {
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>	status := readgstatus(gp)
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>	<span class="comment">// Mark runnable.</span>
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>	mp := acquirem() <span class="comment">// disable preemption because it can be holding p in a local var</span>
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>	if status&amp;^_Gscan != _Gwaiting {
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>		dumpgstatus(gp)
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>		throw(&#34;bad g-&gt;status in ready&#34;)
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>	}
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>	<span class="comment">// status is Gwaiting or Gscanwaiting, make Grunnable and put on runq</span>
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>	casgstatus(gp, _Gwaiting, _Grunnable)
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>		trace.GoUnpark(gp, traceskip)
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>	}
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>	runqput(mp.p.ptr(), gp, next)
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>	wakep()
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>	releasem(mp)
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>}
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>
<span id="L974" class="ln">   974&nbsp;&nbsp;</span><span class="comment">// freezeStopWait is a large value that freezetheworld sets</span>
<span id="L975" class="ln">   975&nbsp;&nbsp;</span><span class="comment">// sched.stopwait to in order to request that all Gs permanently stop.</span>
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>const freezeStopWait = 0x7fffffff
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>
<span id="L978" class="ln">   978&nbsp;&nbsp;</span><span class="comment">// freezing is set to non-zero if the runtime is trying to freeze the</span>
<span id="L979" class="ln">   979&nbsp;&nbsp;</span><span class="comment">// world.</span>
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>var freezing atomic.Bool
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>
<span id="L982" class="ln">   982&nbsp;&nbsp;</span><span class="comment">// Similar to stopTheWorld but best-effort and can be called several times.</span>
<span id="L983" class="ln">   983&nbsp;&nbsp;</span><span class="comment">// There is no reverse operation, used during crashing.</span>
<span id="L984" class="ln">   984&nbsp;&nbsp;</span><span class="comment">// This function must not lock any mutexes.</span>
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>func freezetheworld() {
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>	freezing.Store(true)
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	if debug.dontfreezetheworld &gt; 0 {
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>		<span class="comment">// Don&#39;t prempt Ps to stop goroutines. That will perturb</span>
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>		<span class="comment">// scheduler state, making debugging more difficult. Instead,</span>
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>		<span class="comment">// allow goroutines to continue execution.</span>
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>		<span class="comment">// fatalpanic will tracebackothers to trace all goroutines. It</span>
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>		<span class="comment">// is unsafe to trace a running goroutine, so tracebackothers</span>
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>		<span class="comment">// will skip running goroutines. That is OK and expected, we</span>
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>		<span class="comment">// expect users of dontfreezetheworld to use core files anyway.</span>
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>		<span class="comment">// However, allowing the scheduler to continue running free</span>
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>		<span class="comment">// introduces a race: a goroutine may be stopped when</span>
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>		<span class="comment">// tracebackothers checks its status, and then start running</span>
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>		<span class="comment">// later when we are in the middle of traceback, potentially</span>
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>		<span class="comment">// causing a crash.</span>
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>		<span class="comment">// To mitigate this, when an M naturally enters the scheduler,</span>
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>		<span class="comment">// schedule checks if freezing is set and if so stops</span>
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>		<span class="comment">// execution. This guarantees that while Gs can transition from</span>
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>		<span class="comment">// running to stopped, they can never transition from stopped</span>
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>		<span class="comment">// to running.</span>
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>		<span class="comment">// The sleep here allows racing Ms that missed freezing and are</span>
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>		<span class="comment">// about to run a G to complete the transition to running</span>
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>		<span class="comment">// before we start traceback.</span>
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>		usleep(1000)
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>		return
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>	}
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>	<span class="comment">// stopwait and preemption requests can be lost</span>
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>	<span class="comment">// due to races with concurrently executing threads,</span>
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>	<span class="comment">// so try several times</span>
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>	for i := 0; i &lt; 5; i++ {
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>		<span class="comment">// this should tell the scheduler to not start any new goroutines</span>
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>		sched.stopwait = freezeStopWait
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>		sched.gcwaiting.Store(true)
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>		<span class="comment">// this should stop running goroutines</span>
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>		if !preemptall() {
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>			break <span class="comment">// no running goroutines</span>
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>		}
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>		usleep(1000)
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>	}
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>	<span class="comment">// to be sure</span>
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>	usleep(1000)
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>	preemptall()
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>	usleep(1000)
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>}
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span><span class="comment">// All reads and writes of g&#39;s status go through readgstatus, casgstatus</span>
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span><span class="comment">// castogscanstatus, casfrom_Gscanstatus.</span>
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>func readgstatus(gp *g) uint32 {
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>	return gp.atomicstatus.Load()
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>}
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span><span class="comment">// The Gscanstatuses are acting like locks and this releases them.</span>
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span><span class="comment">// If it proves to be a performance hit we should be able to make these</span>
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span><span class="comment">// simple atomic stores but for now we are going to throw if</span>
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span><span class="comment">// we see an inconsistent state.</span>
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>func casfrom_Gscanstatus(gp *g, oldval, newval uint32) {
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>	success := false
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>	<span class="comment">// Check that transition is valid.</span>
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>	switch oldval {
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>	default:
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>		print(&#34;runtime: casfrom_Gscanstatus bad oldval gp=&#34;, gp, &#34;, oldval=&#34;, hex(oldval), &#34;, newval=&#34;, hex(newval), &#34;\n&#34;)
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>		dumpgstatus(gp)
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>		throw(&#34;casfrom_Gscanstatus:top gp-&gt;status is not in scan state&#34;)
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>	case _Gscanrunnable,
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>		_Gscanwaiting,
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>		_Gscanrunning,
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>		_Gscansyscall,
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>		_Gscanpreempted:
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>		if newval == oldval&amp;^_Gscan {
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>			success = gp.atomicstatus.CompareAndSwap(oldval, newval)
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>		}
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>	}
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>	if !success {
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>		print(&#34;runtime: casfrom_Gscanstatus failed gp=&#34;, gp, &#34;, oldval=&#34;, hex(oldval), &#34;, newval=&#34;, hex(newval), &#34;\n&#34;)
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>		dumpgstatus(gp)
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>		throw(&#34;casfrom_Gscanstatus: gp-&gt;status is not in scan state&#34;)
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>	}
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>	releaseLockRank(lockRankGscan)
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>}
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span><span class="comment">// This will return false if the gp is not in the expected status and the cas fails.</span>
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span><span class="comment">// This acts like a lock acquire while the casfromgstatus acts like a lock release.</span>
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>func castogscanstatus(gp *g, oldval, newval uint32) bool {
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>	switch oldval {
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>	case _Grunnable,
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>		_Grunning,
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>		_Gwaiting,
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>		_Gsyscall:
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>		if newval == oldval|_Gscan {
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>			r := gp.atomicstatus.CompareAndSwap(oldval, newval)
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>			if r {
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>				acquireLockRank(lockRankGscan)
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>			}
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>			return r
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>		}
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>	}
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>	print(&#34;runtime: castogscanstatus oldval=&#34;, hex(oldval), &#34; newval=&#34;, hex(newval), &#34;\n&#34;)
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>	throw(&#34;castogscanstatus&#34;)
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>	panic(&#34;not reached&#34;)
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>}
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span><span class="comment">// casgstatusAlwaysTrack is a debug flag that causes casgstatus to always track</span>
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span><span class="comment">// various latencies on every transition instead of sampling them.</span>
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>var casgstatusAlwaysTrack = false
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span><span class="comment">// If asked to move to or from a Gscanstatus this will throw. Use the castogscanstatus</span>
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span><span class="comment">// and casfrom_Gscanstatus instead.</span>
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span><span class="comment">// casgstatus will loop if the g-&gt;atomicstatus is in a Gscan status until the routine that</span>
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span><span class="comment">// put it in the Gscan state is finished.</span>
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>func casgstatus(gp *g, oldval, newval uint32) {
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>	if (oldval&amp;_Gscan != 0) || (newval&amp;_Gscan != 0) || oldval == newval {
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>		systemstack(func() {
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>			print(&#34;runtime: casgstatus: oldval=&#34;, hex(oldval), &#34; newval=&#34;, hex(newval), &#34;\n&#34;)
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>			throw(&#34;casgstatus: bad incoming values&#34;)
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>		})
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>	}
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>	acquireLockRank(lockRankGscan)
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>	releaseLockRank(lockRankGscan)
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>	<span class="comment">// See https://golang.org/cl/21503 for justification of the yield delay.</span>
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>	const yieldDelay = 5 * 1000
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>	var nextYield int64
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>	<span class="comment">// loop if gp-&gt;atomicstatus is in a scan state giving</span>
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>	<span class="comment">// GC time to finish and change the state to oldval.</span>
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>	for i := 0; !gp.atomicstatus.CompareAndSwap(oldval, newval); i++ {
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>		if oldval == _Gwaiting &amp;&amp; gp.atomicstatus.Load() == _Grunnable {
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>			throw(&#34;casgstatus: waiting for Gwaiting but is Grunnable&#34;)
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>		}
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>		if i == 0 {
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>			nextYield = nanotime() + yieldDelay
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>		}
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>		if nanotime() &lt; nextYield {
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>			for x := 0; x &lt; 10 &amp;&amp; gp.atomicstatus.Load() != oldval; x++ {
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>				procyield(1)
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>			}
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>		} else {
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>			osyield()
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>			nextYield = nanotime() + yieldDelay/2
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>		}
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>	}
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>	if oldval == _Grunning {
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>		<span class="comment">// Track every gTrackingPeriod time a goroutine transitions out of running.</span>
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>		if casgstatusAlwaysTrack || gp.trackingSeq%gTrackingPeriod == 0 {
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>			gp.tracking = true
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>		}
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>		gp.trackingSeq++
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>	}
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>	if !gp.tracking {
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>		return
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>	}
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>	<span class="comment">// Handle various kinds of tracking.</span>
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>	<span class="comment">// Currently:</span>
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>	<span class="comment">// - Time spent in runnable.</span>
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>	<span class="comment">// - Time spent blocked on a sync.Mutex or sync.RWMutex.</span>
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>	switch oldval {
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>	case _Grunnable:
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>		<span class="comment">// We transitioned out of runnable, so measure how much</span>
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>		<span class="comment">// time we spent in this state and add it to</span>
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>		<span class="comment">// runnableTime.</span>
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>		now := nanotime()
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>		gp.runnableTime += now - gp.trackingStamp
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>		gp.trackingStamp = 0
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>	case _Gwaiting:
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>		if !gp.waitreason.isMutexWait() {
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>			<span class="comment">// Not blocking on a lock.</span>
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>			break
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>		}
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>		<span class="comment">// Blocking on a lock, measure it. Note that because we&#39;re</span>
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>		<span class="comment">// sampling, we have to multiply by our sampling period to get</span>
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>		<span class="comment">// a more representative estimate of the absolute value.</span>
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>		<span class="comment">// gTrackingPeriod also represents an accurate sampling period</span>
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>		<span class="comment">// because we can only enter this state from _Grunning.</span>
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>		now := nanotime()
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>		sched.totalMutexWaitTime.Add((now - gp.trackingStamp) * gTrackingPeriod)
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>		gp.trackingStamp = 0
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>	}
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>	switch newval {
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>	case _Gwaiting:
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>		if !gp.waitreason.isMutexWait() {
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>			<span class="comment">// Not blocking on a lock.</span>
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>			break
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>		}
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>		<span class="comment">// Blocking on a lock. Write down the timestamp.</span>
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>		now := nanotime()
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>		gp.trackingStamp = now
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>	case _Grunnable:
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>		<span class="comment">// We just transitioned into runnable, so record what</span>
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>		<span class="comment">// time that happened.</span>
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>		now := nanotime()
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>		gp.trackingStamp = now
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>	case _Grunning:
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>		<span class="comment">// We&#39;re transitioning into running, so turn off</span>
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>		<span class="comment">// tracking and record how much time we spent in</span>
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>		<span class="comment">// runnable.</span>
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>		gp.tracking = false
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>		sched.timeToRun.record(gp.runnableTime)
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>		gp.runnableTime = 0
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>	}
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>}
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span><span class="comment">// casGToWaiting transitions gp from old to _Gwaiting, and sets the wait reason.</span>
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span><span class="comment">// Use this over casgstatus when possible to ensure that a waitreason is set.</span>
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>func casGToWaiting(gp *g, old uint32, reason waitReason) {
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>	<span class="comment">// Set the wait reason before calling casgstatus, because casgstatus will use it.</span>
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>	gp.waitreason = reason
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>	casgstatus(gp, old, _Gwaiting)
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>}
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span><span class="comment">// casgstatus(gp, oldstatus, Gcopystack), assuming oldstatus is Gwaiting or Grunnable.</span>
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span><span class="comment">// Returns old status. Cannot call casgstatus directly, because we are racing with an</span>
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span><span class="comment">// async wakeup that might come in from netpoll. If we see Gwaiting from the readgstatus,</span>
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span><span class="comment">// it might have become Grunnable by the time we get to the cas. If we called casgstatus,</span>
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span><span class="comment">// it would loop waiting for the status to go back to Gwaiting, which it never will.</span>
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>func casgcopystack(gp *g) uint32 {
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>	for {
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>		oldstatus := readgstatus(gp) &amp;^ _Gscan
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>		if oldstatus != _Gwaiting &amp;&amp; oldstatus != _Grunnable {
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>			throw(&#34;copystack: bad status, not Gwaiting or Grunnable&#34;)
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>		}
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>		if gp.atomicstatus.CompareAndSwap(oldstatus, _Gcopystack) {
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>			return oldstatus
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>		}
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>	}
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>}
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span><span class="comment">// casGToPreemptScan transitions gp from _Grunning to _Gscan|_Gpreempted.</span>
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span><span class="comment">// TODO(austin): This is the only status operation that both changes</span>
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span><span class="comment">// the status and locks the _Gscan bit. Rethink this.</span>
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>func casGToPreemptScan(gp *g, old, new uint32) {
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>	if old != _Grunning || new != _Gscan|_Gpreempted {
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>		throw(&#34;bad g transition&#34;)
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>	}
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>	acquireLockRank(lockRankGscan)
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>	for !gp.atomicstatus.CompareAndSwap(_Grunning, _Gscan|_Gpreempted) {
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>	}
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>}
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span><span class="comment">// casGFromPreempted attempts to transition gp from _Gpreempted to</span>
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span><span class="comment">// _Gwaiting. If successful, the caller is responsible for</span>
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span><span class="comment">// re-scheduling gp.</span>
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>func casGFromPreempted(gp *g, old, new uint32) bool {
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>	if old != _Gpreempted || new != _Gwaiting {
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>		throw(&#34;bad g transition&#34;)
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>	}
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>	gp.waitreason = waitReasonPreempted
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>	return gp.atomicstatus.CompareAndSwap(_Gpreempted, _Gwaiting)
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>}
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span><span class="comment">// stwReason is an enumeration of reasons the world is stopping.</span>
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>type stwReason uint8
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span>
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span><span class="comment">// Reasons to stop-the-world.</span>
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span><span class="comment">// Avoid reusing reasons and add new ones instead.</span>
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>const (
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>	stwUnknown                     stwReason = iota <span class="comment">// &#34;unknown&#34;</span>
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>	stwGCMarkTerm                                   <span class="comment">// &#34;GC mark termination&#34;</span>
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>	stwGCSweepTerm                                  <span class="comment">// &#34;GC sweep termination&#34;</span>
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>	stwWriteHeapDump                                <span class="comment">// &#34;write heap dump&#34;</span>
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>	stwGoroutineProfile                             <span class="comment">// &#34;goroutine profile&#34;</span>
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>	stwGoroutineProfileCleanup                      <span class="comment">// &#34;goroutine profile cleanup&#34;</span>
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>	stwAllGoroutinesStack                           <span class="comment">// &#34;all goroutines stack trace&#34;</span>
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>	stwReadMemStats                                 <span class="comment">// &#34;read mem stats&#34;</span>
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>	stwAllThreadsSyscall                            <span class="comment">// &#34;AllThreadsSyscall&#34;</span>
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>	stwGOMAXPROCS                                   <span class="comment">// &#34;GOMAXPROCS&#34;</span>
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>	stwStartTrace                                   <span class="comment">// &#34;start trace&#34;</span>
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>	stwStopTrace                                    <span class="comment">// &#34;stop trace&#34;</span>
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>	stwForTestCountPagesInUse                       <span class="comment">// &#34;CountPagesInUse (test)&#34;</span>
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>	stwForTestReadMetricsSlow                       <span class="comment">// &#34;ReadMetricsSlow (test)&#34;</span>
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>	stwForTestReadMemStatsSlow                      <span class="comment">// &#34;ReadMemStatsSlow (test)&#34;</span>
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>	stwForTestPageCachePagesLeaked                  <span class="comment">// &#34;PageCachePagesLeaked (test)&#34;</span>
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>	stwForTestResetDebugLog                         <span class="comment">// &#34;ResetDebugLog (test)&#34;</span>
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>)
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>func (r stwReason) String() string {
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>	return stwReasonStrings[r]
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>}
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>func (r stwReason) isGC() bool {
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>	return r == stwGCMarkTerm || r == stwGCSweepTerm
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span>}
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span><span class="comment">// If you add to this list, also add it to src/internal/trace/parser.go.</span>
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span><span class="comment">// If you change the values of any of the stw* constants, bump the trace</span>
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span><span class="comment">// version number and make a copy of this.</span>
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span>var stwReasonStrings = [...]string{
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span>	stwUnknown:                     &#34;unknown&#34;,
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span>	stwGCMarkTerm:                  &#34;GC mark termination&#34;,
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>	stwGCSweepTerm:                 &#34;GC sweep termination&#34;,
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span>	stwWriteHeapDump:               &#34;write heap dump&#34;,
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span>	stwGoroutineProfile:            &#34;goroutine profile&#34;,
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span>	stwGoroutineProfileCleanup:     &#34;goroutine profile cleanup&#34;,
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span>	stwAllGoroutinesStack:          &#34;all goroutines stack trace&#34;,
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span>	stwReadMemStats:                &#34;read mem stats&#34;,
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>	stwAllThreadsSyscall:           &#34;AllThreadsSyscall&#34;,
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span>	stwGOMAXPROCS:                  &#34;GOMAXPROCS&#34;,
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span>	stwStartTrace:                  &#34;start trace&#34;,
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span>	stwStopTrace:                   &#34;stop trace&#34;,
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span>	stwForTestCountPagesInUse:      &#34;CountPagesInUse (test)&#34;,
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span>	stwForTestReadMetricsSlow:      &#34;ReadMetricsSlow (test)&#34;,
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>	stwForTestReadMemStatsSlow:     &#34;ReadMemStatsSlow (test)&#34;,
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span>	stwForTestPageCachePagesLeaked: &#34;PageCachePagesLeaked (test)&#34;,
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span>	stwForTestResetDebugLog:        &#34;ResetDebugLog (test)&#34;,
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span>}
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span>
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span><span class="comment">// worldStop provides context from the stop-the-world required by the</span>
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span><span class="comment">// start-the-world.</span>
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span>type worldStop struct {
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span>	reason stwReason
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span>	start  int64
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span>}
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span>
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span><span class="comment">// Temporary variable for stopTheWorld, when it can&#39;t write to the stack.</span>
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span><span class="comment">// Protected by worldsema.</span>
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>var stopTheWorldContext worldStop
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span>
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span><span class="comment">// stopTheWorld stops all P&#39;s from executing goroutines, interrupting</span>
<span id="L1323" class="ln">  1323&nbsp;&nbsp;</span><span class="comment">// all goroutines at GC safe points and records reason as the reason</span>
<span id="L1324" class="ln">  1324&nbsp;&nbsp;</span><span class="comment">// for the stop. On return, only the current goroutine&#39;s P is running.</span>
<span id="L1325" class="ln">  1325&nbsp;&nbsp;</span><span class="comment">// stopTheWorld must not be called from a system stack and the caller</span>
<span id="L1326" class="ln">  1326&nbsp;&nbsp;</span><span class="comment">// must not hold worldsema. The caller must call startTheWorld when</span>
<span id="L1327" class="ln">  1327&nbsp;&nbsp;</span><span class="comment">// other P&#39;s should resume execution.</span>
<span id="L1328" class="ln">  1328&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1329" class="ln">  1329&nbsp;&nbsp;</span><span class="comment">// stopTheWorld is safe for multiple goroutines to call at the</span>
<span id="L1330" class="ln">  1330&nbsp;&nbsp;</span><span class="comment">// same time. Each will execute its own stop, and the stops will</span>
<span id="L1331" class="ln">  1331&nbsp;&nbsp;</span><span class="comment">// be serialized.</span>
<span id="L1332" class="ln">  1332&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1333" class="ln">  1333&nbsp;&nbsp;</span><span class="comment">// This is also used by routines that do stack dumps. If the system is</span>
<span id="L1334" class="ln">  1334&nbsp;&nbsp;</span><span class="comment">// in panic or being exited, this may not reliably stop all</span>
<span id="L1335" class="ln">  1335&nbsp;&nbsp;</span><span class="comment">// goroutines.</span>
<span id="L1336" class="ln">  1336&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1337" class="ln">  1337&nbsp;&nbsp;</span><span class="comment">// Returns the STW context. When starting the world, this context must be</span>
<span id="L1338" class="ln">  1338&nbsp;&nbsp;</span><span class="comment">// passed to startTheWorld.</span>
<span id="L1339" class="ln">  1339&nbsp;&nbsp;</span>func stopTheWorld(reason stwReason) worldStop {
<span id="L1340" class="ln">  1340&nbsp;&nbsp;</span>	semacquire(&amp;worldsema)
<span id="L1341" class="ln">  1341&nbsp;&nbsp;</span>	gp := getg()
<span id="L1342" class="ln">  1342&nbsp;&nbsp;</span>	gp.m.preemptoff = reason.String()
<span id="L1343" class="ln">  1343&nbsp;&nbsp;</span>	systemstack(func() {
<span id="L1344" class="ln">  1344&nbsp;&nbsp;</span>		<span class="comment">// Mark the goroutine which called stopTheWorld preemptible so its</span>
<span id="L1345" class="ln">  1345&nbsp;&nbsp;</span>		<span class="comment">// stack may be scanned.</span>
<span id="L1346" class="ln">  1346&nbsp;&nbsp;</span>		<span class="comment">// This lets a mark worker scan us while we try to stop the world</span>
<span id="L1347" class="ln">  1347&nbsp;&nbsp;</span>		<span class="comment">// since otherwise we could get in a mutual preemption deadlock.</span>
<span id="L1348" class="ln">  1348&nbsp;&nbsp;</span>		<span class="comment">// We must not modify anything on the G stack because a stack shrink</span>
<span id="L1349" class="ln">  1349&nbsp;&nbsp;</span>		<span class="comment">// may occur. A stack shrink is otherwise OK though because in order</span>
<span id="L1350" class="ln">  1350&nbsp;&nbsp;</span>		<span class="comment">// to return from this function (and to leave the system stack) we</span>
<span id="L1351" class="ln">  1351&nbsp;&nbsp;</span>		<span class="comment">// must have preempted all goroutines, including any attempting</span>
<span id="L1352" class="ln">  1352&nbsp;&nbsp;</span>		<span class="comment">// to scan our stack, in which case, any stack shrinking will</span>
<span id="L1353" class="ln">  1353&nbsp;&nbsp;</span>		<span class="comment">// have already completed by the time we exit.</span>
<span id="L1354" class="ln">  1354&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L1355" class="ln">  1355&nbsp;&nbsp;</span>		<span class="comment">// N.B. The execution tracer is not aware of this status</span>
<span id="L1356" class="ln">  1356&nbsp;&nbsp;</span>		<span class="comment">// transition and handles it specially based on the</span>
<span id="L1357" class="ln">  1357&nbsp;&nbsp;</span>		<span class="comment">// wait reason.</span>
<span id="L1358" class="ln">  1358&nbsp;&nbsp;</span>		casGToWaiting(gp, _Grunning, waitReasonStoppingTheWorld)
<span id="L1359" class="ln">  1359&nbsp;&nbsp;</span>		stopTheWorldContext = stopTheWorldWithSema(reason) <span class="comment">// avoid write to stack</span>
<span id="L1360" class="ln">  1360&nbsp;&nbsp;</span>		casgstatus(gp, _Gwaiting, _Grunning)
<span id="L1361" class="ln">  1361&nbsp;&nbsp;</span>	})
<span id="L1362" class="ln">  1362&nbsp;&nbsp;</span>	return stopTheWorldContext
<span id="L1363" class="ln">  1363&nbsp;&nbsp;</span>}
<span id="L1364" class="ln">  1364&nbsp;&nbsp;</span>
<span id="L1365" class="ln">  1365&nbsp;&nbsp;</span><span class="comment">// startTheWorld undoes the effects of stopTheWorld.</span>
<span id="L1366" class="ln">  1366&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1367" class="ln">  1367&nbsp;&nbsp;</span><span class="comment">// w must be the worldStop returned by stopTheWorld.</span>
<span id="L1368" class="ln">  1368&nbsp;&nbsp;</span>func startTheWorld(w worldStop) {
<span id="L1369" class="ln">  1369&nbsp;&nbsp;</span>	systemstack(func() { startTheWorldWithSema(0, w) })
<span id="L1370" class="ln">  1370&nbsp;&nbsp;</span>
<span id="L1371" class="ln">  1371&nbsp;&nbsp;</span>	<span class="comment">// worldsema must be held over startTheWorldWithSema to ensure</span>
<span id="L1372" class="ln">  1372&nbsp;&nbsp;</span>	<span class="comment">// gomaxprocs cannot change while worldsema is held.</span>
<span id="L1373" class="ln">  1373&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1374" class="ln">  1374&nbsp;&nbsp;</span>	<span class="comment">// Release worldsema with direct handoff to the next waiter, but</span>
<span id="L1375" class="ln">  1375&nbsp;&nbsp;</span>	<span class="comment">// acquirem so that semrelease1 doesn&#39;t try to yield our time.</span>
<span id="L1376" class="ln">  1376&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1377" class="ln">  1377&nbsp;&nbsp;</span>	<span class="comment">// Otherwise if e.g. ReadMemStats is being called in a loop,</span>
<span id="L1378" class="ln">  1378&nbsp;&nbsp;</span>	<span class="comment">// it might stomp on other attempts to stop the world, such as</span>
<span id="L1379" class="ln">  1379&nbsp;&nbsp;</span>	<span class="comment">// for starting or ending GC. The operation this blocks is</span>
<span id="L1380" class="ln">  1380&nbsp;&nbsp;</span>	<span class="comment">// so heavy-weight that we should just try to be as fair as</span>
<span id="L1381" class="ln">  1381&nbsp;&nbsp;</span>	<span class="comment">// possible here.</span>
<span id="L1382" class="ln">  1382&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1383" class="ln">  1383&nbsp;&nbsp;</span>	<span class="comment">// We don&#39;t want to just allow us to get preempted between now</span>
<span id="L1384" class="ln">  1384&nbsp;&nbsp;</span>	<span class="comment">// and releasing the semaphore because then we keep everyone</span>
<span id="L1385" class="ln">  1385&nbsp;&nbsp;</span>	<span class="comment">// (including, for example, GCs) waiting longer.</span>
<span id="L1386" class="ln">  1386&nbsp;&nbsp;</span>	mp := acquirem()
<span id="L1387" class="ln">  1387&nbsp;&nbsp;</span>	mp.preemptoff = &#34;&#34;
<span id="L1388" class="ln">  1388&nbsp;&nbsp;</span>	semrelease1(&amp;worldsema, true, 0)
<span id="L1389" class="ln">  1389&nbsp;&nbsp;</span>	releasem(mp)
<span id="L1390" class="ln">  1390&nbsp;&nbsp;</span>}
<span id="L1391" class="ln">  1391&nbsp;&nbsp;</span>
<span id="L1392" class="ln">  1392&nbsp;&nbsp;</span><span class="comment">// stopTheWorldGC has the same effect as stopTheWorld, but blocks</span>
<span id="L1393" class="ln">  1393&nbsp;&nbsp;</span><span class="comment">// until the GC is not running. It also blocks a GC from starting</span>
<span id="L1394" class="ln">  1394&nbsp;&nbsp;</span><span class="comment">// until startTheWorldGC is called.</span>
<span id="L1395" class="ln">  1395&nbsp;&nbsp;</span>func stopTheWorldGC(reason stwReason) worldStop {
<span id="L1396" class="ln">  1396&nbsp;&nbsp;</span>	semacquire(&amp;gcsema)
<span id="L1397" class="ln">  1397&nbsp;&nbsp;</span>	return stopTheWorld(reason)
<span id="L1398" class="ln">  1398&nbsp;&nbsp;</span>}
<span id="L1399" class="ln">  1399&nbsp;&nbsp;</span>
<span id="L1400" class="ln">  1400&nbsp;&nbsp;</span><span class="comment">// startTheWorldGC undoes the effects of stopTheWorldGC.</span>
<span id="L1401" class="ln">  1401&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1402" class="ln">  1402&nbsp;&nbsp;</span><span class="comment">// w must be the worldStop returned by stopTheWorld.</span>
<span id="L1403" class="ln">  1403&nbsp;&nbsp;</span>func startTheWorldGC(w worldStop) {
<span id="L1404" class="ln">  1404&nbsp;&nbsp;</span>	startTheWorld(w)
<span id="L1405" class="ln">  1405&nbsp;&nbsp;</span>	semrelease(&amp;gcsema)
<span id="L1406" class="ln">  1406&nbsp;&nbsp;</span>}
<span id="L1407" class="ln">  1407&nbsp;&nbsp;</span>
<span id="L1408" class="ln">  1408&nbsp;&nbsp;</span><span class="comment">// Holding worldsema grants an M the right to try to stop the world.</span>
<span id="L1409" class="ln">  1409&nbsp;&nbsp;</span>var worldsema uint32 = 1
<span id="L1410" class="ln">  1410&nbsp;&nbsp;</span>
<span id="L1411" class="ln">  1411&nbsp;&nbsp;</span><span class="comment">// Holding gcsema grants the M the right to block a GC, and blocks</span>
<span id="L1412" class="ln">  1412&nbsp;&nbsp;</span><span class="comment">// until the current GC is done. In particular, it prevents gomaxprocs</span>
<span id="L1413" class="ln">  1413&nbsp;&nbsp;</span><span class="comment">// from changing concurrently.</span>
<span id="L1414" class="ln">  1414&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1415" class="ln">  1415&nbsp;&nbsp;</span><span class="comment">// TODO(mknyszek): Once gomaxprocs and the execution tracer can handle</span>
<span id="L1416" class="ln">  1416&nbsp;&nbsp;</span><span class="comment">// being changed/enabled during a GC, remove this.</span>
<span id="L1417" class="ln">  1417&nbsp;&nbsp;</span>var gcsema uint32 = 1
<span id="L1418" class="ln">  1418&nbsp;&nbsp;</span>
<span id="L1419" class="ln">  1419&nbsp;&nbsp;</span><span class="comment">// stopTheWorldWithSema is the core implementation of stopTheWorld.</span>
<span id="L1420" class="ln">  1420&nbsp;&nbsp;</span><span class="comment">// The caller is responsible for acquiring worldsema and disabling</span>
<span id="L1421" class="ln">  1421&nbsp;&nbsp;</span><span class="comment">// preemption first and then should stopTheWorldWithSema on the system</span>
<span id="L1422" class="ln">  1422&nbsp;&nbsp;</span><span class="comment">// stack:</span>
<span id="L1423" class="ln">  1423&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1424" class="ln">  1424&nbsp;&nbsp;</span><span class="comment">//	semacquire(&amp;worldsema, 0)</span>
<span id="L1425" class="ln">  1425&nbsp;&nbsp;</span><span class="comment">//	m.preemptoff = &#34;reason&#34;</span>
<span id="L1426" class="ln">  1426&nbsp;&nbsp;</span><span class="comment">//	var stw worldStop</span>
<span id="L1427" class="ln">  1427&nbsp;&nbsp;</span><span class="comment">//	systemstack(func() {</span>
<span id="L1428" class="ln">  1428&nbsp;&nbsp;</span><span class="comment">//		stw = stopTheWorldWithSema(reason)</span>
<span id="L1429" class="ln">  1429&nbsp;&nbsp;</span><span class="comment">//	})</span>
<span id="L1430" class="ln">  1430&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1431" class="ln">  1431&nbsp;&nbsp;</span><span class="comment">// When finished, the caller must either call startTheWorld or undo</span>
<span id="L1432" class="ln">  1432&nbsp;&nbsp;</span><span class="comment">// these three operations separately:</span>
<span id="L1433" class="ln">  1433&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1434" class="ln">  1434&nbsp;&nbsp;</span><span class="comment">//	m.preemptoff = &#34;&#34;</span>
<span id="L1435" class="ln">  1435&nbsp;&nbsp;</span><span class="comment">//	systemstack(func() {</span>
<span id="L1436" class="ln">  1436&nbsp;&nbsp;</span><span class="comment">//		now = startTheWorldWithSema(stw)</span>
<span id="L1437" class="ln">  1437&nbsp;&nbsp;</span><span class="comment">//	})</span>
<span id="L1438" class="ln">  1438&nbsp;&nbsp;</span><span class="comment">//	semrelease(&amp;worldsema)</span>
<span id="L1439" class="ln">  1439&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1440" class="ln">  1440&nbsp;&nbsp;</span><span class="comment">// It is allowed to acquire worldsema once and then execute multiple</span>
<span id="L1441" class="ln">  1441&nbsp;&nbsp;</span><span class="comment">// startTheWorldWithSema/stopTheWorldWithSema pairs.</span>
<span id="L1442" class="ln">  1442&nbsp;&nbsp;</span><span class="comment">// Other P&#39;s are able to execute between successive calls to</span>
<span id="L1443" class="ln">  1443&nbsp;&nbsp;</span><span class="comment">// startTheWorldWithSema and stopTheWorldWithSema.</span>
<span id="L1444" class="ln">  1444&nbsp;&nbsp;</span><span class="comment">// Holding worldsema causes any other goroutines invoking</span>
<span id="L1445" class="ln">  1445&nbsp;&nbsp;</span><span class="comment">// stopTheWorld to block.</span>
<span id="L1446" class="ln">  1446&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1447" class="ln">  1447&nbsp;&nbsp;</span><span class="comment">// Returns the STW context. When starting the world, this context must be</span>
<span id="L1448" class="ln">  1448&nbsp;&nbsp;</span><span class="comment">// passed to startTheWorldWithSema.</span>
<span id="L1449" class="ln">  1449&nbsp;&nbsp;</span>func stopTheWorldWithSema(reason stwReason) worldStop {
<span id="L1450" class="ln">  1450&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L1451" class="ln">  1451&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L1452" class="ln">  1452&nbsp;&nbsp;</span>		trace.STWStart(reason)
<span id="L1453" class="ln">  1453&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L1454" class="ln">  1454&nbsp;&nbsp;</span>	}
<span id="L1455" class="ln">  1455&nbsp;&nbsp;</span>	gp := getg()
<span id="L1456" class="ln">  1456&nbsp;&nbsp;</span>
<span id="L1457" class="ln">  1457&nbsp;&nbsp;</span>	<span class="comment">// If we hold a lock, then we won&#39;t be able to stop another M</span>
<span id="L1458" class="ln">  1458&nbsp;&nbsp;</span>	<span class="comment">// that is blocked trying to acquire the lock.</span>
<span id="L1459" class="ln">  1459&nbsp;&nbsp;</span>	if gp.m.locks &gt; 0 {
<span id="L1460" class="ln">  1460&nbsp;&nbsp;</span>		throw(&#34;stopTheWorld: holding locks&#34;)
<span id="L1461" class="ln">  1461&nbsp;&nbsp;</span>	}
<span id="L1462" class="ln">  1462&nbsp;&nbsp;</span>
<span id="L1463" class="ln">  1463&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L1464" class="ln">  1464&nbsp;&nbsp;</span>	start := nanotime() <span class="comment">// exclude time waiting for sched.lock from start and total time metrics.</span>
<span id="L1465" class="ln">  1465&nbsp;&nbsp;</span>	sched.stopwait = gomaxprocs
<span id="L1466" class="ln">  1466&nbsp;&nbsp;</span>	sched.gcwaiting.Store(true)
<span id="L1467" class="ln">  1467&nbsp;&nbsp;</span>	preemptall()
<span id="L1468" class="ln">  1468&nbsp;&nbsp;</span>	<span class="comment">// stop current P</span>
<span id="L1469" class="ln">  1469&nbsp;&nbsp;</span>	gp.m.p.ptr().status = _Pgcstop <span class="comment">// Pgcstop is only diagnostic.</span>
<span id="L1470" class="ln">  1470&nbsp;&nbsp;</span>	sched.stopwait--
<span id="L1471" class="ln">  1471&nbsp;&nbsp;</span>	<span class="comment">// try to retake all P&#39;s in Psyscall status</span>
<span id="L1472" class="ln">  1472&nbsp;&nbsp;</span>	trace = traceAcquire()
<span id="L1473" class="ln">  1473&nbsp;&nbsp;</span>	for _, pp := range allp {
<span id="L1474" class="ln">  1474&nbsp;&nbsp;</span>		s := pp.status
<span id="L1475" class="ln">  1475&nbsp;&nbsp;</span>		if s == _Psyscall &amp;&amp; atomic.Cas(&amp;pp.status, s, _Pgcstop) {
<span id="L1476" class="ln">  1476&nbsp;&nbsp;</span>			if trace.ok() {
<span id="L1477" class="ln">  1477&nbsp;&nbsp;</span>				trace.GoSysBlock(pp)
<span id="L1478" class="ln">  1478&nbsp;&nbsp;</span>				trace.ProcSteal(pp, false)
<span id="L1479" class="ln">  1479&nbsp;&nbsp;</span>			}
<span id="L1480" class="ln">  1480&nbsp;&nbsp;</span>			pp.syscalltick++
<span id="L1481" class="ln">  1481&nbsp;&nbsp;</span>			sched.stopwait--
<span id="L1482" class="ln">  1482&nbsp;&nbsp;</span>		}
<span id="L1483" class="ln">  1483&nbsp;&nbsp;</span>	}
<span id="L1484" class="ln">  1484&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L1485" class="ln">  1485&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L1486" class="ln">  1486&nbsp;&nbsp;</span>	}
<span id="L1487" class="ln">  1487&nbsp;&nbsp;</span>
<span id="L1488" class="ln">  1488&nbsp;&nbsp;</span>	<span class="comment">// stop idle P&#39;s</span>
<span id="L1489" class="ln">  1489&nbsp;&nbsp;</span>	now := nanotime()
<span id="L1490" class="ln">  1490&nbsp;&nbsp;</span>	for {
<span id="L1491" class="ln">  1491&nbsp;&nbsp;</span>		pp, _ := pidleget(now)
<span id="L1492" class="ln">  1492&nbsp;&nbsp;</span>		if pp == nil {
<span id="L1493" class="ln">  1493&nbsp;&nbsp;</span>			break
<span id="L1494" class="ln">  1494&nbsp;&nbsp;</span>		}
<span id="L1495" class="ln">  1495&nbsp;&nbsp;</span>		pp.status = _Pgcstop
<span id="L1496" class="ln">  1496&nbsp;&nbsp;</span>		sched.stopwait--
<span id="L1497" class="ln">  1497&nbsp;&nbsp;</span>	}
<span id="L1498" class="ln">  1498&nbsp;&nbsp;</span>	wait := sched.stopwait &gt; 0
<span id="L1499" class="ln">  1499&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L1500" class="ln">  1500&nbsp;&nbsp;</span>
<span id="L1501" class="ln">  1501&nbsp;&nbsp;</span>	<span class="comment">// wait for remaining P&#39;s to stop voluntarily</span>
<span id="L1502" class="ln">  1502&nbsp;&nbsp;</span>	if wait {
<span id="L1503" class="ln">  1503&nbsp;&nbsp;</span>		for {
<span id="L1504" class="ln">  1504&nbsp;&nbsp;</span>			<span class="comment">// wait for 100us, then try to re-preempt in case of any races</span>
<span id="L1505" class="ln">  1505&nbsp;&nbsp;</span>			if notetsleep(&amp;sched.stopnote, 100*1000) {
<span id="L1506" class="ln">  1506&nbsp;&nbsp;</span>				noteclear(&amp;sched.stopnote)
<span id="L1507" class="ln">  1507&nbsp;&nbsp;</span>				break
<span id="L1508" class="ln">  1508&nbsp;&nbsp;</span>			}
<span id="L1509" class="ln">  1509&nbsp;&nbsp;</span>			preemptall()
<span id="L1510" class="ln">  1510&nbsp;&nbsp;</span>		}
<span id="L1511" class="ln">  1511&nbsp;&nbsp;</span>	}
<span id="L1512" class="ln">  1512&nbsp;&nbsp;</span>
<span id="L1513" class="ln">  1513&nbsp;&nbsp;</span>	startTime := nanotime() - start
<span id="L1514" class="ln">  1514&nbsp;&nbsp;</span>	if reason.isGC() {
<span id="L1515" class="ln">  1515&nbsp;&nbsp;</span>		sched.stwStoppingTimeGC.record(startTime)
<span id="L1516" class="ln">  1516&nbsp;&nbsp;</span>	} else {
<span id="L1517" class="ln">  1517&nbsp;&nbsp;</span>		sched.stwStoppingTimeOther.record(startTime)
<span id="L1518" class="ln">  1518&nbsp;&nbsp;</span>	}
<span id="L1519" class="ln">  1519&nbsp;&nbsp;</span>
<span id="L1520" class="ln">  1520&nbsp;&nbsp;</span>	<span class="comment">// sanity checks</span>
<span id="L1521" class="ln">  1521&nbsp;&nbsp;</span>	bad := &#34;&#34;
<span id="L1522" class="ln">  1522&nbsp;&nbsp;</span>	if sched.stopwait != 0 {
<span id="L1523" class="ln">  1523&nbsp;&nbsp;</span>		bad = &#34;stopTheWorld: not stopped (stopwait != 0)&#34;
<span id="L1524" class="ln">  1524&nbsp;&nbsp;</span>	} else {
<span id="L1525" class="ln">  1525&nbsp;&nbsp;</span>		for _, pp := range allp {
<span id="L1526" class="ln">  1526&nbsp;&nbsp;</span>			if pp.status != _Pgcstop {
<span id="L1527" class="ln">  1527&nbsp;&nbsp;</span>				bad = &#34;stopTheWorld: not stopped (status != _Pgcstop)&#34;
<span id="L1528" class="ln">  1528&nbsp;&nbsp;</span>			}
<span id="L1529" class="ln">  1529&nbsp;&nbsp;</span>		}
<span id="L1530" class="ln">  1530&nbsp;&nbsp;</span>	}
<span id="L1531" class="ln">  1531&nbsp;&nbsp;</span>	if freezing.Load() {
<span id="L1532" class="ln">  1532&nbsp;&nbsp;</span>		<span class="comment">// Some other thread is panicking. This can cause the</span>
<span id="L1533" class="ln">  1533&nbsp;&nbsp;</span>		<span class="comment">// sanity checks above to fail if the panic happens in</span>
<span id="L1534" class="ln">  1534&nbsp;&nbsp;</span>		<span class="comment">// the signal handler on a stopped thread. Either way,</span>
<span id="L1535" class="ln">  1535&nbsp;&nbsp;</span>		<span class="comment">// we should halt this thread.</span>
<span id="L1536" class="ln">  1536&nbsp;&nbsp;</span>		lock(&amp;deadlock)
<span id="L1537" class="ln">  1537&nbsp;&nbsp;</span>		lock(&amp;deadlock)
<span id="L1538" class="ln">  1538&nbsp;&nbsp;</span>	}
<span id="L1539" class="ln">  1539&nbsp;&nbsp;</span>	if bad != &#34;&#34; {
<span id="L1540" class="ln">  1540&nbsp;&nbsp;</span>		throw(bad)
<span id="L1541" class="ln">  1541&nbsp;&nbsp;</span>	}
<span id="L1542" class="ln">  1542&nbsp;&nbsp;</span>
<span id="L1543" class="ln">  1543&nbsp;&nbsp;</span>	worldStopped()
<span id="L1544" class="ln">  1544&nbsp;&nbsp;</span>
<span id="L1545" class="ln">  1545&nbsp;&nbsp;</span>	return worldStop{reason: reason, start: start}
<span id="L1546" class="ln">  1546&nbsp;&nbsp;</span>}
<span id="L1547" class="ln">  1547&nbsp;&nbsp;</span>
<span id="L1548" class="ln">  1548&nbsp;&nbsp;</span><span class="comment">// reason is the same STW reason passed to stopTheWorld. start is the start</span>
<span id="L1549" class="ln">  1549&nbsp;&nbsp;</span><span class="comment">// time returned by stopTheWorld.</span>
<span id="L1550" class="ln">  1550&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1551" class="ln">  1551&nbsp;&nbsp;</span><span class="comment">// now is the current time; prefer to pass 0 to capture a fresh timestamp.</span>
<span id="L1552" class="ln">  1552&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1553" class="ln">  1553&nbsp;&nbsp;</span><span class="comment">// stattTheWorldWithSema returns now.</span>
<span id="L1554" class="ln">  1554&nbsp;&nbsp;</span>func startTheWorldWithSema(now int64, w worldStop) int64 {
<span id="L1555" class="ln">  1555&nbsp;&nbsp;</span>	assertWorldStopped()
<span id="L1556" class="ln">  1556&nbsp;&nbsp;</span>
<span id="L1557" class="ln">  1557&nbsp;&nbsp;</span>	mp := acquirem() <span class="comment">// disable preemption because it can be holding p in a local var</span>
<span id="L1558" class="ln">  1558&nbsp;&nbsp;</span>	if netpollinited() {
<span id="L1559" class="ln">  1559&nbsp;&nbsp;</span>		list, delta := netpoll(0) <span class="comment">// non-blocking</span>
<span id="L1560" class="ln">  1560&nbsp;&nbsp;</span>		injectglist(&amp;list)
<span id="L1561" class="ln">  1561&nbsp;&nbsp;</span>		netpollAdjustWaiters(delta)
<span id="L1562" class="ln">  1562&nbsp;&nbsp;</span>	}
<span id="L1563" class="ln">  1563&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L1564" class="ln">  1564&nbsp;&nbsp;</span>
<span id="L1565" class="ln">  1565&nbsp;&nbsp;</span>	procs := gomaxprocs
<span id="L1566" class="ln">  1566&nbsp;&nbsp;</span>	if newprocs != 0 {
<span id="L1567" class="ln">  1567&nbsp;&nbsp;</span>		procs = newprocs
<span id="L1568" class="ln">  1568&nbsp;&nbsp;</span>		newprocs = 0
<span id="L1569" class="ln">  1569&nbsp;&nbsp;</span>	}
<span id="L1570" class="ln">  1570&nbsp;&nbsp;</span>	p1 := procresize(procs)
<span id="L1571" class="ln">  1571&nbsp;&nbsp;</span>	sched.gcwaiting.Store(false)
<span id="L1572" class="ln">  1572&nbsp;&nbsp;</span>	if sched.sysmonwait.Load() {
<span id="L1573" class="ln">  1573&nbsp;&nbsp;</span>		sched.sysmonwait.Store(false)
<span id="L1574" class="ln">  1574&nbsp;&nbsp;</span>		notewakeup(&amp;sched.sysmonnote)
<span id="L1575" class="ln">  1575&nbsp;&nbsp;</span>	}
<span id="L1576" class="ln">  1576&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L1577" class="ln">  1577&nbsp;&nbsp;</span>
<span id="L1578" class="ln">  1578&nbsp;&nbsp;</span>	worldStarted()
<span id="L1579" class="ln">  1579&nbsp;&nbsp;</span>
<span id="L1580" class="ln">  1580&nbsp;&nbsp;</span>	for p1 != nil {
<span id="L1581" class="ln">  1581&nbsp;&nbsp;</span>		p := p1
<span id="L1582" class="ln">  1582&nbsp;&nbsp;</span>		p1 = p1.link.ptr()
<span id="L1583" class="ln">  1583&nbsp;&nbsp;</span>		if p.m != 0 {
<span id="L1584" class="ln">  1584&nbsp;&nbsp;</span>			mp := p.m.ptr()
<span id="L1585" class="ln">  1585&nbsp;&nbsp;</span>			p.m = 0
<span id="L1586" class="ln">  1586&nbsp;&nbsp;</span>			if mp.nextp != 0 {
<span id="L1587" class="ln">  1587&nbsp;&nbsp;</span>				throw(&#34;startTheWorld: inconsistent mp-&gt;nextp&#34;)
<span id="L1588" class="ln">  1588&nbsp;&nbsp;</span>			}
<span id="L1589" class="ln">  1589&nbsp;&nbsp;</span>			mp.nextp.set(p)
<span id="L1590" class="ln">  1590&nbsp;&nbsp;</span>			notewakeup(&amp;mp.park)
<span id="L1591" class="ln">  1591&nbsp;&nbsp;</span>		} else {
<span id="L1592" class="ln">  1592&nbsp;&nbsp;</span>			<span class="comment">// Start M to run P.  Do not start another M below.</span>
<span id="L1593" class="ln">  1593&nbsp;&nbsp;</span>			newm(nil, p, -1)
<span id="L1594" class="ln">  1594&nbsp;&nbsp;</span>		}
<span id="L1595" class="ln">  1595&nbsp;&nbsp;</span>	}
<span id="L1596" class="ln">  1596&nbsp;&nbsp;</span>
<span id="L1597" class="ln">  1597&nbsp;&nbsp;</span>	<span class="comment">// Capture start-the-world time before doing clean-up tasks.</span>
<span id="L1598" class="ln">  1598&nbsp;&nbsp;</span>	if now == 0 {
<span id="L1599" class="ln">  1599&nbsp;&nbsp;</span>		now = nanotime()
<span id="L1600" class="ln">  1600&nbsp;&nbsp;</span>	}
<span id="L1601" class="ln">  1601&nbsp;&nbsp;</span>	totalTime := now - w.start
<span id="L1602" class="ln">  1602&nbsp;&nbsp;</span>	if w.reason.isGC() {
<span id="L1603" class="ln">  1603&nbsp;&nbsp;</span>		sched.stwTotalTimeGC.record(totalTime)
<span id="L1604" class="ln">  1604&nbsp;&nbsp;</span>	} else {
<span id="L1605" class="ln">  1605&nbsp;&nbsp;</span>		sched.stwTotalTimeOther.record(totalTime)
<span id="L1606" class="ln">  1606&nbsp;&nbsp;</span>	}
<span id="L1607" class="ln">  1607&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L1608" class="ln">  1608&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L1609" class="ln">  1609&nbsp;&nbsp;</span>		trace.STWDone()
<span id="L1610" class="ln">  1610&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L1611" class="ln">  1611&nbsp;&nbsp;</span>	}
<span id="L1612" class="ln">  1612&nbsp;&nbsp;</span>
<span id="L1613" class="ln">  1613&nbsp;&nbsp;</span>	<span class="comment">// Wakeup an additional proc in case we have excessive runnable goroutines</span>
<span id="L1614" class="ln">  1614&nbsp;&nbsp;</span>	<span class="comment">// in local queues or in the global queue. If we don&#39;t, the proc will park itself.</span>
<span id="L1615" class="ln">  1615&nbsp;&nbsp;</span>	<span class="comment">// If we have lots of excessive work, resetspinning will unpark additional procs as necessary.</span>
<span id="L1616" class="ln">  1616&nbsp;&nbsp;</span>	wakep()
<span id="L1617" class="ln">  1617&nbsp;&nbsp;</span>
<span id="L1618" class="ln">  1618&nbsp;&nbsp;</span>	releasem(mp)
<span id="L1619" class="ln">  1619&nbsp;&nbsp;</span>
<span id="L1620" class="ln">  1620&nbsp;&nbsp;</span>	return now
<span id="L1621" class="ln">  1621&nbsp;&nbsp;</span>}
<span id="L1622" class="ln">  1622&nbsp;&nbsp;</span>
<span id="L1623" class="ln">  1623&nbsp;&nbsp;</span><span class="comment">// usesLibcall indicates whether this runtime performs system calls</span>
<span id="L1624" class="ln">  1624&nbsp;&nbsp;</span><span class="comment">// via libcall.</span>
<span id="L1625" class="ln">  1625&nbsp;&nbsp;</span>func usesLibcall() bool {
<span id="L1626" class="ln">  1626&nbsp;&nbsp;</span>	switch GOOS {
<span id="L1627" class="ln">  1627&nbsp;&nbsp;</span>	case &#34;aix&#34;, &#34;darwin&#34;, &#34;illumos&#34;, &#34;ios&#34;, &#34;solaris&#34;, &#34;windows&#34;:
<span id="L1628" class="ln">  1628&nbsp;&nbsp;</span>		return true
<span id="L1629" class="ln">  1629&nbsp;&nbsp;</span>	case &#34;openbsd&#34;:
<span id="L1630" class="ln">  1630&nbsp;&nbsp;</span>		return GOARCH != &#34;mips64&#34;
<span id="L1631" class="ln">  1631&nbsp;&nbsp;</span>	}
<span id="L1632" class="ln">  1632&nbsp;&nbsp;</span>	return false
<span id="L1633" class="ln">  1633&nbsp;&nbsp;</span>}
<span id="L1634" class="ln">  1634&nbsp;&nbsp;</span>
<span id="L1635" class="ln">  1635&nbsp;&nbsp;</span><span class="comment">// mStackIsSystemAllocated indicates whether this runtime starts on a</span>
<span id="L1636" class="ln">  1636&nbsp;&nbsp;</span><span class="comment">// system-allocated stack.</span>
<span id="L1637" class="ln">  1637&nbsp;&nbsp;</span>func mStackIsSystemAllocated() bool {
<span id="L1638" class="ln">  1638&nbsp;&nbsp;</span>	switch GOOS {
<span id="L1639" class="ln">  1639&nbsp;&nbsp;</span>	case &#34;aix&#34;, &#34;darwin&#34;, &#34;plan9&#34;, &#34;illumos&#34;, &#34;ios&#34;, &#34;solaris&#34;, &#34;windows&#34;:
<span id="L1640" class="ln">  1640&nbsp;&nbsp;</span>		return true
<span id="L1641" class="ln">  1641&nbsp;&nbsp;</span>	case &#34;openbsd&#34;:
<span id="L1642" class="ln">  1642&nbsp;&nbsp;</span>		return GOARCH != &#34;mips64&#34;
<span id="L1643" class="ln">  1643&nbsp;&nbsp;</span>	}
<span id="L1644" class="ln">  1644&nbsp;&nbsp;</span>	return false
<span id="L1645" class="ln">  1645&nbsp;&nbsp;</span>}
<span id="L1646" class="ln">  1646&nbsp;&nbsp;</span>
<span id="L1647" class="ln">  1647&nbsp;&nbsp;</span><span class="comment">// mstart is the entry-point for new Ms.</span>
<span id="L1648" class="ln">  1648&nbsp;&nbsp;</span><span class="comment">// It is written in assembly, uses ABI0, is marked TOPFRAME, and calls mstart0.</span>
<span id="L1649" class="ln">  1649&nbsp;&nbsp;</span>func mstart()
<span id="L1650" class="ln">  1650&nbsp;&nbsp;</span>
<span id="L1651" class="ln">  1651&nbsp;&nbsp;</span><span class="comment">// mstart0 is the Go entry-point for new Ms.</span>
<span id="L1652" class="ln">  1652&nbsp;&nbsp;</span><span class="comment">// This must not split the stack because we may not even have stack</span>
<span id="L1653" class="ln">  1653&nbsp;&nbsp;</span><span class="comment">// bounds set up yet.</span>
<span id="L1654" class="ln">  1654&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1655" class="ln">  1655&nbsp;&nbsp;</span><span class="comment">// May run during STW (because it doesn&#39;t have a P yet), so write</span>
<span id="L1656" class="ln">  1656&nbsp;&nbsp;</span><span class="comment">// barriers are not allowed.</span>
<span id="L1657" class="ln">  1657&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1658" class="ln">  1658&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L1659" class="ln">  1659&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L1660" class="ln">  1660&nbsp;&nbsp;</span>func mstart0() {
<span id="L1661" class="ln">  1661&nbsp;&nbsp;</span>	gp := getg()
<span id="L1662" class="ln">  1662&nbsp;&nbsp;</span>
<span id="L1663" class="ln">  1663&nbsp;&nbsp;</span>	osStack := gp.stack.lo == 0
<span id="L1664" class="ln">  1664&nbsp;&nbsp;</span>	if osStack {
<span id="L1665" class="ln">  1665&nbsp;&nbsp;</span>		<span class="comment">// Initialize stack bounds from system stack.</span>
<span id="L1666" class="ln">  1666&nbsp;&nbsp;</span>		<span class="comment">// Cgo may have left stack size in stack.hi.</span>
<span id="L1667" class="ln">  1667&nbsp;&nbsp;</span>		<span class="comment">// minit may update the stack bounds.</span>
<span id="L1668" class="ln">  1668&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L1669" class="ln">  1669&nbsp;&nbsp;</span>		<span class="comment">// Note: these bounds may not be very accurate.</span>
<span id="L1670" class="ln">  1670&nbsp;&nbsp;</span>		<span class="comment">// We set hi to &amp;size, but there are things above</span>
<span id="L1671" class="ln">  1671&nbsp;&nbsp;</span>		<span class="comment">// it. The 1024 is supposed to compensate this,</span>
<span id="L1672" class="ln">  1672&nbsp;&nbsp;</span>		<span class="comment">// but is somewhat arbitrary.</span>
<span id="L1673" class="ln">  1673&nbsp;&nbsp;</span>		size := gp.stack.hi
<span id="L1674" class="ln">  1674&nbsp;&nbsp;</span>		if size == 0 {
<span id="L1675" class="ln">  1675&nbsp;&nbsp;</span>			size = 16384 * sys.StackGuardMultiplier
<span id="L1676" class="ln">  1676&nbsp;&nbsp;</span>		}
<span id="L1677" class="ln">  1677&nbsp;&nbsp;</span>		gp.stack.hi = uintptr(noescape(unsafe.Pointer(&amp;size)))
<span id="L1678" class="ln">  1678&nbsp;&nbsp;</span>		gp.stack.lo = gp.stack.hi - size + 1024
<span id="L1679" class="ln">  1679&nbsp;&nbsp;</span>	}
<span id="L1680" class="ln">  1680&nbsp;&nbsp;</span>	<span class="comment">// Initialize stack guard so that we can start calling regular</span>
<span id="L1681" class="ln">  1681&nbsp;&nbsp;</span>	<span class="comment">// Go code.</span>
<span id="L1682" class="ln">  1682&nbsp;&nbsp;</span>	gp.stackguard0 = gp.stack.lo + stackGuard
<span id="L1683" class="ln">  1683&nbsp;&nbsp;</span>	<span class="comment">// This is the g0, so we can also call go:systemstack</span>
<span id="L1684" class="ln">  1684&nbsp;&nbsp;</span>	<span class="comment">// functions, which check stackguard1.</span>
<span id="L1685" class="ln">  1685&nbsp;&nbsp;</span>	gp.stackguard1 = gp.stackguard0
<span id="L1686" class="ln">  1686&nbsp;&nbsp;</span>	mstart1()
<span id="L1687" class="ln">  1687&nbsp;&nbsp;</span>
<span id="L1688" class="ln">  1688&nbsp;&nbsp;</span>	<span class="comment">// Exit this thread.</span>
<span id="L1689" class="ln">  1689&nbsp;&nbsp;</span>	if mStackIsSystemAllocated() {
<span id="L1690" class="ln">  1690&nbsp;&nbsp;</span>		<span class="comment">// Windows, Solaris, illumos, Darwin, AIX and Plan 9 always system-allocate</span>
<span id="L1691" class="ln">  1691&nbsp;&nbsp;</span>		<span class="comment">// the stack, but put it in gp.stack before mstart,</span>
<span id="L1692" class="ln">  1692&nbsp;&nbsp;</span>		<span class="comment">// so the logic above hasn&#39;t set osStack yet.</span>
<span id="L1693" class="ln">  1693&nbsp;&nbsp;</span>		osStack = true
<span id="L1694" class="ln">  1694&nbsp;&nbsp;</span>	}
<span id="L1695" class="ln">  1695&nbsp;&nbsp;</span>	mexit(osStack)
<span id="L1696" class="ln">  1696&nbsp;&nbsp;</span>}
<span id="L1697" class="ln">  1697&nbsp;&nbsp;</span>
<span id="L1698" class="ln">  1698&nbsp;&nbsp;</span><span class="comment">// The go:noinline is to guarantee the getcallerpc/getcallersp below are safe,</span>
<span id="L1699" class="ln">  1699&nbsp;&nbsp;</span><span class="comment">// so that we can set up g0.sched to return to the call of mstart1 above.</span>
<span id="L1700" class="ln">  1700&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1701" class="ln">  1701&nbsp;&nbsp;</span><span class="comment">//go:noinline</span>
<span id="L1702" class="ln">  1702&nbsp;&nbsp;</span>func mstart1() {
<span id="L1703" class="ln">  1703&nbsp;&nbsp;</span>	gp := getg()
<span id="L1704" class="ln">  1704&nbsp;&nbsp;</span>
<span id="L1705" class="ln">  1705&nbsp;&nbsp;</span>	if gp != gp.m.g0 {
<span id="L1706" class="ln">  1706&nbsp;&nbsp;</span>		throw(&#34;bad runtime·mstart&#34;)
<span id="L1707" class="ln">  1707&nbsp;&nbsp;</span>	}
<span id="L1708" class="ln">  1708&nbsp;&nbsp;</span>
<span id="L1709" class="ln">  1709&nbsp;&nbsp;</span>	<span class="comment">// Set up m.g0.sched as a label returning to just</span>
<span id="L1710" class="ln">  1710&nbsp;&nbsp;</span>	<span class="comment">// after the mstart1 call in mstart0 above, for use by goexit0 and mcall.</span>
<span id="L1711" class="ln">  1711&nbsp;&nbsp;</span>	<span class="comment">// We&#39;re never coming back to mstart1 after we call schedule,</span>
<span id="L1712" class="ln">  1712&nbsp;&nbsp;</span>	<span class="comment">// so other calls can reuse the current frame.</span>
<span id="L1713" class="ln">  1713&nbsp;&nbsp;</span>	<span class="comment">// And goexit0 does a gogo that needs to return from mstart1</span>
<span id="L1714" class="ln">  1714&nbsp;&nbsp;</span>	<span class="comment">// and let mstart0 exit the thread.</span>
<span id="L1715" class="ln">  1715&nbsp;&nbsp;</span>	gp.sched.g = guintptr(unsafe.Pointer(gp))
<span id="L1716" class="ln">  1716&nbsp;&nbsp;</span>	gp.sched.pc = getcallerpc()
<span id="L1717" class="ln">  1717&nbsp;&nbsp;</span>	gp.sched.sp = getcallersp()
<span id="L1718" class="ln">  1718&nbsp;&nbsp;</span>
<span id="L1719" class="ln">  1719&nbsp;&nbsp;</span>	asminit()
<span id="L1720" class="ln">  1720&nbsp;&nbsp;</span>	minit()
<span id="L1721" class="ln">  1721&nbsp;&nbsp;</span>
<span id="L1722" class="ln">  1722&nbsp;&nbsp;</span>	<span class="comment">// Install signal handlers; after minit so that minit can</span>
<span id="L1723" class="ln">  1723&nbsp;&nbsp;</span>	<span class="comment">// prepare the thread to be able to handle the signals.</span>
<span id="L1724" class="ln">  1724&nbsp;&nbsp;</span>	if gp.m == &amp;m0 {
<span id="L1725" class="ln">  1725&nbsp;&nbsp;</span>		mstartm0()
<span id="L1726" class="ln">  1726&nbsp;&nbsp;</span>	}
<span id="L1727" class="ln">  1727&nbsp;&nbsp;</span>
<span id="L1728" class="ln">  1728&nbsp;&nbsp;</span>	if fn := gp.m.mstartfn; fn != nil {
<span id="L1729" class="ln">  1729&nbsp;&nbsp;</span>		fn()
<span id="L1730" class="ln">  1730&nbsp;&nbsp;</span>	}
<span id="L1731" class="ln">  1731&nbsp;&nbsp;</span>
<span id="L1732" class="ln">  1732&nbsp;&nbsp;</span>	if gp.m != &amp;m0 {
<span id="L1733" class="ln">  1733&nbsp;&nbsp;</span>		acquirep(gp.m.nextp.ptr())
<span id="L1734" class="ln">  1734&nbsp;&nbsp;</span>		gp.m.nextp = 0
<span id="L1735" class="ln">  1735&nbsp;&nbsp;</span>	}
<span id="L1736" class="ln">  1736&nbsp;&nbsp;</span>	schedule()
<span id="L1737" class="ln">  1737&nbsp;&nbsp;</span>}
<span id="L1738" class="ln">  1738&nbsp;&nbsp;</span>
<span id="L1739" class="ln">  1739&nbsp;&nbsp;</span><span class="comment">// mstartm0 implements part of mstart1 that only runs on the m0.</span>
<span id="L1740" class="ln">  1740&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1741" class="ln">  1741&nbsp;&nbsp;</span><span class="comment">// Write barriers are allowed here because we know the GC can&#39;t be</span>
<span id="L1742" class="ln">  1742&nbsp;&nbsp;</span><span class="comment">// running yet, so they&#39;ll be no-ops.</span>
<span id="L1743" class="ln">  1743&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1744" class="ln">  1744&nbsp;&nbsp;</span><span class="comment">//go:yeswritebarrierrec</span>
<span id="L1745" class="ln">  1745&nbsp;&nbsp;</span>func mstartm0() {
<span id="L1746" class="ln">  1746&nbsp;&nbsp;</span>	<span class="comment">// Create an extra M for callbacks on threads not created by Go.</span>
<span id="L1747" class="ln">  1747&nbsp;&nbsp;</span>	<span class="comment">// An extra M is also needed on Windows for callbacks created by</span>
<span id="L1748" class="ln">  1748&nbsp;&nbsp;</span>	<span class="comment">// syscall.NewCallback. See issue #6751 for details.</span>
<span id="L1749" class="ln">  1749&nbsp;&nbsp;</span>	if (iscgo || GOOS == &#34;windows&#34;) &amp;&amp; !cgoHasExtraM {
<span id="L1750" class="ln">  1750&nbsp;&nbsp;</span>		cgoHasExtraM = true
<span id="L1751" class="ln">  1751&nbsp;&nbsp;</span>		newextram()
<span id="L1752" class="ln">  1752&nbsp;&nbsp;</span>	}
<span id="L1753" class="ln">  1753&nbsp;&nbsp;</span>	initsig(false)
<span id="L1754" class="ln">  1754&nbsp;&nbsp;</span>}
<span id="L1755" class="ln">  1755&nbsp;&nbsp;</span>
<span id="L1756" class="ln">  1756&nbsp;&nbsp;</span><span class="comment">// mPark causes a thread to park itself, returning once woken.</span>
<span id="L1757" class="ln">  1757&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1758" class="ln">  1758&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L1759" class="ln">  1759&nbsp;&nbsp;</span>func mPark() {
<span id="L1760" class="ln">  1760&nbsp;&nbsp;</span>	gp := getg()
<span id="L1761" class="ln">  1761&nbsp;&nbsp;</span>	notesleep(&amp;gp.m.park)
<span id="L1762" class="ln">  1762&nbsp;&nbsp;</span>	noteclear(&amp;gp.m.park)
<span id="L1763" class="ln">  1763&nbsp;&nbsp;</span>}
<span id="L1764" class="ln">  1764&nbsp;&nbsp;</span>
<span id="L1765" class="ln">  1765&nbsp;&nbsp;</span><span class="comment">// mexit tears down and exits the current thread.</span>
<span id="L1766" class="ln">  1766&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1767" class="ln">  1767&nbsp;&nbsp;</span><span class="comment">// Don&#39;t call this directly to exit the thread, since it must run at</span>
<span id="L1768" class="ln">  1768&nbsp;&nbsp;</span><span class="comment">// the top of the thread stack. Instead, use gogo(&amp;gp.m.g0.sched) to</span>
<span id="L1769" class="ln">  1769&nbsp;&nbsp;</span><span class="comment">// unwind the stack to the point that exits the thread.</span>
<span id="L1770" class="ln">  1770&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1771" class="ln">  1771&nbsp;&nbsp;</span><span class="comment">// It is entered with m.p != nil, so write barriers are allowed. It</span>
<span id="L1772" class="ln">  1772&nbsp;&nbsp;</span><span class="comment">// will release the P before exiting.</span>
<span id="L1773" class="ln">  1773&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1774" class="ln">  1774&nbsp;&nbsp;</span><span class="comment">//go:yeswritebarrierrec</span>
<span id="L1775" class="ln">  1775&nbsp;&nbsp;</span>func mexit(osStack bool) {
<span id="L1776" class="ln">  1776&nbsp;&nbsp;</span>	mp := getg().m
<span id="L1777" class="ln">  1777&nbsp;&nbsp;</span>
<span id="L1778" class="ln">  1778&nbsp;&nbsp;</span>	if mp == &amp;m0 {
<span id="L1779" class="ln">  1779&nbsp;&nbsp;</span>		<span class="comment">// This is the main thread. Just wedge it.</span>
<span id="L1780" class="ln">  1780&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L1781" class="ln">  1781&nbsp;&nbsp;</span>		<span class="comment">// On Linux, exiting the main thread puts the process</span>
<span id="L1782" class="ln">  1782&nbsp;&nbsp;</span>		<span class="comment">// into a non-waitable zombie state. On Plan 9,</span>
<span id="L1783" class="ln">  1783&nbsp;&nbsp;</span>		<span class="comment">// exiting the main thread unblocks wait even though</span>
<span id="L1784" class="ln">  1784&nbsp;&nbsp;</span>		<span class="comment">// other threads are still running. On Solaris we can</span>
<span id="L1785" class="ln">  1785&nbsp;&nbsp;</span>		<span class="comment">// neither exitThread nor return from mstart. Other</span>
<span id="L1786" class="ln">  1786&nbsp;&nbsp;</span>		<span class="comment">// bad things probably happen on other platforms.</span>
<span id="L1787" class="ln">  1787&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L1788" class="ln">  1788&nbsp;&nbsp;</span>		<span class="comment">// We could try to clean up this M more before wedging</span>
<span id="L1789" class="ln">  1789&nbsp;&nbsp;</span>		<span class="comment">// it, but that complicates signal handling.</span>
<span id="L1790" class="ln">  1790&nbsp;&nbsp;</span>		handoffp(releasep())
<span id="L1791" class="ln">  1791&nbsp;&nbsp;</span>		lock(&amp;sched.lock)
<span id="L1792" class="ln">  1792&nbsp;&nbsp;</span>		sched.nmfreed++
<span id="L1793" class="ln">  1793&nbsp;&nbsp;</span>		checkdead()
<span id="L1794" class="ln">  1794&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L1795" class="ln">  1795&nbsp;&nbsp;</span>		mPark()
<span id="L1796" class="ln">  1796&nbsp;&nbsp;</span>		throw(&#34;locked m0 woke up&#34;)
<span id="L1797" class="ln">  1797&nbsp;&nbsp;</span>	}
<span id="L1798" class="ln">  1798&nbsp;&nbsp;</span>
<span id="L1799" class="ln">  1799&nbsp;&nbsp;</span>	sigblock(true)
<span id="L1800" class="ln">  1800&nbsp;&nbsp;</span>	unminit()
<span id="L1801" class="ln">  1801&nbsp;&nbsp;</span>
<span id="L1802" class="ln">  1802&nbsp;&nbsp;</span>	<span class="comment">// Free the gsignal stack.</span>
<span id="L1803" class="ln">  1803&nbsp;&nbsp;</span>	if mp.gsignal != nil {
<span id="L1804" class="ln">  1804&nbsp;&nbsp;</span>		stackfree(mp.gsignal.stack)
<span id="L1805" class="ln">  1805&nbsp;&nbsp;</span>		<span class="comment">// On some platforms, when calling into VDSO (e.g. nanotime)</span>
<span id="L1806" class="ln">  1806&nbsp;&nbsp;</span>		<span class="comment">// we store our g on the gsignal stack, if there is one.</span>
<span id="L1807" class="ln">  1807&nbsp;&nbsp;</span>		<span class="comment">// Now the stack is freed, unlink it from the m, so we</span>
<span id="L1808" class="ln">  1808&nbsp;&nbsp;</span>		<span class="comment">// won&#39;t write to it when calling VDSO code.</span>
<span id="L1809" class="ln">  1809&nbsp;&nbsp;</span>		mp.gsignal = nil
<span id="L1810" class="ln">  1810&nbsp;&nbsp;</span>	}
<span id="L1811" class="ln">  1811&nbsp;&nbsp;</span>
<span id="L1812" class="ln">  1812&nbsp;&nbsp;</span>	<span class="comment">// Remove m from allm.</span>
<span id="L1813" class="ln">  1813&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L1814" class="ln">  1814&nbsp;&nbsp;</span>	for pprev := &amp;allm; *pprev != nil; pprev = &amp;(*pprev).alllink {
<span id="L1815" class="ln">  1815&nbsp;&nbsp;</span>		if *pprev == mp {
<span id="L1816" class="ln">  1816&nbsp;&nbsp;</span>			*pprev = mp.alllink
<span id="L1817" class="ln">  1817&nbsp;&nbsp;</span>			goto found
<span id="L1818" class="ln">  1818&nbsp;&nbsp;</span>		}
<span id="L1819" class="ln">  1819&nbsp;&nbsp;</span>	}
<span id="L1820" class="ln">  1820&nbsp;&nbsp;</span>	throw(&#34;m not found in allm&#34;)
<span id="L1821" class="ln">  1821&nbsp;&nbsp;</span>found:
<span id="L1822" class="ln">  1822&nbsp;&nbsp;</span>	<span class="comment">// Events must not be traced after this point.</span>
<span id="L1823" class="ln">  1823&nbsp;&nbsp;</span>
<span id="L1824" class="ln">  1824&nbsp;&nbsp;</span>	<span class="comment">// Delay reaping m until it&#39;s done with the stack.</span>
<span id="L1825" class="ln">  1825&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1826" class="ln">  1826&nbsp;&nbsp;</span>	<span class="comment">// Put mp on the free list, though it will not be reaped while freeWait</span>
<span id="L1827" class="ln">  1827&nbsp;&nbsp;</span>	<span class="comment">// is freeMWait. mp is no longer reachable via allm, so even if it is</span>
<span id="L1828" class="ln">  1828&nbsp;&nbsp;</span>	<span class="comment">// on an OS stack, we must keep a reference to mp alive so that the GC</span>
<span id="L1829" class="ln">  1829&nbsp;&nbsp;</span>	<span class="comment">// doesn&#39;t free mp while we are still using it.</span>
<span id="L1830" class="ln">  1830&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1831" class="ln">  1831&nbsp;&nbsp;</span>	<span class="comment">// Note that the free list must not be linked through alllink because</span>
<span id="L1832" class="ln">  1832&nbsp;&nbsp;</span>	<span class="comment">// some functions walk allm without locking, so may be using alllink.</span>
<span id="L1833" class="ln">  1833&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1834" class="ln">  1834&nbsp;&nbsp;</span>	<span class="comment">// N.B. It&#39;s important that the M appears on the free list simultaneously</span>
<span id="L1835" class="ln">  1835&nbsp;&nbsp;</span>	<span class="comment">// with it being removed so that the tracer can find it.</span>
<span id="L1836" class="ln">  1836&nbsp;&nbsp;</span>	mp.freeWait.Store(freeMWait)
<span id="L1837" class="ln">  1837&nbsp;&nbsp;</span>	mp.freelink = sched.freem
<span id="L1838" class="ln">  1838&nbsp;&nbsp;</span>	sched.freem = mp
<span id="L1839" class="ln">  1839&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L1840" class="ln">  1840&nbsp;&nbsp;</span>
<span id="L1841" class="ln">  1841&nbsp;&nbsp;</span>	atomic.Xadd64(&amp;ncgocall, int64(mp.ncgocall))
<span id="L1842" class="ln">  1842&nbsp;&nbsp;</span>	sched.totalRuntimeLockWaitTime.Add(mp.mLockProfile.waitTime.Load())
<span id="L1843" class="ln">  1843&nbsp;&nbsp;</span>
<span id="L1844" class="ln">  1844&nbsp;&nbsp;</span>	<span class="comment">// Release the P.</span>
<span id="L1845" class="ln">  1845&nbsp;&nbsp;</span>	handoffp(releasep())
<span id="L1846" class="ln">  1846&nbsp;&nbsp;</span>	<span class="comment">// After this point we must not have write barriers.</span>
<span id="L1847" class="ln">  1847&nbsp;&nbsp;</span>
<span id="L1848" class="ln">  1848&nbsp;&nbsp;</span>	<span class="comment">// Invoke the deadlock detector. This must happen after</span>
<span id="L1849" class="ln">  1849&nbsp;&nbsp;</span>	<span class="comment">// handoffp because it may have started a new M to take our</span>
<span id="L1850" class="ln">  1850&nbsp;&nbsp;</span>	<span class="comment">// P&#39;s work.</span>
<span id="L1851" class="ln">  1851&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L1852" class="ln">  1852&nbsp;&nbsp;</span>	sched.nmfreed++
<span id="L1853" class="ln">  1853&nbsp;&nbsp;</span>	checkdead()
<span id="L1854" class="ln">  1854&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L1855" class="ln">  1855&nbsp;&nbsp;</span>
<span id="L1856" class="ln">  1856&nbsp;&nbsp;</span>	if GOOS == &#34;darwin&#34; || GOOS == &#34;ios&#34; {
<span id="L1857" class="ln">  1857&nbsp;&nbsp;</span>		<span class="comment">// Make sure pendingPreemptSignals is correct when an M exits.</span>
<span id="L1858" class="ln">  1858&nbsp;&nbsp;</span>		<span class="comment">// For #41702.</span>
<span id="L1859" class="ln">  1859&nbsp;&nbsp;</span>		if mp.signalPending.Load() != 0 {
<span id="L1860" class="ln">  1860&nbsp;&nbsp;</span>			pendingPreemptSignals.Add(-1)
<span id="L1861" class="ln">  1861&nbsp;&nbsp;</span>		}
<span id="L1862" class="ln">  1862&nbsp;&nbsp;</span>	}
<span id="L1863" class="ln">  1863&nbsp;&nbsp;</span>
<span id="L1864" class="ln">  1864&nbsp;&nbsp;</span>	<span class="comment">// Destroy all allocated resources. After this is called, we may no</span>
<span id="L1865" class="ln">  1865&nbsp;&nbsp;</span>	<span class="comment">// longer take any locks.</span>
<span id="L1866" class="ln">  1866&nbsp;&nbsp;</span>	mdestroy(mp)
<span id="L1867" class="ln">  1867&nbsp;&nbsp;</span>
<span id="L1868" class="ln">  1868&nbsp;&nbsp;</span>	if osStack {
<span id="L1869" class="ln">  1869&nbsp;&nbsp;</span>		<span class="comment">// No more uses of mp, so it is safe to drop the reference.</span>
<span id="L1870" class="ln">  1870&nbsp;&nbsp;</span>		mp.freeWait.Store(freeMRef)
<span id="L1871" class="ln">  1871&nbsp;&nbsp;</span>
<span id="L1872" class="ln">  1872&nbsp;&nbsp;</span>		<span class="comment">// Return from mstart and let the system thread</span>
<span id="L1873" class="ln">  1873&nbsp;&nbsp;</span>		<span class="comment">// library free the g0 stack and terminate the thread.</span>
<span id="L1874" class="ln">  1874&nbsp;&nbsp;</span>		return
<span id="L1875" class="ln">  1875&nbsp;&nbsp;</span>	}
<span id="L1876" class="ln">  1876&nbsp;&nbsp;</span>
<span id="L1877" class="ln">  1877&nbsp;&nbsp;</span>	<span class="comment">// mstart is the thread&#39;s entry point, so there&#39;s nothing to</span>
<span id="L1878" class="ln">  1878&nbsp;&nbsp;</span>	<span class="comment">// return to. Exit the thread directly. exitThread will clear</span>
<span id="L1879" class="ln">  1879&nbsp;&nbsp;</span>	<span class="comment">// m.freeWait when it&#39;s done with the stack and the m can be</span>
<span id="L1880" class="ln">  1880&nbsp;&nbsp;</span>	<span class="comment">// reaped.</span>
<span id="L1881" class="ln">  1881&nbsp;&nbsp;</span>	exitThread(&amp;mp.freeWait)
<span id="L1882" class="ln">  1882&nbsp;&nbsp;</span>}
<span id="L1883" class="ln">  1883&nbsp;&nbsp;</span>
<span id="L1884" class="ln">  1884&nbsp;&nbsp;</span><span class="comment">// forEachP calls fn(p) for every P p when p reaches a GC safe point.</span>
<span id="L1885" class="ln">  1885&nbsp;&nbsp;</span><span class="comment">// If a P is currently executing code, this will bring the P to a GC</span>
<span id="L1886" class="ln">  1886&nbsp;&nbsp;</span><span class="comment">// safe point and execute fn on that P. If the P is not executing code</span>
<span id="L1887" class="ln">  1887&nbsp;&nbsp;</span><span class="comment">// (it is idle or in a syscall), this will call fn(p) directly while</span>
<span id="L1888" class="ln">  1888&nbsp;&nbsp;</span><span class="comment">// preventing the P from exiting its state. This does not ensure that</span>
<span id="L1889" class="ln">  1889&nbsp;&nbsp;</span><span class="comment">// fn will run on every CPU executing Go code, but it acts as a global</span>
<span id="L1890" class="ln">  1890&nbsp;&nbsp;</span><span class="comment">// memory barrier. GC uses this as a &#34;ragged barrier.&#34;</span>
<span id="L1891" class="ln">  1891&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1892" class="ln">  1892&nbsp;&nbsp;</span><span class="comment">// The caller must hold worldsema. fn must not refer to any</span>
<span id="L1893" class="ln">  1893&nbsp;&nbsp;</span><span class="comment">// part of the current goroutine&#39;s stack, since the GC may move it.</span>
<span id="L1894" class="ln">  1894&nbsp;&nbsp;</span>func forEachP(reason waitReason, fn func(*p)) {
<span id="L1895" class="ln">  1895&nbsp;&nbsp;</span>	systemstack(func() {
<span id="L1896" class="ln">  1896&nbsp;&nbsp;</span>		gp := getg().m.curg
<span id="L1897" class="ln">  1897&nbsp;&nbsp;</span>		<span class="comment">// Mark the user stack as preemptible so that it may be scanned.</span>
<span id="L1898" class="ln">  1898&nbsp;&nbsp;</span>		<span class="comment">// Otherwise, our attempt to force all P&#39;s to a safepoint could</span>
<span id="L1899" class="ln">  1899&nbsp;&nbsp;</span>		<span class="comment">// result in a deadlock as we attempt to preempt a worker that&#39;s</span>
<span id="L1900" class="ln">  1900&nbsp;&nbsp;</span>		<span class="comment">// trying to preempt us (e.g. for a stack scan).</span>
<span id="L1901" class="ln">  1901&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L1902" class="ln">  1902&nbsp;&nbsp;</span>		<span class="comment">// N.B. The execution tracer is not aware of this status</span>
<span id="L1903" class="ln">  1903&nbsp;&nbsp;</span>		<span class="comment">// transition and handles it specially based on the</span>
<span id="L1904" class="ln">  1904&nbsp;&nbsp;</span>		<span class="comment">// wait reason.</span>
<span id="L1905" class="ln">  1905&nbsp;&nbsp;</span>		casGToWaiting(gp, _Grunning, reason)
<span id="L1906" class="ln">  1906&nbsp;&nbsp;</span>		forEachPInternal(fn)
<span id="L1907" class="ln">  1907&nbsp;&nbsp;</span>		casgstatus(gp, _Gwaiting, _Grunning)
<span id="L1908" class="ln">  1908&nbsp;&nbsp;</span>	})
<span id="L1909" class="ln">  1909&nbsp;&nbsp;</span>}
<span id="L1910" class="ln">  1910&nbsp;&nbsp;</span>
<span id="L1911" class="ln">  1911&nbsp;&nbsp;</span><span class="comment">// forEachPInternal calls fn(p) for every P p when p reaches a GC safe point.</span>
<span id="L1912" class="ln">  1912&nbsp;&nbsp;</span><span class="comment">// It is the internal implementation of forEachP.</span>
<span id="L1913" class="ln">  1913&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1914" class="ln">  1914&nbsp;&nbsp;</span><span class="comment">// The caller must hold worldsema and either must ensure that a GC is not</span>
<span id="L1915" class="ln">  1915&nbsp;&nbsp;</span><span class="comment">// running (otherwise this may deadlock with the GC trying to preempt this P)</span>
<span id="L1916" class="ln">  1916&nbsp;&nbsp;</span><span class="comment">// or it must leave its goroutine in a preemptible state before it switches</span>
<span id="L1917" class="ln">  1917&nbsp;&nbsp;</span><span class="comment">// to the systemstack. Due to these restrictions, prefer forEachP when possible.</span>
<span id="L1918" class="ln">  1918&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1919" class="ln">  1919&nbsp;&nbsp;</span><span class="comment">//go:systemstack</span>
<span id="L1920" class="ln">  1920&nbsp;&nbsp;</span>func forEachPInternal(fn func(*p)) {
<span id="L1921" class="ln">  1921&nbsp;&nbsp;</span>	mp := acquirem()
<span id="L1922" class="ln">  1922&nbsp;&nbsp;</span>	pp := getg().m.p.ptr()
<span id="L1923" class="ln">  1923&nbsp;&nbsp;</span>
<span id="L1924" class="ln">  1924&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L1925" class="ln">  1925&nbsp;&nbsp;</span>	if sched.safePointWait != 0 {
<span id="L1926" class="ln">  1926&nbsp;&nbsp;</span>		throw(&#34;forEachP: sched.safePointWait != 0&#34;)
<span id="L1927" class="ln">  1927&nbsp;&nbsp;</span>	}
<span id="L1928" class="ln">  1928&nbsp;&nbsp;</span>	sched.safePointWait = gomaxprocs - 1
<span id="L1929" class="ln">  1929&nbsp;&nbsp;</span>	sched.safePointFn = fn
<span id="L1930" class="ln">  1930&nbsp;&nbsp;</span>
<span id="L1931" class="ln">  1931&nbsp;&nbsp;</span>	<span class="comment">// Ask all Ps to run the safe point function.</span>
<span id="L1932" class="ln">  1932&nbsp;&nbsp;</span>	for _, p2 := range allp {
<span id="L1933" class="ln">  1933&nbsp;&nbsp;</span>		if p2 != pp {
<span id="L1934" class="ln">  1934&nbsp;&nbsp;</span>			atomic.Store(&amp;p2.runSafePointFn, 1)
<span id="L1935" class="ln">  1935&nbsp;&nbsp;</span>		}
<span id="L1936" class="ln">  1936&nbsp;&nbsp;</span>	}
<span id="L1937" class="ln">  1937&nbsp;&nbsp;</span>	preemptall()
<span id="L1938" class="ln">  1938&nbsp;&nbsp;</span>
<span id="L1939" class="ln">  1939&nbsp;&nbsp;</span>	<span class="comment">// Any P entering _Pidle or _Psyscall from now on will observe</span>
<span id="L1940" class="ln">  1940&nbsp;&nbsp;</span>	<span class="comment">// p.runSafePointFn == 1 and will call runSafePointFn when</span>
<span id="L1941" class="ln">  1941&nbsp;&nbsp;</span>	<span class="comment">// changing its status to _Pidle/_Psyscall.</span>
<span id="L1942" class="ln">  1942&nbsp;&nbsp;</span>
<span id="L1943" class="ln">  1943&nbsp;&nbsp;</span>	<span class="comment">// Run safe point function for all idle Ps. sched.pidle will</span>
<span id="L1944" class="ln">  1944&nbsp;&nbsp;</span>	<span class="comment">// not change because we hold sched.lock.</span>
<span id="L1945" class="ln">  1945&nbsp;&nbsp;</span>	for p := sched.pidle.ptr(); p != nil; p = p.link.ptr() {
<span id="L1946" class="ln">  1946&nbsp;&nbsp;</span>		if atomic.Cas(&amp;p.runSafePointFn, 1, 0) {
<span id="L1947" class="ln">  1947&nbsp;&nbsp;</span>			fn(p)
<span id="L1948" class="ln">  1948&nbsp;&nbsp;</span>			sched.safePointWait--
<span id="L1949" class="ln">  1949&nbsp;&nbsp;</span>		}
<span id="L1950" class="ln">  1950&nbsp;&nbsp;</span>	}
<span id="L1951" class="ln">  1951&nbsp;&nbsp;</span>
<span id="L1952" class="ln">  1952&nbsp;&nbsp;</span>	wait := sched.safePointWait &gt; 0
<span id="L1953" class="ln">  1953&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L1954" class="ln">  1954&nbsp;&nbsp;</span>
<span id="L1955" class="ln">  1955&nbsp;&nbsp;</span>	<span class="comment">// Run fn for the current P.</span>
<span id="L1956" class="ln">  1956&nbsp;&nbsp;</span>	fn(pp)
<span id="L1957" class="ln">  1957&nbsp;&nbsp;</span>
<span id="L1958" class="ln">  1958&nbsp;&nbsp;</span>	<span class="comment">// Force Ps currently in _Psyscall into _Pidle and hand them</span>
<span id="L1959" class="ln">  1959&nbsp;&nbsp;</span>	<span class="comment">// off to induce safe point function execution.</span>
<span id="L1960" class="ln">  1960&nbsp;&nbsp;</span>	for _, p2 := range allp {
<span id="L1961" class="ln">  1961&nbsp;&nbsp;</span>		s := p2.status
<span id="L1962" class="ln">  1962&nbsp;&nbsp;</span>
<span id="L1963" class="ln">  1963&nbsp;&nbsp;</span>		<span class="comment">// We need to be fine-grained about tracing here, since handoffp</span>
<span id="L1964" class="ln">  1964&nbsp;&nbsp;</span>		<span class="comment">// might call into the tracer, and the tracer is non-reentrant.</span>
<span id="L1965" class="ln">  1965&nbsp;&nbsp;</span>		trace := traceAcquire()
<span id="L1966" class="ln">  1966&nbsp;&nbsp;</span>		if s == _Psyscall &amp;&amp; p2.runSafePointFn == 1 &amp;&amp; atomic.Cas(&amp;p2.status, s, _Pidle) {
<span id="L1967" class="ln">  1967&nbsp;&nbsp;</span>			if trace.ok() {
<span id="L1968" class="ln">  1968&nbsp;&nbsp;</span>				<span class="comment">// It&#39;s important that we traceRelease before we call handoffp, which may also traceAcquire.</span>
<span id="L1969" class="ln">  1969&nbsp;&nbsp;</span>				trace.GoSysBlock(p2)
<span id="L1970" class="ln">  1970&nbsp;&nbsp;</span>				trace.ProcSteal(p2, false)
<span id="L1971" class="ln">  1971&nbsp;&nbsp;</span>				traceRelease(trace)
<span id="L1972" class="ln">  1972&nbsp;&nbsp;</span>			}
<span id="L1973" class="ln">  1973&nbsp;&nbsp;</span>			p2.syscalltick++
<span id="L1974" class="ln">  1974&nbsp;&nbsp;</span>			handoffp(p2)
<span id="L1975" class="ln">  1975&nbsp;&nbsp;</span>		} else if trace.ok() {
<span id="L1976" class="ln">  1976&nbsp;&nbsp;</span>			traceRelease(trace)
<span id="L1977" class="ln">  1977&nbsp;&nbsp;</span>		}
<span id="L1978" class="ln">  1978&nbsp;&nbsp;</span>	}
<span id="L1979" class="ln">  1979&nbsp;&nbsp;</span>
<span id="L1980" class="ln">  1980&nbsp;&nbsp;</span>	<span class="comment">// Wait for remaining Ps to run fn.</span>
<span id="L1981" class="ln">  1981&nbsp;&nbsp;</span>	if wait {
<span id="L1982" class="ln">  1982&nbsp;&nbsp;</span>		for {
<span id="L1983" class="ln">  1983&nbsp;&nbsp;</span>			<span class="comment">// Wait for 100us, then try to re-preempt in</span>
<span id="L1984" class="ln">  1984&nbsp;&nbsp;</span>			<span class="comment">// case of any races.</span>
<span id="L1985" class="ln">  1985&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L1986" class="ln">  1986&nbsp;&nbsp;</span>			<span class="comment">// Requires system stack.</span>
<span id="L1987" class="ln">  1987&nbsp;&nbsp;</span>			if notetsleep(&amp;sched.safePointNote, 100*1000) {
<span id="L1988" class="ln">  1988&nbsp;&nbsp;</span>				noteclear(&amp;sched.safePointNote)
<span id="L1989" class="ln">  1989&nbsp;&nbsp;</span>				break
<span id="L1990" class="ln">  1990&nbsp;&nbsp;</span>			}
<span id="L1991" class="ln">  1991&nbsp;&nbsp;</span>			preemptall()
<span id="L1992" class="ln">  1992&nbsp;&nbsp;</span>		}
<span id="L1993" class="ln">  1993&nbsp;&nbsp;</span>	}
<span id="L1994" class="ln">  1994&nbsp;&nbsp;</span>	if sched.safePointWait != 0 {
<span id="L1995" class="ln">  1995&nbsp;&nbsp;</span>		throw(&#34;forEachP: not done&#34;)
<span id="L1996" class="ln">  1996&nbsp;&nbsp;</span>	}
<span id="L1997" class="ln">  1997&nbsp;&nbsp;</span>	for _, p2 := range allp {
<span id="L1998" class="ln">  1998&nbsp;&nbsp;</span>		if p2.runSafePointFn != 0 {
<span id="L1999" class="ln">  1999&nbsp;&nbsp;</span>			throw(&#34;forEachP: P did not run fn&#34;)
<span id="L2000" class="ln">  2000&nbsp;&nbsp;</span>		}
<span id="L2001" class="ln">  2001&nbsp;&nbsp;</span>	}
<span id="L2002" class="ln">  2002&nbsp;&nbsp;</span>
<span id="L2003" class="ln">  2003&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L2004" class="ln">  2004&nbsp;&nbsp;</span>	sched.safePointFn = nil
<span id="L2005" class="ln">  2005&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L2006" class="ln">  2006&nbsp;&nbsp;</span>	releasem(mp)
<span id="L2007" class="ln">  2007&nbsp;&nbsp;</span>}
<span id="L2008" class="ln">  2008&nbsp;&nbsp;</span>
<span id="L2009" class="ln">  2009&nbsp;&nbsp;</span><span class="comment">// runSafePointFn runs the safe point function, if any, for this P.</span>
<span id="L2010" class="ln">  2010&nbsp;&nbsp;</span><span class="comment">// This should be called like</span>
<span id="L2011" class="ln">  2011&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2012" class="ln">  2012&nbsp;&nbsp;</span><span class="comment">//	if getg().m.p.runSafePointFn != 0 {</span>
<span id="L2013" class="ln">  2013&nbsp;&nbsp;</span><span class="comment">//	    runSafePointFn()</span>
<span id="L2014" class="ln">  2014&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L2015" class="ln">  2015&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2016" class="ln">  2016&nbsp;&nbsp;</span><span class="comment">// runSafePointFn must be checked on any transition in to _Pidle or</span>
<span id="L2017" class="ln">  2017&nbsp;&nbsp;</span><span class="comment">// _Psyscall to avoid a race where forEachP sees that the P is running</span>
<span id="L2018" class="ln">  2018&nbsp;&nbsp;</span><span class="comment">// just before the P goes into _Pidle/_Psyscall and neither forEachP</span>
<span id="L2019" class="ln">  2019&nbsp;&nbsp;</span><span class="comment">// nor the P run the safe-point function.</span>
<span id="L2020" class="ln">  2020&nbsp;&nbsp;</span>func runSafePointFn() {
<span id="L2021" class="ln">  2021&nbsp;&nbsp;</span>	p := getg().m.p.ptr()
<span id="L2022" class="ln">  2022&nbsp;&nbsp;</span>	<span class="comment">// Resolve the race between forEachP running the safe-point</span>
<span id="L2023" class="ln">  2023&nbsp;&nbsp;</span>	<span class="comment">// function on this P&#39;s behalf and this P running the</span>
<span id="L2024" class="ln">  2024&nbsp;&nbsp;</span>	<span class="comment">// safe-point function directly.</span>
<span id="L2025" class="ln">  2025&nbsp;&nbsp;</span>	if !atomic.Cas(&amp;p.runSafePointFn, 1, 0) {
<span id="L2026" class="ln">  2026&nbsp;&nbsp;</span>		return
<span id="L2027" class="ln">  2027&nbsp;&nbsp;</span>	}
<span id="L2028" class="ln">  2028&nbsp;&nbsp;</span>	sched.safePointFn(p)
<span id="L2029" class="ln">  2029&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L2030" class="ln">  2030&nbsp;&nbsp;</span>	sched.safePointWait--
<span id="L2031" class="ln">  2031&nbsp;&nbsp;</span>	if sched.safePointWait == 0 {
<span id="L2032" class="ln">  2032&nbsp;&nbsp;</span>		notewakeup(&amp;sched.safePointNote)
<span id="L2033" class="ln">  2033&nbsp;&nbsp;</span>	}
<span id="L2034" class="ln">  2034&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L2035" class="ln">  2035&nbsp;&nbsp;</span>}
<span id="L2036" class="ln">  2036&nbsp;&nbsp;</span>
<span id="L2037" class="ln">  2037&nbsp;&nbsp;</span><span class="comment">// When running with cgo, we call _cgo_thread_start</span>
<span id="L2038" class="ln">  2038&nbsp;&nbsp;</span><span class="comment">// to start threads for us so that we can play nicely with</span>
<span id="L2039" class="ln">  2039&nbsp;&nbsp;</span><span class="comment">// foreign code.</span>
<span id="L2040" class="ln">  2040&nbsp;&nbsp;</span>var cgoThreadStart unsafe.Pointer
<span id="L2041" class="ln">  2041&nbsp;&nbsp;</span>
<span id="L2042" class="ln">  2042&nbsp;&nbsp;</span>type cgothreadstart struct {
<span id="L2043" class="ln">  2043&nbsp;&nbsp;</span>	g   guintptr
<span id="L2044" class="ln">  2044&nbsp;&nbsp;</span>	tls *uint64
<span id="L2045" class="ln">  2045&nbsp;&nbsp;</span>	fn  unsafe.Pointer
<span id="L2046" class="ln">  2046&nbsp;&nbsp;</span>}
<span id="L2047" class="ln">  2047&nbsp;&nbsp;</span>
<span id="L2048" class="ln">  2048&nbsp;&nbsp;</span><span class="comment">// Allocate a new m unassociated with any thread.</span>
<span id="L2049" class="ln">  2049&nbsp;&nbsp;</span><span class="comment">// Can use p for allocation context if needed.</span>
<span id="L2050" class="ln">  2050&nbsp;&nbsp;</span><span class="comment">// fn is recorded as the new m&#39;s m.mstartfn.</span>
<span id="L2051" class="ln">  2051&nbsp;&nbsp;</span><span class="comment">// id is optional pre-allocated m ID. Omit by passing -1.</span>
<span id="L2052" class="ln">  2052&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2053" class="ln">  2053&nbsp;&nbsp;</span><span class="comment">// This function is allowed to have write barriers even if the caller</span>
<span id="L2054" class="ln">  2054&nbsp;&nbsp;</span><span class="comment">// isn&#39;t because it borrows pp.</span>
<span id="L2055" class="ln">  2055&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2056" class="ln">  2056&nbsp;&nbsp;</span><span class="comment">//go:yeswritebarrierrec</span>
<span id="L2057" class="ln">  2057&nbsp;&nbsp;</span>func allocm(pp *p, fn func(), id int64) *m {
<span id="L2058" class="ln">  2058&nbsp;&nbsp;</span>	allocmLock.rlock()
<span id="L2059" class="ln">  2059&nbsp;&nbsp;</span>
<span id="L2060" class="ln">  2060&nbsp;&nbsp;</span>	<span class="comment">// The caller owns pp, but we may borrow (i.e., acquirep) it. We must</span>
<span id="L2061" class="ln">  2061&nbsp;&nbsp;</span>	<span class="comment">// disable preemption to ensure it is not stolen, which would make the</span>
<span id="L2062" class="ln">  2062&nbsp;&nbsp;</span>	<span class="comment">// caller lose ownership.</span>
<span id="L2063" class="ln">  2063&nbsp;&nbsp;</span>	acquirem()
<span id="L2064" class="ln">  2064&nbsp;&nbsp;</span>
<span id="L2065" class="ln">  2065&nbsp;&nbsp;</span>	gp := getg()
<span id="L2066" class="ln">  2066&nbsp;&nbsp;</span>	if gp.m.p == 0 {
<span id="L2067" class="ln">  2067&nbsp;&nbsp;</span>		acquirep(pp) <span class="comment">// temporarily borrow p for mallocs in this function</span>
<span id="L2068" class="ln">  2068&nbsp;&nbsp;</span>	}
<span id="L2069" class="ln">  2069&nbsp;&nbsp;</span>
<span id="L2070" class="ln">  2070&nbsp;&nbsp;</span>	<span class="comment">// Release the free M list. We need to do this somewhere and</span>
<span id="L2071" class="ln">  2071&nbsp;&nbsp;</span>	<span class="comment">// this may free up a stack we can use.</span>
<span id="L2072" class="ln">  2072&nbsp;&nbsp;</span>	if sched.freem != nil {
<span id="L2073" class="ln">  2073&nbsp;&nbsp;</span>		lock(&amp;sched.lock)
<span id="L2074" class="ln">  2074&nbsp;&nbsp;</span>		var newList *m
<span id="L2075" class="ln">  2075&nbsp;&nbsp;</span>		for freem := sched.freem; freem != nil; {
<span id="L2076" class="ln">  2076&nbsp;&nbsp;</span>			<span class="comment">// Wait for freeWait to indicate that freem&#39;s stack is unused.</span>
<span id="L2077" class="ln">  2077&nbsp;&nbsp;</span>			wait := freem.freeWait.Load()
<span id="L2078" class="ln">  2078&nbsp;&nbsp;</span>			if wait == freeMWait {
<span id="L2079" class="ln">  2079&nbsp;&nbsp;</span>				next := freem.freelink
<span id="L2080" class="ln">  2080&nbsp;&nbsp;</span>				freem.freelink = newList
<span id="L2081" class="ln">  2081&nbsp;&nbsp;</span>				newList = freem
<span id="L2082" class="ln">  2082&nbsp;&nbsp;</span>				freem = next
<span id="L2083" class="ln">  2083&nbsp;&nbsp;</span>				continue
<span id="L2084" class="ln">  2084&nbsp;&nbsp;</span>			}
<span id="L2085" class="ln">  2085&nbsp;&nbsp;</span>			<span class="comment">// Drop any remaining trace resources.</span>
<span id="L2086" class="ln">  2086&nbsp;&nbsp;</span>			<span class="comment">// Ms can continue to emit events all the way until wait != freeMWait,</span>
<span id="L2087" class="ln">  2087&nbsp;&nbsp;</span>			<span class="comment">// so it&#39;s only safe to call traceThreadDestroy at this point.</span>
<span id="L2088" class="ln">  2088&nbsp;&nbsp;</span>			if traceEnabled() || traceShuttingDown() {
<span id="L2089" class="ln">  2089&nbsp;&nbsp;</span>				traceThreadDestroy(freem)
<span id="L2090" class="ln">  2090&nbsp;&nbsp;</span>			}
<span id="L2091" class="ln">  2091&nbsp;&nbsp;</span>			<span class="comment">// Free the stack if needed. For freeMRef, there is</span>
<span id="L2092" class="ln">  2092&nbsp;&nbsp;</span>			<span class="comment">// nothing to do except drop freem from the sched.freem</span>
<span id="L2093" class="ln">  2093&nbsp;&nbsp;</span>			<span class="comment">// list.</span>
<span id="L2094" class="ln">  2094&nbsp;&nbsp;</span>			if wait == freeMStack {
<span id="L2095" class="ln">  2095&nbsp;&nbsp;</span>				<span class="comment">// stackfree must be on the system stack, but allocm is</span>
<span id="L2096" class="ln">  2096&nbsp;&nbsp;</span>				<span class="comment">// reachable off the system stack transitively from</span>
<span id="L2097" class="ln">  2097&nbsp;&nbsp;</span>				<span class="comment">// startm.</span>
<span id="L2098" class="ln">  2098&nbsp;&nbsp;</span>				systemstack(func() {
<span id="L2099" class="ln">  2099&nbsp;&nbsp;</span>					stackfree(freem.g0.stack)
<span id="L2100" class="ln">  2100&nbsp;&nbsp;</span>				})
<span id="L2101" class="ln">  2101&nbsp;&nbsp;</span>			}
<span id="L2102" class="ln">  2102&nbsp;&nbsp;</span>			freem = freem.freelink
<span id="L2103" class="ln">  2103&nbsp;&nbsp;</span>		}
<span id="L2104" class="ln">  2104&nbsp;&nbsp;</span>		sched.freem = newList
<span id="L2105" class="ln">  2105&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L2106" class="ln">  2106&nbsp;&nbsp;</span>	}
<span id="L2107" class="ln">  2107&nbsp;&nbsp;</span>
<span id="L2108" class="ln">  2108&nbsp;&nbsp;</span>	mp := new(m)
<span id="L2109" class="ln">  2109&nbsp;&nbsp;</span>	mp.mstartfn = fn
<span id="L2110" class="ln">  2110&nbsp;&nbsp;</span>	mcommoninit(mp, id)
<span id="L2111" class="ln">  2111&nbsp;&nbsp;</span>
<span id="L2112" class="ln">  2112&nbsp;&nbsp;</span>	<span class="comment">// In case of cgo or Solaris or illumos or Darwin, pthread_create will make us a stack.</span>
<span id="L2113" class="ln">  2113&nbsp;&nbsp;</span>	<span class="comment">// Windows and Plan 9 will layout sched stack on OS stack.</span>
<span id="L2114" class="ln">  2114&nbsp;&nbsp;</span>	if iscgo || mStackIsSystemAllocated() {
<span id="L2115" class="ln">  2115&nbsp;&nbsp;</span>		mp.g0 = malg(-1)
<span id="L2116" class="ln">  2116&nbsp;&nbsp;</span>	} else {
<span id="L2117" class="ln">  2117&nbsp;&nbsp;</span>		mp.g0 = malg(16384 * sys.StackGuardMultiplier)
<span id="L2118" class="ln">  2118&nbsp;&nbsp;</span>	}
<span id="L2119" class="ln">  2119&nbsp;&nbsp;</span>	mp.g0.m = mp
<span id="L2120" class="ln">  2120&nbsp;&nbsp;</span>
<span id="L2121" class="ln">  2121&nbsp;&nbsp;</span>	if pp == gp.m.p.ptr() {
<span id="L2122" class="ln">  2122&nbsp;&nbsp;</span>		releasep()
<span id="L2123" class="ln">  2123&nbsp;&nbsp;</span>	}
<span id="L2124" class="ln">  2124&nbsp;&nbsp;</span>
<span id="L2125" class="ln">  2125&nbsp;&nbsp;</span>	releasem(gp.m)
<span id="L2126" class="ln">  2126&nbsp;&nbsp;</span>	allocmLock.runlock()
<span id="L2127" class="ln">  2127&nbsp;&nbsp;</span>	return mp
<span id="L2128" class="ln">  2128&nbsp;&nbsp;</span>}
<span id="L2129" class="ln">  2129&nbsp;&nbsp;</span>
<span id="L2130" class="ln">  2130&nbsp;&nbsp;</span><span class="comment">// needm is called when a cgo callback happens on a</span>
<span id="L2131" class="ln">  2131&nbsp;&nbsp;</span><span class="comment">// thread without an m (a thread not created by Go).</span>
<span id="L2132" class="ln">  2132&nbsp;&nbsp;</span><span class="comment">// In this case, needm is expected to find an m to use</span>
<span id="L2133" class="ln">  2133&nbsp;&nbsp;</span><span class="comment">// and return with m, g initialized correctly.</span>
<span id="L2134" class="ln">  2134&nbsp;&nbsp;</span><span class="comment">// Since m and g are not set now (likely nil, but see below)</span>
<span id="L2135" class="ln">  2135&nbsp;&nbsp;</span><span class="comment">// needm is limited in what routines it can call. In particular</span>
<span id="L2136" class="ln">  2136&nbsp;&nbsp;</span><span class="comment">// it can only call nosplit functions (textflag 7) and cannot</span>
<span id="L2137" class="ln">  2137&nbsp;&nbsp;</span><span class="comment">// do any scheduling that requires an m.</span>
<span id="L2138" class="ln">  2138&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2139" class="ln">  2139&nbsp;&nbsp;</span><span class="comment">// In order to avoid needing heavy lifting here, we adopt</span>
<span id="L2140" class="ln">  2140&nbsp;&nbsp;</span><span class="comment">// the following strategy: there is a stack of available m&#39;s</span>
<span id="L2141" class="ln">  2141&nbsp;&nbsp;</span><span class="comment">// that can be stolen. Using compare-and-swap</span>
<span id="L2142" class="ln">  2142&nbsp;&nbsp;</span><span class="comment">// to pop from the stack has ABA races, so we simulate</span>
<span id="L2143" class="ln">  2143&nbsp;&nbsp;</span><span class="comment">// a lock by doing an exchange (via Casuintptr) to steal the stack</span>
<span id="L2144" class="ln">  2144&nbsp;&nbsp;</span><span class="comment">// head and replace the top pointer with MLOCKED (1).</span>
<span id="L2145" class="ln">  2145&nbsp;&nbsp;</span><span class="comment">// This serves as a simple spin lock that we can use even</span>
<span id="L2146" class="ln">  2146&nbsp;&nbsp;</span><span class="comment">// without an m. The thread that locks the stack in this way</span>
<span id="L2147" class="ln">  2147&nbsp;&nbsp;</span><span class="comment">// unlocks the stack by storing a valid stack head pointer.</span>
<span id="L2148" class="ln">  2148&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2149" class="ln">  2149&nbsp;&nbsp;</span><span class="comment">// In order to make sure that there is always an m structure</span>
<span id="L2150" class="ln">  2150&nbsp;&nbsp;</span><span class="comment">// available to be stolen, we maintain the invariant that there</span>
<span id="L2151" class="ln">  2151&nbsp;&nbsp;</span><span class="comment">// is always one more than needed. At the beginning of the</span>
<span id="L2152" class="ln">  2152&nbsp;&nbsp;</span><span class="comment">// program (if cgo is in use) the list is seeded with a single m.</span>
<span id="L2153" class="ln">  2153&nbsp;&nbsp;</span><span class="comment">// If needm finds that it has taken the last m off the list, its job</span>
<span id="L2154" class="ln">  2154&nbsp;&nbsp;</span><span class="comment">// is - once it has installed its own m so that it can do things like</span>
<span id="L2155" class="ln">  2155&nbsp;&nbsp;</span><span class="comment">// allocate memory - to create a spare m and put it on the list.</span>
<span id="L2156" class="ln">  2156&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2157" class="ln">  2157&nbsp;&nbsp;</span><span class="comment">// Each of these extra m&#39;s also has a g0 and a curg that are</span>
<span id="L2158" class="ln">  2158&nbsp;&nbsp;</span><span class="comment">// pressed into service as the scheduling stack and current</span>
<span id="L2159" class="ln">  2159&nbsp;&nbsp;</span><span class="comment">// goroutine for the duration of the cgo callback.</span>
<span id="L2160" class="ln">  2160&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2161" class="ln">  2161&nbsp;&nbsp;</span><span class="comment">// It calls dropm to put the m back on the list,</span>
<span id="L2162" class="ln">  2162&nbsp;&nbsp;</span><span class="comment">// 1. when the callback is done with the m in non-pthread platforms,</span>
<span id="L2163" class="ln">  2163&nbsp;&nbsp;</span><span class="comment">// 2. or when the C thread exiting on pthread platforms.</span>
<span id="L2164" class="ln">  2164&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2165" class="ln">  2165&nbsp;&nbsp;</span><span class="comment">// The signal argument indicates whether we&#39;re called from a signal</span>
<span id="L2166" class="ln">  2166&nbsp;&nbsp;</span><span class="comment">// handler.</span>
<span id="L2167" class="ln">  2167&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2168" class="ln">  2168&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L2169" class="ln">  2169&nbsp;&nbsp;</span>func needm(signal bool) {
<span id="L2170" class="ln">  2170&nbsp;&nbsp;</span>	if (iscgo || GOOS == &#34;windows&#34;) &amp;&amp; !cgoHasExtraM {
<span id="L2171" class="ln">  2171&nbsp;&nbsp;</span>		<span class="comment">// Can happen if C/C++ code calls Go from a global ctor.</span>
<span id="L2172" class="ln">  2172&nbsp;&nbsp;</span>		<span class="comment">// Can also happen on Windows if a global ctor uses a</span>
<span id="L2173" class="ln">  2173&nbsp;&nbsp;</span>		<span class="comment">// callback created by syscall.NewCallback. See issue #6751</span>
<span id="L2174" class="ln">  2174&nbsp;&nbsp;</span>		<span class="comment">// for details.</span>
<span id="L2175" class="ln">  2175&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L2176" class="ln">  2176&nbsp;&nbsp;</span>		<span class="comment">// Can not throw, because scheduler is not initialized yet.</span>
<span id="L2177" class="ln">  2177&nbsp;&nbsp;</span>		writeErrStr(&#34;fatal error: cgo callback before cgo call\n&#34;)
<span id="L2178" class="ln">  2178&nbsp;&nbsp;</span>		exit(1)
<span id="L2179" class="ln">  2179&nbsp;&nbsp;</span>	}
<span id="L2180" class="ln">  2180&nbsp;&nbsp;</span>
<span id="L2181" class="ln">  2181&nbsp;&nbsp;</span>	<span class="comment">// Save and block signals before getting an M.</span>
<span id="L2182" class="ln">  2182&nbsp;&nbsp;</span>	<span class="comment">// The signal handler may call needm itself,</span>
<span id="L2183" class="ln">  2183&nbsp;&nbsp;</span>	<span class="comment">// and we must avoid a deadlock. Also, once g is installed,</span>
<span id="L2184" class="ln">  2184&nbsp;&nbsp;</span>	<span class="comment">// any incoming signals will try to execute,</span>
<span id="L2185" class="ln">  2185&nbsp;&nbsp;</span>	<span class="comment">// but we won&#39;t have the sigaltstack settings and other data</span>
<span id="L2186" class="ln">  2186&nbsp;&nbsp;</span>	<span class="comment">// set up appropriately until the end of minit, which will</span>
<span id="L2187" class="ln">  2187&nbsp;&nbsp;</span>	<span class="comment">// unblock the signals. This is the same dance as when</span>
<span id="L2188" class="ln">  2188&nbsp;&nbsp;</span>	<span class="comment">// starting a new m to run Go code via newosproc.</span>
<span id="L2189" class="ln">  2189&nbsp;&nbsp;</span>	var sigmask sigset
<span id="L2190" class="ln">  2190&nbsp;&nbsp;</span>	sigsave(&amp;sigmask)
<span id="L2191" class="ln">  2191&nbsp;&nbsp;</span>	sigblock(false)
<span id="L2192" class="ln">  2192&nbsp;&nbsp;</span>
<span id="L2193" class="ln">  2193&nbsp;&nbsp;</span>	<span class="comment">// getExtraM is safe here because of the invariant above,</span>
<span id="L2194" class="ln">  2194&nbsp;&nbsp;</span>	<span class="comment">// that the extra list always contains or will soon contain</span>
<span id="L2195" class="ln">  2195&nbsp;&nbsp;</span>	<span class="comment">// at least one m.</span>
<span id="L2196" class="ln">  2196&nbsp;&nbsp;</span>	mp, last := getExtraM()
<span id="L2197" class="ln">  2197&nbsp;&nbsp;</span>
<span id="L2198" class="ln">  2198&nbsp;&nbsp;</span>	<span class="comment">// Set needextram when we&#39;ve just emptied the list,</span>
<span id="L2199" class="ln">  2199&nbsp;&nbsp;</span>	<span class="comment">// so that the eventual call into cgocallbackg will</span>
<span id="L2200" class="ln">  2200&nbsp;&nbsp;</span>	<span class="comment">// allocate a new m for the extra list. We delay the</span>
<span id="L2201" class="ln">  2201&nbsp;&nbsp;</span>	<span class="comment">// allocation until then so that it can be done</span>
<span id="L2202" class="ln">  2202&nbsp;&nbsp;</span>	<span class="comment">// after exitsyscall makes sure it is okay to be</span>
<span id="L2203" class="ln">  2203&nbsp;&nbsp;</span>	<span class="comment">// running at all (that is, there&#39;s no garbage collection</span>
<span id="L2204" class="ln">  2204&nbsp;&nbsp;</span>	<span class="comment">// running right now).</span>
<span id="L2205" class="ln">  2205&nbsp;&nbsp;</span>	mp.needextram = last
<span id="L2206" class="ln">  2206&nbsp;&nbsp;</span>
<span id="L2207" class="ln">  2207&nbsp;&nbsp;</span>	<span class="comment">// Store the original signal mask for use by minit.</span>
<span id="L2208" class="ln">  2208&nbsp;&nbsp;</span>	mp.sigmask = sigmask
<span id="L2209" class="ln">  2209&nbsp;&nbsp;</span>
<span id="L2210" class="ln">  2210&nbsp;&nbsp;</span>	<span class="comment">// Install TLS on some platforms (previously setg</span>
<span id="L2211" class="ln">  2211&nbsp;&nbsp;</span>	<span class="comment">// would do this if necessary).</span>
<span id="L2212" class="ln">  2212&nbsp;&nbsp;</span>	osSetupTLS(mp)
<span id="L2213" class="ln">  2213&nbsp;&nbsp;</span>
<span id="L2214" class="ln">  2214&nbsp;&nbsp;</span>	<span class="comment">// Install g (= m-&gt;g0) and set the stack bounds</span>
<span id="L2215" class="ln">  2215&nbsp;&nbsp;</span>	<span class="comment">// to match the current stack.</span>
<span id="L2216" class="ln">  2216&nbsp;&nbsp;</span>	setg(mp.g0)
<span id="L2217" class="ln">  2217&nbsp;&nbsp;</span>	sp := getcallersp()
<span id="L2218" class="ln">  2218&nbsp;&nbsp;</span>	callbackUpdateSystemStack(mp, sp, signal)
<span id="L2219" class="ln">  2219&nbsp;&nbsp;</span>
<span id="L2220" class="ln">  2220&nbsp;&nbsp;</span>	<span class="comment">// Should mark we are already in Go now.</span>
<span id="L2221" class="ln">  2221&nbsp;&nbsp;</span>	<span class="comment">// Otherwise, we may call needm again when we get a signal, before cgocallbackg1,</span>
<span id="L2222" class="ln">  2222&nbsp;&nbsp;</span>	<span class="comment">// which means the extram list may be empty, that will cause a deadlock.</span>
<span id="L2223" class="ln">  2223&nbsp;&nbsp;</span>	mp.isExtraInC = false
<span id="L2224" class="ln">  2224&nbsp;&nbsp;</span>
<span id="L2225" class="ln">  2225&nbsp;&nbsp;</span>	<span class="comment">// Initialize this thread to use the m.</span>
<span id="L2226" class="ln">  2226&nbsp;&nbsp;</span>	asminit()
<span id="L2227" class="ln">  2227&nbsp;&nbsp;</span>	minit()
<span id="L2228" class="ln">  2228&nbsp;&nbsp;</span>
<span id="L2229" class="ln">  2229&nbsp;&nbsp;</span>	<span class="comment">// Emit a trace event for this dead -&gt; syscall transition,</span>
<span id="L2230" class="ln">  2230&nbsp;&nbsp;</span>	<span class="comment">// but only in the new tracer and only if we&#39;re not in a signal handler.</span>
<span id="L2231" class="ln">  2231&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2232" class="ln">  2232&nbsp;&nbsp;</span>	<span class="comment">// N.B. the tracer can run on a bare M just fine, we just have</span>
<span id="L2233" class="ln">  2233&nbsp;&nbsp;</span>	<span class="comment">// to make sure to do this before setg(nil) and unminit.</span>
<span id="L2234" class="ln">  2234&nbsp;&nbsp;</span>	var trace traceLocker
<span id="L2235" class="ln">  2235&nbsp;&nbsp;</span>	if goexperiment.ExecTracer2 &amp;&amp; !signal {
<span id="L2236" class="ln">  2236&nbsp;&nbsp;</span>		trace = traceAcquire()
<span id="L2237" class="ln">  2237&nbsp;&nbsp;</span>	}
<span id="L2238" class="ln">  2238&nbsp;&nbsp;</span>
<span id="L2239" class="ln">  2239&nbsp;&nbsp;</span>	<span class="comment">// mp.curg is now a real goroutine.</span>
<span id="L2240" class="ln">  2240&nbsp;&nbsp;</span>	casgstatus(mp.curg, _Gdead, _Gsyscall)
<span id="L2241" class="ln">  2241&nbsp;&nbsp;</span>	sched.ngsys.Add(-1)
<span id="L2242" class="ln">  2242&nbsp;&nbsp;</span>
<span id="L2243" class="ln">  2243&nbsp;&nbsp;</span>	if goexperiment.ExecTracer2 &amp;&amp; !signal {
<span id="L2244" class="ln">  2244&nbsp;&nbsp;</span>		if trace.ok() {
<span id="L2245" class="ln">  2245&nbsp;&nbsp;</span>			trace.GoCreateSyscall(mp.curg)
<span id="L2246" class="ln">  2246&nbsp;&nbsp;</span>			traceRelease(trace)
<span id="L2247" class="ln">  2247&nbsp;&nbsp;</span>		}
<span id="L2248" class="ln">  2248&nbsp;&nbsp;</span>	}
<span id="L2249" class="ln">  2249&nbsp;&nbsp;</span>	mp.isExtraInSig = signal
<span id="L2250" class="ln">  2250&nbsp;&nbsp;</span>}
<span id="L2251" class="ln">  2251&nbsp;&nbsp;</span>
<span id="L2252" class="ln">  2252&nbsp;&nbsp;</span><span class="comment">// Acquire an extra m and bind it to the C thread when a pthread key has been created.</span>
<span id="L2253" class="ln">  2253&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2254" class="ln">  2254&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L2255" class="ln">  2255&nbsp;&nbsp;</span>func needAndBindM() {
<span id="L2256" class="ln">  2256&nbsp;&nbsp;</span>	needm(false)
<span id="L2257" class="ln">  2257&nbsp;&nbsp;</span>
<span id="L2258" class="ln">  2258&nbsp;&nbsp;</span>	if _cgo_pthread_key_created != nil &amp;&amp; *(*uintptr)(_cgo_pthread_key_created) != 0 {
<span id="L2259" class="ln">  2259&nbsp;&nbsp;</span>		cgoBindM()
<span id="L2260" class="ln">  2260&nbsp;&nbsp;</span>	}
<span id="L2261" class="ln">  2261&nbsp;&nbsp;</span>}
<span id="L2262" class="ln">  2262&nbsp;&nbsp;</span>
<span id="L2263" class="ln">  2263&nbsp;&nbsp;</span><span class="comment">// newextram allocates m&#39;s and puts them on the extra list.</span>
<span id="L2264" class="ln">  2264&nbsp;&nbsp;</span><span class="comment">// It is called with a working local m, so that it can do things</span>
<span id="L2265" class="ln">  2265&nbsp;&nbsp;</span><span class="comment">// like call schedlock and allocate.</span>
<span id="L2266" class="ln">  2266&nbsp;&nbsp;</span>func newextram() {
<span id="L2267" class="ln">  2267&nbsp;&nbsp;</span>	c := extraMWaiters.Swap(0)
<span id="L2268" class="ln">  2268&nbsp;&nbsp;</span>	if c &gt; 0 {
<span id="L2269" class="ln">  2269&nbsp;&nbsp;</span>		for i := uint32(0); i &lt; c; i++ {
<span id="L2270" class="ln">  2270&nbsp;&nbsp;</span>			oneNewExtraM()
<span id="L2271" class="ln">  2271&nbsp;&nbsp;</span>		}
<span id="L2272" class="ln">  2272&nbsp;&nbsp;</span>	} else if extraMLength.Load() == 0 {
<span id="L2273" class="ln">  2273&nbsp;&nbsp;</span>		<span class="comment">// Make sure there is at least one extra M.</span>
<span id="L2274" class="ln">  2274&nbsp;&nbsp;</span>		oneNewExtraM()
<span id="L2275" class="ln">  2275&nbsp;&nbsp;</span>	}
<span id="L2276" class="ln">  2276&nbsp;&nbsp;</span>}
<span id="L2277" class="ln">  2277&nbsp;&nbsp;</span>
<span id="L2278" class="ln">  2278&nbsp;&nbsp;</span><span class="comment">// oneNewExtraM allocates an m and puts it on the extra list.</span>
<span id="L2279" class="ln">  2279&nbsp;&nbsp;</span>func oneNewExtraM() {
<span id="L2280" class="ln">  2280&nbsp;&nbsp;</span>	<span class="comment">// Create extra goroutine locked to extra m.</span>
<span id="L2281" class="ln">  2281&nbsp;&nbsp;</span>	<span class="comment">// The goroutine is the context in which the cgo callback will run.</span>
<span id="L2282" class="ln">  2282&nbsp;&nbsp;</span>	<span class="comment">// The sched.pc will never be returned to, but setting it to</span>
<span id="L2283" class="ln">  2283&nbsp;&nbsp;</span>	<span class="comment">// goexit makes clear to the traceback routines where</span>
<span id="L2284" class="ln">  2284&nbsp;&nbsp;</span>	<span class="comment">// the goroutine stack ends.</span>
<span id="L2285" class="ln">  2285&nbsp;&nbsp;</span>	mp := allocm(nil, nil, -1)
<span id="L2286" class="ln">  2286&nbsp;&nbsp;</span>	gp := malg(4096)
<span id="L2287" class="ln">  2287&nbsp;&nbsp;</span>	gp.sched.pc = abi.FuncPCABI0(goexit) + sys.PCQuantum
<span id="L2288" class="ln">  2288&nbsp;&nbsp;</span>	gp.sched.sp = gp.stack.hi
<span id="L2289" class="ln">  2289&nbsp;&nbsp;</span>	gp.sched.sp -= 4 * goarch.PtrSize <span class="comment">// extra space in case of reads slightly beyond frame</span>
<span id="L2290" class="ln">  2290&nbsp;&nbsp;</span>	gp.sched.lr = 0
<span id="L2291" class="ln">  2291&nbsp;&nbsp;</span>	gp.sched.g = guintptr(unsafe.Pointer(gp))
<span id="L2292" class="ln">  2292&nbsp;&nbsp;</span>	gp.syscallpc = gp.sched.pc
<span id="L2293" class="ln">  2293&nbsp;&nbsp;</span>	gp.syscallsp = gp.sched.sp
<span id="L2294" class="ln">  2294&nbsp;&nbsp;</span>	gp.stktopsp = gp.sched.sp
<span id="L2295" class="ln">  2295&nbsp;&nbsp;</span>	<span class="comment">// malg returns status as _Gidle. Change to _Gdead before</span>
<span id="L2296" class="ln">  2296&nbsp;&nbsp;</span>	<span class="comment">// adding to allg where GC can see it. We use _Gdead to hide</span>
<span id="L2297" class="ln">  2297&nbsp;&nbsp;</span>	<span class="comment">// this from tracebacks and stack scans since it isn&#39;t a</span>
<span id="L2298" class="ln">  2298&nbsp;&nbsp;</span>	<span class="comment">// &#34;real&#34; goroutine until needm grabs it.</span>
<span id="L2299" class="ln">  2299&nbsp;&nbsp;</span>	casgstatus(gp, _Gidle, _Gdead)
<span id="L2300" class="ln">  2300&nbsp;&nbsp;</span>	gp.m = mp
<span id="L2301" class="ln">  2301&nbsp;&nbsp;</span>	mp.curg = gp
<span id="L2302" class="ln">  2302&nbsp;&nbsp;</span>	mp.isextra = true
<span id="L2303" class="ln">  2303&nbsp;&nbsp;</span>	<span class="comment">// mark we are in C by default.</span>
<span id="L2304" class="ln">  2304&nbsp;&nbsp;</span>	mp.isExtraInC = true
<span id="L2305" class="ln">  2305&nbsp;&nbsp;</span>	mp.lockedInt++
<span id="L2306" class="ln">  2306&nbsp;&nbsp;</span>	mp.lockedg.set(gp)
<span id="L2307" class="ln">  2307&nbsp;&nbsp;</span>	gp.lockedm.set(mp)
<span id="L2308" class="ln">  2308&nbsp;&nbsp;</span>	gp.goid = sched.goidgen.Add(1)
<span id="L2309" class="ln">  2309&nbsp;&nbsp;</span>	if raceenabled {
<span id="L2310" class="ln">  2310&nbsp;&nbsp;</span>		gp.racectx = racegostart(abi.FuncPCABIInternal(newextram) + sys.PCQuantum)
<span id="L2311" class="ln">  2311&nbsp;&nbsp;</span>	}
<span id="L2312" class="ln">  2312&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L2313" class="ln">  2313&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L2314" class="ln">  2314&nbsp;&nbsp;</span>		trace.OneNewExtraM(gp)
<span id="L2315" class="ln">  2315&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L2316" class="ln">  2316&nbsp;&nbsp;</span>	}
<span id="L2317" class="ln">  2317&nbsp;&nbsp;</span>	<span class="comment">// put on allg for garbage collector</span>
<span id="L2318" class="ln">  2318&nbsp;&nbsp;</span>	allgadd(gp)
<span id="L2319" class="ln">  2319&nbsp;&nbsp;</span>
<span id="L2320" class="ln">  2320&nbsp;&nbsp;</span>	<span class="comment">// gp is now on the allg list, but we don&#39;t want it to be</span>
<span id="L2321" class="ln">  2321&nbsp;&nbsp;</span>	<span class="comment">// counted by gcount. It would be more &#34;proper&#34; to increment</span>
<span id="L2322" class="ln">  2322&nbsp;&nbsp;</span>	<span class="comment">// sched.ngfree, but that requires locking. Incrementing ngsys</span>
<span id="L2323" class="ln">  2323&nbsp;&nbsp;</span>	<span class="comment">// has the same effect.</span>
<span id="L2324" class="ln">  2324&nbsp;&nbsp;</span>	sched.ngsys.Add(1)
<span id="L2325" class="ln">  2325&nbsp;&nbsp;</span>
<span id="L2326" class="ln">  2326&nbsp;&nbsp;</span>	<span class="comment">// Add m to the extra list.</span>
<span id="L2327" class="ln">  2327&nbsp;&nbsp;</span>	addExtraM(mp)
<span id="L2328" class="ln">  2328&nbsp;&nbsp;</span>}
<span id="L2329" class="ln">  2329&nbsp;&nbsp;</span>
<span id="L2330" class="ln">  2330&nbsp;&nbsp;</span><span class="comment">// dropm puts the current m back onto the extra list.</span>
<span id="L2331" class="ln">  2331&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2332" class="ln">  2332&nbsp;&nbsp;</span><span class="comment">// 1. On systems without pthreads, like Windows</span>
<span id="L2333" class="ln">  2333&nbsp;&nbsp;</span><span class="comment">// dropm is called when a cgo callback has called needm but is now</span>
<span id="L2334" class="ln">  2334&nbsp;&nbsp;</span><span class="comment">// done with the callback and returning back into the non-Go thread.</span>
<span id="L2335" class="ln">  2335&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2336" class="ln">  2336&nbsp;&nbsp;</span><span class="comment">// The main expense here is the call to signalstack to release the</span>
<span id="L2337" class="ln">  2337&nbsp;&nbsp;</span><span class="comment">// m&#39;s signal stack, and then the call to needm on the next callback</span>
<span id="L2338" class="ln">  2338&nbsp;&nbsp;</span><span class="comment">// from this thread. It is tempting to try to save the m for next time,</span>
<span id="L2339" class="ln">  2339&nbsp;&nbsp;</span><span class="comment">// which would eliminate both these costs, but there might not be</span>
<span id="L2340" class="ln">  2340&nbsp;&nbsp;</span><span class="comment">// a next time: the current thread (which Go does not control) might exit.</span>
<span id="L2341" class="ln">  2341&nbsp;&nbsp;</span><span class="comment">// If we saved the m for that thread, there would be an m leak each time</span>
<span id="L2342" class="ln">  2342&nbsp;&nbsp;</span><span class="comment">// such a thread exited. Instead, we acquire and release an m on each</span>
<span id="L2343" class="ln">  2343&nbsp;&nbsp;</span><span class="comment">// call. These should typically not be scheduling operations, just a few</span>
<span id="L2344" class="ln">  2344&nbsp;&nbsp;</span><span class="comment">// atomics, so the cost should be small.</span>
<span id="L2345" class="ln">  2345&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2346" class="ln">  2346&nbsp;&nbsp;</span><span class="comment">// 2. On systems with pthreads</span>
<span id="L2347" class="ln">  2347&nbsp;&nbsp;</span><span class="comment">// dropm is called while a non-Go thread is exiting.</span>
<span id="L2348" class="ln">  2348&nbsp;&nbsp;</span><span class="comment">// We allocate a pthread per-thread variable using pthread_key_create,</span>
<span id="L2349" class="ln">  2349&nbsp;&nbsp;</span><span class="comment">// to register a thread-exit-time destructor.</span>
<span id="L2350" class="ln">  2350&nbsp;&nbsp;</span><span class="comment">// And store the g into a thread-specific value associated with the pthread key,</span>
<span id="L2351" class="ln">  2351&nbsp;&nbsp;</span><span class="comment">// when first return back to C.</span>
<span id="L2352" class="ln">  2352&nbsp;&nbsp;</span><span class="comment">// So that the destructor would invoke dropm while the non-Go thread is exiting.</span>
<span id="L2353" class="ln">  2353&nbsp;&nbsp;</span><span class="comment">// This is much faster since it avoids expensive signal-related syscalls.</span>
<span id="L2354" class="ln">  2354&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2355" class="ln">  2355&nbsp;&nbsp;</span><span class="comment">// This always runs without a P, so //go:nowritebarrierrec is required.</span>
<span id="L2356" class="ln">  2356&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2357" class="ln">  2357&nbsp;&nbsp;</span><span class="comment">// This may run with a different stack than was recorded in g0 (there is no</span>
<span id="L2358" class="ln">  2358&nbsp;&nbsp;</span><span class="comment">// call to callbackUpdateSystemStack prior to dropm), so this must be</span>
<span id="L2359" class="ln">  2359&nbsp;&nbsp;</span><span class="comment">// //go:nosplit to avoid the stack bounds check.</span>
<span id="L2360" class="ln">  2360&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2361" class="ln">  2361&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L2362" class="ln">  2362&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L2363" class="ln">  2363&nbsp;&nbsp;</span>func dropm() {
<span id="L2364" class="ln">  2364&nbsp;&nbsp;</span>	<span class="comment">// Clear m and g, and return m to the extra list.</span>
<span id="L2365" class="ln">  2365&nbsp;&nbsp;</span>	<span class="comment">// After the call to setg we can only call nosplit functions</span>
<span id="L2366" class="ln">  2366&nbsp;&nbsp;</span>	<span class="comment">// with no pointer manipulation.</span>
<span id="L2367" class="ln">  2367&nbsp;&nbsp;</span>	mp := getg().m
<span id="L2368" class="ln">  2368&nbsp;&nbsp;</span>
<span id="L2369" class="ln">  2369&nbsp;&nbsp;</span>	<span class="comment">// Emit a trace event for this syscall -&gt; dead transition,</span>
<span id="L2370" class="ln">  2370&nbsp;&nbsp;</span>	<span class="comment">// but only in the new tracer.</span>
<span id="L2371" class="ln">  2371&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2372" class="ln">  2372&nbsp;&nbsp;</span>	<span class="comment">// N.B. the tracer can run on a bare M just fine, we just have</span>
<span id="L2373" class="ln">  2373&nbsp;&nbsp;</span>	<span class="comment">// to make sure to do this before setg(nil) and unminit.</span>
<span id="L2374" class="ln">  2374&nbsp;&nbsp;</span>	var trace traceLocker
<span id="L2375" class="ln">  2375&nbsp;&nbsp;</span>	if goexperiment.ExecTracer2 &amp;&amp; !mp.isExtraInSig {
<span id="L2376" class="ln">  2376&nbsp;&nbsp;</span>		trace = traceAcquire()
<span id="L2377" class="ln">  2377&nbsp;&nbsp;</span>	}
<span id="L2378" class="ln">  2378&nbsp;&nbsp;</span>
<span id="L2379" class="ln">  2379&nbsp;&nbsp;</span>	<span class="comment">// Return mp.curg to dead state.</span>
<span id="L2380" class="ln">  2380&nbsp;&nbsp;</span>	casgstatus(mp.curg, _Gsyscall, _Gdead)
<span id="L2381" class="ln">  2381&nbsp;&nbsp;</span>	mp.curg.preemptStop = false
<span id="L2382" class="ln">  2382&nbsp;&nbsp;</span>	sched.ngsys.Add(1)
<span id="L2383" class="ln">  2383&nbsp;&nbsp;</span>
<span id="L2384" class="ln">  2384&nbsp;&nbsp;</span>	if goexperiment.ExecTracer2 &amp;&amp; !mp.isExtraInSig {
<span id="L2385" class="ln">  2385&nbsp;&nbsp;</span>		if trace.ok() {
<span id="L2386" class="ln">  2386&nbsp;&nbsp;</span>			trace.GoDestroySyscall()
<span id="L2387" class="ln">  2387&nbsp;&nbsp;</span>			traceRelease(trace)
<span id="L2388" class="ln">  2388&nbsp;&nbsp;</span>		}
<span id="L2389" class="ln">  2389&nbsp;&nbsp;</span>	}
<span id="L2390" class="ln">  2390&nbsp;&nbsp;</span>
<span id="L2391" class="ln">  2391&nbsp;&nbsp;</span>	if goexperiment.ExecTracer2 {
<span id="L2392" class="ln">  2392&nbsp;&nbsp;</span>		<span class="comment">// Trash syscalltick so that it doesn&#39;t line up with mp.old.syscalltick anymore.</span>
<span id="L2393" class="ln">  2393&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L2394" class="ln">  2394&nbsp;&nbsp;</span>		<span class="comment">// In the new tracer, we model needm and dropm and a goroutine being created and</span>
<span id="L2395" class="ln">  2395&nbsp;&nbsp;</span>		<span class="comment">// destroyed respectively. The m then might get reused with a different procid but</span>
<span id="L2396" class="ln">  2396&nbsp;&nbsp;</span>		<span class="comment">// still with a reference to oldp, and still with the same syscalltick. The next</span>
<span id="L2397" class="ln">  2397&nbsp;&nbsp;</span>		<span class="comment">// time a G is &#34;created&#34; in needm, it&#39;ll return and quietly reacquire its P from a</span>
<span id="L2398" class="ln">  2398&nbsp;&nbsp;</span>		<span class="comment">// different m with a different procid, which will confuse the trace parser. By</span>
<span id="L2399" class="ln">  2399&nbsp;&nbsp;</span>		<span class="comment">// trashing syscalltick, we ensure that it&#39;ll appear as if we lost the P to the</span>
<span id="L2400" class="ln">  2400&nbsp;&nbsp;</span>		<span class="comment">// tracer parser and that we just reacquired it.</span>
<span id="L2401" class="ln">  2401&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L2402" class="ln">  2402&nbsp;&nbsp;</span>		<span class="comment">// Trash the value by decrementing because that gets us as far away from the value</span>
<span id="L2403" class="ln">  2403&nbsp;&nbsp;</span>		<span class="comment">// the syscall exit code expects as possible. Setting to zero is risky because</span>
<span id="L2404" class="ln">  2404&nbsp;&nbsp;</span>		<span class="comment">// syscalltick could already be zero (and in fact, is initialized to zero).</span>
<span id="L2405" class="ln">  2405&nbsp;&nbsp;</span>		mp.syscalltick--
<span id="L2406" class="ln">  2406&nbsp;&nbsp;</span>	}
<span id="L2407" class="ln">  2407&nbsp;&nbsp;</span>
<span id="L2408" class="ln">  2408&nbsp;&nbsp;</span>	<span class="comment">// Reset trace state unconditionally. This goroutine is being &#39;destroyed&#39;</span>
<span id="L2409" class="ln">  2409&nbsp;&nbsp;</span>	<span class="comment">// from the perspective of the tracer.</span>
<span id="L2410" class="ln">  2410&nbsp;&nbsp;</span>	mp.curg.trace.reset()
<span id="L2411" class="ln">  2411&nbsp;&nbsp;</span>
<span id="L2412" class="ln">  2412&nbsp;&nbsp;</span>	<span class="comment">// Flush all the M&#39;s buffers. This is necessary because the M might</span>
<span id="L2413" class="ln">  2413&nbsp;&nbsp;</span>	<span class="comment">// be used on a different thread with a different procid, so we have</span>
<span id="L2414" class="ln">  2414&nbsp;&nbsp;</span>	<span class="comment">// to make sure we don&#39;t write into the same buffer.</span>
<span id="L2415" class="ln">  2415&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2416" class="ln">  2416&nbsp;&nbsp;</span>	<span class="comment">// N.B. traceThreadDestroy is a no-op in the old tracer, so avoid the</span>
<span id="L2417" class="ln">  2417&nbsp;&nbsp;</span>	<span class="comment">// unnecessary acquire/release of the lock.</span>
<span id="L2418" class="ln">  2418&nbsp;&nbsp;</span>	if goexperiment.ExecTracer2 &amp;&amp; (traceEnabled() || traceShuttingDown()) {
<span id="L2419" class="ln">  2419&nbsp;&nbsp;</span>		<span class="comment">// Acquire sched.lock across thread destruction. One of the invariants of the tracer</span>
<span id="L2420" class="ln">  2420&nbsp;&nbsp;</span>		<span class="comment">// is that a thread cannot disappear from the tracer&#39;s view (allm or freem) without</span>
<span id="L2421" class="ln">  2421&nbsp;&nbsp;</span>		<span class="comment">// it noticing, so it requires that sched.lock be held over traceThreadDestroy.</span>
<span id="L2422" class="ln">  2422&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L2423" class="ln">  2423&nbsp;&nbsp;</span>		<span class="comment">// This isn&#39;t strictly necessary in this case, because this thread never leaves allm,</span>
<span id="L2424" class="ln">  2424&nbsp;&nbsp;</span>		<span class="comment">// but the critical section is short and dropm is rare on pthread platforms, so just</span>
<span id="L2425" class="ln">  2425&nbsp;&nbsp;</span>		<span class="comment">// take the lock and play it safe. traceThreadDestroy also asserts that the lock is held.</span>
<span id="L2426" class="ln">  2426&nbsp;&nbsp;</span>		lock(&amp;sched.lock)
<span id="L2427" class="ln">  2427&nbsp;&nbsp;</span>		traceThreadDestroy(mp)
<span id="L2428" class="ln">  2428&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L2429" class="ln">  2429&nbsp;&nbsp;</span>	}
<span id="L2430" class="ln">  2430&nbsp;&nbsp;</span>	mp.isExtraInSig = false
<span id="L2431" class="ln">  2431&nbsp;&nbsp;</span>
<span id="L2432" class="ln">  2432&nbsp;&nbsp;</span>	<span class="comment">// Block signals before unminit.</span>
<span id="L2433" class="ln">  2433&nbsp;&nbsp;</span>	<span class="comment">// Unminit unregisters the signal handling stack (but needs g on some systems).</span>
<span id="L2434" class="ln">  2434&nbsp;&nbsp;</span>	<span class="comment">// Setg(nil) clears g, which is the signal handler&#39;s cue not to run Go handlers.</span>
<span id="L2435" class="ln">  2435&nbsp;&nbsp;</span>	<span class="comment">// It&#39;s important not to try to handle a signal between those two steps.</span>
<span id="L2436" class="ln">  2436&nbsp;&nbsp;</span>	sigmask := mp.sigmask
<span id="L2437" class="ln">  2437&nbsp;&nbsp;</span>	sigblock(false)
<span id="L2438" class="ln">  2438&nbsp;&nbsp;</span>	unminit()
<span id="L2439" class="ln">  2439&nbsp;&nbsp;</span>
<span id="L2440" class="ln">  2440&nbsp;&nbsp;</span>	setg(nil)
<span id="L2441" class="ln">  2441&nbsp;&nbsp;</span>
<span id="L2442" class="ln">  2442&nbsp;&nbsp;</span>	<span class="comment">// Clear g0 stack bounds to ensure that needm always refreshes the</span>
<span id="L2443" class="ln">  2443&nbsp;&nbsp;</span>	<span class="comment">// bounds when reusing this M.</span>
<span id="L2444" class="ln">  2444&nbsp;&nbsp;</span>	g0 := mp.g0
<span id="L2445" class="ln">  2445&nbsp;&nbsp;</span>	g0.stack.hi = 0
<span id="L2446" class="ln">  2446&nbsp;&nbsp;</span>	g0.stack.lo = 0
<span id="L2447" class="ln">  2447&nbsp;&nbsp;</span>	g0.stackguard0 = 0
<span id="L2448" class="ln">  2448&nbsp;&nbsp;</span>	g0.stackguard1 = 0
<span id="L2449" class="ln">  2449&nbsp;&nbsp;</span>
<span id="L2450" class="ln">  2450&nbsp;&nbsp;</span>	putExtraM(mp)
<span id="L2451" class="ln">  2451&nbsp;&nbsp;</span>
<span id="L2452" class="ln">  2452&nbsp;&nbsp;</span>	msigrestore(sigmask)
<span id="L2453" class="ln">  2453&nbsp;&nbsp;</span>}
<span id="L2454" class="ln">  2454&nbsp;&nbsp;</span>
<span id="L2455" class="ln">  2455&nbsp;&nbsp;</span><span class="comment">// bindm store the g0 of the current m into a thread-specific value.</span>
<span id="L2456" class="ln">  2456&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2457" class="ln">  2457&nbsp;&nbsp;</span><span class="comment">// We allocate a pthread per-thread variable using pthread_key_create,</span>
<span id="L2458" class="ln">  2458&nbsp;&nbsp;</span><span class="comment">// to register a thread-exit-time destructor.</span>
<span id="L2459" class="ln">  2459&nbsp;&nbsp;</span><span class="comment">// We are here setting the thread-specific value of the pthread key, to enable the destructor.</span>
<span id="L2460" class="ln">  2460&nbsp;&nbsp;</span><span class="comment">// So that the pthread_key_destructor would dropm while the C thread is exiting.</span>
<span id="L2461" class="ln">  2461&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2462" class="ln">  2462&nbsp;&nbsp;</span><span class="comment">// And the saved g will be used in pthread_key_destructor,</span>
<span id="L2463" class="ln">  2463&nbsp;&nbsp;</span><span class="comment">// since the g stored in the TLS by Go might be cleared in some platforms,</span>
<span id="L2464" class="ln">  2464&nbsp;&nbsp;</span><span class="comment">// before the destructor invoked, so, we restore g by the stored g, before dropm.</span>
<span id="L2465" class="ln">  2465&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2466" class="ln">  2466&nbsp;&nbsp;</span><span class="comment">// We store g0 instead of m, to make the assembly code simpler,</span>
<span id="L2467" class="ln">  2467&nbsp;&nbsp;</span><span class="comment">// since we need to restore g0 in runtime.cgocallback.</span>
<span id="L2468" class="ln">  2468&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2469" class="ln">  2469&nbsp;&nbsp;</span><span class="comment">// On systems without pthreads, like Windows, bindm shouldn&#39;t be used.</span>
<span id="L2470" class="ln">  2470&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2471" class="ln">  2471&nbsp;&nbsp;</span><span class="comment">// NOTE: this always runs without a P, so, nowritebarrierrec required.</span>
<span id="L2472" class="ln">  2472&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2473" class="ln">  2473&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L2474" class="ln">  2474&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L2475" class="ln">  2475&nbsp;&nbsp;</span>func cgoBindM() {
<span id="L2476" class="ln">  2476&nbsp;&nbsp;</span>	if GOOS == &#34;windows&#34; || GOOS == &#34;plan9&#34; {
<span id="L2477" class="ln">  2477&nbsp;&nbsp;</span>		fatal(&#34;bindm in unexpected GOOS&#34;)
<span id="L2478" class="ln">  2478&nbsp;&nbsp;</span>	}
<span id="L2479" class="ln">  2479&nbsp;&nbsp;</span>	g := getg()
<span id="L2480" class="ln">  2480&nbsp;&nbsp;</span>	if g.m.g0 != g {
<span id="L2481" class="ln">  2481&nbsp;&nbsp;</span>		fatal(&#34;the current g is not g0&#34;)
<span id="L2482" class="ln">  2482&nbsp;&nbsp;</span>	}
<span id="L2483" class="ln">  2483&nbsp;&nbsp;</span>	if _cgo_bindm != nil {
<span id="L2484" class="ln">  2484&nbsp;&nbsp;</span>		asmcgocall(_cgo_bindm, unsafe.Pointer(g))
<span id="L2485" class="ln">  2485&nbsp;&nbsp;</span>	}
<span id="L2486" class="ln">  2486&nbsp;&nbsp;</span>}
<span id="L2487" class="ln">  2487&nbsp;&nbsp;</span>
<span id="L2488" class="ln">  2488&nbsp;&nbsp;</span><span class="comment">// A helper function for EnsureDropM.</span>
<span id="L2489" class="ln">  2489&nbsp;&nbsp;</span>func getm() uintptr {
<span id="L2490" class="ln">  2490&nbsp;&nbsp;</span>	return uintptr(unsafe.Pointer(getg().m))
<span id="L2491" class="ln">  2491&nbsp;&nbsp;</span>}
<span id="L2492" class="ln">  2492&nbsp;&nbsp;</span>
<span id="L2493" class="ln">  2493&nbsp;&nbsp;</span>var (
<span id="L2494" class="ln">  2494&nbsp;&nbsp;</span>	<span class="comment">// Locking linked list of extra M&#39;s, via mp.schedlink. Must be accessed</span>
<span id="L2495" class="ln">  2495&nbsp;&nbsp;</span>	<span class="comment">// only via lockextra/unlockextra.</span>
<span id="L2496" class="ln">  2496&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2497" class="ln">  2497&nbsp;&nbsp;</span>	<span class="comment">// Can&#39;t be atomic.Pointer[m] because we use an invalid pointer as a</span>
<span id="L2498" class="ln">  2498&nbsp;&nbsp;</span>	<span class="comment">// &#34;locked&#34; sentinel value. M&#39;s on this list remain visible to the GC</span>
<span id="L2499" class="ln">  2499&nbsp;&nbsp;</span>	<span class="comment">// because their mp.curg is on allgs.</span>
<span id="L2500" class="ln">  2500&nbsp;&nbsp;</span>	extraM atomic.Uintptr
<span id="L2501" class="ln">  2501&nbsp;&nbsp;</span>	<span class="comment">// Number of M&#39;s in the extraM list.</span>
<span id="L2502" class="ln">  2502&nbsp;&nbsp;</span>	extraMLength atomic.Uint32
<span id="L2503" class="ln">  2503&nbsp;&nbsp;</span>	<span class="comment">// Number of waiters in lockextra.</span>
<span id="L2504" class="ln">  2504&nbsp;&nbsp;</span>	extraMWaiters atomic.Uint32
<span id="L2505" class="ln">  2505&nbsp;&nbsp;</span>
<span id="L2506" class="ln">  2506&nbsp;&nbsp;</span>	<span class="comment">// Number of extra M&#39;s in use by threads.</span>
<span id="L2507" class="ln">  2507&nbsp;&nbsp;</span>	extraMInUse atomic.Uint32
<span id="L2508" class="ln">  2508&nbsp;&nbsp;</span>)
<span id="L2509" class="ln">  2509&nbsp;&nbsp;</span>
<span id="L2510" class="ln">  2510&nbsp;&nbsp;</span><span class="comment">// lockextra locks the extra list and returns the list head.</span>
<span id="L2511" class="ln">  2511&nbsp;&nbsp;</span><span class="comment">// The caller must unlock the list by storing a new list head</span>
<span id="L2512" class="ln">  2512&nbsp;&nbsp;</span><span class="comment">// to extram. If nilokay is true, then lockextra will</span>
<span id="L2513" class="ln">  2513&nbsp;&nbsp;</span><span class="comment">// return a nil list head if that&#39;s what it finds. If nilokay is false,</span>
<span id="L2514" class="ln">  2514&nbsp;&nbsp;</span><span class="comment">// lockextra will keep waiting until the list head is no longer nil.</span>
<span id="L2515" class="ln">  2515&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2516" class="ln">  2516&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L2517" class="ln">  2517&nbsp;&nbsp;</span>func lockextra(nilokay bool) *m {
<span id="L2518" class="ln">  2518&nbsp;&nbsp;</span>	const locked = 1
<span id="L2519" class="ln">  2519&nbsp;&nbsp;</span>
<span id="L2520" class="ln">  2520&nbsp;&nbsp;</span>	incr := false
<span id="L2521" class="ln">  2521&nbsp;&nbsp;</span>	for {
<span id="L2522" class="ln">  2522&nbsp;&nbsp;</span>		old := extraM.Load()
<span id="L2523" class="ln">  2523&nbsp;&nbsp;</span>		if old == locked {
<span id="L2524" class="ln">  2524&nbsp;&nbsp;</span>			osyield_no_g()
<span id="L2525" class="ln">  2525&nbsp;&nbsp;</span>			continue
<span id="L2526" class="ln">  2526&nbsp;&nbsp;</span>		}
<span id="L2527" class="ln">  2527&nbsp;&nbsp;</span>		if old == 0 &amp;&amp; !nilokay {
<span id="L2528" class="ln">  2528&nbsp;&nbsp;</span>			if !incr {
<span id="L2529" class="ln">  2529&nbsp;&nbsp;</span>				<span class="comment">// Add 1 to the number of threads</span>
<span id="L2530" class="ln">  2530&nbsp;&nbsp;</span>				<span class="comment">// waiting for an M.</span>
<span id="L2531" class="ln">  2531&nbsp;&nbsp;</span>				<span class="comment">// This is cleared by newextram.</span>
<span id="L2532" class="ln">  2532&nbsp;&nbsp;</span>				extraMWaiters.Add(1)
<span id="L2533" class="ln">  2533&nbsp;&nbsp;</span>				incr = true
<span id="L2534" class="ln">  2534&nbsp;&nbsp;</span>			}
<span id="L2535" class="ln">  2535&nbsp;&nbsp;</span>			usleep_no_g(1)
<span id="L2536" class="ln">  2536&nbsp;&nbsp;</span>			continue
<span id="L2537" class="ln">  2537&nbsp;&nbsp;</span>		}
<span id="L2538" class="ln">  2538&nbsp;&nbsp;</span>		if extraM.CompareAndSwap(old, locked) {
<span id="L2539" class="ln">  2539&nbsp;&nbsp;</span>			return (*m)(unsafe.Pointer(old))
<span id="L2540" class="ln">  2540&nbsp;&nbsp;</span>		}
<span id="L2541" class="ln">  2541&nbsp;&nbsp;</span>		osyield_no_g()
<span id="L2542" class="ln">  2542&nbsp;&nbsp;</span>		continue
<span id="L2543" class="ln">  2543&nbsp;&nbsp;</span>	}
<span id="L2544" class="ln">  2544&nbsp;&nbsp;</span>}
<span id="L2545" class="ln">  2545&nbsp;&nbsp;</span>
<span id="L2546" class="ln">  2546&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L2547" class="ln">  2547&nbsp;&nbsp;</span>func unlockextra(mp *m, delta int32) {
<span id="L2548" class="ln">  2548&nbsp;&nbsp;</span>	extraMLength.Add(delta)
<span id="L2549" class="ln">  2549&nbsp;&nbsp;</span>	extraM.Store(uintptr(unsafe.Pointer(mp)))
<span id="L2550" class="ln">  2550&nbsp;&nbsp;</span>}
<span id="L2551" class="ln">  2551&nbsp;&nbsp;</span>
<span id="L2552" class="ln">  2552&nbsp;&nbsp;</span><span class="comment">// Return an M from the extra M list. Returns last == true if the list becomes</span>
<span id="L2553" class="ln">  2553&nbsp;&nbsp;</span><span class="comment">// empty because of this call.</span>
<span id="L2554" class="ln">  2554&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2555" class="ln">  2555&nbsp;&nbsp;</span><span class="comment">// Spins waiting for an extra M, so caller must ensure that the list always</span>
<span id="L2556" class="ln">  2556&nbsp;&nbsp;</span><span class="comment">// contains or will soon contain at least one M.</span>
<span id="L2557" class="ln">  2557&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2558" class="ln">  2558&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L2559" class="ln">  2559&nbsp;&nbsp;</span>func getExtraM() (mp *m, last bool) {
<span id="L2560" class="ln">  2560&nbsp;&nbsp;</span>	mp = lockextra(false)
<span id="L2561" class="ln">  2561&nbsp;&nbsp;</span>	extraMInUse.Add(1)
<span id="L2562" class="ln">  2562&nbsp;&nbsp;</span>	unlockextra(mp.schedlink.ptr(), -1)
<span id="L2563" class="ln">  2563&nbsp;&nbsp;</span>	return mp, mp.schedlink.ptr() == nil
<span id="L2564" class="ln">  2564&nbsp;&nbsp;</span>}
<span id="L2565" class="ln">  2565&nbsp;&nbsp;</span>
<span id="L2566" class="ln">  2566&nbsp;&nbsp;</span><span class="comment">// Returns an extra M back to the list. mp must be from getExtraM. Newly</span>
<span id="L2567" class="ln">  2567&nbsp;&nbsp;</span><span class="comment">// allocated M&#39;s should use addExtraM.</span>
<span id="L2568" class="ln">  2568&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2569" class="ln">  2569&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L2570" class="ln">  2570&nbsp;&nbsp;</span>func putExtraM(mp *m) {
<span id="L2571" class="ln">  2571&nbsp;&nbsp;</span>	extraMInUse.Add(-1)
<span id="L2572" class="ln">  2572&nbsp;&nbsp;</span>	addExtraM(mp)
<span id="L2573" class="ln">  2573&nbsp;&nbsp;</span>}
<span id="L2574" class="ln">  2574&nbsp;&nbsp;</span>
<span id="L2575" class="ln">  2575&nbsp;&nbsp;</span><span class="comment">// Adds a newly allocated M to the extra M list.</span>
<span id="L2576" class="ln">  2576&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2577" class="ln">  2577&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L2578" class="ln">  2578&nbsp;&nbsp;</span>func addExtraM(mp *m) {
<span id="L2579" class="ln">  2579&nbsp;&nbsp;</span>	mnext := lockextra(true)
<span id="L2580" class="ln">  2580&nbsp;&nbsp;</span>	mp.schedlink.set(mnext)
<span id="L2581" class="ln">  2581&nbsp;&nbsp;</span>	unlockextra(mp, 1)
<span id="L2582" class="ln">  2582&nbsp;&nbsp;</span>}
<span id="L2583" class="ln">  2583&nbsp;&nbsp;</span>
<span id="L2584" class="ln">  2584&nbsp;&nbsp;</span>var (
<span id="L2585" class="ln">  2585&nbsp;&nbsp;</span>	<span class="comment">// allocmLock is locked for read when creating new Ms in allocm and their</span>
<span id="L2586" class="ln">  2586&nbsp;&nbsp;</span>	<span class="comment">// addition to allm. Thus acquiring this lock for write blocks the</span>
<span id="L2587" class="ln">  2587&nbsp;&nbsp;</span>	<span class="comment">// creation of new Ms.</span>
<span id="L2588" class="ln">  2588&nbsp;&nbsp;</span>	allocmLock rwmutex
<span id="L2589" class="ln">  2589&nbsp;&nbsp;</span>
<span id="L2590" class="ln">  2590&nbsp;&nbsp;</span>	<span class="comment">// execLock serializes exec and clone to avoid bugs or unspecified</span>
<span id="L2591" class="ln">  2591&nbsp;&nbsp;</span>	<span class="comment">// behaviour around exec&#39;ing while creating/destroying threads. See</span>
<span id="L2592" class="ln">  2592&nbsp;&nbsp;</span>	<span class="comment">// issue #19546.</span>
<span id="L2593" class="ln">  2593&nbsp;&nbsp;</span>	execLock rwmutex
<span id="L2594" class="ln">  2594&nbsp;&nbsp;</span>)
<span id="L2595" class="ln">  2595&nbsp;&nbsp;</span>
<span id="L2596" class="ln">  2596&nbsp;&nbsp;</span><span class="comment">// These errors are reported (via writeErrStr) by some OS-specific</span>
<span id="L2597" class="ln">  2597&nbsp;&nbsp;</span><span class="comment">// versions of newosproc and newosproc0.</span>
<span id="L2598" class="ln">  2598&nbsp;&nbsp;</span>const (
<span id="L2599" class="ln">  2599&nbsp;&nbsp;</span>	failthreadcreate  = &#34;runtime: failed to create new OS thread\n&#34;
<span id="L2600" class="ln">  2600&nbsp;&nbsp;</span>	failallocatestack = &#34;runtime: failed to allocate stack for the new OS thread\n&#34;
<span id="L2601" class="ln">  2601&nbsp;&nbsp;</span>)
<span id="L2602" class="ln">  2602&nbsp;&nbsp;</span>
<span id="L2603" class="ln">  2603&nbsp;&nbsp;</span><span class="comment">// newmHandoff contains a list of m structures that need new OS threads.</span>
<span id="L2604" class="ln">  2604&nbsp;&nbsp;</span><span class="comment">// This is used by newm in situations where newm itself can&#39;t safely</span>
<span id="L2605" class="ln">  2605&nbsp;&nbsp;</span><span class="comment">// start an OS thread.</span>
<span id="L2606" class="ln">  2606&nbsp;&nbsp;</span>var newmHandoff struct {
<span id="L2607" class="ln">  2607&nbsp;&nbsp;</span>	lock mutex
<span id="L2608" class="ln">  2608&nbsp;&nbsp;</span>
<span id="L2609" class="ln">  2609&nbsp;&nbsp;</span>	<span class="comment">// newm points to a list of M structures that need new OS</span>
<span id="L2610" class="ln">  2610&nbsp;&nbsp;</span>	<span class="comment">// threads. The list is linked through m.schedlink.</span>
<span id="L2611" class="ln">  2611&nbsp;&nbsp;</span>	newm muintptr
<span id="L2612" class="ln">  2612&nbsp;&nbsp;</span>
<span id="L2613" class="ln">  2613&nbsp;&nbsp;</span>	<span class="comment">// waiting indicates that wake needs to be notified when an m</span>
<span id="L2614" class="ln">  2614&nbsp;&nbsp;</span>	<span class="comment">// is put on the list.</span>
<span id="L2615" class="ln">  2615&nbsp;&nbsp;</span>	waiting bool
<span id="L2616" class="ln">  2616&nbsp;&nbsp;</span>	wake    note
<span id="L2617" class="ln">  2617&nbsp;&nbsp;</span>
<span id="L2618" class="ln">  2618&nbsp;&nbsp;</span>	<span class="comment">// haveTemplateThread indicates that the templateThread has</span>
<span id="L2619" class="ln">  2619&nbsp;&nbsp;</span>	<span class="comment">// been started. This is not protected by lock. Use cas to set</span>
<span id="L2620" class="ln">  2620&nbsp;&nbsp;</span>	<span class="comment">// to 1.</span>
<span id="L2621" class="ln">  2621&nbsp;&nbsp;</span>	haveTemplateThread uint32
<span id="L2622" class="ln">  2622&nbsp;&nbsp;</span>}
<span id="L2623" class="ln">  2623&nbsp;&nbsp;</span>
<span id="L2624" class="ln">  2624&nbsp;&nbsp;</span><span class="comment">// Create a new m. It will start off with a call to fn, or else the scheduler.</span>
<span id="L2625" class="ln">  2625&nbsp;&nbsp;</span><span class="comment">// fn needs to be static and not a heap allocated closure.</span>
<span id="L2626" class="ln">  2626&nbsp;&nbsp;</span><span class="comment">// May run with m.p==nil, so write barriers are not allowed.</span>
<span id="L2627" class="ln">  2627&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2628" class="ln">  2628&nbsp;&nbsp;</span><span class="comment">// id is optional pre-allocated m ID. Omit by passing -1.</span>
<span id="L2629" class="ln">  2629&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2630" class="ln">  2630&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L2631" class="ln">  2631&nbsp;&nbsp;</span>func newm(fn func(), pp *p, id int64) {
<span id="L2632" class="ln">  2632&nbsp;&nbsp;</span>	<span class="comment">// allocm adds a new M to allm, but they do not start until created by</span>
<span id="L2633" class="ln">  2633&nbsp;&nbsp;</span>	<span class="comment">// the OS in newm1 or the template thread.</span>
<span id="L2634" class="ln">  2634&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2635" class="ln">  2635&nbsp;&nbsp;</span>	<span class="comment">// doAllThreadsSyscall requires that every M in allm will eventually</span>
<span id="L2636" class="ln">  2636&nbsp;&nbsp;</span>	<span class="comment">// start and be signal-able, even with a STW.</span>
<span id="L2637" class="ln">  2637&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2638" class="ln">  2638&nbsp;&nbsp;</span>	<span class="comment">// Disable preemption here until we start the thread to ensure that</span>
<span id="L2639" class="ln">  2639&nbsp;&nbsp;</span>	<span class="comment">// newm is not preempted between allocm and starting the new thread,</span>
<span id="L2640" class="ln">  2640&nbsp;&nbsp;</span>	<span class="comment">// ensuring that anything added to allm is guaranteed to eventually</span>
<span id="L2641" class="ln">  2641&nbsp;&nbsp;</span>	<span class="comment">// start.</span>
<span id="L2642" class="ln">  2642&nbsp;&nbsp;</span>	acquirem()
<span id="L2643" class="ln">  2643&nbsp;&nbsp;</span>
<span id="L2644" class="ln">  2644&nbsp;&nbsp;</span>	mp := allocm(pp, fn, id)
<span id="L2645" class="ln">  2645&nbsp;&nbsp;</span>	mp.nextp.set(pp)
<span id="L2646" class="ln">  2646&nbsp;&nbsp;</span>	mp.sigmask = initSigmask
<span id="L2647" class="ln">  2647&nbsp;&nbsp;</span>	if gp := getg(); gp != nil &amp;&amp; gp.m != nil &amp;&amp; (gp.m.lockedExt != 0 || gp.m.incgo) &amp;&amp; GOOS != &#34;plan9&#34; {
<span id="L2648" class="ln">  2648&nbsp;&nbsp;</span>		<span class="comment">// We&#39;re on a locked M or a thread that may have been</span>
<span id="L2649" class="ln">  2649&nbsp;&nbsp;</span>		<span class="comment">// started by C. The kernel state of this thread may</span>
<span id="L2650" class="ln">  2650&nbsp;&nbsp;</span>		<span class="comment">// be strange (the user may have locked it for that</span>
<span id="L2651" class="ln">  2651&nbsp;&nbsp;</span>		<span class="comment">// purpose). We don&#39;t want to clone that into another</span>
<span id="L2652" class="ln">  2652&nbsp;&nbsp;</span>		<span class="comment">// thread. Instead, ask a known-good thread to create</span>
<span id="L2653" class="ln">  2653&nbsp;&nbsp;</span>		<span class="comment">// the thread for us.</span>
<span id="L2654" class="ln">  2654&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L2655" class="ln">  2655&nbsp;&nbsp;</span>		<span class="comment">// This is disabled on Plan 9. See golang.org/issue/22227.</span>
<span id="L2656" class="ln">  2656&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L2657" class="ln">  2657&nbsp;&nbsp;</span>		<span class="comment">// TODO: This may be unnecessary on Windows, which</span>
<span id="L2658" class="ln">  2658&nbsp;&nbsp;</span>		<span class="comment">// doesn&#39;t model thread creation off fork.</span>
<span id="L2659" class="ln">  2659&nbsp;&nbsp;</span>		lock(&amp;newmHandoff.lock)
<span id="L2660" class="ln">  2660&nbsp;&nbsp;</span>		if newmHandoff.haveTemplateThread == 0 {
<span id="L2661" class="ln">  2661&nbsp;&nbsp;</span>			throw(&#34;on a locked thread with no template thread&#34;)
<span id="L2662" class="ln">  2662&nbsp;&nbsp;</span>		}
<span id="L2663" class="ln">  2663&nbsp;&nbsp;</span>		mp.schedlink = newmHandoff.newm
<span id="L2664" class="ln">  2664&nbsp;&nbsp;</span>		newmHandoff.newm.set(mp)
<span id="L2665" class="ln">  2665&nbsp;&nbsp;</span>		if newmHandoff.waiting {
<span id="L2666" class="ln">  2666&nbsp;&nbsp;</span>			newmHandoff.waiting = false
<span id="L2667" class="ln">  2667&nbsp;&nbsp;</span>			notewakeup(&amp;newmHandoff.wake)
<span id="L2668" class="ln">  2668&nbsp;&nbsp;</span>		}
<span id="L2669" class="ln">  2669&nbsp;&nbsp;</span>		unlock(&amp;newmHandoff.lock)
<span id="L2670" class="ln">  2670&nbsp;&nbsp;</span>		<span class="comment">// The M has not started yet, but the template thread does not</span>
<span id="L2671" class="ln">  2671&nbsp;&nbsp;</span>		<span class="comment">// participate in STW, so it will always process queued Ms and</span>
<span id="L2672" class="ln">  2672&nbsp;&nbsp;</span>		<span class="comment">// it is safe to releasem.</span>
<span id="L2673" class="ln">  2673&nbsp;&nbsp;</span>		releasem(getg().m)
<span id="L2674" class="ln">  2674&nbsp;&nbsp;</span>		return
<span id="L2675" class="ln">  2675&nbsp;&nbsp;</span>	}
<span id="L2676" class="ln">  2676&nbsp;&nbsp;</span>	newm1(mp)
<span id="L2677" class="ln">  2677&nbsp;&nbsp;</span>	releasem(getg().m)
<span id="L2678" class="ln">  2678&nbsp;&nbsp;</span>}
<span id="L2679" class="ln">  2679&nbsp;&nbsp;</span>
<span id="L2680" class="ln">  2680&nbsp;&nbsp;</span>func newm1(mp *m) {
<span id="L2681" class="ln">  2681&nbsp;&nbsp;</span>	if iscgo {
<span id="L2682" class="ln">  2682&nbsp;&nbsp;</span>		var ts cgothreadstart
<span id="L2683" class="ln">  2683&nbsp;&nbsp;</span>		if _cgo_thread_start == nil {
<span id="L2684" class="ln">  2684&nbsp;&nbsp;</span>			throw(&#34;_cgo_thread_start missing&#34;)
<span id="L2685" class="ln">  2685&nbsp;&nbsp;</span>		}
<span id="L2686" class="ln">  2686&nbsp;&nbsp;</span>		ts.g.set(mp.g0)
<span id="L2687" class="ln">  2687&nbsp;&nbsp;</span>		ts.tls = (*uint64)(unsafe.Pointer(&amp;mp.tls[0]))
<span id="L2688" class="ln">  2688&nbsp;&nbsp;</span>		ts.fn = unsafe.Pointer(abi.FuncPCABI0(mstart))
<span id="L2689" class="ln">  2689&nbsp;&nbsp;</span>		if msanenabled {
<span id="L2690" class="ln">  2690&nbsp;&nbsp;</span>			msanwrite(unsafe.Pointer(&amp;ts), unsafe.Sizeof(ts))
<span id="L2691" class="ln">  2691&nbsp;&nbsp;</span>		}
<span id="L2692" class="ln">  2692&nbsp;&nbsp;</span>		if asanenabled {
<span id="L2693" class="ln">  2693&nbsp;&nbsp;</span>			asanwrite(unsafe.Pointer(&amp;ts), unsafe.Sizeof(ts))
<span id="L2694" class="ln">  2694&nbsp;&nbsp;</span>		}
<span id="L2695" class="ln">  2695&nbsp;&nbsp;</span>		execLock.rlock() <span class="comment">// Prevent process clone.</span>
<span id="L2696" class="ln">  2696&nbsp;&nbsp;</span>		asmcgocall(_cgo_thread_start, unsafe.Pointer(&amp;ts))
<span id="L2697" class="ln">  2697&nbsp;&nbsp;</span>		execLock.runlock()
<span id="L2698" class="ln">  2698&nbsp;&nbsp;</span>		return
<span id="L2699" class="ln">  2699&nbsp;&nbsp;</span>	}
<span id="L2700" class="ln">  2700&nbsp;&nbsp;</span>	execLock.rlock() <span class="comment">// Prevent process clone.</span>
<span id="L2701" class="ln">  2701&nbsp;&nbsp;</span>	newosproc(mp)
<span id="L2702" class="ln">  2702&nbsp;&nbsp;</span>	execLock.runlock()
<span id="L2703" class="ln">  2703&nbsp;&nbsp;</span>}
<span id="L2704" class="ln">  2704&nbsp;&nbsp;</span>
<span id="L2705" class="ln">  2705&nbsp;&nbsp;</span><span class="comment">// startTemplateThread starts the template thread if it is not already</span>
<span id="L2706" class="ln">  2706&nbsp;&nbsp;</span><span class="comment">// running.</span>
<span id="L2707" class="ln">  2707&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2708" class="ln">  2708&nbsp;&nbsp;</span><span class="comment">// The calling thread must itself be in a known-good state.</span>
<span id="L2709" class="ln">  2709&nbsp;&nbsp;</span>func startTemplateThread() {
<span id="L2710" class="ln">  2710&nbsp;&nbsp;</span>	if GOARCH == &#34;wasm&#34; { <span class="comment">// no threads on wasm yet</span>
<span id="L2711" class="ln">  2711&nbsp;&nbsp;</span>		return
<span id="L2712" class="ln">  2712&nbsp;&nbsp;</span>	}
<span id="L2713" class="ln">  2713&nbsp;&nbsp;</span>
<span id="L2714" class="ln">  2714&nbsp;&nbsp;</span>	<span class="comment">// Disable preemption to guarantee that the template thread will be</span>
<span id="L2715" class="ln">  2715&nbsp;&nbsp;</span>	<span class="comment">// created before a park once haveTemplateThread is set.</span>
<span id="L2716" class="ln">  2716&nbsp;&nbsp;</span>	mp := acquirem()
<span id="L2717" class="ln">  2717&nbsp;&nbsp;</span>	if !atomic.Cas(&amp;newmHandoff.haveTemplateThread, 0, 1) {
<span id="L2718" class="ln">  2718&nbsp;&nbsp;</span>		releasem(mp)
<span id="L2719" class="ln">  2719&nbsp;&nbsp;</span>		return
<span id="L2720" class="ln">  2720&nbsp;&nbsp;</span>	}
<span id="L2721" class="ln">  2721&nbsp;&nbsp;</span>	newm(templateThread, nil, -1)
<span id="L2722" class="ln">  2722&nbsp;&nbsp;</span>	releasem(mp)
<span id="L2723" class="ln">  2723&nbsp;&nbsp;</span>}
<span id="L2724" class="ln">  2724&nbsp;&nbsp;</span>
<span id="L2725" class="ln">  2725&nbsp;&nbsp;</span><span class="comment">// templateThread is a thread in a known-good state that exists solely</span>
<span id="L2726" class="ln">  2726&nbsp;&nbsp;</span><span class="comment">// to start new threads in known-good states when the calling thread</span>
<span id="L2727" class="ln">  2727&nbsp;&nbsp;</span><span class="comment">// may not be in a good state.</span>
<span id="L2728" class="ln">  2728&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2729" class="ln">  2729&nbsp;&nbsp;</span><span class="comment">// Many programs never need this, so templateThread is started lazily</span>
<span id="L2730" class="ln">  2730&nbsp;&nbsp;</span><span class="comment">// when we first enter a state that might lead to running on a thread</span>
<span id="L2731" class="ln">  2731&nbsp;&nbsp;</span><span class="comment">// in an unknown state.</span>
<span id="L2732" class="ln">  2732&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2733" class="ln">  2733&nbsp;&nbsp;</span><span class="comment">// templateThread runs on an M without a P, so it must not have write</span>
<span id="L2734" class="ln">  2734&nbsp;&nbsp;</span><span class="comment">// barriers.</span>
<span id="L2735" class="ln">  2735&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2736" class="ln">  2736&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L2737" class="ln">  2737&nbsp;&nbsp;</span>func templateThread() {
<span id="L2738" class="ln">  2738&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L2739" class="ln">  2739&nbsp;&nbsp;</span>	sched.nmsys++
<span id="L2740" class="ln">  2740&nbsp;&nbsp;</span>	checkdead()
<span id="L2741" class="ln">  2741&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L2742" class="ln">  2742&nbsp;&nbsp;</span>
<span id="L2743" class="ln">  2743&nbsp;&nbsp;</span>	for {
<span id="L2744" class="ln">  2744&nbsp;&nbsp;</span>		lock(&amp;newmHandoff.lock)
<span id="L2745" class="ln">  2745&nbsp;&nbsp;</span>		for newmHandoff.newm != 0 {
<span id="L2746" class="ln">  2746&nbsp;&nbsp;</span>			newm := newmHandoff.newm.ptr()
<span id="L2747" class="ln">  2747&nbsp;&nbsp;</span>			newmHandoff.newm = 0
<span id="L2748" class="ln">  2748&nbsp;&nbsp;</span>			unlock(&amp;newmHandoff.lock)
<span id="L2749" class="ln">  2749&nbsp;&nbsp;</span>			for newm != nil {
<span id="L2750" class="ln">  2750&nbsp;&nbsp;</span>				next := newm.schedlink.ptr()
<span id="L2751" class="ln">  2751&nbsp;&nbsp;</span>				newm.schedlink = 0
<span id="L2752" class="ln">  2752&nbsp;&nbsp;</span>				newm1(newm)
<span id="L2753" class="ln">  2753&nbsp;&nbsp;</span>				newm = next
<span id="L2754" class="ln">  2754&nbsp;&nbsp;</span>			}
<span id="L2755" class="ln">  2755&nbsp;&nbsp;</span>			lock(&amp;newmHandoff.lock)
<span id="L2756" class="ln">  2756&nbsp;&nbsp;</span>		}
<span id="L2757" class="ln">  2757&nbsp;&nbsp;</span>		newmHandoff.waiting = true
<span id="L2758" class="ln">  2758&nbsp;&nbsp;</span>		noteclear(&amp;newmHandoff.wake)
<span id="L2759" class="ln">  2759&nbsp;&nbsp;</span>		unlock(&amp;newmHandoff.lock)
<span id="L2760" class="ln">  2760&nbsp;&nbsp;</span>		notesleep(&amp;newmHandoff.wake)
<span id="L2761" class="ln">  2761&nbsp;&nbsp;</span>	}
<span id="L2762" class="ln">  2762&nbsp;&nbsp;</span>}
<span id="L2763" class="ln">  2763&nbsp;&nbsp;</span>
<span id="L2764" class="ln">  2764&nbsp;&nbsp;</span><span class="comment">// Stops execution of the current m until new work is available.</span>
<span id="L2765" class="ln">  2765&nbsp;&nbsp;</span><span class="comment">// Returns with acquired P.</span>
<span id="L2766" class="ln">  2766&nbsp;&nbsp;</span>func stopm() {
<span id="L2767" class="ln">  2767&nbsp;&nbsp;</span>	gp := getg()
<span id="L2768" class="ln">  2768&nbsp;&nbsp;</span>
<span id="L2769" class="ln">  2769&nbsp;&nbsp;</span>	if gp.m.locks != 0 {
<span id="L2770" class="ln">  2770&nbsp;&nbsp;</span>		throw(&#34;stopm holding locks&#34;)
<span id="L2771" class="ln">  2771&nbsp;&nbsp;</span>	}
<span id="L2772" class="ln">  2772&nbsp;&nbsp;</span>	if gp.m.p != 0 {
<span id="L2773" class="ln">  2773&nbsp;&nbsp;</span>		throw(&#34;stopm holding p&#34;)
<span id="L2774" class="ln">  2774&nbsp;&nbsp;</span>	}
<span id="L2775" class="ln">  2775&nbsp;&nbsp;</span>	if gp.m.spinning {
<span id="L2776" class="ln">  2776&nbsp;&nbsp;</span>		throw(&#34;stopm spinning&#34;)
<span id="L2777" class="ln">  2777&nbsp;&nbsp;</span>	}
<span id="L2778" class="ln">  2778&nbsp;&nbsp;</span>
<span id="L2779" class="ln">  2779&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L2780" class="ln">  2780&nbsp;&nbsp;</span>	mput(gp.m)
<span id="L2781" class="ln">  2781&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L2782" class="ln">  2782&nbsp;&nbsp;</span>	mPark()
<span id="L2783" class="ln">  2783&nbsp;&nbsp;</span>	acquirep(gp.m.nextp.ptr())
<span id="L2784" class="ln">  2784&nbsp;&nbsp;</span>	gp.m.nextp = 0
<span id="L2785" class="ln">  2785&nbsp;&nbsp;</span>}
<span id="L2786" class="ln">  2786&nbsp;&nbsp;</span>
<span id="L2787" class="ln">  2787&nbsp;&nbsp;</span>func mspinning() {
<span id="L2788" class="ln">  2788&nbsp;&nbsp;</span>	<span class="comment">// startm&#39;s caller incremented nmspinning. Set the new M&#39;s spinning.</span>
<span id="L2789" class="ln">  2789&nbsp;&nbsp;</span>	getg().m.spinning = true
<span id="L2790" class="ln">  2790&nbsp;&nbsp;</span>}
<span id="L2791" class="ln">  2791&nbsp;&nbsp;</span>
<span id="L2792" class="ln">  2792&nbsp;&nbsp;</span><span class="comment">// Schedules some M to run the p (creates an M if necessary).</span>
<span id="L2793" class="ln">  2793&nbsp;&nbsp;</span><span class="comment">// If p==nil, tries to get an idle P, if no idle P&#39;s does nothing.</span>
<span id="L2794" class="ln">  2794&nbsp;&nbsp;</span><span class="comment">// May run with m.p==nil, so write barriers are not allowed.</span>
<span id="L2795" class="ln">  2795&nbsp;&nbsp;</span><span class="comment">// If spinning is set, the caller has incremented nmspinning and must provide a</span>
<span id="L2796" class="ln">  2796&nbsp;&nbsp;</span><span class="comment">// P. startm will set m.spinning in the newly started M.</span>
<span id="L2797" class="ln">  2797&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2798" class="ln">  2798&nbsp;&nbsp;</span><span class="comment">// Callers passing a non-nil P must call from a non-preemptible context. See</span>
<span id="L2799" class="ln">  2799&nbsp;&nbsp;</span><span class="comment">// comment on acquirem below.</span>
<span id="L2800" class="ln">  2800&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2801" class="ln">  2801&nbsp;&nbsp;</span><span class="comment">// Argument lockheld indicates whether the caller already acquired the</span>
<span id="L2802" class="ln">  2802&nbsp;&nbsp;</span><span class="comment">// scheduler lock. Callers holding the lock when making the call must pass</span>
<span id="L2803" class="ln">  2803&nbsp;&nbsp;</span><span class="comment">// true. The lock might be temporarily dropped, but will be reacquired before</span>
<span id="L2804" class="ln">  2804&nbsp;&nbsp;</span><span class="comment">// returning.</span>
<span id="L2805" class="ln">  2805&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2806" class="ln">  2806&nbsp;&nbsp;</span><span class="comment">// Must not have write barriers because this may be called without a P.</span>
<span id="L2807" class="ln">  2807&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2808" class="ln">  2808&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L2809" class="ln">  2809&nbsp;&nbsp;</span>func startm(pp *p, spinning, lockheld bool) {
<span id="L2810" class="ln">  2810&nbsp;&nbsp;</span>	<span class="comment">// Disable preemption.</span>
<span id="L2811" class="ln">  2811&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2812" class="ln">  2812&nbsp;&nbsp;</span>	<span class="comment">// Every owned P must have an owner that will eventually stop it in the</span>
<span id="L2813" class="ln">  2813&nbsp;&nbsp;</span>	<span class="comment">// event of a GC stop request. startm takes transient ownership of a P</span>
<span id="L2814" class="ln">  2814&nbsp;&nbsp;</span>	<span class="comment">// (either from argument or pidleget below) and transfers ownership to</span>
<span id="L2815" class="ln">  2815&nbsp;&nbsp;</span>	<span class="comment">// a started M, which will be responsible for performing the stop.</span>
<span id="L2816" class="ln">  2816&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2817" class="ln">  2817&nbsp;&nbsp;</span>	<span class="comment">// Preemption must be disabled during this transient ownership,</span>
<span id="L2818" class="ln">  2818&nbsp;&nbsp;</span>	<span class="comment">// otherwise the P this is running on may enter GC stop while still</span>
<span id="L2819" class="ln">  2819&nbsp;&nbsp;</span>	<span class="comment">// holding the transient P, leaving that P in limbo and deadlocking the</span>
<span id="L2820" class="ln">  2820&nbsp;&nbsp;</span>	<span class="comment">// STW.</span>
<span id="L2821" class="ln">  2821&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2822" class="ln">  2822&nbsp;&nbsp;</span>	<span class="comment">// Callers passing a non-nil P must already be in non-preemptible</span>
<span id="L2823" class="ln">  2823&nbsp;&nbsp;</span>	<span class="comment">// context, otherwise such preemption could occur on function entry to</span>
<span id="L2824" class="ln">  2824&nbsp;&nbsp;</span>	<span class="comment">// startm. Callers passing a nil P may be preemptible, so we must</span>
<span id="L2825" class="ln">  2825&nbsp;&nbsp;</span>	<span class="comment">// disable preemption before acquiring a P from pidleget below.</span>
<span id="L2826" class="ln">  2826&nbsp;&nbsp;</span>	mp := acquirem()
<span id="L2827" class="ln">  2827&nbsp;&nbsp;</span>	if !lockheld {
<span id="L2828" class="ln">  2828&nbsp;&nbsp;</span>		lock(&amp;sched.lock)
<span id="L2829" class="ln">  2829&nbsp;&nbsp;</span>	}
<span id="L2830" class="ln">  2830&nbsp;&nbsp;</span>	if pp == nil {
<span id="L2831" class="ln">  2831&nbsp;&nbsp;</span>		if spinning {
<span id="L2832" class="ln">  2832&nbsp;&nbsp;</span>			<span class="comment">// TODO(prattmic): All remaining calls to this function</span>
<span id="L2833" class="ln">  2833&nbsp;&nbsp;</span>			<span class="comment">// with _p_ == nil could be cleaned up to find a P</span>
<span id="L2834" class="ln">  2834&nbsp;&nbsp;</span>			<span class="comment">// before calling startm.</span>
<span id="L2835" class="ln">  2835&nbsp;&nbsp;</span>			throw(&#34;startm: P required for spinning=true&#34;)
<span id="L2836" class="ln">  2836&nbsp;&nbsp;</span>		}
<span id="L2837" class="ln">  2837&nbsp;&nbsp;</span>		pp, _ = pidleget(0)
<span id="L2838" class="ln">  2838&nbsp;&nbsp;</span>		if pp == nil {
<span id="L2839" class="ln">  2839&nbsp;&nbsp;</span>			if !lockheld {
<span id="L2840" class="ln">  2840&nbsp;&nbsp;</span>				unlock(&amp;sched.lock)
<span id="L2841" class="ln">  2841&nbsp;&nbsp;</span>			}
<span id="L2842" class="ln">  2842&nbsp;&nbsp;</span>			releasem(mp)
<span id="L2843" class="ln">  2843&nbsp;&nbsp;</span>			return
<span id="L2844" class="ln">  2844&nbsp;&nbsp;</span>		}
<span id="L2845" class="ln">  2845&nbsp;&nbsp;</span>	}
<span id="L2846" class="ln">  2846&nbsp;&nbsp;</span>	nmp := mget()
<span id="L2847" class="ln">  2847&nbsp;&nbsp;</span>	if nmp == nil {
<span id="L2848" class="ln">  2848&nbsp;&nbsp;</span>		<span class="comment">// No M is available, we must drop sched.lock and call newm.</span>
<span id="L2849" class="ln">  2849&nbsp;&nbsp;</span>		<span class="comment">// However, we already own a P to assign to the M.</span>
<span id="L2850" class="ln">  2850&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L2851" class="ln">  2851&nbsp;&nbsp;</span>		<span class="comment">// Once sched.lock is released, another G (e.g., in a syscall),</span>
<span id="L2852" class="ln">  2852&nbsp;&nbsp;</span>		<span class="comment">// could find no idle P while checkdead finds a runnable G but</span>
<span id="L2853" class="ln">  2853&nbsp;&nbsp;</span>		<span class="comment">// no running M&#39;s because this new M hasn&#39;t started yet, thus</span>
<span id="L2854" class="ln">  2854&nbsp;&nbsp;</span>		<span class="comment">// throwing in an apparent deadlock.</span>
<span id="L2855" class="ln">  2855&nbsp;&nbsp;</span>		<span class="comment">// This apparent deadlock is possible when startm is called</span>
<span id="L2856" class="ln">  2856&nbsp;&nbsp;</span>		<span class="comment">// from sysmon, which doesn&#39;t count as a running M.</span>
<span id="L2857" class="ln">  2857&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L2858" class="ln">  2858&nbsp;&nbsp;</span>		<span class="comment">// Avoid this situation by pre-allocating the ID for the new M,</span>
<span id="L2859" class="ln">  2859&nbsp;&nbsp;</span>		<span class="comment">// thus marking it as &#39;running&#39; before we drop sched.lock. This</span>
<span id="L2860" class="ln">  2860&nbsp;&nbsp;</span>		<span class="comment">// new M will eventually run the scheduler to execute any</span>
<span id="L2861" class="ln">  2861&nbsp;&nbsp;</span>		<span class="comment">// queued G&#39;s.</span>
<span id="L2862" class="ln">  2862&nbsp;&nbsp;</span>		id := mReserveID()
<span id="L2863" class="ln">  2863&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L2864" class="ln">  2864&nbsp;&nbsp;</span>
<span id="L2865" class="ln">  2865&nbsp;&nbsp;</span>		var fn func()
<span id="L2866" class="ln">  2866&nbsp;&nbsp;</span>		if spinning {
<span id="L2867" class="ln">  2867&nbsp;&nbsp;</span>			<span class="comment">// The caller incremented nmspinning, so set m.spinning in the new M.</span>
<span id="L2868" class="ln">  2868&nbsp;&nbsp;</span>			fn = mspinning
<span id="L2869" class="ln">  2869&nbsp;&nbsp;</span>		}
<span id="L2870" class="ln">  2870&nbsp;&nbsp;</span>		newm(fn, pp, id)
<span id="L2871" class="ln">  2871&nbsp;&nbsp;</span>
<span id="L2872" class="ln">  2872&nbsp;&nbsp;</span>		if lockheld {
<span id="L2873" class="ln">  2873&nbsp;&nbsp;</span>			lock(&amp;sched.lock)
<span id="L2874" class="ln">  2874&nbsp;&nbsp;</span>		}
<span id="L2875" class="ln">  2875&nbsp;&nbsp;</span>		<span class="comment">// Ownership transfer of pp committed by start in newm.</span>
<span id="L2876" class="ln">  2876&nbsp;&nbsp;</span>		<span class="comment">// Preemption is now safe.</span>
<span id="L2877" class="ln">  2877&nbsp;&nbsp;</span>		releasem(mp)
<span id="L2878" class="ln">  2878&nbsp;&nbsp;</span>		return
<span id="L2879" class="ln">  2879&nbsp;&nbsp;</span>	}
<span id="L2880" class="ln">  2880&nbsp;&nbsp;</span>	if !lockheld {
<span id="L2881" class="ln">  2881&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L2882" class="ln">  2882&nbsp;&nbsp;</span>	}
<span id="L2883" class="ln">  2883&nbsp;&nbsp;</span>	if nmp.spinning {
<span id="L2884" class="ln">  2884&nbsp;&nbsp;</span>		throw(&#34;startm: m is spinning&#34;)
<span id="L2885" class="ln">  2885&nbsp;&nbsp;</span>	}
<span id="L2886" class="ln">  2886&nbsp;&nbsp;</span>	if nmp.nextp != 0 {
<span id="L2887" class="ln">  2887&nbsp;&nbsp;</span>		throw(&#34;startm: m has p&#34;)
<span id="L2888" class="ln">  2888&nbsp;&nbsp;</span>	}
<span id="L2889" class="ln">  2889&nbsp;&nbsp;</span>	if spinning &amp;&amp; !runqempty(pp) {
<span id="L2890" class="ln">  2890&nbsp;&nbsp;</span>		throw(&#34;startm: p has runnable gs&#34;)
<span id="L2891" class="ln">  2891&nbsp;&nbsp;</span>	}
<span id="L2892" class="ln">  2892&nbsp;&nbsp;</span>	<span class="comment">// The caller incremented nmspinning, so set m.spinning in the new M.</span>
<span id="L2893" class="ln">  2893&nbsp;&nbsp;</span>	nmp.spinning = spinning
<span id="L2894" class="ln">  2894&nbsp;&nbsp;</span>	nmp.nextp.set(pp)
<span id="L2895" class="ln">  2895&nbsp;&nbsp;</span>	notewakeup(&amp;nmp.park)
<span id="L2896" class="ln">  2896&nbsp;&nbsp;</span>	<span class="comment">// Ownership transfer of pp committed by wakeup. Preemption is now</span>
<span id="L2897" class="ln">  2897&nbsp;&nbsp;</span>	<span class="comment">// safe.</span>
<span id="L2898" class="ln">  2898&nbsp;&nbsp;</span>	releasem(mp)
<span id="L2899" class="ln">  2899&nbsp;&nbsp;</span>}
<span id="L2900" class="ln">  2900&nbsp;&nbsp;</span>
<span id="L2901" class="ln">  2901&nbsp;&nbsp;</span><span class="comment">// Hands off P from syscall or locked M.</span>
<span id="L2902" class="ln">  2902&nbsp;&nbsp;</span><span class="comment">// Always runs without a P, so write barriers are not allowed.</span>
<span id="L2903" class="ln">  2903&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2904" class="ln">  2904&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L2905" class="ln">  2905&nbsp;&nbsp;</span>func handoffp(pp *p) {
<span id="L2906" class="ln">  2906&nbsp;&nbsp;</span>	<span class="comment">// handoffp must start an M in any situation where</span>
<span id="L2907" class="ln">  2907&nbsp;&nbsp;</span>	<span class="comment">// findrunnable would return a G to run on pp.</span>
<span id="L2908" class="ln">  2908&nbsp;&nbsp;</span>
<span id="L2909" class="ln">  2909&nbsp;&nbsp;</span>	<span class="comment">// if it has local work, start it straight away</span>
<span id="L2910" class="ln">  2910&nbsp;&nbsp;</span>	if !runqempty(pp) || sched.runqsize != 0 {
<span id="L2911" class="ln">  2911&nbsp;&nbsp;</span>		startm(pp, false, false)
<span id="L2912" class="ln">  2912&nbsp;&nbsp;</span>		return
<span id="L2913" class="ln">  2913&nbsp;&nbsp;</span>	}
<span id="L2914" class="ln">  2914&nbsp;&nbsp;</span>	<span class="comment">// if there&#39;s trace work to do, start it straight away</span>
<span id="L2915" class="ln">  2915&nbsp;&nbsp;</span>	if (traceEnabled() || traceShuttingDown()) &amp;&amp; traceReaderAvailable() != nil {
<span id="L2916" class="ln">  2916&nbsp;&nbsp;</span>		startm(pp, false, false)
<span id="L2917" class="ln">  2917&nbsp;&nbsp;</span>		return
<span id="L2918" class="ln">  2918&nbsp;&nbsp;</span>	}
<span id="L2919" class="ln">  2919&nbsp;&nbsp;</span>	<span class="comment">// if it has GC work, start it straight away</span>
<span id="L2920" class="ln">  2920&nbsp;&nbsp;</span>	if gcBlackenEnabled != 0 &amp;&amp; gcMarkWorkAvailable(pp) {
<span id="L2921" class="ln">  2921&nbsp;&nbsp;</span>		startm(pp, false, false)
<span id="L2922" class="ln">  2922&nbsp;&nbsp;</span>		return
<span id="L2923" class="ln">  2923&nbsp;&nbsp;</span>	}
<span id="L2924" class="ln">  2924&nbsp;&nbsp;</span>	<span class="comment">// no local work, check that there are no spinning/idle M&#39;s,</span>
<span id="L2925" class="ln">  2925&nbsp;&nbsp;</span>	<span class="comment">// otherwise our help is not required</span>
<span id="L2926" class="ln">  2926&nbsp;&nbsp;</span>	if sched.nmspinning.Load()+sched.npidle.Load() == 0 &amp;&amp; sched.nmspinning.CompareAndSwap(0, 1) { <span class="comment">// TODO: fast atomic</span>
<span id="L2927" class="ln">  2927&nbsp;&nbsp;</span>		sched.needspinning.Store(0)
<span id="L2928" class="ln">  2928&nbsp;&nbsp;</span>		startm(pp, true, false)
<span id="L2929" class="ln">  2929&nbsp;&nbsp;</span>		return
<span id="L2930" class="ln">  2930&nbsp;&nbsp;</span>	}
<span id="L2931" class="ln">  2931&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L2932" class="ln">  2932&nbsp;&nbsp;</span>	if sched.gcwaiting.Load() {
<span id="L2933" class="ln">  2933&nbsp;&nbsp;</span>		pp.status = _Pgcstop
<span id="L2934" class="ln">  2934&nbsp;&nbsp;</span>		sched.stopwait--
<span id="L2935" class="ln">  2935&nbsp;&nbsp;</span>		if sched.stopwait == 0 {
<span id="L2936" class="ln">  2936&nbsp;&nbsp;</span>			notewakeup(&amp;sched.stopnote)
<span id="L2937" class="ln">  2937&nbsp;&nbsp;</span>		}
<span id="L2938" class="ln">  2938&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L2939" class="ln">  2939&nbsp;&nbsp;</span>		return
<span id="L2940" class="ln">  2940&nbsp;&nbsp;</span>	}
<span id="L2941" class="ln">  2941&nbsp;&nbsp;</span>	if pp.runSafePointFn != 0 &amp;&amp; atomic.Cas(&amp;pp.runSafePointFn, 1, 0) {
<span id="L2942" class="ln">  2942&nbsp;&nbsp;</span>		sched.safePointFn(pp)
<span id="L2943" class="ln">  2943&nbsp;&nbsp;</span>		sched.safePointWait--
<span id="L2944" class="ln">  2944&nbsp;&nbsp;</span>		if sched.safePointWait == 0 {
<span id="L2945" class="ln">  2945&nbsp;&nbsp;</span>			notewakeup(&amp;sched.safePointNote)
<span id="L2946" class="ln">  2946&nbsp;&nbsp;</span>		}
<span id="L2947" class="ln">  2947&nbsp;&nbsp;</span>	}
<span id="L2948" class="ln">  2948&nbsp;&nbsp;</span>	if sched.runqsize != 0 {
<span id="L2949" class="ln">  2949&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L2950" class="ln">  2950&nbsp;&nbsp;</span>		startm(pp, false, false)
<span id="L2951" class="ln">  2951&nbsp;&nbsp;</span>		return
<span id="L2952" class="ln">  2952&nbsp;&nbsp;</span>	}
<span id="L2953" class="ln">  2953&nbsp;&nbsp;</span>	<span class="comment">// If this is the last running P and nobody is polling network,</span>
<span id="L2954" class="ln">  2954&nbsp;&nbsp;</span>	<span class="comment">// need to wakeup another M to poll network.</span>
<span id="L2955" class="ln">  2955&nbsp;&nbsp;</span>	if sched.npidle.Load() == gomaxprocs-1 &amp;&amp; sched.lastpoll.Load() != 0 {
<span id="L2956" class="ln">  2956&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L2957" class="ln">  2957&nbsp;&nbsp;</span>		startm(pp, false, false)
<span id="L2958" class="ln">  2958&nbsp;&nbsp;</span>		return
<span id="L2959" class="ln">  2959&nbsp;&nbsp;</span>	}
<span id="L2960" class="ln">  2960&nbsp;&nbsp;</span>
<span id="L2961" class="ln">  2961&nbsp;&nbsp;</span>	<span class="comment">// The scheduler lock cannot be held when calling wakeNetPoller below</span>
<span id="L2962" class="ln">  2962&nbsp;&nbsp;</span>	<span class="comment">// because wakeNetPoller may call wakep which may call startm.</span>
<span id="L2963" class="ln">  2963&nbsp;&nbsp;</span>	when := nobarrierWakeTime(pp)
<span id="L2964" class="ln">  2964&nbsp;&nbsp;</span>	pidleput(pp, 0)
<span id="L2965" class="ln">  2965&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L2966" class="ln">  2966&nbsp;&nbsp;</span>
<span id="L2967" class="ln">  2967&nbsp;&nbsp;</span>	if when != 0 {
<span id="L2968" class="ln">  2968&nbsp;&nbsp;</span>		wakeNetPoller(when)
<span id="L2969" class="ln">  2969&nbsp;&nbsp;</span>	}
<span id="L2970" class="ln">  2970&nbsp;&nbsp;</span>}
<span id="L2971" class="ln">  2971&nbsp;&nbsp;</span>
<span id="L2972" class="ln">  2972&nbsp;&nbsp;</span><span class="comment">// Tries to add one more P to execute G&#39;s.</span>
<span id="L2973" class="ln">  2973&nbsp;&nbsp;</span><span class="comment">// Called when a G is made runnable (newproc, ready).</span>
<span id="L2974" class="ln">  2974&nbsp;&nbsp;</span><span class="comment">// Must be called with a P.</span>
<span id="L2975" class="ln">  2975&nbsp;&nbsp;</span>func wakep() {
<span id="L2976" class="ln">  2976&nbsp;&nbsp;</span>	<span class="comment">// Be conservative about spinning threads, only start one if none exist</span>
<span id="L2977" class="ln">  2977&nbsp;&nbsp;</span>	<span class="comment">// already.</span>
<span id="L2978" class="ln">  2978&nbsp;&nbsp;</span>	if sched.nmspinning.Load() != 0 || !sched.nmspinning.CompareAndSwap(0, 1) {
<span id="L2979" class="ln">  2979&nbsp;&nbsp;</span>		return
<span id="L2980" class="ln">  2980&nbsp;&nbsp;</span>	}
<span id="L2981" class="ln">  2981&nbsp;&nbsp;</span>
<span id="L2982" class="ln">  2982&nbsp;&nbsp;</span>	<span class="comment">// Disable preemption until ownership of pp transfers to the next M in</span>
<span id="L2983" class="ln">  2983&nbsp;&nbsp;</span>	<span class="comment">// startm. Otherwise preemption here would leave pp stuck waiting to</span>
<span id="L2984" class="ln">  2984&nbsp;&nbsp;</span>	<span class="comment">// enter _Pgcstop.</span>
<span id="L2985" class="ln">  2985&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2986" class="ln">  2986&nbsp;&nbsp;</span>	<span class="comment">// See preemption comment on acquirem in startm for more details.</span>
<span id="L2987" class="ln">  2987&nbsp;&nbsp;</span>	mp := acquirem()
<span id="L2988" class="ln">  2988&nbsp;&nbsp;</span>
<span id="L2989" class="ln">  2989&nbsp;&nbsp;</span>	var pp *p
<span id="L2990" class="ln">  2990&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L2991" class="ln">  2991&nbsp;&nbsp;</span>	pp, _ = pidlegetSpinning(0)
<span id="L2992" class="ln">  2992&nbsp;&nbsp;</span>	if pp == nil {
<span id="L2993" class="ln">  2993&nbsp;&nbsp;</span>		if sched.nmspinning.Add(-1) &lt; 0 {
<span id="L2994" class="ln">  2994&nbsp;&nbsp;</span>			throw(&#34;wakep: negative nmspinning&#34;)
<span id="L2995" class="ln">  2995&nbsp;&nbsp;</span>		}
<span id="L2996" class="ln">  2996&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L2997" class="ln">  2997&nbsp;&nbsp;</span>		releasem(mp)
<span id="L2998" class="ln">  2998&nbsp;&nbsp;</span>		return
<span id="L2999" class="ln">  2999&nbsp;&nbsp;</span>	}
<span id="L3000" class="ln">  3000&nbsp;&nbsp;</span>	<span class="comment">// Since we always have a P, the race in the &#34;No M is available&#34;</span>
<span id="L3001" class="ln">  3001&nbsp;&nbsp;</span>	<span class="comment">// comment in startm doesn&#39;t apply during the small window between the</span>
<span id="L3002" class="ln">  3002&nbsp;&nbsp;</span>	<span class="comment">// unlock here and lock in startm. A checkdead in between will always</span>
<span id="L3003" class="ln">  3003&nbsp;&nbsp;</span>	<span class="comment">// see at least one running M (ours).</span>
<span id="L3004" class="ln">  3004&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L3005" class="ln">  3005&nbsp;&nbsp;</span>
<span id="L3006" class="ln">  3006&nbsp;&nbsp;</span>	startm(pp, true, false)
<span id="L3007" class="ln">  3007&nbsp;&nbsp;</span>
<span id="L3008" class="ln">  3008&nbsp;&nbsp;</span>	releasem(mp)
<span id="L3009" class="ln">  3009&nbsp;&nbsp;</span>}
<span id="L3010" class="ln">  3010&nbsp;&nbsp;</span>
<span id="L3011" class="ln">  3011&nbsp;&nbsp;</span><span class="comment">// Stops execution of the current m that is locked to a g until the g is runnable again.</span>
<span id="L3012" class="ln">  3012&nbsp;&nbsp;</span><span class="comment">// Returns with acquired P.</span>
<span id="L3013" class="ln">  3013&nbsp;&nbsp;</span>func stoplockedm() {
<span id="L3014" class="ln">  3014&nbsp;&nbsp;</span>	gp := getg()
<span id="L3015" class="ln">  3015&nbsp;&nbsp;</span>
<span id="L3016" class="ln">  3016&nbsp;&nbsp;</span>	if gp.m.lockedg == 0 || gp.m.lockedg.ptr().lockedm.ptr() != gp.m {
<span id="L3017" class="ln">  3017&nbsp;&nbsp;</span>		throw(&#34;stoplockedm: inconsistent locking&#34;)
<span id="L3018" class="ln">  3018&nbsp;&nbsp;</span>	}
<span id="L3019" class="ln">  3019&nbsp;&nbsp;</span>	if gp.m.p != 0 {
<span id="L3020" class="ln">  3020&nbsp;&nbsp;</span>		<span class="comment">// Schedule another M to run this p.</span>
<span id="L3021" class="ln">  3021&nbsp;&nbsp;</span>		pp := releasep()
<span id="L3022" class="ln">  3022&nbsp;&nbsp;</span>		handoffp(pp)
<span id="L3023" class="ln">  3023&nbsp;&nbsp;</span>	}
<span id="L3024" class="ln">  3024&nbsp;&nbsp;</span>	incidlelocked(1)
<span id="L3025" class="ln">  3025&nbsp;&nbsp;</span>	<span class="comment">// Wait until another thread schedules lockedg again.</span>
<span id="L3026" class="ln">  3026&nbsp;&nbsp;</span>	mPark()
<span id="L3027" class="ln">  3027&nbsp;&nbsp;</span>	status := readgstatus(gp.m.lockedg.ptr())
<span id="L3028" class="ln">  3028&nbsp;&nbsp;</span>	if status&amp;^_Gscan != _Grunnable {
<span id="L3029" class="ln">  3029&nbsp;&nbsp;</span>		print(&#34;runtime:stoplockedm: lockedg (atomicstatus=&#34;, status, &#34;) is not Grunnable or Gscanrunnable\n&#34;)
<span id="L3030" class="ln">  3030&nbsp;&nbsp;</span>		dumpgstatus(gp.m.lockedg.ptr())
<span id="L3031" class="ln">  3031&nbsp;&nbsp;</span>		throw(&#34;stoplockedm: not runnable&#34;)
<span id="L3032" class="ln">  3032&nbsp;&nbsp;</span>	}
<span id="L3033" class="ln">  3033&nbsp;&nbsp;</span>	acquirep(gp.m.nextp.ptr())
<span id="L3034" class="ln">  3034&nbsp;&nbsp;</span>	gp.m.nextp = 0
<span id="L3035" class="ln">  3035&nbsp;&nbsp;</span>}
<span id="L3036" class="ln">  3036&nbsp;&nbsp;</span>
<span id="L3037" class="ln">  3037&nbsp;&nbsp;</span><span class="comment">// Schedules the locked m to run the locked gp.</span>
<span id="L3038" class="ln">  3038&nbsp;&nbsp;</span><span class="comment">// May run during STW, so write barriers are not allowed.</span>
<span id="L3039" class="ln">  3039&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3040" class="ln">  3040&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L3041" class="ln">  3041&nbsp;&nbsp;</span>func startlockedm(gp *g) {
<span id="L3042" class="ln">  3042&nbsp;&nbsp;</span>	mp := gp.lockedm.ptr()
<span id="L3043" class="ln">  3043&nbsp;&nbsp;</span>	if mp == getg().m {
<span id="L3044" class="ln">  3044&nbsp;&nbsp;</span>		throw(&#34;startlockedm: locked to me&#34;)
<span id="L3045" class="ln">  3045&nbsp;&nbsp;</span>	}
<span id="L3046" class="ln">  3046&nbsp;&nbsp;</span>	if mp.nextp != 0 {
<span id="L3047" class="ln">  3047&nbsp;&nbsp;</span>		throw(&#34;startlockedm: m has p&#34;)
<span id="L3048" class="ln">  3048&nbsp;&nbsp;</span>	}
<span id="L3049" class="ln">  3049&nbsp;&nbsp;</span>	<span class="comment">// directly handoff current P to the locked m</span>
<span id="L3050" class="ln">  3050&nbsp;&nbsp;</span>	incidlelocked(-1)
<span id="L3051" class="ln">  3051&nbsp;&nbsp;</span>	pp := releasep()
<span id="L3052" class="ln">  3052&nbsp;&nbsp;</span>	mp.nextp.set(pp)
<span id="L3053" class="ln">  3053&nbsp;&nbsp;</span>	notewakeup(&amp;mp.park)
<span id="L3054" class="ln">  3054&nbsp;&nbsp;</span>	stopm()
<span id="L3055" class="ln">  3055&nbsp;&nbsp;</span>}
<span id="L3056" class="ln">  3056&nbsp;&nbsp;</span>
<span id="L3057" class="ln">  3057&nbsp;&nbsp;</span><span class="comment">// Stops the current m for stopTheWorld.</span>
<span id="L3058" class="ln">  3058&nbsp;&nbsp;</span><span class="comment">// Returns when the world is restarted.</span>
<span id="L3059" class="ln">  3059&nbsp;&nbsp;</span>func gcstopm() {
<span id="L3060" class="ln">  3060&nbsp;&nbsp;</span>	gp := getg()
<span id="L3061" class="ln">  3061&nbsp;&nbsp;</span>
<span id="L3062" class="ln">  3062&nbsp;&nbsp;</span>	if !sched.gcwaiting.Load() {
<span id="L3063" class="ln">  3063&nbsp;&nbsp;</span>		throw(&#34;gcstopm: not waiting for gc&#34;)
<span id="L3064" class="ln">  3064&nbsp;&nbsp;</span>	}
<span id="L3065" class="ln">  3065&nbsp;&nbsp;</span>	if gp.m.spinning {
<span id="L3066" class="ln">  3066&nbsp;&nbsp;</span>		gp.m.spinning = false
<span id="L3067" class="ln">  3067&nbsp;&nbsp;</span>		<span class="comment">// OK to just drop nmspinning here,</span>
<span id="L3068" class="ln">  3068&nbsp;&nbsp;</span>		<span class="comment">// startTheWorld will unpark threads as necessary.</span>
<span id="L3069" class="ln">  3069&nbsp;&nbsp;</span>		if sched.nmspinning.Add(-1) &lt; 0 {
<span id="L3070" class="ln">  3070&nbsp;&nbsp;</span>			throw(&#34;gcstopm: negative nmspinning&#34;)
<span id="L3071" class="ln">  3071&nbsp;&nbsp;</span>		}
<span id="L3072" class="ln">  3072&nbsp;&nbsp;</span>	}
<span id="L3073" class="ln">  3073&nbsp;&nbsp;</span>	pp := releasep()
<span id="L3074" class="ln">  3074&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L3075" class="ln">  3075&nbsp;&nbsp;</span>	pp.status = _Pgcstop
<span id="L3076" class="ln">  3076&nbsp;&nbsp;</span>	sched.stopwait--
<span id="L3077" class="ln">  3077&nbsp;&nbsp;</span>	if sched.stopwait == 0 {
<span id="L3078" class="ln">  3078&nbsp;&nbsp;</span>		notewakeup(&amp;sched.stopnote)
<span id="L3079" class="ln">  3079&nbsp;&nbsp;</span>	}
<span id="L3080" class="ln">  3080&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L3081" class="ln">  3081&nbsp;&nbsp;</span>	stopm()
<span id="L3082" class="ln">  3082&nbsp;&nbsp;</span>}
<span id="L3083" class="ln">  3083&nbsp;&nbsp;</span>
<span id="L3084" class="ln">  3084&nbsp;&nbsp;</span><span class="comment">// Schedules gp to run on the current M.</span>
<span id="L3085" class="ln">  3085&nbsp;&nbsp;</span><span class="comment">// If inheritTime is true, gp inherits the remaining time in the</span>
<span id="L3086" class="ln">  3086&nbsp;&nbsp;</span><span class="comment">// current time slice. Otherwise, it starts a new time slice.</span>
<span id="L3087" class="ln">  3087&nbsp;&nbsp;</span><span class="comment">// Never returns.</span>
<span id="L3088" class="ln">  3088&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3089" class="ln">  3089&nbsp;&nbsp;</span><span class="comment">// Write barriers are allowed because this is called immediately after</span>
<span id="L3090" class="ln">  3090&nbsp;&nbsp;</span><span class="comment">// acquiring a P in several places.</span>
<span id="L3091" class="ln">  3091&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3092" class="ln">  3092&nbsp;&nbsp;</span><span class="comment">//go:yeswritebarrierrec</span>
<span id="L3093" class="ln">  3093&nbsp;&nbsp;</span>func execute(gp *g, inheritTime bool) {
<span id="L3094" class="ln">  3094&nbsp;&nbsp;</span>	mp := getg().m
<span id="L3095" class="ln">  3095&nbsp;&nbsp;</span>
<span id="L3096" class="ln">  3096&nbsp;&nbsp;</span>	if goroutineProfile.active {
<span id="L3097" class="ln">  3097&nbsp;&nbsp;</span>		<span class="comment">// Make sure that gp has had its stack written out to the goroutine</span>
<span id="L3098" class="ln">  3098&nbsp;&nbsp;</span>		<span class="comment">// profile, exactly as it was when the goroutine profiler first stopped</span>
<span id="L3099" class="ln">  3099&nbsp;&nbsp;</span>		<span class="comment">// the world.</span>
<span id="L3100" class="ln">  3100&nbsp;&nbsp;</span>		tryRecordGoroutineProfile(gp, osyield)
<span id="L3101" class="ln">  3101&nbsp;&nbsp;</span>	}
<span id="L3102" class="ln">  3102&nbsp;&nbsp;</span>
<span id="L3103" class="ln">  3103&nbsp;&nbsp;</span>	<span class="comment">// Assign gp.m before entering _Grunning so running Gs have an</span>
<span id="L3104" class="ln">  3104&nbsp;&nbsp;</span>	<span class="comment">// M.</span>
<span id="L3105" class="ln">  3105&nbsp;&nbsp;</span>	mp.curg = gp
<span id="L3106" class="ln">  3106&nbsp;&nbsp;</span>	gp.m = mp
<span id="L3107" class="ln">  3107&nbsp;&nbsp;</span>	casgstatus(gp, _Grunnable, _Grunning)
<span id="L3108" class="ln">  3108&nbsp;&nbsp;</span>	gp.waitsince = 0
<span id="L3109" class="ln">  3109&nbsp;&nbsp;</span>	gp.preempt = false
<span id="L3110" class="ln">  3110&nbsp;&nbsp;</span>	gp.stackguard0 = gp.stack.lo + stackGuard
<span id="L3111" class="ln">  3111&nbsp;&nbsp;</span>	if !inheritTime {
<span id="L3112" class="ln">  3112&nbsp;&nbsp;</span>		mp.p.ptr().schedtick++
<span id="L3113" class="ln">  3113&nbsp;&nbsp;</span>	}
<span id="L3114" class="ln">  3114&nbsp;&nbsp;</span>
<span id="L3115" class="ln">  3115&nbsp;&nbsp;</span>	<span class="comment">// Check whether the profiler needs to be turned on or off.</span>
<span id="L3116" class="ln">  3116&nbsp;&nbsp;</span>	hz := sched.profilehz
<span id="L3117" class="ln">  3117&nbsp;&nbsp;</span>	if mp.profilehz != hz {
<span id="L3118" class="ln">  3118&nbsp;&nbsp;</span>		setThreadCPUProfiler(hz)
<span id="L3119" class="ln">  3119&nbsp;&nbsp;</span>	}
<span id="L3120" class="ln">  3120&nbsp;&nbsp;</span>
<span id="L3121" class="ln">  3121&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L3122" class="ln">  3122&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L3123" class="ln">  3123&nbsp;&nbsp;</span>		<span class="comment">// GoSysExit has to happen when we have a P, but before GoStart.</span>
<span id="L3124" class="ln">  3124&nbsp;&nbsp;</span>		<span class="comment">// So we emit it here.</span>
<span id="L3125" class="ln">  3125&nbsp;&nbsp;</span>		if !goexperiment.ExecTracer2 &amp;&amp; gp.syscallsp != 0 {
<span id="L3126" class="ln">  3126&nbsp;&nbsp;</span>			trace.GoSysExit(true)
<span id="L3127" class="ln">  3127&nbsp;&nbsp;</span>		}
<span id="L3128" class="ln">  3128&nbsp;&nbsp;</span>		trace.GoStart()
<span id="L3129" class="ln">  3129&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L3130" class="ln">  3130&nbsp;&nbsp;</span>	}
<span id="L3131" class="ln">  3131&nbsp;&nbsp;</span>
<span id="L3132" class="ln">  3132&nbsp;&nbsp;</span>	gogo(&amp;gp.sched)
<span id="L3133" class="ln">  3133&nbsp;&nbsp;</span>}
<span id="L3134" class="ln">  3134&nbsp;&nbsp;</span>
<span id="L3135" class="ln">  3135&nbsp;&nbsp;</span><span class="comment">// Finds a runnable goroutine to execute.</span>
<span id="L3136" class="ln">  3136&nbsp;&nbsp;</span><span class="comment">// Tries to steal from other P&#39;s, get g from local or global queue, poll network.</span>
<span id="L3137" class="ln">  3137&nbsp;&nbsp;</span><span class="comment">// tryWakeP indicates that the returned goroutine is not normal (GC worker, trace</span>
<span id="L3138" class="ln">  3138&nbsp;&nbsp;</span><span class="comment">// reader) so the caller should try to wake a P.</span>
<span id="L3139" class="ln">  3139&nbsp;&nbsp;</span>func findRunnable() (gp *g, inheritTime, tryWakeP bool) {
<span id="L3140" class="ln">  3140&nbsp;&nbsp;</span>	mp := getg().m
<span id="L3141" class="ln">  3141&nbsp;&nbsp;</span>
<span id="L3142" class="ln">  3142&nbsp;&nbsp;</span>	<span class="comment">// The conditions here and in handoffp must agree: if</span>
<span id="L3143" class="ln">  3143&nbsp;&nbsp;</span>	<span class="comment">// findrunnable would return a G to run, handoffp must start</span>
<span id="L3144" class="ln">  3144&nbsp;&nbsp;</span>	<span class="comment">// an M.</span>
<span id="L3145" class="ln">  3145&nbsp;&nbsp;</span>
<span id="L3146" class="ln">  3146&nbsp;&nbsp;</span>top:
<span id="L3147" class="ln">  3147&nbsp;&nbsp;</span>	pp := mp.p.ptr()
<span id="L3148" class="ln">  3148&nbsp;&nbsp;</span>	if sched.gcwaiting.Load() {
<span id="L3149" class="ln">  3149&nbsp;&nbsp;</span>		gcstopm()
<span id="L3150" class="ln">  3150&nbsp;&nbsp;</span>		goto top
<span id="L3151" class="ln">  3151&nbsp;&nbsp;</span>	}
<span id="L3152" class="ln">  3152&nbsp;&nbsp;</span>	if pp.runSafePointFn != 0 {
<span id="L3153" class="ln">  3153&nbsp;&nbsp;</span>		runSafePointFn()
<span id="L3154" class="ln">  3154&nbsp;&nbsp;</span>	}
<span id="L3155" class="ln">  3155&nbsp;&nbsp;</span>
<span id="L3156" class="ln">  3156&nbsp;&nbsp;</span>	<span class="comment">// now and pollUntil are saved for work stealing later,</span>
<span id="L3157" class="ln">  3157&nbsp;&nbsp;</span>	<span class="comment">// which may steal timers. It&#39;s important that between now</span>
<span id="L3158" class="ln">  3158&nbsp;&nbsp;</span>	<span class="comment">// and then, nothing blocks, so these numbers remain mostly</span>
<span id="L3159" class="ln">  3159&nbsp;&nbsp;</span>	<span class="comment">// relevant.</span>
<span id="L3160" class="ln">  3160&nbsp;&nbsp;</span>	now, pollUntil, _ := checkTimers(pp, 0)
<span id="L3161" class="ln">  3161&nbsp;&nbsp;</span>
<span id="L3162" class="ln">  3162&nbsp;&nbsp;</span>	<span class="comment">// Try to schedule the trace reader.</span>
<span id="L3163" class="ln">  3163&nbsp;&nbsp;</span>	if traceEnabled() || traceShuttingDown() {
<span id="L3164" class="ln">  3164&nbsp;&nbsp;</span>		gp := traceReader()
<span id="L3165" class="ln">  3165&nbsp;&nbsp;</span>		if gp != nil {
<span id="L3166" class="ln">  3166&nbsp;&nbsp;</span>			trace := traceAcquire()
<span id="L3167" class="ln">  3167&nbsp;&nbsp;</span>			casgstatus(gp, _Gwaiting, _Grunnable)
<span id="L3168" class="ln">  3168&nbsp;&nbsp;</span>			if trace.ok() {
<span id="L3169" class="ln">  3169&nbsp;&nbsp;</span>				trace.GoUnpark(gp, 0)
<span id="L3170" class="ln">  3170&nbsp;&nbsp;</span>				traceRelease(trace)
<span id="L3171" class="ln">  3171&nbsp;&nbsp;</span>			}
<span id="L3172" class="ln">  3172&nbsp;&nbsp;</span>			return gp, false, true
<span id="L3173" class="ln">  3173&nbsp;&nbsp;</span>		}
<span id="L3174" class="ln">  3174&nbsp;&nbsp;</span>	}
<span id="L3175" class="ln">  3175&nbsp;&nbsp;</span>
<span id="L3176" class="ln">  3176&nbsp;&nbsp;</span>	<span class="comment">// Try to schedule a GC worker.</span>
<span id="L3177" class="ln">  3177&nbsp;&nbsp;</span>	if gcBlackenEnabled != 0 {
<span id="L3178" class="ln">  3178&nbsp;&nbsp;</span>		gp, tnow := gcController.findRunnableGCWorker(pp, now)
<span id="L3179" class="ln">  3179&nbsp;&nbsp;</span>		if gp != nil {
<span id="L3180" class="ln">  3180&nbsp;&nbsp;</span>			return gp, false, true
<span id="L3181" class="ln">  3181&nbsp;&nbsp;</span>		}
<span id="L3182" class="ln">  3182&nbsp;&nbsp;</span>		now = tnow
<span id="L3183" class="ln">  3183&nbsp;&nbsp;</span>	}
<span id="L3184" class="ln">  3184&nbsp;&nbsp;</span>
<span id="L3185" class="ln">  3185&nbsp;&nbsp;</span>	<span class="comment">// Check the global runnable queue once in a while to ensure fairness.</span>
<span id="L3186" class="ln">  3186&nbsp;&nbsp;</span>	<span class="comment">// Otherwise two goroutines can completely occupy the local runqueue</span>
<span id="L3187" class="ln">  3187&nbsp;&nbsp;</span>	<span class="comment">// by constantly respawning each other.</span>
<span id="L3188" class="ln">  3188&nbsp;&nbsp;</span>	if pp.schedtick%61 == 0 &amp;&amp; sched.runqsize &gt; 0 {
<span id="L3189" class="ln">  3189&nbsp;&nbsp;</span>		lock(&amp;sched.lock)
<span id="L3190" class="ln">  3190&nbsp;&nbsp;</span>		gp := globrunqget(pp, 1)
<span id="L3191" class="ln">  3191&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L3192" class="ln">  3192&nbsp;&nbsp;</span>		if gp != nil {
<span id="L3193" class="ln">  3193&nbsp;&nbsp;</span>			return gp, false, false
<span id="L3194" class="ln">  3194&nbsp;&nbsp;</span>		}
<span id="L3195" class="ln">  3195&nbsp;&nbsp;</span>	}
<span id="L3196" class="ln">  3196&nbsp;&nbsp;</span>
<span id="L3197" class="ln">  3197&nbsp;&nbsp;</span>	<span class="comment">// Wake up the finalizer G.</span>
<span id="L3198" class="ln">  3198&nbsp;&nbsp;</span>	if fingStatus.Load()&amp;(fingWait|fingWake) == fingWait|fingWake {
<span id="L3199" class="ln">  3199&nbsp;&nbsp;</span>		if gp := wakefing(); gp != nil {
<span id="L3200" class="ln">  3200&nbsp;&nbsp;</span>			ready(gp, 0, true)
<span id="L3201" class="ln">  3201&nbsp;&nbsp;</span>		}
<span id="L3202" class="ln">  3202&nbsp;&nbsp;</span>	}
<span id="L3203" class="ln">  3203&nbsp;&nbsp;</span>	if *cgo_yield != nil {
<span id="L3204" class="ln">  3204&nbsp;&nbsp;</span>		asmcgocall(*cgo_yield, nil)
<span id="L3205" class="ln">  3205&nbsp;&nbsp;</span>	}
<span id="L3206" class="ln">  3206&nbsp;&nbsp;</span>
<span id="L3207" class="ln">  3207&nbsp;&nbsp;</span>	<span class="comment">// local runq</span>
<span id="L3208" class="ln">  3208&nbsp;&nbsp;</span>	if gp, inheritTime := runqget(pp); gp != nil {
<span id="L3209" class="ln">  3209&nbsp;&nbsp;</span>		return gp, inheritTime, false
<span id="L3210" class="ln">  3210&nbsp;&nbsp;</span>	}
<span id="L3211" class="ln">  3211&nbsp;&nbsp;</span>
<span id="L3212" class="ln">  3212&nbsp;&nbsp;</span>	<span class="comment">// global runq</span>
<span id="L3213" class="ln">  3213&nbsp;&nbsp;</span>	if sched.runqsize != 0 {
<span id="L3214" class="ln">  3214&nbsp;&nbsp;</span>		lock(&amp;sched.lock)
<span id="L3215" class="ln">  3215&nbsp;&nbsp;</span>		gp := globrunqget(pp, 0)
<span id="L3216" class="ln">  3216&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L3217" class="ln">  3217&nbsp;&nbsp;</span>		if gp != nil {
<span id="L3218" class="ln">  3218&nbsp;&nbsp;</span>			return gp, false, false
<span id="L3219" class="ln">  3219&nbsp;&nbsp;</span>		}
<span id="L3220" class="ln">  3220&nbsp;&nbsp;</span>	}
<span id="L3221" class="ln">  3221&nbsp;&nbsp;</span>
<span id="L3222" class="ln">  3222&nbsp;&nbsp;</span>	<span class="comment">// Poll network.</span>
<span id="L3223" class="ln">  3223&nbsp;&nbsp;</span>	<span class="comment">// This netpoll is only an optimization before we resort to stealing.</span>
<span id="L3224" class="ln">  3224&nbsp;&nbsp;</span>	<span class="comment">// We can safely skip it if there are no waiters or a thread is blocked</span>
<span id="L3225" class="ln">  3225&nbsp;&nbsp;</span>	<span class="comment">// in netpoll already. If there is any kind of logical race with that</span>
<span id="L3226" class="ln">  3226&nbsp;&nbsp;</span>	<span class="comment">// blocked thread (e.g. it has already returned from netpoll, but does</span>
<span id="L3227" class="ln">  3227&nbsp;&nbsp;</span>	<span class="comment">// not set lastpoll yet), this thread will do blocking netpoll below</span>
<span id="L3228" class="ln">  3228&nbsp;&nbsp;</span>	<span class="comment">// anyway.</span>
<span id="L3229" class="ln">  3229&nbsp;&nbsp;</span>	if netpollinited() &amp;&amp; netpollAnyWaiters() &amp;&amp; sched.lastpoll.Load() != 0 {
<span id="L3230" class="ln">  3230&nbsp;&nbsp;</span>		if list, delta := netpoll(0); !list.empty() { <span class="comment">// non-blocking</span>
<span id="L3231" class="ln">  3231&nbsp;&nbsp;</span>			gp := list.pop()
<span id="L3232" class="ln">  3232&nbsp;&nbsp;</span>			injectglist(&amp;list)
<span id="L3233" class="ln">  3233&nbsp;&nbsp;</span>			netpollAdjustWaiters(delta)
<span id="L3234" class="ln">  3234&nbsp;&nbsp;</span>			trace := traceAcquire()
<span id="L3235" class="ln">  3235&nbsp;&nbsp;</span>			casgstatus(gp, _Gwaiting, _Grunnable)
<span id="L3236" class="ln">  3236&nbsp;&nbsp;</span>			if trace.ok() {
<span id="L3237" class="ln">  3237&nbsp;&nbsp;</span>				trace.GoUnpark(gp, 0)
<span id="L3238" class="ln">  3238&nbsp;&nbsp;</span>				traceRelease(trace)
<span id="L3239" class="ln">  3239&nbsp;&nbsp;</span>			}
<span id="L3240" class="ln">  3240&nbsp;&nbsp;</span>			return gp, false, false
<span id="L3241" class="ln">  3241&nbsp;&nbsp;</span>		}
<span id="L3242" class="ln">  3242&nbsp;&nbsp;</span>	}
<span id="L3243" class="ln">  3243&nbsp;&nbsp;</span>
<span id="L3244" class="ln">  3244&nbsp;&nbsp;</span>	<span class="comment">// Spinning Ms: steal work from other Ps.</span>
<span id="L3245" class="ln">  3245&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L3246" class="ln">  3246&nbsp;&nbsp;</span>	<span class="comment">// Limit the number of spinning Ms to half the number of busy Ps.</span>
<span id="L3247" class="ln">  3247&nbsp;&nbsp;</span>	<span class="comment">// This is necessary to prevent excessive CPU consumption when</span>
<span id="L3248" class="ln">  3248&nbsp;&nbsp;</span>	<span class="comment">// GOMAXPROCS&gt;&gt;1 but the program parallelism is low.</span>
<span id="L3249" class="ln">  3249&nbsp;&nbsp;</span>	if mp.spinning || 2*sched.nmspinning.Load() &lt; gomaxprocs-sched.npidle.Load() {
<span id="L3250" class="ln">  3250&nbsp;&nbsp;</span>		if !mp.spinning {
<span id="L3251" class="ln">  3251&nbsp;&nbsp;</span>			mp.becomeSpinning()
<span id="L3252" class="ln">  3252&nbsp;&nbsp;</span>		}
<span id="L3253" class="ln">  3253&nbsp;&nbsp;</span>
<span id="L3254" class="ln">  3254&nbsp;&nbsp;</span>		gp, inheritTime, tnow, w, newWork := stealWork(now)
<span id="L3255" class="ln">  3255&nbsp;&nbsp;</span>		if gp != nil {
<span id="L3256" class="ln">  3256&nbsp;&nbsp;</span>			<span class="comment">// Successfully stole.</span>
<span id="L3257" class="ln">  3257&nbsp;&nbsp;</span>			return gp, inheritTime, false
<span id="L3258" class="ln">  3258&nbsp;&nbsp;</span>		}
<span id="L3259" class="ln">  3259&nbsp;&nbsp;</span>		if newWork {
<span id="L3260" class="ln">  3260&nbsp;&nbsp;</span>			<span class="comment">// There may be new timer or GC work; restart to</span>
<span id="L3261" class="ln">  3261&nbsp;&nbsp;</span>			<span class="comment">// discover.</span>
<span id="L3262" class="ln">  3262&nbsp;&nbsp;</span>			goto top
<span id="L3263" class="ln">  3263&nbsp;&nbsp;</span>		}
<span id="L3264" class="ln">  3264&nbsp;&nbsp;</span>
<span id="L3265" class="ln">  3265&nbsp;&nbsp;</span>		now = tnow
<span id="L3266" class="ln">  3266&nbsp;&nbsp;</span>		if w != 0 &amp;&amp; (pollUntil == 0 || w &lt; pollUntil) {
<span id="L3267" class="ln">  3267&nbsp;&nbsp;</span>			<span class="comment">// Earlier timer to wait for.</span>
<span id="L3268" class="ln">  3268&nbsp;&nbsp;</span>			pollUntil = w
<span id="L3269" class="ln">  3269&nbsp;&nbsp;</span>		}
<span id="L3270" class="ln">  3270&nbsp;&nbsp;</span>	}
<span id="L3271" class="ln">  3271&nbsp;&nbsp;</span>
<span id="L3272" class="ln">  3272&nbsp;&nbsp;</span>	<span class="comment">// We have nothing to do.</span>
<span id="L3273" class="ln">  3273&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L3274" class="ln">  3274&nbsp;&nbsp;</span>	<span class="comment">// If we&#39;re in the GC mark phase, can safely scan and blacken objects,</span>
<span id="L3275" class="ln">  3275&nbsp;&nbsp;</span>	<span class="comment">// and have work to do, run idle-time marking rather than give up the P.</span>
<span id="L3276" class="ln">  3276&nbsp;&nbsp;</span>	if gcBlackenEnabled != 0 &amp;&amp; gcMarkWorkAvailable(pp) &amp;&amp; gcController.addIdleMarkWorker() {
<span id="L3277" class="ln">  3277&nbsp;&nbsp;</span>		node := (*gcBgMarkWorkerNode)(gcBgMarkWorkerPool.pop())
<span id="L3278" class="ln">  3278&nbsp;&nbsp;</span>		if node != nil {
<span id="L3279" class="ln">  3279&nbsp;&nbsp;</span>			pp.gcMarkWorkerMode = gcMarkWorkerIdleMode
<span id="L3280" class="ln">  3280&nbsp;&nbsp;</span>			gp := node.gp.ptr()
<span id="L3281" class="ln">  3281&nbsp;&nbsp;</span>
<span id="L3282" class="ln">  3282&nbsp;&nbsp;</span>			trace := traceAcquire()
<span id="L3283" class="ln">  3283&nbsp;&nbsp;</span>			casgstatus(gp, _Gwaiting, _Grunnable)
<span id="L3284" class="ln">  3284&nbsp;&nbsp;</span>			if trace.ok() {
<span id="L3285" class="ln">  3285&nbsp;&nbsp;</span>				trace.GoUnpark(gp, 0)
<span id="L3286" class="ln">  3286&nbsp;&nbsp;</span>				traceRelease(trace)
<span id="L3287" class="ln">  3287&nbsp;&nbsp;</span>			}
<span id="L3288" class="ln">  3288&nbsp;&nbsp;</span>			return gp, false, false
<span id="L3289" class="ln">  3289&nbsp;&nbsp;</span>		}
<span id="L3290" class="ln">  3290&nbsp;&nbsp;</span>		gcController.removeIdleMarkWorker()
<span id="L3291" class="ln">  3291&nbsp;&nbsp;</span>	}
<span id="L3292" class="ln">  3292&nbsp;&nbsp;</span>
<span id="L3293" class="ln">  3293&nbsp;&nbsp;</span>	<span class="comment">// wasm only:</span>
<span id="L3294" class="ln">  3294&nbsp;&nbsp;</span>	<span class="comment">// If a callback returned and no other goroutine is awake,</span>
<span id="L3295" class="ln">  3295&nbsp;&nbsp;</span>	<span class="comment">// then wake event handler goroutine which pauses execution</span>
<span id="L3296" class="ln">  3296&nbsp;&nbsp;</span>	<span class="comment">// until a callback was triggered.</span>
<span id="L3297" class="ln">  3297&nbsp;&nbsp;</span>	gp, otherReady := beforeIdle(now, pollUntil)
<span id="L3298" class="ln">  3298&nbsp;&nbsp;</span>	if gp != nil {
<span id="L3299" class="ln">  3299&nbsp;&nbsp;</span>		trace := traceAcquire()
<span id="L3300" class="ln">  3300&nbsp;&nbsp;</span>		casgstatus(gp, _Gwaiting, _Grunnable)
<span id="L3301" class="ln">  3301&nbsp;&nbsp;</span>		if trace.ok() {
<span id="L3302" class="ln">  3302&nbsp;&nbsp;</span>			trace.GoUnpark(gp, 0)
<span id="L3303" class="ln">  3303&nbsp;&nbsp;</span>			traceRelease(trace)
<span id="L3304" class="ln">  3304&nbsp;&nbsp;</span>		}
<span id="L3305" class="ln">  3305&nbsp;&nbsp;</span>		return gp, false, false
<span id="L3306" class="ln">  3306&nbsp;&nbsp;</span>	}
<span id="L3307" class="ln">  3307&nbsp;&nbsp;</span>	if otherReady {
<span id="L3308" class="ln">  3308&nbsp;&nbsp;</span>		goto top
<span id="L3309" class="ln">  3309&nbsp;&nbsp;</span>	}
<span id="L3310" class="ln">  3310&nbsp;&nbsp;</span>
<span id="L3311" class="ln">  3311&nbsp;&nbsp;</span>	<span class="comment">// Before we drop our P, make a snapshot of the allp slice,</span>
<span id="L3312" class="ln">  3312&nbsp;&nbsp;</span>	<span class="comment">// which can change underfoot once we no longer block</span>
<span id="L3313" class="ln">  3313&nbsp;&nbsp;</span>	<span class="comment">// safe-points. We don&#39;t need to snapshot the contents because</span>
<span id="L3314" class="ln">  3314&nbsp;&nbsp;</span>	<span class="comment">// everything up to cap(allp) is immutable.</span>
<span id="L3315" class="ln">  3315&nbsp;&nbsp;</span>	allpSnapshot := allp
<span id="L3316" class="ln">  3316&nbsp;&nbsp;</span>	<span class="comment">// Also snapshot masks. Value changes are OK, but we can&#39;t allow</span>
<span id="L3317" class="ln">  3317&nbsp;&nbsp;</span>	<span class="comment">// len to change out from under us.</span>
<span id="L3318" class="ln">  3318&nbsp;&nbsp;</span>	idlepMaskSnapshot := idlepMask
<span id="L3319" class="ln">  3319&nbsp;&nbsp;</span>	timerpMaskSnapshot := timerpMask
<span id="L3320" class="ln">  3320&nbsp;&nbsp;</span>
<span id="L3321" class="ln">  3321&nbsp;&nbsp;</span>	<span class="comment">// return P and block</span>
<span id="L3322" class="ln">  3322&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L3323" class="ln">  3323&nbsp;&nbsp;</span>	if sched.gcwaiting.Load() || pp.runSafePointFn != 0 {
<span id="L3324" class="ln">  3324&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L3325" class="ln">  3325&nbsp;&nbsp;</span>		goto top
<span id="L3326" class="ln">  3326&nbsp;&nbsp;</span>	}
<span id="L3327" class="ln">  3327&nbsp;&nbsp;</span>	if sched.runqsize != 0 {
<span id="L3328" class="ln">  3328&nbsp;&nbsp;</span>		gp := globrunqget(pp, 0)
<span id="L3329" class="ln">  3329&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L3330" class="ln">  3330&nbsp;&nbsp;</span>		return gp, false, false
<span id="L3331" class="ln">  3331&nbsp;&nbsp;</span>	}
<span id="L3332" class="ln">  3332&nbsp;&nbsp;</span>	if !mp.spinning &amp;&amp; sched.needspinning.Load() == 1 {
<span id="L3333" class="ln">  3333&nbsp;&nbsp;</span>		<span class="comment">// See &#34;Delicate dance&#34; comment below.</span>
<span id="L3334" class="ln">  3334&nbsp;&nbsp;</span>		mp.becomeSpinning()
<span id="L3335" class="ln">  3335&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L3336" class="ln">  3336&nbsp;&nbsp;</span>		goto top
<span id="L3337" class="ln">  3337&nbsp;&nbsp;</span>	}
<span id="L3338" class="ln">  3338&nbsp;&nbsp;</span>	if releasep() != pp {
<span id="L3339" class="ln">  3339&nbsp;&nbsp;</span>		throw(&#34;findrunnable: wrong p&#34;)
<span id="L3340" class="ln">  3340&nbsp;&nbsp;</span>	}
<span id="L3341" class="ln">  3341&nbsp;&nbsp;</span>	now = pidleput(pp, now)
<span id="L3342" class="ln">  3342&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L3343" class="ln">  3343&nbsp;&nbsp;</span>
<span id="L3344" class="ln">  3344&nbsp;&nbsp;</span>	<span class="comment">// Delicate dance: thread transitions from spinning to non-spinning</span>
<span id="L3345" class="ln">  3345&nbsp;&nbsp;</span>	<span class="comment">// state, potentially concurrently with submission of new work. We must</span>
<span id="L3346" class="ln">  3346&nbsp;&nbsp;</span>	<span class="comment">// drop nmspinning first and then check all sources again (with</span>
<span id="L3347" class="ln">  3347&nbsp;&nbsp;</span>	<span class="comment">// #StoreLoad memory barrier in between). If we do it the other way</span>
<span id="L3348" class="ln">  3348&nbsp;&nbsp;</span>	<span class="comment">// around, another thread can submit work after we&#39;ve checked all</span>
<span id="L3349" class="ln">  3349&nbsp;&nbsp;</span>	<span class="comment">// sources but before we drop nmspinning; as a result nobody will</span>
<span id="L3350" class="ln">  3350&nbsp;&nbsp;</span>	<span class="comment">// unpark a thread to run the work.</span>
<span id="L3351" class="ln">  3351&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L3352" class="ln">  3352&nbsp;&nbsp;</span>	<span class="comment">// This applies to the following sources of work:</span>
<span id="L3353" class="ln">  3353&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L3354" class="ln">  3354&nbsp;&nbsp;</span>	<span class="comment">// * Goroutines added to the global or a per-P run queue.</span>
<span id="L3355" class="ln">  3355&nbsp;&nbsp;</span>	<span class="comment">// * New/modified-earlier timers on a per-P timer heap.</span>
<span id="L3356" class="ln">  3356&nbsp;&nbsp;</span>	<span class="comment">// * Idle-priority GC work (barring golang.org/issue/19112).</span>
<span id="L3357" class="ln">  3357&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L3358" class="ln">  3358&nbsp;&nbsp;</span>	<span class="comment">// If we discover new work below, we need to restore m.spinning as a</span>
<span id="L3359" class="ln">  3359&nbsp;&nbsp;</span>	<span class="comment">// signal for resetspinning to unpark a new worker thread (because</span>
<span id="L3360" class="ln">  3360&nbsp;&nbsp;</span>	<span class="comment">// there can be more than one starving goroutine).</span>
<span id="L3361" class="ln">  3361&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L3362" class="ln">  3362&nbsp;&nbsp;</span>	<span class="comment">// However, if after discovering new work we also observe no idle Ps</span>
<span id="L3363" class="ln">  3363&nbsp;&nbsp;</span>	<span class="comment">// (either here or in resetspinning), we have a problem. We may be</span>
<span id="L3364" class="ln">  3364&nbsp;&nbsp;</span>	<span class="comment">// racing with a non-spinning M in the block above, having found no</span>
<span id="L3365" class="ln">  3365&nbsp;&nbsp;</span>	<span class="comment">// work and preparing to release its P and park. Allowing that P to go</span>
<span id="L3366" class="ln">  3366&nbsp;&nbsp;</span>	<span class="comment">// idle will result in loss of work conservation (idle P while there is</span>
<span id="L3367" class="ln">  3367&nbsp;&nbsp;</span>	<span class="comment">// runnable work). This could result in complete deadlock in the</span>
<span id="L3368" class="ln">  3368&nbsp;&nbsp;</span>	<span class="comment">// unlikely event that we discover new work (from netpoll) right as we</span>
<span id="L3369" class="ln">  3369&nbsp;&nbsp;</span>	<span class="comment">// are racing with _all_ other Ps going idle.</span>
<span id="L3370" class="ln">  3370&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L3371" class="ln">  3371&nbsp;&nbsp;</span>	<span class="comment">// We use sched.needspinning to synchronize with non-spinning Ms going</span>
<span id="L3372" class="ln">  3372&nbsp;&nbsp;</span>	<span class="comment">// idle. If needspinning is set when they are about to drop their P,</span>
<span id="L3373" class="ln">  3373&nbsp;&nbsp;</span>	<span class="comment">// they abort the drop and instead become a new spinning M on our</span>
<span id="L3374" class="ln">  3374&nbsp;&nbsp;</span>	<span class="comment">// behalf. If we are not racing and the system is truly fully loaded</span>
<span id="L3375" class="ln">  3375&nbsp;&nbsp;</span>	<span class="comment">// then no spinning threads are required, and the next thread to</span>
<span id="L3376" class="ln">  3376&nbsp;&nbsp;</span>	<span class="comment">// naturally become spinning will clear the flag.</span>
<span id="L3377" class="ln">  3377&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L3378" class="ln">  3378&nbsp;&nbsp;</span>	<span class="comment">// Also see &#34;Worker thread parking/unparking&#34; comment at the top of the</span>
<span id="L3379" class="ln">  3379&nbsp;&nbsp;</span>	<span class="comment">// file.</span>
<span id="L3380" class="ln">  3380&nbsp;&nbsp;</span>	wasSpinning := mp.spinning
<span id="L3381" class="ln">  3381&nbsp;&nbsp;</span>	if mp.spinning {
<span id="L3382" class="ln">  3382&nbsp;&nbsp;</span>		mp.spinning = false
<span id="L3383" class="ln">  3383&nbsp;&nbsp;</span>		if sched.nmspinning.Add(-1) &lt; 0 {
<span id="L3384" class="ln">  3384&nbsp;&nbsp;</span>			throw(&#34;findrunnable: negative nmspinning&#34;)
<span id="L3385" class="ln">  3385&nbsp;&nbsp;</span>		}
<span id="L3386" class="ln">  3386&nbsp;&nbsp;</span>
<span id="L3387" class="ln">  3387&nbsp;&nbsp;</span>		<span class="comment">// Note the for correctness, only the last M transitioning from</span>
<span id="L3388" class="ln">  3388&nbsp;&nbsp;</span>		<span class="comment">// spinning to non-spinning must perform these rechecks to</span>
<span id="L3389" class="ln">  3389&nbsp;&nbsp;</span>		<span class="comment">// ensure no missed work. However, the runtime has some cases</span>
<span id="L3390" class="ln">  3390&nbsp;&nbsp;</span>		<span class="comment">// of transient increments of nmspinning that are decremented</span>
<span id="L3391" class="ln">  3391&nbsp;&nbsp;</span>		<span class="comment">// without going through this path, so we must be conservative</span>
<span id="L3392" class="ln">  3392&nbsp;&nbsp;</span>		<span class="comment">// and perform the check on all spinning Ms.</span>
<span id="L3393" class="ln">  3393&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L3394" class="ln">  3394&nbsp;&nbsp;</span>		<span class="comment">// See https://go.dev/issue/43997.</span>
<span id="L3395" class="ln">  3395&nbsp;&nbsp;</span>
<span id="L3396" class="ln">  3396&nbsp;&nbsp;</span>		<span class="comment">// Check global and P runqueues again.</span>
<span id="L3397" class="ln">  3397&nbsp;&nbsp;</span>
<span id="L3398" class="ln">  3398&nbsp;&nbsp;</span>		lock(&amp;sched.lock)
<span id="L3399" class="ln">  3399&nbsp;&nbsp;</span>		if sched.runqsize != 0 {
<span id="L3400" class="ln">  3400&nbsp;&nbsp;</span>			pp, _ := pidlegetSpinning(0)
<span id="L3401" class="ln">  3401&nbsp;&nbsp;</span>			if pp != nil {
<span id="L3402" class="ln">  3402&nbsp;&nbsp;</span>				gp := globrunqget(pp, 0)
<span id="L3403" class="ln">  3403&nbsp;&nbsp;</span>				if gp == nil {
<span id="L3404" class="ln">  3404&nbsp;&nbsp;</span>					throw(&#34;global runq empty with non-zero runqsize&#34;)
<span id="L3405" class="ln">  3405&nbsp;&nbsp;</span>				}
<span id="L3406" class="ln">  3406&nbsp;&nbsp;</span>				unlock(&amp;sched.lock)
<span id="L3407" class="ln">  3407&nbsp;&nbsp;</span>				acquirep(pp)
<span id="L3408" class="ln">  3408&nbsp;&nbsp;</span>				mp.becomeSpinning()
<span id="L3409" class="ln">  3409&nbsp;&nbsp;</span>				return gp, false, false
<span id="L3410" class="ln">  3410&nbsp;&nbsp;</span>			}
<span id="L3411" class="ln">  3411&nbsp;&nbsp;</span>		}
<span id="L3412" class="ln">  3412&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L3413" class="ln">  3413&nbsp;&nbsp;</span>
<span id="L3414" class="ln">  3414&nbsp;&nbsp;</span>		pp := checkRunqsNoP(allpSnapshot, idlepMaskSnapshot)
<span id="L3415" class="ln">  3415&nbsp;&nbsp;</span>		if pp != nil {
<span id="L3416" class="ln">  3416&nbsp;&nbsp;</span>			acquirep(pp)
<span id="L3417" class="ln">  3417&nbsp;&nbsp;</span>			mp.becomeSpinning()
<span id="L3418" class="ln">  3418&nbsp;&nbsp;</span>			goto top
<span id="L3419" class="ln">  3419&nbsp;&nbsp;</span>		}
<span id="L3420" class="ln">  3420&nbsp;&nbsp;</span>
<span id="L3421" class="ln">  3421&nbsp;&nbsp;</span>		<span class="comment">// Check for idle-priority GC work again.</span>
<span id="L3422" class="ln">  3422&nbsp;&nbsp;</span>		pp, gp := checkIdleGCNoP()
<span id="L3423" class="ln">  3423&nbsp;&nbsp;</span>		if pp != nil {
<span id="L3424" class="ln">  3424&nbsp;&nbsp;</span>			acquirep(pp)
<span id="L3425" class="ln">  3425&nbsp;&nbsp;</span>			mp.becomeSpinning()
<span id="L3426" class="ln">  3426&nbsp;&nbsp;</span>
<span id="L3427" class="ln">  3427&nbsp;&nbsp;</span>			<span class="comment">// Run the idle worker.</span>
<span id="L3428" class="ln">  3428&nbsp;&nbsp;</span>			pp.gcMarkWorkerMode = gcMarkWorkerIdleMode
<span id="L3429" class="ln">  3429&nbsp;&nbsp;</span>			trace := traceAcquire()
<span id="L3430" class="ln">  3430&nbsp;&nbsp;</span>			casgstatus(gp, _Gwaiting, _Grunnable)
<span id="L3431" class="ln">  3431&nbsp;&nbsp;</span>			if trace.ok() {
<span id="L3432" class="ln">  3432&nbsp;&nbsp;</span>				trace.GoUnpark(gp, 0)
<span id="L3433" class="ln">  3433&nbsp;&nbsp;</span>				traceRelease(trace)
<span id="L3434" class="ln">  3434&nbsp;&nbsp;</span>			}
<span id="L3435" class="ln">  3435&nbsp;&nbsp;</span>			return gp, false, false
<span id="L3436" class="ln">  3436&nbsp;&nbsp;</span>		}
<span id="L3437" class="ln">  3437&nbsp;&nbsp;</span>
<span id="L3438" class="ln">  3438&nbsp;&nbsp;</span>		<span class="comment">// Finally, check for timer creation or expiry concurrently with</span>
<span id="L3439" class="ln">  3439&nbsp;&nbsp;</span>		<span class="comment">// transitioning from spinning to non-spinning.</span>
<span id="L3440" class="ln">  3440&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L3441" class="ln">  3441&nbsp;&nbsp;</span>		<span class="comment">// Note that we cannot use checkTimers here because it calls</span>
<span id="L3442" class="ln">  3442&nbsp;&nbsp;</span>		<span class="comment">// adjusttimers which may need to allocate memory, and that isn&#39;t</span>
<span id="L3443" class="ln">  3443&nbsp;&nbsp;</span>		<span class="comment">// allowed when we don&#39;t have an active P.</span>
<span id="L3444" class="ln">  3444&nbsp;&nbsp;</span>		pollUntil = checkTimersNoP(allpSnapshot, timerpMaskSnapshot, pollUntil)
<span id="L3445" class="ln">  3445&nbsp;&nbsp;</span>	}
<span id="L3446" class="ln">  3446&nbsp;&nbsp;</span>
<span id="L3447" class="ln">  3447&nbsp;&nbsp;</span>	<span class="comment">// Poll network until next timer.</span>
<span id="L3448" class="ln">  3448&nbsp;&nbsp;</span>	if netpollinited() &amp;&amp; (netpollAnyWaiters() || pollUntil != 0) &amp;&amp; sched.lastpoll.Swap(0) != 0 {
<span id="L3449" class="ln">  3449&nbsp;&nbsp;</span>		sched.pollUntil.Store(pollUntil)
<span id="L3450" class="ln">  3450&nbsp;&nbsp;</span>		if mp.p != 0 {
<span id="L3451" class="ln">  3451&nbsp;&nbsp;</span>			throw(&#34;findrunnable: netpoll with p&#34;)
<span id="L3452" class="ln">  3452&nbsp;&nbsp;</span>		}
<span id="L3453" class="ln">  3453&nbsp;&nbsp;</span>		if mp.spinning {
<span id="L3454" class="ln">  3454&nbsp;&nbsp;</span>			throw(&#34;findrunnable: netpoll with spinning&#34;)
<span id="L3455" class="ln">  3455&nbsp;&nbsp;</span>		}
<span id="L3456" class="ln">  3456&nbsp;&nbsp;</span>		delay := int64(-1)
<span id="L3457" class="ln">  3457&nbsp;&nbsp;</span>		if pollUntil != 0 {
<span id="L3458" class="ln">  3458&nbsp;&nbsp;</span>			if now == 0 {
<span id="L3459" class="ln">  3459&nbsp;&nbsp;</span>				now = nanotime()
<span id="L3460" class="ln">  3460&nbsp;&nbsp;</span>			}
<span id="L3461" class="ln">  3461&nbsp;&nbsp;</span>			delay = pollUntil - now
<span id="L3462" class="ln">  3462&nbsp;&nbsp;</span>			if delay &lt; 0 {
<span id="L3463" class="ln">  3463&nbsp;&nbsp;</span>				delay = 0
<span id="L3464" class="ln">  3464&nbsp;&nbsp;</span>			}
<span id="L3465" class="ln">  3465&nbsp;&nbsp;</span>		}
<span id="L3466" class="ln">  3466&nbsp;&nbsp;</span>		if faketime != 0 {
<span id="L3467" class="ln">  3467&nbsp;&nbsp;</span>			<span class="comment">// When using fake time, just poll.</span>
<span id="L3468" class="ln">  3468&nbsp;&nbsp;</span>			delay = 0
<span id="L3469" class="ln">  3469&nbsp;&nbsp;</span>		}
<span id="L3470" class="ln">  3470&nbsp;&nbsp;</span>		list, delta := netpoll(delay) <span class="comment">// block until new work is available</span>
<span id="L3471" class="ln">  3471&nbsp;&nbsp;</span>		<span class="comment">// Refresh now again, after potentially blocking.</span>
<span id="L3472" class="ln">  3472&nbsp;&nbsp;</span>		now = nanotime()
<span id="L3473" class="ln">  3473&nbsp;&nbsp;</span>		sched.pollUntil.Store(0)
<span id="L3474" class="ln">  3474&nbsp;&nbsp;</span>		sched.lastpoll.Store(now)
<span id="L3475" class="ln">  3475&nbsp;&nbsp;</span>		if faketime != 0 &amp;&amp; list.empty() {
<span id="L3476" class="ln">  3476&nbsp;&nbsp;</span>			<span class="comment">// Using fake time and nothing is ready; stop M.</span>
<span id="L3477" class="ln">  3477&nbsp;&nbsp;</span>			<span class="comment">// When all M&#39;s stop, checkdead will call timejump.</span>
<span id="L3478" class="ln">  3478&nbsp;&nbsp;</span>			stopm()
<span id="L3479" class="ln">  3479&nbsp;&nbsp;</span>			goto top
<span id="L3480" class="ln">  3480&nbsp;&nbsp;</span>		}
<span id="L3481" class="ln">  3481&nbsp;&nbsp;</span>		lock(&amp;sched.lock)
<span id="L3482" class="ln">  3482&nbsp;&nbsp;</span>		pp, _ := pidleget(now)
<span id="L3483" class="ln">  3483&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L3484" class="ln">  3484&nbsp;&nbsp;</span>		if pp == nil {
<span id="L3485" class="ln">  3485&nbsp;&nbsp;</span>			injectglist(&amp;list)
<span id="L3486" class="ln">  3486&nbsp;&nbsp;</span>			netpollAdjustWaiters(delta)
<span id="L3487" class="ln">  3487&nbsp;&nbsp;</span>		} else {
<span id="L3488" class="ln">  3488&nbsp;&nbsp;</span>			acquirep(pp)
<span id="L3489" class="ln">  3489&nbsp;&nbsp;</span>			if !list.empty() {
<span id="L3490" class="ln">  3490&nbsp;&nbsp;</span>				gp := list.pop()
<span id="L3491" class="ln">  3491&nbsp;&nbsp;</span>				injectglist(&amp;list)
<span id="L3492" class="ln">  3492&nbsp;&nbsp;</span>				netpollAdjustWaiters(delta)
<span id="L3493" class="ln">  3493&nbsp;&nbsp;</span>				trace := traceAcquire()
<span id="L3494" class="ln">  3494&nbsp;&nbsp;</span>				casgstatus(gp, _Gwaiting, _Grunnable)
<span id="L3495" class="ln">  3495&nbsp;&nbsp;</span>				if trace.ok() {
<span id="L3496" class="ln">  3496&nbsp;&nbsp;</span>					trace.GoUnpark(gp, 0)
<span id="L3497" class="ln">  3497&nbsp;&nbsp;</span>					traceRelease(trace)
<span id="L3498" class="ln">  3498&nbsp;&nbsp;</span>				}
<span id="L3499" class="ln">  3499&nbsp;&nbsp;</span>				return gp, false, false
<span id="L3500" class="ln">  3500&nbsp;&nbsp;</span>			}
<span id="L3501" class="ln">  3501&nbsp;&nbsp;</span>			if wasSpinning {
<span id="L3502" class="ln">  3502&nbsp;&nbsp;</span>				mp.becomeSpinning()
<span id="L3503" class="ln">  3503&nbsp;&nbsp;</span>			}
<span id="L3504" class="ln">  3504&nbsp;&nbsp;</span>			goto top
<span id="L3505" class="ln">  3505&nbsp;&nbsp;</span>		}
<span id="L3506" class="ln">  3506&nbsp;&nbsp;</span>	} else if pollUntil != 0 &amp;&amp; netpollinited() {
<span id="L3507" class="ln">  3507&nbsp;&nbsp;</span>		pollerPollUntil := sched.pollUntil.Load()
<span id="L3508" class="ln">  3508&nbsp;&nbsp;</span>		if pollerPollUntil == 0 || pollerPollUntil &gt; pollUntil {
<span id="L3509" class="ln">  3509&nbsp;&nbsp;</span>			netpollBreak()
<span id="L3510" class="ln">  3510&nbsp;&nbsp;</span>		}
<span id="L3511" class="ln">  3511&nbsp;&nbsp;</span>	}
<span id="L3512" class="ln">  3512&nbsp;&nbsp;</span>	stopm()
<span id="L3513" class="ln">  3513&nbsp;&nbsp;</span>	goto top
<span id="L3514" class="ln">  3514&nbsp;&nbsp;</span>}
<span id="L3515" class="ln">  3515&nbsp;&nbsp;</span>
<span id="L3516" class="ln">  3516&nbsp;&nbsp;</span><span class="comment">// pollWork reports whether there is non-background work this P could</span>
<span id="L3517" class="ln">  3517&nbsp;&nbsp;</span><span class="comment">// be doing. This is a fairly lightweight check to be used for</span>
<span id="L3518" class="ln">  3518&nbsp;&nbsp;</span><span class="comment">// background work loops, like idle GC. It checks a subset of the</span>
<span id="L3519" class="ln">  3519&nbsp;&nbsp;</span><span class="comment">// conditions checked by the actual scheduler.</span>
<span id="L3520" class="ln">  3520&nbsp;&nbsp;</span>func pollWork() bool {
<span id="L3521" class="ln">  3521&nbsp;&nbsp;</span>	if sched.runqsize != 0 {
<span id="L3522" class="ln">  3522&nbsp;&nbsp;</span>		return true
<span id="L3523" class="ln">  3523&nbsp;&nbsp;</span>	}
<span id="L3524" class="ln">  3524&nbsp;&nbsp;</span>	p := getg().m.p.ptr()
<span id="L3525" class="ln">  3525&nbsp;&nbsp;</span>	if !runqempty(p) {
<span id="L3526" class="ln">  3526&nbsp;&nbsp;</span>		return true
<span id="L3527" class="ln">  3527&nbsp;&nbsp;</span>	}
<span id="L3528" class="ln">  3528&nbsp;&nbsp;</span>	if netpollinited() &amp;&amp; netpollAnyWaiters() &amp;&amp; sched.lastpoll.Load() != 0 {
<span id="L3529" class="ln">  3529&nbsp;&nbsp;</span>		if list, delta := netpoll(0); !list.empty() {
<span id="L3530" class="ln">  3530&nbsp;&nbsp;</span>			injectglist(&amp;list)
<span id="L3531" class="ln">  3531&nbsp;&nbsp;</span>			netpollAdjustWaiters(delta)
<span id="L3532" class="ln">  3532&nbsp;&nbsp;</span>			return true
<span id="L3533" class="ln">  3533&nbsp;&nbsp;</span>		}
<span id="L3534" class="ln">  3534&nbsp;&nbsp;</span>	}
<span id="L3535" class="ln">  3535&nbsp;&nbsp;</span>	return false
<span id="L3536" class="ln">  3536&nbsp;&nbsp;</span>}
<span id="L3537" class="ln">  3537&nbsp;&nbsp;</span>
<span id="L3538" class="ln">  3538&nbsp;&nbsp;</span><span class="comment">// stealWork attempts to steal a runnable goroutine or timer from any P.</span>
<span id="L3539" class="ln">  3539&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3540" class="ln">  3540&nbsp;&nbsp;</span><span class="comment">// If newWork is true, new work may have been readied.</span>
<span id="L3541" class="ln">  3541&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3542" class="ln">  3542&nbsp;&nbsp;</span><span class="comment">// If now is not 0 it is the current time. stealWork returns the passed time or</span>
<span id="L3543" class="ln">  3543&nbsp;&nbsp;</span><span class="comment">// the current time if now was passed as 0.</span>
<span id="L3544" class="ln">  3544&nbsp;&nbsp;</span>func stealWork(now int64) (gp *g, inheritTime bool, rnow, pollUntil int64, newWork bool) {
<span id="L3545" class="ln">  3545&nbsp;&nbsp;</span>	pp := getg().m.p.ptr()
<span id="L3546" class="ln">  3546&nbsp;&nbsp;</span>
<span id="L3547" class="ln">  3547&nbsp;&nbsp;</span>	ranTimer := false
<span id="L3548" class="ln">  3548&nbsp;&nbsp;</span>
<span id="L3549" class="ln">  3549&nbsp;&nbsp;</span>	const stealTries = 4
<span id="L3550" class="ln">  3550&nbsp;&nbsp;</span>	for i := 0; i &lt; stealTries; i++ {
<span id="L3551" class="ln">  3551&nbsp;&nbsp;</span>		stealTimersOrRunNextG := i == stealTries-1
<span id="L3552" class="ln">  3552&nbsp;&nbsp;</span>
<span id="L3553" class="ln">  3553&nbsp;&nbsp;</span>		for enum := stealOrder.start(cheaprand()); !enum.done(); enum.next() {
<span id="L3554" class="ln">  3554&nbsp;&nbsp;</span>			if sched.gcwaiting.Load() {
<span id="L3555" class="ln">  3555&nbsp;&nbsp;</span>				<span class="comment">// GC work may be available.</span>
<span id="L3556" class="ln">  3556&nbsp;&nbsp;</span>				return nil, false, now, pollUntil, true
<span id="L3557" class="ln">  3557&nbsp;&nbsp;</span>			}
<span id="L3558" class="ln">  3558&nbsp;&nbsp;</span>			p2 := allp[enum.position()]
<span id="L3559" class="ln">  3559&nbsp;&nbsp;</span>			if pp == p2 {
<span id="L3560" class="ln">  3560&nbsp;&nbsp;</span>				continue
<span id="L3561" class="ln">  3561&nbsp;&nbsp;</span>			}
<span id="L3562" class="ln">  3562&nbsp;&nbsp;</span>
<span id="L3563" class="ln">  3563&nbsp;&nbsp;</span>			<span class="comment">// Steal timers from p2. This call to checkTimers is the only place</span>
<span id="L3564" class="ln">  3564&nbsp;&nbsp;</span>			<span class="comment">// where we might hold a lock on a different P&#39;s timers. We do this</span>
<span id="L3565" class="ln">  3565&nbsp;&nbsp;</span>			<span class="comment">// once on the last pass before checking runnext because stealing</span>
<span id="L3566" class="ln">  3566&nbsp;&nbsp;</span>			<span class="comment">// from the other P&#39;s runnext should be the last resort, so if there</span>
<span id="L3567" class="ln">  3567&nbsp;&nbsp;</span>			<span class="comment">// are timers to steal do that first.</span>
<span id="L3568" class="ln">  3568&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L3569" class="ln">  3569&nbsp;&nbsp;</span>			<span class="comment">// We only check timers on one of the stealing iterations because</span>
<span id="L3570" class="ln">  3570&nbsp;&nbsp;</span>			<span class="comment">// the time stored in now doesn&#39;t change in this loop and checking</span>
<span id="L3571" class="ln">  3571&nbsp;&nbsp;</span>			<span class="comment">// the timers for each P more than once with the same value of now</span>
<span id="L3572" class="ln">  3572&nbsp;&nbsp;</span>			<span class="comment">// is probably a waste of time.</span>
<span id="L3573" class="ln">  3573&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L3574" class="ln">  3574&nbsp;&nbsp;</span>			<span class="comment">// timerpMask tells us whether the P may have timers at all. If it</span>
<span id="L3575" class="ln">  3575&nbsp;&nbsp;</span>			<span class="comment">// can&#39;t, no need to check at all.</span>
<span id="L3576" class="ln">  3576&nbsp;&nbsp;</span>			if stealTimersOrRunNextG &amp;&amp; timerpMask.read(enum.position()) {
<span id="L3577" class="ln">  3577&nbsp;&nbsp;</span>				tnow, w, ran := checkTimers(p2, now)
<span id="L3578" class="ln">  3578&nbsp;&nbsp;</span>				now = tnow
<span id="L3579" class="ln">  3579&nbsp;&nbsp;</span>				if w != 0 &amp;&amp; (pollUntil == 0 || w &lt; pollUntil) {
<span id="L3580" class="ln">  3580&nbsp;&nbsp;</span>					pollUntil = w
<span id="L3581" class="ln">  3581&nbsp;&nbsp;</span>				}
<span id="L3582" class="ln">  3582&nbsp;&nbsp;</span>				if ran {
<span id="L3583" class="ln">  3583&nbsp;&nbsp;</span>					<span class="comment">// Running the timers may have</span>
<span id="L3584" class="ln">  3584&nbsp;&nbsp;</span>					<span class="comment">// made an arbitrary number of G&#39;s</span>
<span id="L3585" class="ln">  3585&nbsp;&nbsp;</span>					<span class="comment">// ready and added them to this P&#39;s</span>
<span id="L3586" class="ln">  3586&nbsp;&nbsp;</span>					<span class="comment">// local run queue. That invalidates</span>
<span id="L3587" class="ln">  3587&nbsp;&nbsp;</span>					<span class="comment">// the assumption of runqsteal</span>
<span id="L3588" class="ln">  3588&nbsp;&nbsp;</span>					<span class="comment">// that it always has room to add</span>
<span id="L3589" class="ln">  3589&nbsp;&nbsp;</span>					<span class="comment">// stolen G&#39;s. So check now if there</span>
<span id="L3590" class="ln">  3590&nbsp;&nbsp;</span>					<span class="comment">// is a local G to run.</span>
<span id="L3591" class="ln">  3591&nbsp;&nbsp;</span>					if gp, inheritTime := runqget(pp); gp != nil {
<span id="L3592" class="ln">  3592&nbsp;&nbsp;</span>						return gp, inheritTime, now, pollUntil, ranTimer
<span id="L3593" class="ln">  3593&nbsp;&nbsp;</span>					}
<span id="L3594" class="ln">  3594&nbsp;&nbsp;</span>					ranTimer = true
<span id="L3595" class="ln">  3595&nbsp;&nbsp;</span>				}
<span id="L3596" class="ln">  3596&nbsp;&nbsp;</span>			}
<span id="L3597" class="ln">  3597&nbsp;&nbsp;</span>
<span id="L3598" class="ln">  3598&nbsp;&nbsp;</span>			<span class="comment">// Don&#39;t bother to attempt to steal if p2 is idle.</span>
<span id="L3599" class="ln">  3599&nbsp;&nbsp;</span>			if !idlepMask.read(enum.position()) {
<span id="L3600" class="ln">  3600&nbsp;&nbsp;</span>				if gp := runqsteal(pp, p2, stealTimersOrRunNextG); gp != nil {
<span id="L3601" class="ln">  3601&nbsp;&nbsp;</span>					return gp, false, now, pollUntil, ranTimer
<span id="L3602" class="ln">  3602&nbsp;&nbsp;</span>				}
<span id="L3603" class="ln">  3603&nbsp;&nbsp;</span>			}
<span id="L3604" class="ln">  3604&nbsp;&nbsp;</span>		}
<span id="L3605" class="ln">  3605&nbsp;&nbsp;</span>	}
<span id="L3606" class="ln">  3606&nbsp;&nbsp;</span>
<span id="L3607" class="ln">  3607&nbsp;&nbsp;</span>	<span class="comment">// No goroutines found to steal. Regardless, running a timer may have</span>
<span id="L3608" class="ln">  3608&nbsp;&nbsp;</span>	<span class="comment">// made some goroutine ready that we missed. Indicate the next timer to</span>
<span id="L3609" class="ln">  3609&nbsp;&nbsp;</span>	<span class="comment">// wait for.</span>
<span id="L3610" class="ln">  3610&nbsp;&nbsp;</span>	return nil, false, now, pollUntil, ranTimer
<span id="L3611" class="ln">  3611&nbsp;&nbsp;</span>}
<span id="L3612" class="ln">  3612&nbsp;&nbsp;</span>
<span id="L3613" class="ln">  3613&nbsp;&nbsp;</span><span class="comment">// Check all Ps for a runnable G to steal.</span>
<span id="L3614" class="ln">  3614&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3615" class="ln">  3615&nbsp;&nbsp;</span><span class="comment">// On entry we have no P. If a G is available to steal and a P is available,</span>
<span id="L3616" class="ln">  3616&nbsp;&nbsp;</span><span class="comment">// the P is returned which the caller should acquire and attempt to steal the</span>
<span id="L3617" class="ln">  3617&nbsp;&nbsp;</span><span class="comment">// work to.</span>
<span id="L3618" class="ln">  3618&nbsp;&nbsp;</span>func checkRunqsNoP(allpSnapshot []*p, idlepMaskSnapshot pMask) *p {
<span id="L3619" class="ln">  3619&nbsp;&nbsp;</span>	for id, p2 := range allpSnapshot {
<span id="L3620" class="ln">  3620&nbsp;&nbsp;</span>		if !idlepMaskSnapshot.read(uint32(id)) &amp;&amp; !runqempty(p2) {
<span id="L3621" class="ln">  3621&nbsp;&nbsp;</span>			lock(&amp;sched.lock)
<span id="L3622" class="ln">  3622&nbsp;&nbsp;</span>			pp, _ := pidlegetSpinning(0)
<span id="L3623" class="ln">  3623&nbsp;&nbsp;</span>			if pp == nil {
<span id="L3624" class="ln">  3624&nbsp;&nbsp;</span>				<span class="comment">// Can&#39;t get a P, don&#39;t bother checking remaining Ps.</span>
<span id="L3625" class="ln">  3625&nbsp;&nbsp;</span>				unlock(&amp;sched.lock)
<span id="L3626" class="ln">  3626&nbsp;&nbsp;</span>				return nil
<span id="L3627" class="ln">  3627&nbsp;&nbsp;</span>			}
<span id="L3628" class="ln">  3628&nbsp;&nbsp;</span>			unlock(&amp;sched.lock)
<span id="L3629" class="ln">  3629&nbsp;&nbsp;</span>			return pp
<span id="L3630" class="ln">  3630&nbsp;&nbsp;</span>		}
<span id="L3631" class="ln">  3631&nbsp;&nbsp;</span>	}
<span id="L3632" class="ln">  3632&nbsp;&nbsp;</span>
<span id="L3633" class="ln">  3633&nbsp;&nbsp;</span>	<span class="comment">// No work available.</span>
<span id="L3634" class="ln">  3634&nbsp;&nbsp;</span>	return nil
<span id="L3635" class="ln">  3635&nbsp;&nbsp;</span>}
<span id="L3636" class="ln">  3636&nbsp;&nbsp;</span>
<span id="L3637" class="ln">  3637&nbsp;&nbsp;</span><span class="comment">// Check all Ps for a timer expiring sooner than pollUntil.</span>
<span id="L3638" class="ln">  3638&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3639" class="ln">  3639&nbsp;&nbsp;</span><span class="comment">// Returns updated pollUntil value.</span>
<span id="L3640" class="ln">  3640&nbsp;&nbsp;</span>func checkTimersNoP(allpSnapshot []*p, timerpMaskSnapshot pMask, pollUntil int64) int64 {
<span id="L3641" class="ln">  3641&nbsp;&nbsp;</span>	for id, p2 := range allpSnapshot {
<span id="L3642" class="ln">  3642&nbsp;&nbsp;</span>		if timerpMaskSnapshot.read(uint32(id)) {
<span id="L3643" class="ln">  3643&nbsp;&nbsp;</span>			w := nobarrierWakeTime(p2)
<span id="L3644" class="ln">  3644&nbsp;&nbsp;</span>			if w != 0 &amp;&amp; (pollUntil == 0 || w &lt; pollUntil) {
<span id="L3645" class="ln">  3645&nbsp;&nbsp;</span>				pollUntil = w
<span id="L3646" class="ln">  3646&nbsp;&nbsp;</span>			}
<span id="L3647" class="ln">  3647&nbsp;&nbsp;</span>		}
<span id="L3648" class="ln">  3648&nbsp;&nbsp;</span>	}
<span id="L3649" class="ln">  3649&nbsp;&nbsp;</span>
<span id="L3650" class="ln">  3650&nbsp;&nbsp;</span>	return pollUntil
<span id="L3651" class="ln">  3651&nbsp;&nbsp;</span>}
<span id="L3652" class="ln">  3652&nbsp;&nbsp;</span>
<span id="L3653" class="ln">  3653&nbsp;&nbsp;</span><span class="comment">// Check for idle-priority GC, without a P on entry.</span>
<span id="L3654" class="ln">  3654&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3655" class="ln">  3655&nbsp;&nbsp;</span><span class="comment">// If some GC work, a P, and a worker G are all available, the P and G will be</span>
<span id="L3656" class="ln">  3656&nbsp;&nbsp;</span><span class="comment">// returned. The returned P has not been wired yet.</span>
<span id="L3657" class="ln">  3657&nbsp;&nbsp;</span>func checkIdleGCNoP() (*p, *g) {
<span id="L3658" class="ln">  3658&nbsp;&nbsp;</span>	<span class="comment">// N.B. Since we have no P, gcBlackenEnabled may change at any time; we</span>
<span id="L3659" class="ln">  3659&nbsp;&nbsp;</span>	<span class="comment">// must check again after acquiring a P. As an optimization, we also check</span>
<span id="L3660" class="ln">  3660&nbsp;&nbsp;</span>	<span class="comment">// if an idle mark worker is needed at all. This is OK here, because if we</span>
<span id="L3661" class="ln">  3661&nbsp;&nbsp;</span>	<span class="comment">// observe that one isn&#39;t needed, at least one is currently running. Even if</span>
<span id="L3662" class="ln">  3662&nbsp;&nbsp;</span>	<span class="comment">// it stops running, its own journey into the scheduler should schedule it</span>
<span id="L3663" class="ln">  3663&nbsp;&nbsp;</span>	<span class="comment">// again, if need be (at which point, this check will pass, if relevant).</span>
<span id="L3664" class="ln">  3664&nbsp;&nbsp;</span>	if atomic.Load(&amp;gcBlackenEnabled) == 0 || !gcController.needIdleMarkWorker() {
<span id="L3665" class="ln">  3665&nbsp;&nbsp;</span>		return nil, nil
<span id="L3666" class="ln">  3666&nbsp;&nbsp;</span>	}
<span id="L3667" class="ln">  3667&nbsp;&nbsp;</span>	if !gcMarkWorkAvailable(nil) {
<span id="L3668" class="ln">  3668&nbsp;&nbsp;</span>		return nil, nil
<span id="L3669" class="ln">  3669&nbsp;&nbsp;</span>	}
<span id="L3670" class="ln">  3670&nbsp;&nbsp;</span>
<span id="L3671" class="ln">  3671&nbsp;&nbsp;</span>	<span class="comment">// Work is available; we can start an idle GC worker only if there is</span>
<span id="L3672" class="ln">  3672&nbsp;&nbsp;</span>	<span class="comment">// an available P and available worker G.</span>
<span id="L3673" class="ln">  3673&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L3674" class="ln">  3674&nbsp;&nbsp;</span>	<span class="comment">// We can attempt to acquire these in either order, though both have</span>
<span id="L3675" class="ln">  3675&nbsp;&nbsp;</span>	<span class="comment">// synchronization concerns (see below). Workers are almost always</span>
<span id="L3676" class="ln">  3676&nbsp;&nbsp;</span>	<span class="comment">// available (see comment in findRunnableGCWorker for the one case</span>
<span id="L3677" class="ln">  3677&nbsp;&nbsp;</span>	<span class="comment">// there may be none). Since we&#39;re slightly less likely to find a P,</span>
<span id="L3678" class="ln">  3678&nbsp;&nbsp;</span>	<span class="comment">// check for that first.</span>
<span id="L3679" class="ln">  3679&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L3680" class="ln">  3680&nbsp;&nbsp;</span>	<span class="comment">// Synchronization: note that we must hold sched.lock until we are</span>
<span id="L3681" class="ln">  3681&nbsp;&nbsp;</span>	<span class="comment">// committed to keeping it. Otherwise we cannot put the unnecessary P</span>
<span id="L3682" class="ln">  3682&nbsp;&nbsp;</span>	<span class="comment">// back in sched.pidle without performing the full set of idle</span>
<span id="L3683" class="ln">  3683&nbsp;&nbsp;</span>	<span class="comment">// transition checks.</span>
<span id="L3684" class="ln">  3684&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L3685" class="ln">  3685&nbsp;&nbsp;</span>	<span class="comment">// If we were to check gcBgMarkWorkerPool first, we must somehow handle</span>
<span id="L3686" class="ln">  3686&nbsp;&nbsp;</span>	<span class="comment">// the assumption in gcControllerState.findRunnableGCWorker that an</span>
<span id="L3687" class="ln">  3687&nbsp;&nbsp;</span>	<span class="comment">// empty gcBgMarkWorkerPool is only possible if gcMarkDone is running.</span>
<span id="L3688" class="ln">  3688&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L3689" class="ln">  3689&nbsp;&nbsp;</span>	pp, now := pidlegetSpinning(0)
<span id="L3690" class="ln">  3690&nbsp;&nbsp;</span>	if pp == nil {
<span id="L3691" class="ln">  3691&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L3692" class="ln">  3692&nbsp;&nbsp;</span>		return nil, nil
<span id="L3693" class="ln">  3693&nbsp;&nbsp;</span>	}
<span id="L3694" class="ln">  3694&nbsp;&nbsp;</span>
<span id="L3695" class="ln">  3695&nbsp;&nbsp;</span>	<span class="comment">// Now that we own a P, gcBlackenEnabled can&#39;t change (as it requires STW).</span>
<span id="L3696" class="ln">  3696&nbsp;&nbsp;</span>	if gcBlackenEnabled == 0 || !gcController.addIdleMarkWorker() {
<span id="L3697" class="ln">  3697&nbsp;&nbsp;</span>		pidleput(pp, now)
<span id="L3698" class="ln">  3698&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L3699" class="ln">  3699&nbsp;&nbsp;</span>		return nil, nil
<span id="L3700" class="ln">  3700&nbsp;&nbsp;</span>	}
<span id="L3701" class="ln">  3701&nbsp;&nbsp;</span>
<span id="L3702" class="ln">  3702&nbsp;&nbsp;</span>	node := (*gcBgMarkWorkerNode)(gcBgMarkWorkerPool.pop())
<span id="L3703" class="ln">  3703&nbsp;&nbsp;</span>	if node == nil {
<span id="L3704" class="ln">  3704&nbsp;&nbsp;</span>		pidleput(pp, now)
<span id="L3705" class="ln">  3705&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L3706" class="ln">  3706&nbsp;&nbsp;</span>		gcController.removeIdleMarkWorker()
<span id="L3707" class="ln">  3707&nbsp;&nbsp;</span>		return nil, nil
<span id="L3708" class="ln">  3708&nbsp;&nbsp;</span>	}
<span id="L3709" class="ln">  3709&nbsp;&nbsp;</span>
<span id="L3710" class="ln">  3710&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L3711" class="ln">  3711&nbsp;&nbsp;</span>
<span id="L3712" class="ln">  3712&nbsp;&nbsp;</span>	return pp, node.gp.ptr()
<span id="L3713" class="ln">  3713&nbsp;&nbsp;</span>}
<span id="L3714" class="ln">  3714&nbsp;&nbsp;</span>
<span id="L3715" class="ln">  3715&nbsp;&nbsp;</span><span class="comment">// wakeNetPoller wakes up the thread sleeping in the network poller if it isn&#39;t</span>
<span id="L3716" class="ln">  3716&nbsp;&nbsp;</span><span class="comment">// going to wake up before the when argument; or it wakes an idle P to service</span>
<span id="L3717" class="ln">  3717&nbsp;&nbsp;</span><span class="comment">// timers and the network poller if there isn&#39;t one already.</span>
<span id="L3718" class="ln">  3718&nbsp;&nbsp;</span>func wakeNetPoller(when int64) {
<span id="L3719" class="ln">  3719&nbsp;&nbsp;</span>	if sched.lastpoll.Load() == 0 {
<span id="L3720" class="ln">  3720&nbsp;&nbsp;</span>		<span class="comment">// In findrunnable we ensure that when polling the pollUntil</span>
<span id="L3721" class="ln">  3721&nbsp;&nbsp;</span>		<span class="comment">// field is either zero or the time to which the current</span>
<span id="L3722" class="ln">  3722&nbsp;&nbsp;</span>		<span class="comment">// poll is expected to run. This can have a spurious wakeup</span>
<span id="L3723" class="ln">  3723&nbsp;&nbsp;</span>		<span class="comment">// but should never miss a wakeup.</span>
<span id="L3724" class="ln">  3724&nbsp;&nbsp;</span>		pollerPollUntil := sched.pollUntil.Load()
<span id="L3725" class="ln">  3725&nbsp;&nbsp;</span>		if pollerPollUntil == 0 || pollerPollUntil &gt; when {
<span id="L3726" class="ln">  3726&nbsp;&nbsp;</span>			netpollBreak()
<span id="L3727" class="ln">  3727&nbsp;&nbsp;</span>		}
<span id="L3728" class="ln">  3728&nbsp;&nbsp;</span>	} else {
<span id="L3729" class="ln">  3729&nbsp;&nbsp;</span>		<span class="comment">// There are no threads in the network poller, try to get</span>
<span id="L3730" class="ln">  3730&nbsp;&nbsp;</span>		<span class="comment">// one there so it can handle new timers.</span>
<span id="L3731" class="ln">  3731&nbsp;&nbsp;</span>		if GOOS != &#34;plan9&#34; { <span class="comment">// Temporary workaround - see issue #42303.</span>
<span id="L3732" class="ln">  3732&nbsp;&nbsp;</span>			wakep()
<span id="L3733" class="ln">  3733&nbsp;&nbsp;</span>		}
<span id="L3734" class="ln">  3734&nbsp;&nbsp;</span>	}
<span id="L3735" class="ln">  3735&nbsp;&nbsp;</span>}
<span id="L3736" class="ln">  3736&nbsp;&nbsp;</span>
<span id="L3737" class="ln">  3737&nbsp;&nbsp;</span>func resetspinning() {
<span id="L3738" class="ln">  3738&nbsp;&nbsp;</span>	gp := getg()
<span id="L3739" class="ln">  3739&nbsp;&nbsp;</span>	if !gp.m.spinning {
<span id="L3740" class="ln">  3740&nbsp;&nbsp;</span>		throw(&#34;resetspinning: not a spinning m&#34;)
<span id="L3741" class="ln">  3741&nbsp;&nbsp;</span>	}
<span id="L3742" class="ln">  3742&nbsp;&nbsp;</span>	gp.m.spinning = false
<span id="L3743" class="ln">  3743&nbsp;&nbsp;</span>	nmspinning := sched.nmspinning.Add(-1)
<span id="L3744" class="ln">  3744&nbsp;&nbsp;</span>	if nmspinning &lt; 0 {
<span id="L3745" class="ln">  3745&nbsp;&nbsp;</span>		throw(&#34;findrunnable: negative nmspinning&#34;)
<span id="L3746" class="ln">  3746&nbsp;&nbsp;</span>	}
<span id="L3747" class="ln">  3747&nbsp;&nbsp;</span>	<span class="comment">// M wakeup policy is deliberately somewhat conservative, so check if we</span>
<span id="L3748" class="ln">  3748&nbsp;&nbsp;</span>	<span class="comment">// need to wakeup another P here. See &#34;Worker thread parking/unparking&#34;</span>
<span id="L3749" class="ln">  3749&nbsp;&nbsp;</span>	<span class="comment">// comment at the top of the file for details.</span>
<span id="L3750" class="ln">  3750&nbsp;&nbsp;</span>	wakep()
<span id="L3751" class="ln">  3751&nbsp;&nbsp;</span>}
<span id="L3752" class="ln">  3752&nbsp;&nbsp;</span>
<span id="L3753" class="ln">  3753&nbsp;&nbsp;</span><span class="comment">// injectglist adds each runnable G on the list to some run queue,</span>
<span id="L3754" class="ln">  3754&nbsp;&nbsp;</span><span class="comment">// and clears glist. If there is no current P, they are added to the</span>
<span id="L3755" class="ln">  3755&nbsp;&nbsp;</span><span class="comment">// global queue, and up to npidle M&#39;s are started to run them.</span>
<span id="L3756" class="ln">  3756&nbsp;&nbsp;</span><span class="comment">// Otherwise, for each idle P, this adds a G to the global queue</span>
<span id="L3757" class="ln">  3757&nbsp;&nbsp;</span><span class="comment">// and starts an M. Any remaining G&#39;s are added to the current P&#39;s</span>
<span id="L3758" class="ln">  3758&nbsp;&nbsp;</span><span class="comment">// local run queue.</span>
<span id="L3759" class="ln">  3759&nbsp;&nbsp;</span><span class="comment">// This may temporarily acquire sched.lock.</span>
<span id="L3760" class="ln">  3760&nbsp;&nbsp;</span><span class="comment">// Can run concurrently with GC.</span>
<span id="L3761" class="ln">  3761&nbsp;&nbsp;</span>func injectglist(glist *gList) {
<span id="L3762" class="ln">  3762&nbsp;&nbsp;</span>	if glist.empty() {
<span id="L3763" class="ln">  3763&nbsp;&nbsp;</span>		return
<span id="L3764" class="ln">  3764&nbsp;&nbsp;</span>	}
<span id="L3765" class="ln">  3765&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L3766" class="ln">  3766&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L3767" class="ln">  3767&nbsp;&nbsp;</span>		for gp := glist.head.ptr(); gp != nil; gp = gp.schedlink.ptr() {
<span id="L3768" class="ln">  3768&nbsp;&nbsp;</span>			trace.GoUnpark(gp, 0)
<span id="L3769" class="ln">  3769&nbsp;&nbsp;</span>		}
<span id="L3770" class="ln">  3770&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L3771" class="ln">  3771&nbsp;&nbsp;</span>	}
<span id="L3772" class="ln">  3772&nbsp;&nbsp;</span>
<span id="L3773" class="ln">  3773&nbsp;&nbsp;</span>	<span class="comment">// Mark all the goroutines as runnable before we put them</span>
<span id="L3774" class="ln">  3774&nbsp;&nbsp;</span>	<span class="comment">// on the run queues.</span>
<span id="L3775" class="ln">  3775&nbsp;&nbsp;</span>	head := glist.head.ptr()
<span id="L3776" class="ln">  3776&nbsp;&nbsp;</span>	var tail *g
<span id="L3777" class="ln">  3777&nbsp;&nbsp;</span>	qsize := 0
<span id="L3778" class="ln">  3778&nbsp;&nbsp;</span>	for gp := head; gp != nil; gp = gp.schedlink.ptr() {
<span id="L3779" class="ln">  3779&nbsp;&nbsp;</span>		tail = gp
<span id="L3780" class="ln">  3780&nbsp;&nbsp;</span>		qsize++
<span id="L3781" class="ln">  3781&nbsp;&nbsp;</span>		casgstatus(gp, _Gwaiting, _Grunnable)
<span id="L3782" class="ln">  3782&nbsp;&nbsp;</span>	}
<span id="L3783" class="ln">  3783&nbsp;&nbsp;</span>
<span id="L3784" class="ln">  3784&nbsp;&nbsp;</span>	<span class="comment">// Turn the gList into a gQueue.</span>
<span id="L3785" class="ln">  3785&nbsp;&nbsp;</span>	var q gQueue
<span id="L3786" class="ln">  3786&nbsp;&nbsp;</span>	q.head.set(head)
<span id="L3787" class="ln">  3787&nbsp;&nbsp;</span>	q.tail.set(tail)
<span id="L3788" class="ln">  3788&nbsp;&nbsp;</span>	*glist = gList{}
<span id="L3789" class="ln">  3789&nbsp;&nbsp;</span>
<span id="L3790" class="ln">  3790&nbsp;&nbsp;</span>	startIdle := func(n int) {
<span id="L3791" class="ln">  3791&nbsp;&nbsp;</span>		for i := 0; i &lt; n; i++ {
<span id="L3792" class="ln">  3792&nbsp;&nbsp;</span>			mp := acquirem() <span class="comment">// See comment in startm.</span>
<span id="L3793" class="ln">  3793&nbsp;&nbsp;</span>			lock(&amp;sched.lock)
<span id="L3794" class="ln">  3794&nbsp;&nbsp;</span>
<span id="L3795" class="ln">  3795&nbsp;&nbsp;</span>			pp, _ := pidlegetSpinning(0)
<span id="L3796" class="ln">  3796&nbsp;&nbsp;</span>			if pp == nil {
<span id="L3797" class="ln">  3797&nbsp;&nbsp;</span>				unlock(&amp;sched.lock)
<span id="L3798" class="ln">  3798&nbsp;&nbsp;</span>				releasem(mp)
<span id="L3799" class="ln">  3799&nbsp;&nbsp;</span>				break
<span id="L3800" class="ln">  3800&nbsp;&nbsp;</span>			}
<span id="L3801" class="ln">  3801&nbsp;&nbsp;</span>
<span id="L3802" class="ln">  3802&nbsp;&nbsp;</span>			startm(pp, false, true)
<span id="L3803" class="ln">  3803&nbsp;&nbsp;</span>			unlock(&amp;sched.lock)
<span id="L3804" class="ln">  3804&nbsp;&nbsp;</span>			releasem(mp)
<span id="L3805" class="ln">  3805&nbsp;&nbsp;</span>		}
<span id="L3806" class="ln">  3806&nbsp;&nbsp;</span>	}
<span id="L3807" class="ln">  3807&nbsp;&nbsp;</span>
<span id="L3808" class="ln">  3808&nbsp;&nbsp;</span>	pp := getg().m.p.ptr()
<span id="L3809" class="ln">  3809&nbsp;&nbsp;</span>	if pp == nil {
<span id="L3810" class="ln">  3810&nbsp;&nbsp;</span>		lock(&amp;sched.lock)
<span id="L3811" class="ln">  3811&nbsp;&nbsp;</span>		globrunqputbatch(&amp;q, int32(qsize))
<span id="L3812" class="ln">  3812&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L3813" class="ln">  3813&nbsp;&nbsp;</span>		startIdle(qsize)
<span id="L3814" class="ln">  3814&nbsp;&nbsp;</span>		return
<span id="L3815" class="ln">  3815&nbsp;&nbsp;</span>	}
<span id="L3816" class="ln">  3816&nbsp;&nbsp;</span>
<span id="L3817" class="ln">  3817&nbsp;&nbsp;</span>	npidle := int(sched.npidle.Load())
<span id="L3818" class="ln">  3818&nbsp;&nbsp;</span>	var globq gQueue
<span id="L3819" class="ln">  3819&nbsp;&nbsp;</span>	var n int
<span id="L3820" class="ln">  3820&nbsp;&nbsp;</span>	for n = 0; n &lt; npidle &amp;&amp; !q.empty(); n++ {
<span id="L3821" class="ln">  3821&nbsp;&nbsp;</span>		g := q.pop()
<span id="L3822" class="ln">  3822&nbsp;&nbsp;</span>		globq.pushBack(g)
<span id="L3823" class="ln">  3823&nbsp;&nbsp;</span>	}
<span id="L3824" class="ln">  3824&nbsp;&nbsp;</span>	if n &gt; 0 {
<span id="L3825" class="ln">  3825&nbsp;&nbsp;</span>		lock(&amp;sched.lock)
<span id="L3826" class="ln">  3826&nbsp;&nbsp;</span>		globrunqputbatch(&amp;globq, int32(n))
<span id="L3827" class="ln">  3827&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L3828" class="ln">  3828&nbsp;&nbsp;</span>		startIdle(n)
<span id="L3829" class="ln">  3829&nbsp;&nbsp;</span>		qsize -= n
<span id="L3830" class="ln">  3830&nbsp;&nbsp;</span>	}
<span id="L3831" class="ln">  3831&nbsp;&nbsp;</span>
<span id="L3832" class="ln">  3832&nbsp;&nbsp;</span>	if !q.empty() {
<span id="L3833" class="ln">  3833&nbsp;&nbsp;</span>		runqputbatch(pp, &amp;q, qsize)
<span id="L3834" class="ln">  3834&nbsp;&nbsp;</span>	}
<span id="L3835" class="ln">  3835&nbsp;&nbsp;</span>}
<span id="L3836" class="ln">  3836&nbsp;&nbsp;</span>
<span id="L3837" class="ln">  3837&nbsp;&nbsp;</span><span class="comment">// One round of scheduler: find a runnable goroutine and execute it.</span>
<span id="L3838" class="ln">  3838&nbsp;&nbsp;</span><span class="comment">// Never returns.</span>
<span id="L3839" class="ln">  3839&nbsp;&nbsp;</span>func schedule() {
<span id="L3840" class="ln">  3840&nbsp;&nbsp;</span>	mp := getg().m
<span id="L3841" class="ln">  3841&nbsp;&nbsp;</span>
<span id="L3842" class="ln">  3842&nbsp;&nbsp;</span>	if mp.locks != 0 {
<span id="L3843" class="ln">  3843&nbsp;&nbsp;</span>		throw(&#34;schedule: holding locks&#34;)
<span id="L3844" class="ln">  3844&nbsp;&nbsp;</span>	}
<span id="L3845" class="ln">  3845&nbsp;&nbsp;</span>
<span id="L3846" class="ln">  3846&nbsp;&nbsp;</span>	if mp.lockedg != 0 {
<span id="L3847" class="ln">  3847&nbsp;&nbsp;</span>		stoplockedm()
<span id="L3848" class="ln">  3848&nbsp;&nbsp;</span>		execute(mp.lockedg.ptr(), false) <span class="comment">// Never returns.</span>
<span id="L3849" class="ln">  3849&nbsp;&nbsp;</span>	}
<span id="L3850" class="ln">  3850&nbsp;&nbsp;</span>
<span id="L3851" class="ln">  3851&nbsp;&nbsp;</span>	<span class="comment">// We should not schedule away from a g that is executing a cgo call,</span>
<span id="L3852" class="ln">  3852&nbsp;&nbsp;</span>	<span class="comment">// since the cgo call is using the m&#39;s g0 stack.</span>
<span id="L3853" class="ln">  3853&nbsp;&nbsp;</span>	if mp.incgo {
<span id="L3854" class="ln">  3854&nbsp;&nbsp;</span>		throw(&#34;schedule: in cgo&#34;)
<span id="L3855" class="ln">  3855&nbsp;&nbsp;</span>	}
<span id="L3856" class="ln">  3856&nbsp;&nbsp;</span>
<span id="L3857" class="ln">  3857&nbsp;&nbsp;</span>top:
<span id="L3858" class="ln">  3858&nbsp;&nbsp;</span>	pp := mp.p.ptr()
<span id="L3859" class="ln">  3859&nbsp;&nbsp;</span>	pp.preempt = false
<span id="L3860" class="ln">  3860&nbsp;&nbsp;</span>
<span id="L3861" class="ln">  3861&nbsp;&nbsp;</span>	<span class="comment">// Safety check: if we are spinning, the run queue should be empty.</span>
<span id="L3862" class="ln">  3862&nbsp;&nbsp;</span>	<span class="comment">// Check this before calling checkTimers, as that might call</span>
<span id="L3863" class="ln">  3863&nbsp;&nbsp;</span>	<span class="comment">// goready to put a ready goroutine on the local run queue.</span>
<span id="L3864" class="ln">  3864&nbsp;&nbsp;</span>	if mp.spinning &amp;&amp; (pp.runnext != 0 || pp.runqhead != pp.runqtail) {
<span id="L3865" class="ln">  3865&nbsp;&nbsp;</span>		throw(&#34;schedule: spinning with local work&#34;)
<span id="L3866" class="ln">  3866&nbsp;&nbsp;</span>	}
<span id="L3867" class="ln">  3867&nbsp;&nbsp;</span>
<span id="L3868" class="ln">  3868&nbsp;&nbsp;</span>	gp, inheritTime, tryWakeP := findRunnable() <span class="comment">// blocks until work is available</span>
<span id="L3869" class="ln">  3869&nbsp;&nbsp;</span>
<span id="L3870" class="ln">  3870&nbsp;&nbsp;</span>	if debug.dontfreezetheworld &gt; 0 &amp;&amp; freezing.Load() {
<span id="L3871" class="ln">  3871&nbsp;&nbsp;</span>		<span class="comment">// See comment in freezetheworld. We don&#39;t want to perturb</span>
<span id="L3872" class="ln">  3872&nbsp;&nbsp;</span>		<span class="comment">// scheduler state, so we didn&#39;t gcstopm in findRunnable, but</span>
<span id="L3873" class="ln">  3873&nbsp;&nbsp;</span>		<span class="comment">// also don&#39;t want to allow new goroutines to run.</span>
<span id="L3874" class="ln">  3874&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L3875" class="ln">  3875&nbsp;&nbsp;</span>		<span class="comment">// Deadlock here rather than in the findRunnable loop so if</span>
<span id="L3876" class="ln">  3876&nbsp;&nbsp;</span>		<span class="comment">// findRunnable is stuck in a loop we don&#39;t perturb that</span>
<span id="L3877" class="ln">  3877&nbsp;&nbsp;</span>		<span class="comment">// either.</span>
<span id="L3878" class="ln">  3878&nbsp;&nbsp;</span>		lock(&amp;deadlock)
<span id="L3879" class="ln">  3879&nbsp;&nbsp;</span>		lock(&amp;deadlock)
<span id="L3880" class="ln">  3880&nbsp;&nbsp;</span>	}
<span id="L3881" class="ln">  3881&nbsp;&nbsp;</span>
<span id="L3882" class="ln">  3882&nbsp;&nbsp;</span>	<span class="comment">// This thread is going to run a goroutine and is not spinning anymore,</span>
<span id="L3883" class="ln">  3883&nbsp;&nbsp;</span>	<span class="comment">// so if it was marked as spinning we need to reset it now and potentially</span>
<span id="L3884" class="ln">  3884&nbsp;&nbsp;</span>	<span class="comment">// start a new spinning M.</span>
<span id="L3885" class="ln">  3885&nbsp;&nbsp;</span>	if mp.spinning {
<span id="L3886" class="ln">  3886&nbsp;&nbsp;</span>		resetspinning()
<span id="L3887" class="ln">  3887&nbsp;&nbsp;</span>	}
<span id="L3888" class="ln">  3888&nbsp;&nbsp;</span>
<span id="L3889" class="ln">  3889&nbsp;&nbsp;</span>	if sched.disable.user &amp;&amp; !schedEnabled(gp) {
<span id="L3890" class="ln">  3890&nbsp;&nbsp;</span>		<span class="comment">// Scheduling of this goroutine is disabled. Put it on</span>
<span id="L3891" class="ln">  3891&nbsp;&nbsp;</span>		<span class="comment">// the list of pending runnable goroutines for when we</span>
<span id="L3892" class="ln">  3892&nbsp;&nbsp;</span>		<span class="comment">// re-enable user scheduling and look again.</span>
<span id="L3893" class="ln">  3893&nbsp;&nbsp;</span>		lock(&amp;sched.lock)
<span id="L3894" class="ln">  3894&nbsp;&nbsp;</span>		if schedEnabled(gp) {
<span id="L3895" class="ln">  3895&nbsp;&nbsp;</span>			<span class="comment">// Something re-enabled scheduling while we</span>
<span id="L3896" class="ln">  3896&nbsp;&nbsp;</span>			<span class="comment">// were acquiring the lock.</span>
<span id="L3897" class="ln">  3897&nbsp;&nbsp;</span>			unlock(&amp;sched.lock)
<span id="L3898" class="ln">  3898&nbsp;&nbsp;</span>		} else {
<span id="L3899" class="ln">  3899&nbsp;&nbsp;</span>			sched.disable.runnable.pushBack(gp)
<span id="L3900" class="ln">  3900&nbsp;&nbsp;</span>			sched.disable.n++
<span id="L3901" class="ln">  3901&nbsp;&nbsp;</span>			unlock(&amp;sched.lock)
<span id="L3902" class="ln">  3902&nbsp;&nbsp;</span>			goto top
<span id="L3903" class="ln">  3903&nbsp;&nbsp;</span>		}
<span id="L3904" class="ln">  3904&nbsp;&nbsp;</span>	}
<span id="L3905" class="ln">  3905&nbsp;&nbsp;</span>
<span id="L3906" class="ln">  3906&nbsp;&nbsp;</span>	<span class="comment">// If about to schedule a not-normal goroutine (a GCworker or tracereader),</span>
<span id="L3907" class="ln">  3907&nbsp;&nbsp;</span>	<span class="comment">// wake a P if there is one.</span>
<span id="L3908" class="ln">  3908&nbsp;&nbsp;</span>	if tryWakeP {
<span id="L3909" class="ln">  3909&nbsp;&nbsp;</span>		wakep()
<span id="L3910" class="ln">  3910&nbsp;&nbsp;</span>	}
<span id="L3911" class="ln">  3911&nbsp;&nbsp;</span>	if gp.lockedm != 0 {
<span id="L3912" class="ln">  3912&nbsp;&nbsp;</span>		<span class="comment">// Hands off own p to the locked m,</span>
<span id="L3913" class="ln">  3913&nbsp;&nbsp;</span>		<span class="comment">// then blocks waiting for a new p.</span>
<span id="L3914" class="ln">  3914&nbsp;&nbsp;</span>		startlockedm(gp)
<span id="L3915" class="ln">  3915&nbsp;&nbsp;</span>		goto top
<span id="L3916" class="ln">  3916&nbsp;&nbsp;</span>	}
<span id="L3917" class="ln">  3917&nbsp;&nbsp;</span>
<span id="L3918" class="ln">  3918&nbsp;&nbsp;</span>	execute(gp, inheritTime)
<span id="L3919" class="ln">  3919&nbsp;&nbsp;</span>}
<span id="L3920" class="ln">  3920&nbsp;&nbsp;</span>
<span id="L3921" class="ln">  3921&nbsp;&nbsp;</span><span class="comment">// dropg removes the association between m and the current goroutine m-&gt;curg (gp for short).</span>
<span id="L3922" class="ln">  3922&nbsp;&nbsp;</span><span class="comment">// Typically a caller sets gp&#39;s status away from Grunning and then</span>
<span id="L3923" class="ln">  3923&nbsp;&nbsp;</span><span class="comment">// immediately calls dropg to finish the job. The caller is also responsible</span>
<span id="L3924" class="ln">  3924&nbsp;&nbsp;</span><span class="comment">// for arranging that gp will be restarted using ready at an</span>
<span id="L3925" class="ln">  3925&nbsp;&nbsp;</span><span class="comment">// appropriate time. After calling dropg and arranging for gp to be</span>
<span id="L3926" class="ln">  3926&nbsp;&nbsp;</span><span class="comment">// readied later, the caller can do other work but eventually should</span>
<span id="L3927" class="ln">  3927&nbsp;&nbsp;</span><span class="comment">// call schedule to restart the scheduling of goroutines on this m.</span>
<span id="L3928" class="ln">  3928&nbsp;&nbsp;</span>func dropg() {
<span id="L3929" class="ln">  3929&nbsp;&nbsp;</span>	gp := getg()
<span id="L3930" class="ln">  3930&nbsp;&nbsp;</span>
<span id="L3931" class="ln">  3931&nbsp;&nbsp;</span>	setMNoWB(&amp;gp.m.curg.m, nil)
<span id="L3932" class="ln">  3932&nbsp;&nbsp;</span>	setGNoWB(&amp;gp.m.curg, nil)
<span id="L3933" class="ln">  3933&nbsp;&nbsp;</span>}
<span id="L3934" class="ln">  3934&nbsp;&nbsp;</span>
<span id="L3935" class="ln">  3935&nbsp;&nbsp;</span><span class="comment">// checkTimers runs any timers for the P that are ready.</span>
<span id="L3936" class="ln">  3936&nbsp;&nbsp;</span><span class="comment">// If now is not 0 it is the current time.</span>
<span id="L3937" class="ln">  3937&nbsp;&nbsp;</span><span class="comment">// It returns the passed time or the current time if now was passed as 0.</span>
<span id="L3938" class="ln">  3938&nbsp;&nbsp;</span><span class="comment">// and the time when the next timer should run or 0 if there is no next timer,</span>
<span id="L3939" class="ln">  3939&nbsp;&nbsp;</span><span class="comment">// and reports whether it ran any timers.</span>
<span id="L3940" class="ln">  3940&nbsp;&nbsp;</span><span class="comment">// If the time when the next timer should run is not 0,</span>
<span id="L3941" class="ln">  3941&nbsp;&nbsp;</span><span class="comment">// it is always larger than the returned time.</span>
<span id="L3942" class="ln">  3942&nbsp;&nbsp;</span><span class="comment">// We pass now in and out to avoid extra calls of nanotime.</span>
<span id="L3943" class="ln">  3943&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3944" class="ln">  3944&nbsp;&nbsp;</span><span class="comment">//go:yeswritebarrierrec</span>
<span id="L3945" class="ln">  3945&nbsp;&nbsp;</span>func checkTimers(pp *p, now int64) (rnow, pollUntil int64, ran bool) {
<span id="L3946" class="ln">  3946&nbsp;&nbsp;</span>	<span class="comment">// If it&#39;s not yet time for the first timer, or the first adjusted</span>
<span id="L3947" class="ln">  3947&nbsp;&nbsp;</span>	<span class="comment">// timer, then there is nothing to do.</span>
<span id="L3948" class="ln">  3948&nbsp;&nbsp;</span>	next := pp.timer0When.Load()
<span id="L3949" class="ln">  3949&nbsp;&nbsp;</span>	nextAdj := pp.timerModifiedEarliest.Load()
<span id="L3950" class="ln">  3950&nbsp;&nbsp;</span>	if next == 0 || (nextAdj != 0 &amp;&amp; nextAdj &lt; next) {
<span id="L3951" class="ln">  3951&nbsp;&nbsp;</span>		next = nextAdj
<span id="L3952" class="ln">  3952&nbsp;&nbsp;</span>	}
<span id="L3953" class="ln">  3953&nbsp;&nbsp;</span>
<span id="L3954" class="ln">  3954&nbsp;&nbsp;</span>	if next == 0 {
<span id="L3955" class="ln">  3955&nbsp;&nbsp;</span>		<span class="comment">// No timers to run or adjust.</span>
<span id="L3956" class="ln">  3956&nbsp;&nbsp;</span>		return now, 0, false
<span id="L3957" class="ln">  3957&nbsp;&nbsp;</span>	}
<span id="L3958" class="ln">  3958&nbsp;&nbsp;</span>
<span id="L3959" class="ln">  3959&nbsp;&nbsp;</span>	if now == 0 {
<span id="L3960" class="ln">  3960&nbsp;&nbsp;</span>		now = nanotime()
<span id="L3961" class="ln">  3961&nbsp;&nbsp;</span>	}
<span id="L3962" class="ln">  3962&nbsp;&nbsp;</span>	if now &lt; next {
<span id="L3963" class="ln">  3963&nbsp;&nbsp;</span>		<span class="comment">// Next timer is not ready to run, but keep going</span>
<span id="L3964" class="ln">  3964&nbsp;&nbsp;</span>		<span class="comment">// if we would clear deleted timers.</span>
<span id="L3965" class="ln">  3965&nbsp;&nbsp;</span>		<span class="comment">// This corresponds to the condition below where</span>
<span id="L3966" class="ln">  3966&nbsp;&nbsp;</span>		<span class="comment">// we decide whether to call clearDeletedTimers.</span>
<span id="L3967" class="ln">  3967&nbsp;&nbsp;</span>		if pp != getg().m.p.ptr() || int(pp.deletedTimers.Load()) &lt;= int(pp.numTimers.Load()/4) {
<span id="L3968" class="ln">  3968&nbsp;&nbsp;</span>			return now, next, false
<span id="L3969" class="ln">  3969&nbsp;&nbsp;</span>		}
<span id="L3970" class="ln">  3970&nbsp;&nbsp;</span>	}
<span id="L3971" class="ln">  3971&nbsp;&nbsp;</span>
<span id="L3972" class="ln">  3972&nbsp;&nbsp;</span>	lock(&amp;pp.timersLock)
<span id="L3973" class="ln">  3973&nbsp;&nbsp;</span>
<span id="L3974" class="ln">  3974&nbsp;&nbsp;</span>	if len(pp.timers) &gt; 0 {
<span id="L3975" class="ln">  3975&nbsp;&nbsp;</span>		adjusttimers(pp, now)
<span id="L3976" class="ln">  3976&nbsp;&nbsp;</span>		for len(pp.timers) &gt; 0 {
<span id="L3977" class="ln">  3977&nbsp;&nbsp;</span>			<span class="comment">// Note that runtimer may temporarily unlock</span>
<span id="L3978" class="ln">  3978&nbsp;&nbsp;</span>			<span class="comment">// pp.timersLock.</span>
<span id="L3979" class="ln">  3979&nbsp;&nbsp;</span>			if tw := runtimer(pp, now); tw != 0 {
<span id="L3980" class="ln">  3980&nbsp;&nbsp;</span>				if tw &gt; 0 {
<span id="L3981" class="ln">  3981&nbsp;&nbsp;</span>					pollUntil = tw
<span id="L3982" class="ln">  3982&nbsp;&nbsp;</span>				}
<span id="L3983" class="ln">  3983&nbsp;&nbsp;</span>				break
<span id="L3984" class="ln">  3984&nbsp;&nbsp;</span>			}
<span id="L3985" class="ln">  3985&nbsp;&nbsp;</span>			ran = true
<span id="L3986" class="ln">  3986&nbsp;&nbsp;</span>		}
<span id="L3987" class="ln">  3987&nbsp;&nbsp;</span>	}
<span id="L3988" class="ln">  3988&nbsp;&nbsp;</span>
<span id="L3989" class="ln">  3989&nbsp;&nbsp;</span>	<span class="comment">// If this is the local P, and there are a lot of deleted timers,</span>
<span id="L3990" class="ln">  3990&nbsp;&nbsp;</span>	<span class="comment">// clear them out. We only do this for the local P to reduce</span>
<span id="L3991" class="ln">  3991&nbsp;&nbsp;</span>	<span class="comment">// lock contention on timersLock.</span>
<span id="L3992" class="ln">  3992&nbsp;&nbsp;</span>	if pp == getg().m.p.ptr() &amp;&amp; int(pp.deletedTimers.Load()) &gt; len(pp.timers)/4 {
<span id="L3993" class="ln">  3993&nbsp;&nbsp;</span>		clearDeletedTimers(pp)
<span id="L3994" class="ln">  3994&nbsp;&nbsp;</span>	}
<span id="L3995" class="ln">  3995&nbsp;&nbsp;</span>
<span id="L3996" class="ln">  3996&nbsp;&nbsp;</span>	unlock(&amp;pp.timersLock)
<span id="L3997" class="ln">  3997&nbsp;&nbsp;</span>
<span id="L3998" class="ln">  3998&nbsp;&nbsp;</span>	return now, pollUntil, ran
<span id="L3999" class="ln">  3999&nbsp;&nbsp;</span>}
<span id="L4000" class="ln">  4000&nbsp;&nbsp;</span>
<span id="L4001" class="ln">  4001&nbsp;&nbsp;</span>func parkunlock_c(gp *g, lock unsafe.Pointer) bool {
<span id="L4002" class="ln">  4002&nbsp;&nbsp;</span>	unlock((*mutex)(lock))
<span id="L4003" class="ln">  4003&nbsp;&nbsp;</span>	return true
<span id="L4004" class="ln">  4004&nbsp;&nbsp;</span>}
<span id="L4005" class="ln">  4005&nbsp;&nbsp;</span>
<span id="L4006" class="ln">  4006&nbsp;&nbsp;</span><span class="comment">// park continuation on g0.</span>
<span id="L4007" class="ln">  4007&nbsp;&nbsp;</span>func park_m(gp *g) {
<span id="L4008" class="ln">  4008&nbsp;&nbsp;</span>	mp := getg().m
<span id="L4009" class="ln">  4009&nbsp;&nbsp;</span>
<span id="L4010" class="ln">  4010&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L4011" class="ln">  4011&nbsp;&nbsp;</span>
<span id="L4012" class="ln">  4012&nbsp;&nbsp;</span>	<span class="comment">// N.B. Not using casGToWaiting here because the waitreason is</span>
<span id="L4013" class="ln">  4013&nbsp;&nbsp;</span>	<span class="comment">// set by park_m&#39;s caller.</span>
<span id="L4014" class="ln">  4014&nbsp;&nbsp;</span>	casgstatus(gp, _Grunning, _Gwaiting)
<span id="L4015" class="ln">  4015&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L4016" class="ln">  4016&nbsp;&nbsp;</span>		trace.GoPark(mp.waitTraceBlockReason, mp.waitTraceSkip)
<span id="L4017" class="ln">  4017&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L4018" class="ln">  4018&nbsp;&nbsp;</span>	}
<span id="L4019" class="ln">  4019&nbsp;&nbsp;</span>
<span id="L4020" class="ln">  4020&nbsp;&nbsp;</span>	dropg()
<span id="L4021" class="ln">  4021&nbsp;&nbsp;</span>
<span id="L4022" class="ln">  4022&nbsp;&nbsp;</span>	if fn := mp.waitunlockf; fn != nil {
<span id="L4023" class="ln">  4023&nbsp;&nbsp;</span>		ok := fn(gp, mp.waitlock)
<span id="L4024" class="ln">  4024&nbsp;&nbsp;</span>		mp.waitunlockf = nil
<span id="L4025" class="ln">  4025&nbsp;&nbsp;</span>		mp.waitlock = nil
<span id="L4026" class="ln">  4026&nbsp;&nbsp;</span>		if !ok {
<span id="L4027" class="ln">  4027&nbsp;&nbsp;</span>			trace := traceAcquire()
<span id="L4028" class="ln">  4028&nbsp;&nbsp;</span>			casgstatus(gp, _Gwaiting, _Grunnable)
<span id="L4029" class="ln">  4029&nbsp;&nbsp;</span>			if trace.ok() {
<span id="L4030" class="ln">  4030&nbsp;&nbsp;</span>				trace.GoUnpark(gp, 2)
<span id="L4031" class="ln">  4031&nbsp;&nbsp;</span>				traceRelease(trace)
<span id="L4032" class="ln">  4032&nbsp;&nbsp;</span>			}
<span id="L4033" class="ln">  4033&nbsp;&nbsp;</span>			execute(gp, true) <span class="comment">// Schedule it back, never returns.</span>
<span id="L4034" class="ln">  4034&nbsp;&nbsp;</span>		}
<span id="L4035" class="ln">  4035&nbsp;&nbsp;</span>	}
<span id="L4036" class="ln">  4036&nbsp;&nbsp;</span>	schedule()
<span id="L4037" class="ln">  4037&nbsp;&nbsp;</span>}
<span id="L4038" class="ln">  4038&nbsp;&nbsp;</span>
<span id="L4039" class="ln">  4039&nbsp;&nbsp;</span>func goschedImpl(gp *g, preempted bool) {
<span id="L4040" class="ln">  4040&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L4041" class="ln">  4041&nbsp;&nbsp;</span>	status := readgstatus(gp)
<span id="L4042" class="ln">  4042&nbsp;&nbsp;</span>	if status&amp;^_Gscan != _Grunning {
<span id="L4043" class="ln">  4043&nbsp;&nbsp;</span>		dumpgstatus(gp)
<span id="L4044" class="ln">  4044&nbsp;&nbsp;</span>		throw(&#34;bad g status&#34;)
<span id="L4045" class="ln">  4045&nbsp;&nbsp;</span>	}
<span id="L4046" class="ln">  4046&nbsp;&nbsp;</span>	casgstatus(gp, _Grunning, _Grunnable)
<span id="L4047" class="ln">  4047&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L4048" class="ln">  4048&nbsp;&nbsp;</span>		if preempted {
<span id="L4049" class="ln">  4049&nbsp;&nbsp;</span>			trace.GoPreempt()
<span id="L4050" class="ln">  4050&nbsp;&nbsp;</span>		} else {
<span id="L4051" class="ln">  4051&nbsp;&nbsp;</span>			trace.GoSched()
<span id="L4052" class="ln">  4052&nbsp;&nbsp;</span>		}
<span id="L4053" class="ln">  4053&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L4054" class="ln">  4054&nbsp;&nbsp;</span>	}
<span id="L4055" class="ln">  4055&nbsp;&nbsp;</span>
<span id="L4056" class="ln">  4056&nbsp;&nbsp;</span>	dropg()
<span id="L4057" class="ln">  4057&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L4058" class="ln">  4058&nbsp;&nbsp;</span>	globrunqput(gp)
<span id="L4059" class="ln">  4059&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L4060" class="ln">  4060&nbsp;&nbsp;</span>
<span id="L4061" class="ln">  4061&nbsp;&nbsp;</span>	if mainStarted {
<span id="L4062" class="ln">  4062&nbsp;&nbsp;</span>		wakep()
<span id="L4063" class="ln">  4063&nbsp;&nbsp;</span>	}
<span id="L4064" class="ln">  4064&nbsp;&nbsp;</span>
<span id="L4065" class="ln">  4065&nbsp;&nbsp;</span>	schedule()
<span id="L4066" class="ln">  4066&nbsp;&nbsp;</span>}
<span id="L4067" class="ln">  4067&nbsp;&nbsp;</span>
<span id="L4068" class="ln">  4068&nbsp;&nbsp;</span><span class="comment">// Gosched continuation on g0.</span>
<span id="L4069" class="ln">  4069&nbsp;&nbsp;</span>func gosched_m(gp *g) {
<span id="L4070" class="ln">  4070&nbsp;&nbsp;</span>	goschedImpl(gp, false)
<span id="L4071" class="ln">  4071&nbsp;&nbsp;</span>}
<span id="L4072" class="ln">  4072&nbsp;&nbsp;</span>
<span id="L4073" class="ln">  4073&nbsp;&nbsp;</span><span class="comment">// goschedguarded is a forbidden-states-avoided version of gosched_m.</span>
<span id="L4074" class="ln">  4074&nbsp;&nbsp;</span>func goschedguarded_m(gp *g) {
<span id="L4075" class="ln">  4075&nbsp;&nbsp;</span>	if !canPreemptM(gp.m) {
<span id="L4076" class="ln">  4076&nbsp;&nbsp;</span>		gogo(&amp;gp.sched) <span class="comment">// never return</span>
<span id="L4077" class="ln">  4077&nbsp;&nbsp;</span>	}
<span id="L4078" class="ln">  4078&nbsp;&nbsp;</span>	goschedImpl(gp, false)
<span id="L4079" class="ln">  4079&nbsp;&nbsp;</span>}
<span id="L4080" class="ln">  4080&nbsp;&nbsp;</span>
<span id="L4081" class="ln">  4081&nbsp;&nbsp;</span>func gopreempt_m(gp *g) {
<span id="L4082" class="ln">  4082&nbsp;&nbsp;</span>	goschedImpl(gp, true)
<span id="L4083" class="ln">  4083&nbsp;&nbsp;</span>}
<span id="L4084" class="ln">  4084&nbsp;&nbsp;</span>
<span id="L4085" class="ln">  4085&nbsp;&nbsp;</span><span class="comment">// preemptPark parks gp and puts it in _Gpreempted.</span>
<span id="L4086" class="ln">  4086&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4087" class="ln">  4087&nbsp;&nbsp;</span><span class="comment">//go:systemstack</span>
<span id="L4088" class="ln">  4088&nbsp;&nbsp;</span>func preemptPark(gp *g) {
<span id="L4089" class="ln">  4089&nbsp;&nbsp;</span>	status := readgstatus(gp)
<span id="L4090" class="ln">  4090&nbsp;&nbsp;</span>	if status&amp;^_Gscan != _Grunning {
<span id="L4091" class="ln">  4091&nbsp;&nbsp;</span>		dumpgstatus(gp)
<span id="L4092" class="ln">  4092&nbsp;&nbsp;</span>		throw(&#34;bad g status&#34;)
<span id="L4093" class="ln">  4093&nbsp;&nbsp;</span>	}
<span id="L4094" class="ln">  4094&nbsp;&nbsp;</span>
<span id="L4095" class="ln">  4095&nbsp;&nbsp;</span>	if gp.asyncSafePoint {
<span id="L4096" class="ln">  4096&nbsp;&nbsp;</span>		<span class="comment">// Double-check that async preemption does not</span>
<span id="L4097" class="ln">  4097&nbsp;&nbsp;</span>		<span class="comment">// happen in SPWRITE assembly functions.</span>
<span id="L4098" class="ln">  4098&nbsp;&nbsp;</span>		<span class="comment">// isAsyncSafePoint must exclude this case.</span>
<span id="L4099" class="ln">  4099&nbsp;&nbsp;</span>		f := findfunc(gp.sched.pc)
<span id="L4100" class="ln">  4100&nbsp;&nbsp;</span>		if !f.valid() {
<span id="L4101" class="ln">  4101&nbsp;&nbsp;</span>			throw(&#34;preempt at unknown pc&#34;)
<span id="L4102" class="ln">  4102&nbsp;&nbsp;</span>		}
<span id="L4103" class="ln">  4103&nbsp;&nbsp;</span>		if f.flag&amp;abi.FuncFlagSPWrite != 0 {
<span id="L4104" class="ln">  4104&nbsp;&nbsp;</span>			println(&#34;runtime: unexpected SPWRITE function&#34;, funcname(f), &#34;in async preempt&#34;)
<span id="L4105" class="ln">  4105&nbsp;&nbsp;</span>			throw(&#34;preempt SPWRITE&#34;)
<span id="L4106" class="ln">  4106&nbsp;&nbsp;</span>		}
<span id="L4107" class="ln">  4107&nbsp;&nbsp;</span>	}
<span id="L4108" class="ln">  4108&nbsp;&nbsp;</span>
<span id="L4109" class="ln">  4109&nbsp;&nbsp;</span>	<span class="comment">// Transition from _Grunning to _Gscan|_Gpreempted. We can&#39;t</span>
<span id="L4110" class="ln">  4110&nbsp;&nbsp;</span>	<span class="comment">// be in _Grunning when we dropg because then we&#39;d be running</span>
<span id="L4111" class="ln">  4111&nbsp;&nbsp;</span>	<span class="comment">// without an M, but the moment we&#39;re in _Gpreempted,</span>
<span id="L4112" class="ln">  4112&nbsp;&nbsp;</span>	<span class="comment">// something could claim this G before we&#39;ve fully cleaned it</span>
<span id="L4113" class="ln">  4113&nbsp;&nbsp;</span>	<span class="comment">// up. Hence, we set the scan bit to lock down further</span>
<span id="L4114" class="ln">  4114&nbsp;&nbsp;</span>	<span class="comment">// transitions until we can dropg.</span>
<span id="L4115" class="ln">  4115&nbsp;&nbsp;</span>	casGToPreemptScan(gp, _Grunning, _Gscan|_Gpreempted)
<span id="L4116" class="ln">  4116&nbsp;&nbsp;</span>	dropg()
<span id="L4117" class="ln">  4117&nbsp;&nbsp;</span>
<span id="L4118" class="ln">  4118&nbsp;&nbsp;</span>	<span class="comment">// Be careful about how we trace this next event. The ordering</span>
<span id="L4119" class="ln">  4119&nbsp;&nbsp;</span>	<span class="comment">// is subtle.</span>
<span id="L4120" class="ln">  4120&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L4121" class="ln">  4121&nbsp;&nbsp;</span>	<span class="comment">// The moment we CAS into _Gpreempted, suspendG could CAS to</span>
<span id="L4122" class="ln">  4122&nbsp;&nbsp;</span>	<span class="comment">// _Gwaiting, do its work, and ready the goroutine. All of</span>
<span id="L4123" class="ln">  4123&nbsp;&nbsp;</span>	<span class="comment">// this could happen before we even get the chance to emit</span>
<span id="L4124" class="ln">  4124&nbsp;&nbsp;</span>	<span class="comment">// an event. The end result is that the events could appear</span>
<span id="L4125" class="ln">  4125&nbsp;&nbsp;</span>	<span class="comment">// out of order, and the tracer generally assumes the scheduler</span>
<span id="L4126" class="ln">  4126&nbsp;&nbsp;</span>	<span class="comment">// takes care of the ordering between GoPark and GoUnpark.</span>
<span id="L4127" class="ln">  4127&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L4128" class="ln">  4128&nbsp;&nbsp;</span>	<span class="comment">// The answer here is simple: emit the event while we still hold</span>
<span id="L4129" class="ln">  4129&nbsp;&nbsp;</span>	<span class="comment">// the _Gscan bit on the goroutine. We still need to traceAcquire</span>
<span id="L4130" class="ln">  4130&nbsp;&nbsp;</span>	<span class="comment">// and traceRelease across the CAS because the tracer could be</span>
<span id="L4131" class="ln">  4131&nbsp;&nbsp;</span>	<span class="comment">// what&#39;s calling suspendG in the first place, and we want the</span>
<span id="L4132" class="ln">  4132&nbsp;&nbsp;</span>	<span class="comment">// CAS and event emission to appear atomic to the tracer.</span>
<span id="L4133" class="ln">  4133&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L4134" class="ln">  4134&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L4135" class="ln">  4135&nbsp;&nbsp;</span>		trace.GoPark(traceBlockPreempted, 0)
<span id="L4136" class="ln">  4136&nbsp;&nbsp;</span>	}
<span id="L4137" class="ln">  4137&nbsp;&nbsp;</span>	casfrom_Gscanstatus(gp, _Gscan|_Gpreempted, _Gpreempted)
<span id="L4138" class="ln">  4138&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L4139" class="ln">  4139&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L4140" class="ln">  4140&nbsp;&nbsp;</span>	}
<span id="L4141" class="ln">  4141&nbsp;&nbsp;</span>	schedule()
<span id="L4142" class="ln">  4142&nbsp;&nbsp;</span>}
<span id="L4143" class="ln">  4143&nbsp;&nbsp;</span>
<span id="L4144" class="ln">  4144&nbsp;&nbsp;</span><span class="comment">// goyield is like Gosched, but it:</span>
<span id="L4145" class="ln">  4145&nbsp;&nbsp;</span><span class="comment">// - emits a GoPreempt trace event instead of a GoSched trace event</span>
<span id="L4146" class="ln">  4146&nbsp;&nbsp;</span><span class="comment">// - puts the current G on the runq of the current P instead of the globrunq</span>
<span id="L4147" class="ln">  4147&nbsp;&nbsp;</span>func goyield() {
<span id="L4148" class="ln">  4148&nbsp;&nbsp;</span>	checkTimeouts()
<span id="L4149" class="ln">  4149&nbsp;&nbsp;</span>	mcall(goyield_m)
<span id="L4150" class="ln">  4150&nbsp;&nbsp;</span>}
<span id="L4151" class="ln">  4151&nbsp;&nbsp;</span>
<span id="L4152" class="ln">  4152&nbsp;&nbsp;</span>func goyield_m(gp *g) {
<span id="L4153" class="ln">  4153&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L4154" class="ln">  4154&nbsp;&nbsp;</span>	pp := gp.m.p.ptr()
<span id="L4155" class="ln">  4155&nbsp;&nbsp;</span>	casgstatus(gp, _Grunning, _Grunnable)
<span id="L4156" class="ln">  4156&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L4157" class="ln">  4157&nbsp;&nbsp;</span>		trace.GoPreempt()
<span id="L4158" class="ln">  4158&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L4159" class="ln">  4159&nbsp;&nbsp;</span>	}
<span id="L4160" class="ln">  4160&nbsp;&nbsp;</span>	dropg()
<span id="L4161" class="ln">  4161&nbsp;&nbsp;</span>	runqput(pp, gp, false)
<span id="L4162" class="ln">  4162&nbsp;&nbsp;</span>	schedule()
<span id="L4163" class="ln">  4163&nbsp;&nbsp;</span>}
<span id="L4164" class="ln">  4164&nbsp;&nbsp;</span>
<span id="L4165" class="ln">  4165&nbsp;&nbsp;</span><span class="comment">// Finishes execution of the current goroutine.</span>
<span id="L4166" class="ln">  4166&nbsp;&nbsp;</span>func goexit1() {
<span id="L4167" class="ln">  4167&nbsp;&nbsp;</span>	if raceenabled {
<span id="L4168" class="ln">  4168&nbsp;&nbsp;</span>		racegoend()
<span id="L4169" class="ln">  4169&nbsp;&nbsp;</span>	}
<span id="L4170" class="ln">  4170&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L4171" class="ln">  4171&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L4172" class="ln">  4172&nbsp;&nbsp;</span>		trace.GoEnd()
<span id="L4173" class="ln">  4173&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L4174" class="ln">  4174&nbsp;&nbsp;</span>	}
<span id="L4175" class="ln">  4175&nbsp;&nbsp;</span>	mcall(goexit0)
<span id="L4176" class="ln">  4176&nbsp;&nbsp;</span>}
<span id="L4177" class="ln">  4177&nbsp;&nbsp;</span>
<span id="L4178" class="ln">  4178&nbsp;&nbsp;</span><span class="comment">// goexit continuation on g0.</span>
<span id="L4179" class="ln">  4179&nbsp;&nbsp;</span>func goexit0(gp *g) {
<span id="L4180" class="ln">  4180&nbsp;&nbsp;</span>	gdestroy(gp)
<span id="L4181" class="ln">  4181&nbsp;&nbsp;</span>	schedule()
<span id="L4182" class="ln">  4182&nbsp;&nbsp;</span>}
<span id="L4183" class="ln">  4183&nbsp;&nbsp;</span>
<span id="L4184" class="ln">  4184&nbsp;&nbsp;</span>func gdestroy(gp *g) {
<span id="L4185" class="ln">  4185&nbsp;&nbsp;</span>	mp := getg().m
<span id="L4186" class="ln">  4186&nbsp;&nbsp;</span>	pp := mp.p.ptr()
<span id="L4187" class="ln">  4187&nbsp;&nbsp;</span>
<span id="L4188" class="ln">  4188&nbsp;&nbsp;</span>	casgstatus(gp, _Grunning, _Gdead)
<span id="L4189" class="ln">  4189&nbsp;&nbsp;</span>	gcController.addScannableStack(pp, -int64(gp.stack.hi-gp.stack.lo))
<span id="L4190" class="ln">  4190&nbsp;&nbsp;</span>	if isSystemGoroutine(gp, false) {
<span id="L4191" class="ln">  4191&nbsp;&nbsp;</span>		sched.ngsys.Add(-1)
<span id="L4192" class="ln">  4192&nbsp;&nbsp;</span>	}
<span id="L4193" class="ln">  4193&nbsp;&nbsp;</span>	gp.m = nil
<span id="L4194" class="ln">  4194&nbsp;&nbsp;</span>	locked := gp.lockedm != 0
<span id="L4195" class="ln">  4195&nbsp;&nbsp;</span>	gp.lockedm = 0
<span id="L4196" class="ln">  4196&nbsp;&nbsp;</span>	mp.lockedg = 0
<span id="L4197" class="ln">  4197&nbsp;&nbsp;</span>	gp.preemptStop = false
<span id="L4198" class="ln">  4198&nbsp;&nbsp;</span>	gp.paniconfault = false
<span id="L4199" class="ln">  4199&nbsp;&nbsp;</span>	gp._defer = nil <span class="comment">// should be true already but just in case.</span>
<span id="L4200" class="ln">  4200&nbsp;&nbsp;</span>	gp._panic = nil <span class="comment">// non-nil for Goexit during panic. points at stack-allocated data.</span>
<span id="L4201" class="ln">  4201&nbsp;&nbsp;</span>	gp.writebuf = nil
<span id="L4202" class="ln">  4202&nbsp;&nbsp;</span>	gp.waitreason = waitReasonZero
<span id="L4203" class="ln">  4203&nbsp;&nbsp;</span>	gp.param = nil
<span id="L4204" class="ln">  4204&nbsp;&nbsp;</span>	gp.labels = nil
<span id="L4205" class="ln">  4205&nbsp;&nbsp;</span>	gp.timer = nil
<span id="L4206" class="ln">  4206&nbsp;&nbsp;</span>
<span id="L4207" class="ln">  4207&nbsp;&nbsp;</span>	if gcBlackenEnabled != 0 &amp;&amp; gp.gcAssistBytes &gt; 0 {
<span id="L4208" class="ln">  4208&nbsp;&nbsp;</span>		<span class="comment">// Flush assist credit to the global pool. This gives</span>
<span id="L4209" class="ln">  4209&nbsp;&nbsp;</span>		<span class="comment">// better information to pacing if the application is</span>
<span id="L4210" class="ln">  4210&nbsp;&nbsp;</span>		<span class="comment">// rapidly creating an exiting goroutines.</span>
<span id="L4211" class="ln">  4211&nbsp;&nbsp;</span>		assistWorkPerByte := gcController.assistWorkPerByte.Load()
<span id="L4212" class="ln">  4212&nbsp;&nbsp;</span>		scanCredit := int64(assistWorkPerByte * float64(gp.gcAssistBytes))
<span id="L4213" class="ln">  4213&nbsp;&nbsp;</span>		gcController.bgScanCredit.Add(scanCredit)
<span id="L4214" class="ln">  4214&nbsp;&nbsp;</span>		gp.gcAssistBytes = 0
<span id="L4215" class="ln">  4215&nbsp;&nbsp;</span>	}
<span id="L4216" class="ln">  4216&nbsp;&nbsp;</span>
<span id="L4217" class="ln">  4217&nbsp;&nbsp;</span>	dropg()
<span id="L4218" class="ln">  4218&nbsp;&nbsp;</span>
<span id="L4219" class="ln">  4219&nbsp;&nbsp;</span>	if GOARCH == &#34;wasm&#34; { <span class="comment">// no threads yet on wasm</span>
<span id="L4220" class="ln">  4220&nbsp;&nbsp;</span>		gfput(pp, gp)
<span id="L4221" class="ln">  4221&nbsp;&nbsp;</span>		return
<span id="L4222" class="ln">  4222&nbsp;&nbsp;</span>	}
<span id="L4223" class="ln">  4223&nbsp;&nbsp;</span>
<span id="L4224" class="ln">  4224&nbsp;&nbsp;</span>	if mp.lockedInt != 0 {
<span id="L4225" class="ln">  4225&nbsp;&nbsp;</span>		print(&#34;invalid m-&gt;lockedInt = &#34;, mp.lockedInt, &#34;\n&#34;)
<span id="L4226" class="ln">  4226&nbsp;&nbsp;</span>		throw(&#34;internal lockOSThread error&#34;)
<span id="L4227" class="ln">  4227&nbsp;&nbsp;</span>	}
<span id="L4228" class="ln">  4228&nbsp;&nbsp;</span>	gfput(pp, gp)
<span id="L4229" class="ln">  4229&nbsp;&nbsp;</span>	if locked {
<span id="L4230" class="ln">  4230&nbsp;&nbsp;</span>		<span class="comment">// The goroutine may have locked this thread because</span>
<span id="L4231" class="ln">  4231&nbsp;&nbsp;</span>		<span class="comment">// it put it in an unusual kernel state. Kill it</span>
<span id="L4232" class="ln">  4232&nbsp;&nbsp;</span>		<span class="comment">// rather than returning it to the thread pool.</span>
<span id="L4233" class="ln">  4233&nbsp;&nbsp;</span>
<span id="L4234" class="ln">  4234&nbsp;&nbsp;</span>		<span class="comment">// Return to mstart, which will release the P and exit</span>
<span id="L4235" class="ln">  4235&nbsp;&nbsp;</span>		<span class="comment">// the thread.</span>
<span id="L4236" class="ln">  4236&nbsp;&nbsp;</span>		if GOOS != &#34;plan9&#34; { <span class="comment">// See golang.org/issue/22227.</span>
<span id="L4237" class="ln">  4237&nbsp;&nbsp;</span>			gogo(&amp;mp.g0.sched)
<span id="L4238" class="ln">  4238&nbsp;&nbsp;</span>		} else {
<span id="L4239" class="ln">  4239&nbsp;&nbsp;</span>			<span class="comment">// Clear lockedExt on plan9 since we may end up re-using</span>
<span id="L4240" class="ln">  4240&nbsp;&nbsp;</span>			<span class="comment">// this thread.</span>
<span id="L4241" class="ln">  4241&nbsp;&nbsp;</span>			mp.lockedExt = 0
<span id="L4242" class="ln">  4242&nbsp;&nbsp;</span>		}
<span id="L4243" class="ln">  4243&nbsp;&nbsp;</span>	}
<span id="L4244" class="ln">  4244&nbsp;&nbsp;</span>}
<span id="L4245" class="ln">  4245&nbsp;&nbsp;</span>
<span id="L4246" class="ln">  4246&nbsp;&nbsp;</span><span class="comment">// save updates getg().sched to refer to pc and sp so that a following</span>
<span id="L4247" class="ln">  4247&nbsp;&nbsp;</span><span class="comment">// gogo will restore pc and sp.</span>
<span id="L4248" class="ln">  4248&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4249" class="ln">  4249&nbsp;&nbsp;</span><span class="comment">// save must not have write barriers because invoking a write barrier</span>
<span id="L4250" class="ln">  4250&nbsp;&nbsp;</span><span class="comment">// can clobber getg().sched.</span>
<span id="L4251" class="ln">  4251&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4252" class="ln">  4252&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L4253" class="ln">  4253&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L4254" class="ln">  4254&nbsp;&nbsp;</span>func save(pc, sp uintptr) {
<span id="L4255" class="ln">  4255&nbsp;&nbsp;</span>	gp := getg()
<span id="L4256" class="ln">  4256&nbsp;&nbsp;</span>
<span id="L4257" class="ln">  4257&nbsp;&nbsp;</span>	if gp == gp.m.g0 || gp == gp.m.gsignal {
<span id="L4258" class="ln">  4258&nbsp;&nbsp;</span>		<span class="comment">// m.g0.sched is special and must describe the context</span>
<span id="L4259" class="ln">  4259&nbsp;&nbsp;</span>		<span class="comment">// for exiting the thread. mstart1 writes to it directly.</span>
<span id="L4260" class="ln">  4260&nbsp;&nbsp;</span>		<span class="comment">// m.gsignal.sched should not be used at all.</span>
<span id="L4261" class="ln">  4261&nbsp;&nbsp;</span>		<span class="comment">// This check makes sure save calls do not accidentally</span>
<span id="L4262" class="ln">  4262&nbsp;&nbsp;</span>		<span class="comment">// run in contexts where they&#39;d write to system g&#39;s.</span>
<span id="L4263" class="ln">  4263&nbsp;&nbsp;</span>		throw(&#34;save on system g not allowed&#34;)
<span id="L4264" class="ln">  4264&nbsp;&nbsp;</span>	}
<span id="L4265" class="ln">  4265&nbsp;&nbsp;</span>
<span id="L4266" class="ln">  4266&nbsp;&nbsp;</span>	gp.sched.pc = pc
<span id="L4267" class="ln">  4267&nbsp;&nbsp;</span>	gp.sched.sp = sp
<span id="L4268" class="ln">  4268&nbsp;&nbsp;</span>	gp.sched.lr = 0
<span id="L4269" class="ln">  4269&nbsp;&nbsp;</span>	gp.sched.ret = 0
<span id="L4270" class="ln">  4270&nbsp;&nbsp;</span>	<span class="comment">// We need to ensure ctxt is zero, but can&#39;t have a write</span>
<span id="L4271" class="ln">  4271&nbsp;&nbsp;</span>	<span class="comment">// barrier here. However, it should always already be zero.</span>
<span id="L4272" class="ln">  4272&nbsp;&nbsp;</span>	<span class="comment">// Assert that.</span>
<span id="L4273" class="ln">  4273&nbsp;&nbsp;</span>	if gp.sched.ctxt != nil {
<span id="L4274" class="ln">  4274&nbsp;&nbsp;</span>		badctxt()
<span id="L4275" class="ln">  4275&nbsp;&nbsp;</span>	}
<span id="L4276" class="ln">  4276&nbsp;&nbsp;</span>}
<span id="L4277" class="ln">  4277&nbsp;&nbsp;</span>
<span id="L4278" class="ln">  4278&nbsp;&nbsp;</span><span class="comment">// The goroutine g is about to enter a system call.</span>
<span id="L4279" class="ln">  4279&nbsp;&nbsp;</span><span class="comment">// Record that it&#39;s not using the cpu anymore.</span>
<span id="L4280" class="ln">  4280&nbsp;&nbsp;</span><span class="comment">// This is called only from the go syscall library and cgocall,</span>
<span id="L4281" class="ln">  4281&nbsp;&nbsp;</span><span class="comment">// not from the low-level system calls used by the runtime.</span>
<span id="L4282" class="ln">  4282&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4283" class="ln">  4283&nbsp;&nbsp;</span><span class="comment">// Entersyscall cannot split the stack: the save must</span>
<span id="L4284" class="ln">  4284&nbsp;&nbsp;</span><span class="comment">// make g-&gt;sched refer to the caller&#39;s stack segment, because</span>
<span id="L4285" class="ln">  4285&nbsp;&nbsp;</span><span class="comment">// entersyscall is going to return immediately after.</span>
<span id="L4286" class="ln">  4286&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4287" class="ln">  4287&nbsp;&nbsp;</span><span class="comment">// Nothing entersyscall calls can split the stack either.</span>
<span id="L4288" class="ln">  4288&nbsp;&nbsp;</span><span class="comment">// We cannot safely move the stack during an active call to syscall,</span>
<span id="L4289" class="ln">  4289&nbsp;&nbsp;</span><span class="comment">// because we do not know which of the uintptr arguments are</span>
<span id="L4290" class="ln">  4290&nbsp;&nbsp;</span><span class="comment">// really pointers (back into the stack).</span>
<span id="L4291" class="ln">  4291&nbsp;&nbsp;</span><span class="comment">// In practice, this means that we make the fast path run through</span>
<span id="L4292" class="ln">  4292&nbsp;&nbsp;</span><span class="comment">// entersyscall doing no-split things, and the slow path has to use systemstack</span>
<span id="L4293" class="ln">  4293&nbsp;&nbsp;</span><span class="comment">// to run bigger things on the system stack.</span>
<span id="L4294" class="ln">  4294&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4295" class="ln">  4295&nbsp;&nbsp;</span><span class="comment">// reentersyscall is the entry point used by cgo callbacks, where explicitly</span>
<span id="L4296" class="ln">  4296&nbsp;&nbsp;</span><span class="comment">// saved SP and PC are restored. This is needed when exitsyscall will be called</span>
<span id="L4297" class="ln">  4297&nbsp;&nbsp;</span><span class="comment">// from a function further up in the call stack than the parent, as g-&gt;syscallsp</span>
<span id="L4298" class="ln">  4298&nbsp;&nbsp;</span><span class="comment">// must always point to a valid stack frame. entersyscall below is the normal</span>
<span id="L4299" class="ln">  4299&nbsp;&nbsp;</span><span class="comment">// entry point for syscalls, which obtains the SP and PC from the caller.</span>
<span id="L4300" class="ln">  4300&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4301" class="ln">  4301&nbsp;&nbsp;</span><span class="comment">// Syscall tracing (old tracer):</span>
<span id="L4302" class="ln">  4302&nbsp;&nbsp;</span><span class="comment">// At the start of a syscall we emit traceGoSysCall to capture the stack trace.</span>
<span id="L4303" class="ln">  4303&nbsp;&nbsp;</span><span class="comment">// If the syscall does not block, that is it, we do not emit any other events.</span>
<span id="L4304" class="ln">  4304&nbsp;&nbsp;</span><span class="comment">// If the syscall blocks (that is, P is retaken), retaker emits traceGoSysBlock;</span>
<span id="L4305" class="ln">  4305&nbsp;&nbsp;</span><span class="comment">// when syscall returns we emit traceGoSysExit and when the goroutine starts running</span>
<span id="L4306" class="ln">  4306&nbsp;&nbsp;</span><span class="comment">// (potentially instantly, if exitsyscallfast returns true) we emit traceGoStart.</span>
<span id="L4307" class="ln">  4307&nbsp;&nbsp;</span><span class="comment">// To ensure that traceGoSysExit is emitted strictly after traceGoSysBlock,</span>
<span id="L4308" class="ln">  4308&nbsp;&nbsp;</span><span class="comment">// we remember current value of syscalltick in m (gp.m.syscalltick = gp.m.p.ptr().syscalltick),</span>
<span id="L4309" class="ln">  4309&nbsp;&nbsp;</span><span class="comment">// whoever emits traceGoSysBlock increments p.syscalltick afterwards;</span>
<span id="L4310" class="ln">  4310&nbsp;&nbsp;</span><span class="comment">// and we wait for the increment before emitting traceGoSysExit.</span>
<span id="L4311" class="ln">  4311&nbsp;&nbsp;</span><span class="comment">// Note that the increment is done even if tracing is not enabled,</span>
<span id="L4312" class="ln">  4312&nbsp;&nbsp;</span><span class="comment">// because tracing can be enabled in the middle of syscall. We don&#39;t want the wait to hang.</span>
<span id="L4313" class="ln">  4313&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4314" class="ln">  4314&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L4315" class="ln">  4315&nbsp;&nbsp;</span>func reentersyscall(pc, sp uintptr) {
<span id="L4316" class="ln">  4316&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L4317" class="ln">  4317&nbsp;&nbsp;</span>	gp := getg()
<span id="L4318" class="ln">  4318&nbsp;&nbsp;</span>
<span id="L4319" class="ln">  4319&nbsp;&nbsp;</span>	<span class="comment">// Disable preemption because during this function g is in Gsyscall status,</span>
<span id="L4320" class="ln">  4320&nbsp;&nbsp;</span>	<span class="comment">// but can have inconsistent g-&gt;sched, do not let GC observe it.</span>
<span id="L4321" class="ln">  4321&nbsp;&nbsp;</span>	gp.m.locks++
<span id="L4322" class="ln">  4322&nbsp;&nbsp;</span>
<span id="L4323" class="ln">  4323&nbsp;&nbsp;</span>	<span class="comment">// Entersyscall must not call any function that might split/grow the stack.</span>
<span id="L4324" class="ln">  4324&nbsp;&nbsp;</span>	<span class="comment">// (See details in comment above.)</span>
<span id="L4325" class="ln">  4325&nbsp;&nbsp;</span>	<span class="comment">// Catch calls that might, by replacing the stack guard with something that</span>
<span id="L4326" class="ln">  4326&nbsp;&nbsp;</span>	<span class="comment">// will trip any stack check and leaving a flag to tell newstack to die.</span>
<span id="L4327" class="ln">  4327&nbsp;&nbsp;</span>	gp.stackguard0 = stackPreempt
<span id="L4328" class="ln">  4328&nbsp;&nbsp;</span>	gp.throwsplit = true
<span id="L4329" class="ln">  4329&nbsp;&nbsp;</span>
<span id="L4330" class="ln">  4330&nbsp;&nbsp;</span>	<span class="comment">// Leave SP around for GC and traceback.</span>
<span id="L4331" class="ln">  4331&nbsp;&nbsp;</span>	save(pc, sp)
<span id="L4332" class="ln">  4332&nbsp;&nbsp;</span>	gp.syscallsp = sp
<span id="L4333" class="ln">  4333&nbsp;&nbsp;</span>	gp.syscallpc = pc
<span id="L4334" class="ln">  4334&nbsp;&nbsp;</span>	casgstatus(gp, _Grunning, _Gsyscall)
<span id="L4335" class="ln">  4335&nbsp;&nbsp;</span>	if staticLockRanking {
<span id="L4336" class="ln">  4336&nbsp;&nbsp;</span>		<span class="comment">// When doing static lock ranking casgstatus can call</span>
<span id="L4337" class="ln">  4337&nbsp;&nbsp;</span>		<span class="comment">// systemstack which clobbers g.sched.</span>
<span id="L4338" class="ln">  4338&nbsp;&nbsp;</span>		save(pc, sp)
<span id="L4339" class="ln">  4339&nbsp;&nbsp;</span>	}
<span id="L4340" class="ln">  4340&nbsp;&nbsp;</span>	if gp.syscallsp &lt; gp.stack.lo || gp.stack.hi &lt; gp.syscallsp {
<span id="L4341" class="ln">  4341&nbsp;&nbsp;</span>		systemstack(func() {
<span id="L4342" class="ln">  4342&nbsp;&nbsp;</span>			print(&#34;entersyscall inconsistent &#34;, hex(gp.syscallsp), &#34; [&#34;, hex(gp.stack.lo), &#34;,&#34;, hex(gp.stack.hi), &#34;]\n&#34;)
<span id="L4343" class="ln">  4343&nbsp;&nbsp;</span>			throw(&#34;entersyscall&#34;)
<span id="L4344" class="ln">  4344&nbsp;&nbsp;</span>		})
<span id="L4345" class="ln">  4345&nbsp;&nbsp;</span>	}
<span id="L4346" class="ln">  4346&nbsp;&nbsp;</span>
<span id="L4347" class="ln">  4347&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L4348" class="ln">  4348&nbsp;&nbsp;</span>		systemstack(func() {
<span id="L4349" class="ln">  4349&nbsp;&nbsp;</span>			trace.GoSysCall()
<span id="L4350" class="ln">  4350&nbsp;&nbsp;</span>			traceRelease(trace)
<span id="L4351" class="ln">  4351&nbsp;&nbsp;</span>		})
<span id="L4352" class="ln">  4352&nbsp;&nbsp;</span>		<span class="comment">// systemstack itself clobbers g.sched.{pc,sp} and we might</span>
<span id="L4353" class="ln">  4353&nbsp;&nbsp;</span>		<span class="comment">// need them later when the G is genuinely blocked in a</span>
<span id="L4354" class="ln">  4354&nbsp;&nbsp;</span>		<span class="comment">// syscall</span>
<span id="L4355" class="ln">  4355&nbsp;&nbsp;</span>		save(pc, sp)
<span id="L4356" class="ln">  4356&nbsp;&nbsp;</span>	}
<span id="L4357" class="ln">  4357&nbsp;&nbsp;</span>
<span id="L4358" class="ln">  4358&nbsp;&nbsp;</span>	if sched.sysmonwait.Load() {
<span id="L4359" class="ln">  4359&nbsp;&nbsp;</span>		systemstack(entersyscall_sysmon)
<span id="L4360" class="ln">  4360&nbsp;&nbsp;</span>		save(pc, sp)
<span id="L4361" class="ln">  4361&nbsp;&nbsp;</span>	}
<span id="L4362" class="ln">  4362&nbsp;&nbsp;</span>
<span id="L4363" class="ln">  4363&nbsp;&nbsp;</span>	if gp.m.p.ptr().runSafePointFn != 0 {
<span id="L4364" class="ln">  4364&nbsp;&nbsp;</span>		<span class="comment">// runSafePointFn may stack split if run on this stack</span>
<span id="L4365" class="ln">  4365&nbsp;&nbsp;</span>		systemstack(runSafePointFn)
<span id="L4366" class="ln">  4366&nbsp;&nbsp;</span>		save(pc, sp)
<span id="L4367" class="ln">  4367&nbsp;&nbsp;</span>	}
<span id="L4368" class="ln">  4368&nbsp;&nbsp;</span>
<span id="L4369" class="ln">  4369&nbsp;&nbsp;</span>	gp.m.syscalltick = gp.m.p.ptr().syscalltick
<span id="L4370" class="ln">  4370&nbsp;&nbsp;</span>	pp := gp.m.p.ptr()
<span id="L4371" class="ln">  4371&nbsp;&nbsp;</span>	pp.m = 0
<span id="L4372" class="ln">  4372&nbsp;&nbsp;</span>	gp.m.oldp.set(pp)
<span id="L4373" class="ln">  4373&nbsp;&nbsp;</span>	gp.m.p = 0
<span id="L4374" class="ln">  4374&nbsp;&nbsp;</span>	atomic.Store(&amp;pp.status, _Psyscall)
<span id="L4375" class="ln">  4375&nbsp;&nbsp;</span>	if sched.gcwaiting.Load() {
<span id="L4376" class="ln">  4376&nbsp;&nbsp;</span>		systemstack(entersyscall_gcwait)
<span id="L4377" class="ln">  4377&nbsp;&nbsp;</span>		save(pc, sp)
<span id="L4378" class="ln">  4378&nbsp;&nbsp;</span>	}
<span id="L4379" class="ln">  4379&nbsp;&nbsp;</span>
<span id="L4380" class="ln">  4380&nbsp;&nbsp;</span>	gp.m.locks--
<span id="L4381" class="ln">  4381&nbsp;&nbsp;</span>}
<span id="L4382" class="ln">  4382&nbsp;&nbsp;</span>
<span id="L4383" class="ln">  4383&nbsp;&nbsp;</span><span class="comment">// Standard syscall entry used by the go syscall library and normal cgo calls.</span>
<span id="L4384" class="ln">  4384&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4385" class="ln">  4385&nbsp;&nbsp;</span><span class="comment">// This is exported via linkname to assembly in the syscall package and x/sys.</span>
<span id="L4386" class="ln">  4386&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4387" class="ln">  4387&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L4388" class="ln">  4388&nbsp;&nbsp;</span><span class="comment">//go:linkname entersyscall</span>
<span id="L4389" class="ln">  4389&nbsp;&nbsp;</span>func entersyscall() {
<span id="L4390" class="ln">  4390&nbsp;&nbsp;</span>	reentersyscall(getcallerpc(), getcallersp())
<span id="L4391" class="ln">  4391&nbsp;&nbsp;</span>}
<span id="L4392" class="ln">  4392&nbsp;&nbsp;</span>
<span id="L4393" class="ln">  4393&nbsp;&nbsp;</span>func entersyscall_sysmon() {
<span id="L4394" class="ln">  4394&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L4395" class="ln">  4395&nbsp;&nbsp;</span>	if sched.sysmonwait.Load() {
<span id="L4396" class="ln">  4396&nbsp;&nbsp;</span>		sched.sysmonwait.Store(false)
<span id="L4397" class="ln">  4397&nbsp;&nbsp;</span>		notewakeup(&amp;sched.sysmonnote)
<span id="L4398" class="ln">  4398&nbsp;&nbsp;</span>	}
<span id="L4399" class="ln">  4399&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L4400" class="ln">  4400&nbsp;&nbsp;</span>}
<span id="L4401" class="ln">  4401&nbsp;&nbsp;</span>
<span id="L4402" class="ln">  4402&nbsp;&nbsp;</span>func entersyscall_gcwait() {
<span id="L4403" class="ln">  4403&nbsp;&nbsp;</span>	gp := getg()
<span id="L4404" class="ln">  4404&nbsp;&nbsp;</span>	pp := gp.m.oldp.ptr()
<span id="L4405" class="ln">  4405&nbsp;&nbsp;</span>
<span id="L4406" class="ln">  4406&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L4407" class="ln">  4407&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L4408" class="ln">  4408&nbsp;&nbsp;</span>	if sched.stopwait &gt; 0 &amp;&amp; atomic.Cas(&amp;pp.status, _Psyscall, _Pgcstop) {
<span id="L4409" class="ln">  4409&nbsp;&nbsp;</span>		if trace.ok() {
<span id="L4410" class="ln">  4410&nbsp;&nbsp;</span>			if goexperiment.ExecTracer2 {
<span id="L4411" class="ln">  4411&nbsp;&nbsp;</span>				<span class="comment">// This is a steal in the new tracer. While it&#39;s very likely</span>
<span id="L4412" class="ln">  4412&nbsp;&nbsp;</span>				<span class="comment">// that we were the ones to put this P into _Psyscall, between</span>
<span id="L4413" class="ln">  4413&nbsp;&nbsp;</span>				<span class="comment">// then and now it&#39;s totally possible it had been stolen and</span>
<span id="L4414" class="ln">  4414&nbsp;&nbsp;</span>				<span class="comment">// then put back into _Psyscall for us to acquire here. In such</span>
<span id="L4415" class="ln">  4415&nbsp;&nbsp;</span>				<span class="comment">// case ProcStop would be incorrect.</span>
<span id="L4416" class="ln">  4416&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L4417" class="ln">  4417&nbsp;&nbsp;</span>				<span class="comment">// TODO(mknyszek): Consider emitting a ProcStop instead when</span>
<span id="L4418" class="ln">  4418&nbsp;&nbsp;</span>				<span class="comment">// gp.m.syscalltick == pp.syscalltick, since then we know we never</span>
<span id="L4419" class="ln">  4419&nbsp;&nbsp;</span>				<span class="comment">// lost the P.</span>
<span id="L4420" class="ln">  4420&nbsp;&nbsp;</span>				trace.ProcSteal(pp, true)
<span id="L4421" class="ln">  4421&nbsp;&nbsp;</span>			} else {
<span id="L4422" class="ln">  4422&nbsp;&nbsp;</span>				trace.GoSysBlock(pp)
<span id="L4423" class="ln">  4423&nbsp;&nbsp;</span>				trace.ProcStop(pp)
<span id="L4424" class="ln">  4424&nbsp;&nbsp;</span>			}
<span id="L4425" class="ln">  4425&nbsp;&nbsp;</span>			traceRelease(trace)
<span id="L4426" class="ln">  4426&nbsp;&nbsp;</span>		}
<span id="L4427" class="ln">  4427&nbsp;&nbsp;</span>		pp.syscalltick++
<span id="L4428" class="ln">  4428&nbsp;&nbsp;</span>		if sched.stopwait--; sched.stopwait == 0 {
<span id="L4429" class="ln">  4429&nbsp;&nbsp;</span>			notewakeup(&amp;sched.stopnote)
<span id="L4430" class="ln">  4430&nbsp;&nbsp;</span>		}
<span id="L4431" class="ln">  4431&nbsp;&nbsp;</span>	} else if trace.ok() {
<span id="L4432" class="ln">  4432&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L4433" class="ln">  4433&nbsp;&nbsp;</span>	}
<span id="L4434" class="ln">  4434&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L4435" class="ln">  4435&nbsp;&nbsp;</span>}
<span id="L4436" class="ln">  4436&nbsp;&nbsp;</span>
<span id="L4437" class="ln">  4437&nbsp;&nbsp;</span><span class="comment">// The same as entersyscall(), but with a hint that the syscall is blocking.</span>
<span id="L4438" class="ln">  4438&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4439" class="ln">  4439&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L4440" class="ln">  4440&nbsp;&nbsp;</span>func entersyscallblock() {
<span id="L4441" class="ln">  4441&nbsp;&nbsp;</span>	gp := getg()
<span id="L4442" class="ln">  4442&nbsp;&nbsp;</span>
<span id="L4443" class="ln">  4443&nbsp;&nbsp;</span>	gp.m.locks++ <span class="comment">// see comment in entersyscall</span>
<span id="L4444" class="ln">  4444&nbsp;&nbsp;</span>	gp.throwsplit = true
<span id="L4445" class="ln">  4445&nbsp;&nbsp;</span>	gp.stackguard0 = stackPreempt <span class="comment">// see comment in entersyscall</span>
<span id="L4446" class="ln">  4446&nbsp;&nbsp;</span>	gp.m.syscalltick = gp.m.p.ptr().syscalltick
<span id="L4447" class="ln">  4447&nbsp;&nbsp;</span>	gp.m.p.ptr().syscalltick++
<span id="L4448" class="ln">  4448&nbsp;&nbsp;</span>
<span id="L4449" class="ln">  4449&nbsp;&nbsp;</span>	<span class="comment">// Leave SP around for GC and traceback.</span>
<span id="L4450" class="ln">  4450&nbsp;&nbsp;</span>	pc := getcallerpc()
<span id="L4451" class="ln">  4451&nbsp;&nbsp;</span>	sp := getcallersp()
<span id="L4452" class="ln">  4452&nbsp;&nbsp;</span>	save(pc, sp)
<span id="L4453" class="ln">  4453&nbsp;&nbsp;</span>	gp.syscallsp = gp.sched.sp
<span id="L4454" class="ln">  4454&nbsp;&nbsp;</span>	gp.syscallpc = gp.sched.pc
<span id="L4455" class="ln">  4455&nbsp;&nbsp;</span>	if gp.syscallsp &lt; gp.stack.lo || gp.stack.hi &lt; gp.syscallsp {
<span id="L4456" class="ln">  4456&nbsp;&nbsp;</span>		sp1 := sp
<span id="L4457" class="ln">  4457&nbsp;&nbsp;</span>		sp2 := gp.sched.sp
<span id="L4458" class="ln">  4458&nbsp;&nbsp;</span>		sp3 := gp.syscallsp
<span id="L4459" class="ln">  4459&nbsp;&nbsp;</span>		systemstack(func() {
<span id="L4460" class="ln">  4460&nbsp;&nbsp;</span>			print(&#34;entersyscallblock inconsistent &#34;, hex(sp1), &#34; &#34;, hex(sp2), &#34; &#34;, hex(sp3), &#34; [&#34;, hex(gp.stack.lo), &#34;,&#34;, hex(gp.stack.hi), &#34;]\n&#34;)
<span id="L4461" class="ln">  4461&nbsp;&nbsp;</span>			throw(&#34;entersyscallblock&#34;)
<span id="L4462" class="ln">  4462&nbsp;&nbsp;</span>		})
<span id="L4463" class="ln">  4463&nbsp;&nbsp;</span>	}
<span id="L4464" class="ln">  4464&nbsp;&nbsp;</span>	casgstatus(gp, _Grunning, _Gsyscall)
<span id="L4465" class="ln">  4465&nbsp;&nbsp;</span>	if gp.syscallsp &lt; gp.stack.lo || gp.stack.hi &lt; gp.syscallsp {
<span id="L4466" class="ln">  4466&nbsp;&nbsp;</span>		systemstack(func() {
<span id="L4467" class="ln">  4467&nbsp;&nbsp;</span>			print(&#34;entersyscallblock inconsistent &#34;, hex(sp), &#34; &#34;, hex(gp.sched.sp), &#34; &#34;, hex(gp.syscallsp), &#34; [&#34;, hex(gp.stack.lo), &#34;,&#34;, hex(gp.stack.hi), &#34;]\n&#34;)
<span id="L4468" class="ln">  4468&nbsp;&nbsp;</span>			throw(&#34;entersyscallblock&#34;)
<span id="L4469" class="ln">  4469&nbsp;&nbsp;</span>		})
<span id="L4470" class="ln">  4470&nbsp;&nbsp;</span>	}
<span id="L4471" class="ln">  4471&nbsp;&nbsp;</span>
<span id="L4472" class="ln">  4472&nbsp;&nbsp;</span>	systemstack(entersyscallblock_handoff)
<span id="L4473" class="ln">  4473&nbsp;&nbsp;</span>
<span id="L4474" class="ln">  4474&nbsp;&nbsp;</span>	<span class="comment">// Resave for traceback during blocked call.</span>
<span id="L4475" class="ln">  4475&nbsp;&nbsp;</span>	save(getcallerpc(), getcallersp())
<span id="L4476" class="ln">  4476&nbsp;&nbsp;</span>
<span id="L4477" class="ln">  4477&nbsp;&nbsp;</span>	gp.m.locks--
<span id="L4478" class="ln">  4478&nbsp;&nbsp;</span>}
<span id="L4479" class="ln">  4479&nbsp;&nbsp;</span>
<span id="L4480" class="ln">  4480&nbsp;&nbsp;</span>func entersyscallblock_handoff() {
<span id="L4481" class="ln">  4481&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L4482" class="ln">  4482&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L4483" class="ln">  4483&nbsp;&nbsp;</span>		trace.GoSysCall()
<span id="L4484" class="ln">  4484&nbsp;&nbsp;</span>		trace.GoSysBlock(getg().m.p.ptr())
<span id="L4485" class="ln">  4485&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L4486" class="ln">  4486&nbsp;&nbsp;</span>	}
<span id="L4487" class="ln">  4487&nbsp;&nbsp;</span>	handoffp(releasep())
<span id="L4488" class="ln">  4488&nbsp;&nbsp;</span>}
<span id="L4489" class="ln">  4489&nbsp;&nbsp;</span>
<span id="L4490" class="ln">  4490&nbsp;&nbsp;</span><span class="comment">// The goroutine g exited its system call.</span>
<span id="L4491" class="ln">  4491&nbsp;&nbsp;</span><span class="comment">// Arrange for it to run on a cpu again.</span>
<span id="L4492" class="ln">  4492&nbsp;&nbsp;</span><span class="comment">// This is called only from the go syscall library, not</span>
<span id="L4493" class="ln">  4493&nbsp;&nbsp;</span><span class="comment">// from the low-level system calls used by the runtime.</span>
<span id="L4494" class="ln">  4494&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4495" class="ln">  4495&nbsp;&nbsp;</span><span class="comment">// Write barriers are not allowed because our P may have been stolen.</span>
<span id="L4496" class="ln">  4496&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4497" class="ln">  4497&nbsp;&nbsp;</span><span class="comment">// This is exported via linkname to assembly in the syscall package.</span>
<span id="L4498" class="ln">  4498&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4499" class="ln">  4499&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L4500" class="ln">  4500&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L4501" class="ln">  4501&nbsp;&nbsp;</span><span class="comment">//go:linkname exitsyscall</span>
<span id="L4502" class="ln">  4502&nbsp;&nbsp;</span>func exitsyscall() {
<span id="L4503" class="ln">  4503&nbsp;&nbsp;</span>	gp := getg()
<span id="L4504" class="ln">  4504&nbsp;&nbsp;</span>
<span id="L4505" class="ln">  4505&nbsp;&nbsp;</span>	gp.m.locks++ <span class="comment">// see comment in entersyscall</span>
<span id="L4506" class="ln">  4506&nbsp;&nbsp;</span>	if getcallersp() &gt; gp.syscallsp {
<span id="L4507" class="ln">  4507&nbsp;&nbsp;</span>		throw(&#34;exitsyscall: syscall frame is no longer valid&#34;)
<span id="L4508" class="ln">  4508&nbsp;&nbsp;</span>	}
<span id="L4509" class="ln">  4509&nbsp;&nbsp;</span>
<span id="L4510" class="ln">  4510&nbsp;&nbsp;</span>	gp.waitsince = 0
<span id="L4511" class="ln">  4511&nbsp;&nbsp;</span>	oldp := gp.m.oldp.ptr()
<span id="L4512" class="ln">  4512&nbsp;&nbsp;</span>	gp.m.oldp = 0
<span id="L4513" class="ln">  4513&nbsp;&nbsp;</span>	if exitsyscallfast(oldp) {
<span id="L4514" class="ln">  4514&nbsp;&nbsp;</span>		<span class="comment">// When exitsyscallfast returns success, we have a P so can now use</span>
<span id="L4515" class="ln">  4515&nbsp;&nbsp;</span>		<span class="comment">// write barriers</span>
<span id="L4516" class="ln">  4516&nbsp;&nbsp;</span>		if goroutineProfile.active {
<span id="L4517" class="ln">  4517&nbsp;&nbsp;</span>			<span class="comment">// Make sure that gp has had its stack written out to the goroutine</span>
<span id="L4518" class="ln">  4518&nbsp;&nbsp;</span>			<span class="comment">// profile, exactly as it was when the goroutine profiler first</span>
<span id="L4519" class="ln">  4519&nbsp;&nbsp;</span>			<span class="comment">// stopped the world.</span>
<span id="L4520" class="ln">  4520&nbsp;&nbsp;</span>			systemstack(func() {
<span id="L4521" class="ln">  4521&nbsp;&nbsp;</span>				tryRecordGoroutineProfileWB(gp)
<span id="L4522" class="ln">  4522&nbsp;&nbsp;</span>			})
<span id="L4523" class="ln">  4523&nbsp;&nbsp;</span>		}
<span id="L4524" class="ln">  4524&nbsp;&nbsp;</span>		trace := traceAcquire()
<span id="L4525" class="ln">  4525&nbsp;&nbsp;</span>		if trace.ok() {
<span id="L4526" class="ln">  4526&nbsp;&nbsp;</span>			lostP := oldp != gp.m.p.ptr() || gp.m.syscalltick != gp.m.p.ptr().syscalltick
<span id="L4527" class="ln">  4527&nbsp;&nbsp;</span>			systemstack(func() {
<span id="L4528" class="ln">  4528&nbsp;&nbsp;</span>				if goexperiment.ExecTracer2 {
<span id="L4529" class="ln">  4529&nbsp;&nbsp;</span>					<span class="comment">// Write out syscall exit eagerly in the experiment.</span>
<span id="L4530" class="ln">  4530&nbsp;&nbsp;</span>					<span class="comment">//</span>
<span id="L4531" class="ln">  4531&nbsp;&nbsp;</span>					<span class="comment">// It&#39;s important that we write this *after* we know whether we</span>
<span id="L4532" class="ln">  4532&nbsp;&nbsp;</span>					<span class="comment">// lost our P or not (determined by exitsyscallfast).</span>
<span id="L4533" class="ln">  4533&nbsp;&nbsp;</span>					trace.GoSysExit(lostP)
<span id="L4534" class="ln">  4534&nbsp;&nbsp;</span>				}
<span id="L4535" class="ln">  4535&nbsp;&nbsp;</span>				if lostP {
<span id="L4536" class="ln">  4536&nbsp;&nbsp;</span>					<span class="comment">// We lost the P at some point, even though we got it back here.</span>
<span id="L4537" class="ln">  4537&nbsp;&nbsp;</span>					<span class="comment">// Trace that we&#39;re starting again, because there was a traceGoSysBlock</span>
<span id="L4538" class="ln">  4538&nbsp;&nbsp;</span>					<span class="comment">// call somewhere in exitsyscallfast (indicating that this goroutine</span>
<span id="L4539" class="ln">  4539&nbsp;&nbsp;</span>					<span class="comment">// had blocked) and we&#39;re about to start running again.</span>
<span id="L4540" class="ln">  4540&nbsp;&nbsp;</span>					trace.GoStart()
<span id="L4541" class="ln">  4541&nbsp;&nbsp;</span>				}
<span id="L4542" class="ln">  4542&nbsp;&nbsp;</span>			})
<span id="L4543" class="ln">  4543&nbsp;&nbsp;</span>		}
<span id="L4544" class="ln">  4544&nbsp;&nbsp;</span>		<span class="comment">// There&#39;s a cpu for us, so we can run.</span>
<span id="L4545" class="ln">  4545&nbsp;&nbsp;</span>		gp.m.p.ptr().syscalltick++
<span id="L4546" class="ln">  4546&nbsp;&nbsp;</span>		<span class="comment">// We need to cas the status and scan before resuming...</span>
<span id="L4547" class="ln">  4547&nbsp;&nbsp;</span>		casgstatus(gp, _Gsyscall, _Grunning)
<span id="L4548" class="ln">  4548&nbsp;&nbsp;</span>		if trace.ok() {
<span id="L4549" class="ln">  4549&nbsp;&nbsp;</span>			traceRelease(trace)
<span id="L4550" class="ln">  4550&nbsp;&nbsp;</span>		}
<span id="L4551" class="ln">  4551&nbsp;&nbsp;</span>
<span id="L4552" class="ln">  4552&nbsp;&nbsp;</span>		<span class="comment">// Garbage collector isn&#39;t running (since we are),</span>
<span id="L4553" class="ln">  4553&nbsp;&nbsp;</span>		<span class="comment">// so okay to clear syscallsp.</span>
<span id="L4554" class="ln">  4554&nbsp;&nbsp;</span>		gp.syscallsp = 0
<span id="L4555" class="ln">  4555&nbsp;&nbsp;</span>		gp.m.locks--
<span id="L4556" class="ln">  4556&nbsp;&nbsp;</span>		if gp.preempt {
<span id="L4557" class="ln">  4557&nbsp;&nbsp;</span>			<span class="comment">// restore the preemption request in case we&#39;ve cleared it in newstack</span>
<span id="L4558" class="ln">  4558&nbsp;&nbsp;</span>			gp.stackguard0 = stackPreempt
<span id="L4559" class="ln">  4559&nbsp;&nbsp;</span>		} else {
<span id="L4560" class="ln">  4560&nbsp;&nbsp;</span>			<span class="comment">// otherwise restore the real stackGuard, we&#39;ve spoiled it in entersyscall/entersyscallblock</span>
<span id="L4561" class="ln">  4561&nbsp;&nbsp;</span>			gp.stackguard0 = gp.stack.lo + stackGuard
<span id="L4562" class="ln">  4562&nbsp;&nbsp;</span>		}
<span id="L4563" class="ln">  4563&nbsp;&nbsp;</span>		gp.throwsplit = false
<span id="L4564" class="ln">  4564&nbsp;&nbsp;</span>
<span id="L4565" class="ln">  4565&nbsp;&nbsp;</span>		if sched.disable.user &amp;&amp; !schedEnabled(gp) {
<span id="L4566" class="ln">  4566&nbsp;&nbsp;</span>			<span class="comment">// Scheduling of this goroutine is disabled.</span>
<span id="L4567" class="ln">  4567&nbsp;&nbsp;</span>			Gosched()
<span id="L4568" class="ln">  4568&nbsp;&nbsp;</span>		}
<span id="L4569" class="ln">  4569&nbsp;&nbsp;</span>
<span id="L4570" class="ln">  4570&nbsp;&nbsp;</span>		return
<span id="L4571" class="ln">  4571&nbsp;&nbsp;</span>	}
<span id="L4572" class="ln">  4572&nbsp;&nbsp;</span>
<span id="L4573" class="ln">  4573&nbsp;&nbsp;</span>	if !goexperiment.ExecTracer2 {
<span id="L4574" class="ln">  4574&nbsp;&nbsp;</span>		<span class="comment">// In the old tracer, because we don&#39;t have a P we can&#39;t</span>
<span id="L4575" class="ln">  4575&nbsp;&nbsp;</span>		<span class="comment">// actually record the true time we exited the syscall.</span>
<span id="L4576" class="ln">  4576&nbsp;&nbsp;</span>		<span class="comment">// Record it.</span>
<span id="L4577" class="ln">  4577&nbsp;&nbsp;</span>		trace := traceAcquire()
<span id="L4578" class="ln">  4578&nbsp;&nbsp;</span>		if trace.ok() {
<span id="L4579" class="ln">  4579&nbsp;&nbsp;</span>			trace.RecordSyscallExitedTime(gp, oldp)
<span id="L4580" class="ln">  4580&nbsp;&nbsp;</span>			traceRelease(trace)
<span id="L4581" class="ln">  4581&nbsp;&nbsp;</span>		}
<span id="L4582" class="ln">  4582&nbsp;&nbsp;</span>	}
<span id="L4583" class="ln">  4583&nbsp;&nbsp;</span>
<span id="L4584" class="ln">  4584&nbsp;&nbsp;</span>	gp.m.locks--
<span id="L4585" class="ln">  4585&nbsp;&nbsp;</span>
<span id="L4586" class="ln">  4586&nbsp;&nbsp;</span>	<span class="comment">// Call the scheduler.</span>
<span id="L4587" class="ln">  4587&nbsp;&nbsp;</span>	mcall(exitsyscall0)
<span id="L4588" class="ln">  4588&nbsp;&nbsp;</span>
<span id="L4589" class="ln">  4589&nbsp;&nbsp;</span>	<span class="comment">// Scheduler returned, so we&#39;re allowed to run now.</span>
<span id="L4590" class="ln">  4590&nbsp;&nbsp;</span>	<span class="comment">// Delete the syscallsp information that we left for</span>
<span id="L4591" class="ln">  4591&nbsp;&nbsp;</span>	<span class="comment">// the garbage collector during the system call.</span>
<span id="L4592" class="ln">  4592&nbsp;&nbsp;</span>	<span class="comment">// Must wait until now because until gosched returns</span>
<span id="L4593" class="ln">  4593&nbsp;&nbsp;</span>	<span class="comment">// we don&#39;t know for sure that the garbage collector</span>
<span id="L4594" class="ln">  4594&nbsp;&nbsp;</span>	<span class="comment">// is not running.</span>
<span id="L4595" class="ln">  4595&nbsp;&nbsp;</span>	gp.syscallsp = 0
<span id="L4596" class="ln">  4596&nbsp;&nbsp;</span>	gp.m.p.ptr().syscalltick++
<span id="L4597" class="ln">  4597&nbsp;&nbsp;</span>	gp.throwsplit = false
<span id="L4598" class="ln">  4598&nbsp;&nbsp;</span>}
<span id="L4599" class="ln">  4599&nbsp;&nbsp;</span>
<span id="L4600" class="ln">  4600&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L4601" class="ln">  4601&nbsp;&nbsp;</span>func exitsyscallfast(oldp *p) bool {
<span id="L4602" class="ln">  4602&nbsp;&nbsp;</span>	gp := getg()
<span id="L4603" class="ln">  4603&nbsp;&nbsp;</span>
<span id="L4604" class="ln">  4604&nbsp;&nbsp;</span>	<span class="comment">// Freezetheworld sets stopwait but does not retake P&#39;s.</span>
<span id="L4605" class="ln">  4605&nbsp;&nbsp;</span>	if sched.stopwait == freezeStopWait {
<span id="L4606" class="ln">  4606&nbsp;&nbsp;</span>		return false
<span id="L4607" class="ln">  4607&nbsp;&nbsp;</span>	}
<span id="L4608" class="ln">  4608&nbsp;&nbsp;</span>
<span id="L4609" class="ln">  4609&nbsp;&nbsp;</span>	<span class="comment">// Try to re-acquire the last P.</span>
<span id="L4610" class="ln">  4610&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L4611" class="ln">  4611&nbsp;&nbsp;</span>	if oldp != nil &amp;&amp; oldp.status == _Psyscall &amp;&amp; atomic.Cas(&amp;oldp.status, _Psyscall, _Pidle) {
<span id="L4612" class="ln">  4612&nbsp;&nbsp;</span>		<span class="comment">// There&#39;s a cpu for us, so we can run.</span>
<span id="L4613" class="ln">  4613&nbsp;&nbsp;</span>		wirep(oldp)
<span id="L4614" class="ln">  4614&nbsp;&nbsp;</span>		exitsyscallfast_reacquired(trace)
<span id="L4615" class="ln">  4615&nbsp;&nbsp;</span>		if trace.ok() {
<span id="L4616" class="ln">  4616&nbsp;&nbsp;</span>			traceRelease(trace)
<span id="L4617" class="ln">  4617&nbsp;&nbsp;</span>		}
<span id="L4618" class="ln">  4618&nbsp;&nbsp;</span>		return true
<span id="L4619" class="ln">  4619&nbsp;&nbsp;</span>	}
<span id="L4620" class="ln">  4620&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L4621" class="ln">  4621&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L4622" class="ln">  4622&nbsp;&nbsp;</span>	}
<span id="L4623" class="ln">  4623&nbsp;&nbsp;</span>
<span id="L4624" class="ln">  4624&nbsp;&nbsp;</span>	<span class="comment">// Try to get any other idle P.</span>
<span id="L4625" class="ln">  4625&nbsp;&nbsp;</span>	if sched.pidle != 0 {
<span id="L4626" class="ln">  4626&nbsp;&nbsp;</span>		var ok bool
<span id="L4627" class="ln">  4627&nbsp;&nbsp;</span>		systemstack(func() {
<span id="L4628" class="ln">  4628&nbsp;&nbsp;</span>			ok = exitsyscallfast_pidle()
<span id="L4629" class="ln">  4629&nbsp;&nbsp;</span>			if ok &amp;&amp; !goexperiment.ExecTracer2 {
<span id="L4630" class="ln">  4630&nbsp;&nbsp;</span>				trace := traceAcquire()
<span id="L4631" class="ln">  4631&nbsp;&nbsp;</span>				if trace.ok() {
<span id="L4632" class="ln">  4632&nbsp;&nbsp;</span>					if oldp != nil {
<span id="L4633" class="ln">  4633&nbsp;&nbsp;</span>						<span class="comment">// Wait till traceGoSysBlock event is emitted.</span>
<span id="L4634" class="ln">  4634&nbsp;&nbsp;</span>						<span class="comment">// This ensures consistency of the trace (the goroutine is started after it is blocked).</span>
<span id="L4635" class="ln">  4635&nbsp;&nbsp;</span>						for oldp.syscalltick == gp.m.syscalltick {
<span id="L4636" class="ln">  4636&nbsp;&nbsp;</span>							osyield()
<span id="L4637" class="ln">  4637&nbsp;&nbsp;</span>						}
<span id="L4638" class="ln">  4638&nbsp;&nbsp;</span>					}
<span id="L4639" class="ln">  4639&nbsp;&nbsp;</span>					<span class="comment">// In the experiment, we write this in exitsyscall.</span>
<span id="L4640" class="ln">  4640&nbsp;&nbsp;</span>					<span class="comment">// Don&#39;t write it here unless the experiment is off.</span>
<span id="L4641" class="ln">  4641&nbsp;&nbsp;</span>					trace.GoSysExit(true)
<span id="L4642" class="ln">  4642&nbsp;&nbsp;</span>					traceRelease(trace)
<span id="L4643" class="ln">  4643&nbsp;&nbsp;</span>				}
<span id="L4644" class="ln">  4644&nbsp;&nbsp;</span>			}
<span id="L4645" class="ln">  4645&nbsp;&nbsp;</span>		})
<span id="L4646" class="ln">  4646&nbsp;&nbsp;</span>		if ok {
<span id="L4647" class="ln">  4647&nbsp;&nbsp;</span>			return true
<span id="L4648" class="ln">  4648&nbsp;&nbsp;</span>		}
<span id="L4649" class="ln">  4649&nbsp;&nbsp;</span>	}
<span id="L4650" class="ln">  4650&nbsp;&nbsp;</span>	return false
<span id="L4651" class="ln">  4651&nbsp;&nbsp;</span>}
<span id="L4652" class="ln">  4652&nbsp;&nbsp;</span>
<span id="L4653" class="ln">  4653&nbsp;&nbsp;</span><span class="comment">// exitsyscallfast_reacquired is the exitsyscall path on which this G</span>
<span id="L4654" class="ln">  4654&nbsp;&nbsp;</span><span class="comment">// has successfully reacquired the P it was running on before the</span>
<span id="L4655" class="ln">  4655&nbsp;&nbsp;</span><span class="comment">// syscall.</span>
<span id="L4656" class="ln">  4656&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4657" class="ln">  4657&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L4658" class="ln">  4658&nbsp;&nbsp;</span>func exitsyscallfast_reacquired(trace traceLocker) {
<span id="L4659" class="ln">  4659&nbsp;&nbsp;</span>	gp := getg()
<span id="L4660" class="ln">  4660&nbsp;&nbsp;</span>	if gp.m.syscalltick != gp.m.p.ptr().syscalltick {
<span id="L4661" class="ln">  4661&nbsp;&nbsp;</span>		if trace.ok() {
<span id="L4662" class="ln">  4662&nbsp;&nbsp;</span>			<span class="comment">// The p was retaken and then enter into syscall again (since gp.m.syscalltick has changed).</span>
<span id="L4663" class="ln">  4663&nbsp;&nbsp;</span>			<span class="comment">// traceGoSysBlock for this syscall was already emitted,</span>
<span id="L4664" class="ln">  4664&nbsp;&nbsp;</span>			<span class="comment">// but here we effectively retake the p from the new syscall running on the same p.</span>
<span id="L4665" class="ln">  4665&nbsp;&nbsp;</span>			systemstack(func() {
<span id="L4666" class="ln">  4666&nbsp;&nbsp;</span>				if goexperiment.ExecTracer2 {
<span id="L4667" class="ln">  4667&nbsp;&nbsp;</span>					<span class="comment">// In the experiment, we&#39;re stealing the P. It&#39;s treated</span>
<span id="L4668" class="ln">  4668&nbsp;&nbsp;</span>					<span class="comment">// as if it temporarily stopped running. Then, start running.</span>
<span id="L4669" class="ln">  4669&nbsp;&nbsp;</span>					trace.ProcSteal(gp.m.p.ptr(), true)
<span id="L4670" class="ln">  4670&nbsp;&nbsp;</span>					trace.ProcStart()
<span id="L4671" class="ln">  4671&nbsp;&nbsp;</span>				} else {
<span id="L4672" class="ln">  4672&nbsp;&nbsp;</span>					<span class="comment">// Denote blocking of the new syscall.</span>
<span id="L4673" class="ln">  4673&nbsp;&nbsp;</span>					trace.GoSysBlock(gp.m.p.ptr())
<span id="L4674" class="ln">  4674&nbsp;&nbsp;</span>					<span class="comment">// Denote completion of the current syscall.</span>
<span id="L4675" class="ln">  4675&nbsp;&nbsp;</span>					trace.GoSysExit(true)
<span id="L4676" class="ln">  4676&nbsp;&nbsp;</span>				}
<span id="L4677" class="ln">  4677&nbsp;&nbsp;</span>			})
<span id="L4678" class="ln">  4678&nbsp;&nbsp;</span>		}
<span id="L4679" class="ln">  4679&nbsp;&nbsp;</span>		gp.m.p.ptr().syscalltick++
<span id="L4680" class="ln">  4680&nbsp;&nbsp;</span>	}
<span id="L4681" class="ln">  4681&nbsp;&nbsp;</span>}
<span id="L4682" class="ln">  4682&nbsp;&nbsp;</span>
<span id="L4683" class="ln">  4683&nbsp;&nbsp;</span>func exitsyscallfast_pidle() bool {
<span id="L4684" class="ln">  4684&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L4685" class="ln">  4685&nbsp;&nbsp;</span>	pp, _ := pidleget(0)
<span id="L4686" class="ln">  4686&nbsp;&nbsp;</span>	if pp != nil &amp;&amp; sched.sysmonwait.Load() {
<span id="L4687" class="ln">  4687&nbsp;&nbsp;</span>		sched.sysmonwait.Store(false)
<span id="L4688" class="ln">  4688&nbsp;&nbsp;</span>		notewakeup(&amp;sched.sysmonnote)
<span id="L4689" class="ln">  4689&nbsp;&nbsp;</span>	}
<span id="L4690" class="ln">  4690&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L4691" class="ln">  4691&nbsp;&nbsp;</span>	if pp != nil {
<span id="L4692" class="ln">  4692&nbsp;&nbsp;</span>		acquirep(pp)
<span id="L4693" class="ln">  4693&nbsp;&nbsp;</span>		return true
<span id="L4694" class="ln">  4694&nbsp;&nbsp;</span>	}
<span id="L4695" class="ln">  4695&nbsp;&nbsp;</span>	return false
<span id="L4696" class="ln">  4696&nbsp;&nbsp;</span>}
<span id="L4697" class="ln">  4697&nbsp;&nbsp;</span>
<span id="L4698" class="ln">  4698&nbsp;&nbsp;</span><span class="comment">// exitsyscall slow path on g0.</span>
<span id="L4699" class="ln">  4699&nbsp;&nbsp;</span><span class="comment">// Failed to acquire P, enqueue gp as runnable.</span>
<span id="L4700" class="ln">  4700&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4701" class="ln">  4701&nbsp;&nbsp;</span><span class="comment">// Called via mcall, so gp is the calling g from this M.</span>
<span id="L4702" class="ln">  4702&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4703" class="ln">  4703&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L4704" class="ln">  4704&nbsp;&nbsp;</span>func exitsyscall0(gp *g) {
<span id="L4705" class="ln">  4705&nbsp;&nbsp;</span>	var trace traceLocker
<span id="L4706" class="ln">  4706&nbsp;&nbsp;</span>	if goexperiment.ExecTracer2 {
<span id="L4707" class="ln">  4707&nbsp;&nbsp;</span>		traceExitingSyscall()
<span id="L4708" class="ln">  4708&nbsp;&nbsp;</span>		trace = traceAcquire()
<span id="L4709" class="ln">  4709&nbsp;&nbsp;</span>	}
<span id="L4710" class="ln">  4710&nbsp;&nbsp;</span>	casgstatus(gp, _Gsyscall, _Grunnable)
<span id="L4711" class="ln">  4711&nbsp;&nbsp;</span>	if goexperiment.ExecTracer2 {
<span id="L4712" class="ln">  4712&nbsp;&nbsp;</span>		traceExitedSyscall()
<span id="L4713" class="ln">  4713&nbsp;&nbsp;</span>		if trace.ok() {
<span id="L4714" class="ln">  4714&nbsp;&nbsp;</span>			<span class="comment">// Write out syscall exit eagerly in the experiment.</span>
<span id="L4715" class="ln">  4715&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L4716" class="ln">  4716&nbsp;&nbsp;</span>			<span class="comment">// It&#39;s important that we write this *after* we know whether we</span>
<span id="L4717" class="ln">  4717&nbsp;&nbsp;</span>			<span class="comment">// lost our P or not (determined by exitsyscallfast).</span>
<span id="L4718" class="ln">  4718&nbsp;&nbsp;</span>			trace.GoSysExit(true)
<span id="L4719" class="ln">  4719&nbsp;&nbsp;</span>			traceRelease(trace)
<span id="L4720" class="ln">  4720&nbsp;&nbsp;</span>		}
<span id="L4721" class="ln">  4721&nbsp;&nbsp;</span>	}
<span id="L4722" class="ln">  4722&nbsp;&nbsp;</span>	dropg()
<span id="L4723" class="ln">  4723&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L4724" class="ln">  4724&nbsp;&nbsp;</span>	var pp *p
<span id="L4725" class="ln">  4725&nbsp;&nbsp;</span>	if schedEnabled(gp) {
<span id="L4726" class="ln">  4726&nbsp;&nbsp;</span>		pp, _ = pidleget(0)
<span id="L4727" class="ln">  4727&nbsp;&nbsp;</span>	}
<span id="L4728" class="ln">  4728&nbsp;&nbsp;</span>	var locked bool
<span id="L4729" class="ln">  4729&nbsp;&nbsp;</span>	if pp == nil {
<span id="L4730" class="ln">  4730&nbsp;&nbsp;</span>		globrunqput(gp)
<span id="L4731" class="ln">  4731&nbsp;&nbsp;</span>
<span id="L4732" class="ln">  4732&nbsp;&nbsp;</span>		<span class="comment">// Below, we stoplockedm if gp is locked. globrunqput releases</span>
<span id="L4733" class="ln">  4733&nbsp;&nbsp;</span>		<span class="comment">// ownership of gp, so we must check if gp is locked prior to</span>
<span id="L4734" class="ln">  4734&nbsp;&nbsp;</span>		<span class="comment">// committing the release by unlocking sched.lock, otherwise we</span>
<span id="L4735" class="ln">  4735&nbsp;&nbsp;</span>		<span class="comment">// could race with another M transitioning gp from unlocked to</span>
<span id="L4736" class="ln">  4736&nbsp;&nbsp;</span>		<span class="comment">// locked.</span>
<span id="L4737" class="ln">  4737&nbsp;&nbsp;</span>		locked = gp.lockedm != 0
<span id="L4738" class="ln">  4738&nbsp;&nbsp;</span>	} else if sched.sysmonwait.Load() {
<span id="L4739" class="ln">  4739&nbsp;&nbsp;</span>		sched.sysmonwait.Store(false)
<span id="L4740" class="ln">  4740&nbsp;&nbsp;</span>		notewakeup(&amp;sched.sysmonnote)
<span id="L4741" class="ln">  4741&nbsp;&nbsp;</span>	}
<span id="L4742" class="ln">  4742&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L4743" class="ln">  4743&nbsp;&nbsp;</span>	if pp != nil {
<span id="L4744" class="ln">  4744&nbsp;&nbsp;</span>		acquirep(pp)
<span id="L4745" class="ln">  4745&nbsp;&nbsp;</span>		execute(gp, false) <span class="comment">// Never returns.</span>
<span id="L4746" class="ln">  4746&nbsp;&nbsp;</span>	}
<span id="L4747" class="ln">  4747&nbsp;&nbsp;</span>	if locked {
<span id="L4748" class="ln">  4748&nbsp;&nbsp;</span>		<span class="comment">// Wait until another thread schedules gp and so m again.</span>
<span id="L4749" class="ln">  4749&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L4750" class="ln">  4750&nbsp;&nbsp;</span>		<span class="comment">// N.B. lockedm must be this M, as this g was running on this M</span>
<span id="L4751" class="ln">  4751&nbsp;&nbsp;</span>		<span class="comment">// before entersyscall.</span>
<span id="L4752" class="ln">  4752&nbsp;&nbsp;</span>		stoplockedm()
<span id="L4753" class="ln">  4753&nbsp;&nbsp;</span>		execute(gp, false) <span class="comment">// Never returns.</span>
<span id="L4754" class="ln">  4754&nbsp;&nbsp;</span>	}
<span id="L4755" class="ln">  4755&nbsp;&nbsp;</span>	stopm()
<span id="L4756" class="ln">  4756&nbsp;&nbsp;</span>	schedule() <span class="comment">// Never returns.</span>
<span id="L4757" class="ln">  4757&nbsp;&nbsp;</span>}
<span id="L4758" class="ln">  4758&nbsp;&nbsp;</span>
<span id="L4759" class="ln">  4759&nbsp;&nbsp;</span><span class="comment">// Called from syscall package before fork.</span>
<span id="L4760" class="ln">  4760&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4761" class="ln">  4761&nbsp;&nbsp;</span><span class="comment">//go:linkname syscall_runtime_BeforeFork syscall.runtime_BeforeFork</span>
<span id="L4762" class="ln">  4762&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L4763" class="ln">  4763&nbsp;&nbsp;</span>func syscall_runtime_BeforeFork() {
<span id="L4764" class="ln">  4764&nbsp;&nbsp;</span>	gp := getg().m.curg
<span id="L4765" class="ln">  4765&nbsp;&nbsp;</span>
<span id="L4766" class="ln">  4766&nbsp;&nbsp;</span>	<span class="comment">// Block signals during a fork, so that the child does not run</span>
<span id="L4767" class="ln">  4767&nbsp;&nbsp;</span>	<span class="comment">// a signal handler before exec if a signal is sent to the process</span>
<span id="L4768" class="ln">  4768&nbsp;&nbsp;</span>	<span class="comment">// group. See issue #18600.</span>
<span id="L4769" class="ln">  4769&nbsp;&nbsp;</span>	gp.m.locks++
<span id="L4770" class="ln">  4770&nbsp;&nbsp;</span>	sigsave(&amp;gp.m.sigmask)
<span id="L4771" class="ln">  4771&nbsp;&nbsp;</span>	sigblock(false)
<span id="L4772" class="ln">  4772&nbsp;&nbsp;</span>
<span id="L4773" class="ln">  4773&nbsp;&nbsp;</span>	<span class="comment">// This function is called before fork in syscall package.</span>
<span id="L4774" class="ln">  4774&nbsp;&nbsp;</span>	<span class="comment">// Code between fork and exec must not allocate memory nor even try to grow stack.</span>
<span id="L4775" class="ln">  4775&nbsp;&nbsp;</span>	<span class="comment">// Here we spoil g.stackguard0 to reliably detect any attempts to grow stack.</span>
<span id="L4776" class="ln">  4776&nbsp;&nbsp;</span>	<span class="comment">// runtime_AfterFork will undo this in parent process, but not in child.</span>
<span id="L4777" class="ln">  4777&nbsp;&nbsp;</span>	gp.stackguard0 = stackFork
<span id="L4778" class="ln">  4778&nbsp;&nbsp;</span>}
<span id="L4779" class="ln">  4779&nbsp;&nbsp;</span>
<span id="L4780" class="ln">  4780&nbsp;&nbsp;</span><span class="comment">// Called from syscall package after fork in parent.</span>
<span id="L4781" class="ln">  4781&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4782" class="ln">  4782&nbsp;&nbsp;</span><span class="comment">//go:linkname syscall_runtime_AfterFork syscall.runtime_AfterFork</span>
<span id="L4783" class="ln">  4783&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L4784" class="ln">  4784&nbsp;&nbsp;</span>func syscall_runtime_AfterFork() {
<span id="L4785" class="ln">  4785&nbsp;&nbsp;</span>	gp := getg().m.curg
<span id="L4786" class="ln">  4786&nbsp;&nbsp;</span>
<span id="L4787" class="ln">  4787&nbsp;&nbsp;</span>	<span class="comment">// See the comments in beforefork.</span>
<span id="L4788" class="ln">  4788&nbsp;&nbsp;</span>	gp.stackguard0 = gp.stack.lo + stackGuard
<span id="L4789" class="ln">  4789&nbsp;&nbsp;</span>
<span id="L4790" class="ln">  4790&nbsp;&nbsp;</span>	msigrestore(gp.m.sigmask)
<span id="L4791" class="ln">  4791&nbsp;&nbsp;</span>
<span id="L4792" class="ln">  4792&nbsp;&nbsp;</span>	gp.m.locks--
<span id="L4793" class="ln">  4793&nbsp;&nbsp;</span>}
<span id="L4794" class="ln">  4794&nbsp;&nbsp;</span>
<span id="L4795" class="ln">  4795&nbsp;&nbsp;</span><span class="comment">// inForkedChild is true while manipulating signals in the child process.</span>
<span id="L4796" class="ln">  4796&nbsp;&nbsp;</span><span class="comment">// This is used to avoid calling libc functions in case we are using vfork.</span>
<span id="L4797" class="ln">  4797&nbsp;&nbsp;</span>var inForkedChild bool
<span id="L4798" class="ln">  4798&nbsp;&nbsp;</span>
<span id="L4799" class="ln">  4799&nbsp;&nbsp;</span><span class="comment">// Called from syscall package after fork in child.</span>
<span id="L4800" class="ln">  4800&nbsp;&nbsp;</span><span class="comment">// It resets non-sigignored signals to the default handler, and</span>
<span id="L4801" class="ln">  4801&nbsp;&nbsp;</span><span class="comment">// restores the signal mask in preparation for the exec.</span>
<span id="L4802" class="ln">  4802&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4803" class="ln">  4803&nbsp;&nbsp;</span><span class="comment">// Because this might be called during a vfork, and therefore may be</span>
<span id="L4804" class="ln">  4804&nbsp;&nbsp;</span><span class="comment">// temporarily sharing address space with the parent process, this must</span>
<span id="L4805" class="ln">  4805&nbsp;&nbsp;</span><span class="comment">// not change any global variables or calling into C code that may do so.</span>
<span id="L4806" class="ln">  4806&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4807" class="ln">  4807&nbsp;&nbsp;</span><span class="comment">//go:linkname syscall_runtime_AfterForkInChild syscall.runtime_AfterForkInChild</span>
<span id="L4808" class="ln">  4808&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L4809" class="ln">  4809&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L4810" class="ln">  4810&nbsp;&nbsp;</span>func syscall_runtime_AfterForkInChild() {
<span id="L4811" class="ln">  4811&nbsp;&nbsp;</span>	<span class="comment">// It&#39;s OK to change the global variable inForkedChild here</span>
<span id="L4812" class="ln">  4812&nbsp;&nbsp;</span>	<span class="comment">// because we are going to change it back. There is no race here,</span>
<span id="L4813" class="ln">  4813&nbsp;&nbsp;</span>	<span class="comment">// because if we are sharing address space with the parent process,</span>
<span id="L4814" class="ln">  4814&nbsp;&nbsp;</span>	<span class="comment">// then the parent process can not be running concurrently.</span>
<span id="L4815" class="ln">  4815&nbsp;&nbsp;</span>	inForkedChild = true
<span id="L4816" class="ln">  4816&nbsp;&nbsp;</span>
<span id="L4817" class="ln">  4817&nbsp;&nbsp;</span>	clearSignalHandlers()
<span id="L4818" class="ln">  4818&nbsp;&nbsp;</span>
<span id="L4819" class="ln">  4819&nbsp;&nbsp;</span>	<span class="comment">// When we are the child we are the only thread running,</span>
<span id="L4820" class="ln">  4820&nbsp;&nbsp;</span>	<span class="comment">// so we know that nothing else has changed gp.m.sigmask.</span>
<span id="L4821" class="ln">  4821&nbsp;&nbsp;</span>	msigrestore(getg().m.sigmask)
<span id="L4822" class="ln">  4822&nbsp;&nbsp;</span>
<span id="L4823" class="ln">  4823&nbsp;&nbsp;</span>	inForkedChild = false
<span id="L4824" class="ln">  4824&nbsp;&nbsp;</span>}
<span id="L4825" class="ln">  4825&nbsp;&nbsp;</span>
<span id="L4826" class="ln">  4826&nbsp;&nbsp;</span><span class="comment">// pendingPreemptSignals is the number of preemption signals</span>
<span id="L4827" class="ln">  4827&nbsp;&nbsp;</span><span class="comment">// that have been sent but not received. This is only used on Darwin.</span>
<span id="L4828" class="ln">  4828&nbsp;&nbsp;</span><span class="comment">// For #41702.</span>
<span id="L4829" class="ln">  4829&nbsp;&nbsp;</span>var pendingPreemptSignals atomic.Int32
<span id="L4830" class="ln">  4830&nbsp;&nbsp;</span>
<span id="L4831" class="ln">  4831&nbsp;&nbsp;</span><span class="comment">// Called from syscall package before Exec.</span>
<span id="L4832" class="ln">  4832&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4833" class="ln">  4833&nbsp;&nbsp;</span><span class="comment">//go:linkname syscall_runtime_BeforeExec syscall.runtime_BeforeExec</span>
<span id="L4834" class="ln">  4834&nbsp;&nbsp;</span>func syscall_runtime_BeforeExec() {
<span id="L4835" class="ln">  4835&nbsp;&nbsp;</span>	<span class="comment">// Prevent thread creation during exec.</span>
<span id="L4836" class="ln">  4836&nbsp;&nbsp;</span>	execLock.lock()
<span id="L4837" class="ln">  4837&nbsp;&nbsp;</span>
<span id="L4838" class="ln">  4838&nbsp;&nbsp;</span>	<span class="comment">// On Darwin, wait for all pending preemption signals to</span>
<span id="L4839" class="ln">  4839&nbsp;&nbsp;</span>	<span class="comment">// be received. See issue #41702.</span>
<span id="L4840" class="ln">  4840&nbsp;&nbsp;</span>	if GOOS == &#34;darwin&#34; || GOOS == &#34;ios&#34; {
<span id="L4841" class="ln">  4841&nbsp;&nbsp;</span>		for pendingPreemptSignals.Load() &gt; 0 {
<span id="L4842" class="ln">  4842&nbsp;&nbsp;</span>			osyield()
<span id="L4843" class="ln">  4843&nbsp;&nbsp;</span>		}
<span id="L4844" class="ln">  4844&nbsp;&nbsp;</span>	}
<span id="L4845" class="ln">  4845&nbsp;&nbsp;</span>}
<span id="L4846" class="ln">  4846&nbsp;&nbsp;</span>
<span id="L4847" class="ln">  4847&nbsp;&nbsp;</span><span class="comment">// Called from syscall package after Exec.</span>
<span id="L4848" class="ln">  4848&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4849" class="ln">  4849&nbsp;&nbsp;</span><span class="comment">//go:linkname syscall_runtime_AfterExec syscall.runtime_AfterExec</span>
<span id="L4850" class="ln">  4850&nbsp;&nbsp;</span>func syscall_runtime_AfterExec() {
<span id="L4851" class="ln">  4851&nbsp;&nbsp;</span>	execLock.unlock()
<span id="L4852" class="ln">  4852&nbsp;&nbsp;</span>}
<span id="L4853" class="ln">  4853&nbsp;&nbsp;</span>
<span id="L4854" class="ln">  4854&nbsp;&nbsp;</span><span class="comment">// Allocate a new g, with a stack big enough for stacksize bytes.</span>
<span id="L4855" class="ln">  4855&nbsp;&nbsp;</span>func malg(stacksize int32) *g {
<span id="L4856" class="ln">  4856&nbsp;&nbsp;</span>	newg := new(g)
<span id="L4857" class="ln">  4857&nbsp;&nbsp;</span>	if stacksize &gt;= 0 {
<span id="L4858" class="ln">  4858&nbsp;&nbsp;</span>		stacksize = round2(stackSystem + stacksize)
<span id="L4859" class="ln">  4859&nbsp;&nbsp;</span>		systemstack(func() {
<span id="L4860" class="ln">  4860&nbsp;&nbsp;</span>			newg.stack = stackalloc(uint32(stacksize))
<span id="L4861" class="ln">  4861&nbsp;&nbsp;</span>		})
<span id="L4862" class="ln">  4862&nbsp;&nbsp;</span>		newg.stackguard0 = newg.stack.lo + stackGuard
<span id="L4863" class="ln">  4863&nbsp;&nbsp;</span>		newg.stackguard1 = ^uintptr(0)
<span id="L4864" class="ln">  4864&nbsp;&nbsp;</span>		<span class="comment">// Clear the bottom word of the stack. We record g</span>
<span id="L4865" class="ln">  4865&nbsp;&nbsp;</span>		<span class="comment">// there on gsignal stack during VDSO on ARM and ARM64.</span>
<span id="L4866" class="ln">  4866&nbsp;&nbsp;</span>		*(*uintptr)(unsafe.Pointer(newg.stack.lo)) = 0
<span id="L4867" class="ln">  4867&nbsp;&nbsp;</span>	}
<span id="L4868" class="ln">  4868&nbsp;&nbsp;</span>	return newg
<span id="L4869" class="ln">  4869&nbsp;&nbsp;</span>}
<span id="L4870" class="ln">  4870&nbsp;&nbsp;</span>
<span id="L4871" class="ln">  4871&nbsp;&nbsp;</span><span class="comment">// Create a new g running fn.</span>
<span id="L4872" class="ln">  4872&nbsp;&nbsp;</span><span class="comment">// Put it on the queue of g&#39;s waiting to run.</span>
<span id="L4873" class="ln">  4873&nbsp;&nbsp;</span><span class="comment">// The compiler turns a go statement into a call to this.</span>
<span id="L4874" class="ln">  4874&nbsp;&nbsp;</span>func newproc(fn *funcval) {
<span id="L4875" class="ln">  4875&nbsp;&nbsp;</span>	gp := getg()
<span id="L4876" class="ln">  4876&nbsp;&nbsp;</span>	pc := getcallerpc()
<span id="L4877" class="ln">  4877&nbsp;&nbsp;</span>	systemstack(func() {
<span id="L4878" class="ln">  4878&nbsp;&nbsp;</span>		newg := newproc1(fn, gp, pc)
<span id="L4879" class="ln">  4879&nbsp;&nbsp;</span>
<span id="L4880" class="ln">  4880&nbsp;&nbsp;</span>		pp := getg().m.p.ptr()
<span id="L4881" class="ln">  4881&nbsp;&nbsp;</span>		runqput(pp, newg, true)
<span id="L4882" class="ln">  4882&nbsp;&nbsp;</span>
<span id="L4883" class="ln">  4883&nbsp;&nbsp;</span>		if mainStarted {
<span id="L4884" class="ln">  4884&nbsp;&nbsp;</span>			wakep()
<span id="L4885" class="ln">  4885&nbsp;&nbsp;</span>		}
<span id="L4886" class="ln">  4886&nbsp;&nbsp;</span>	})
<span id="L4887" class="ln">  4887&nbsp;&nbsp;</span>}
<span id="L4888" class="ln">  4888&nbsp;&nbsp;</span>
<span id="L4889" class="ln">  4889&nbsp;&nbsp;</span><span class="comment">// Create a new g in state _Grunnable, starting at fn. callerpc is the</span>
<span id="L4890" class="ln">  4890&nbsp;&nbsp;</span><span class="comment">// address of the go statement that created this. The caller is responsible</span>
<span id="L4891" class="ln">  4891&nbsp;&nbsp;</span><span class="comment">// for adding the new g to the scheduler.</span>
<span id="L4892" class="ln">  4892&nbsp;&nbsp;</span>func newproc1(fn *funcval, callergp *g, callerpc uintptr) *g {
<span id="L4893" class="ln">  4893&nbsp;&nbsp;</span>	if fn == nil {
<span id="L4894" class="ln">  4894&nbsp;&nbsp;</span>		fatal(&#34;go of nil func value&#34;)
<span id="L4895" class="ln">  4895&nbsp;&nbsp;</span>	}
<span id="L4896" class="ln">  4896&nbsp;&nbsp;</span>
<span id="L4897" class="ln">  4897&nbsp;&nbsp;</span>	mp := acquirem() <span class="comment">// disable preemption because we hold M and P in local vars.</span>
<span id="L4898" class="ln">  4898&nbsp;&nbsp;</span>	pp := mp.p.ptr()
<span id="L4899" class="ln">  4899&nbsp;&nbsp;</span>	newg := gfget(pp)
<span id="L4900" class="ln">  4900&nbsp;&nbsp;</span>	if newg == nil {
<span id="L4901" class="ln">  4901&nbsp;&nbsp;</span>		newg = malg(stackMin)
<span id="L4902" class="ln">  4902&nbsp;&nbsp;</span>		casgstatus(newg, _Gidle, _Gdead)
<span id="L4903" class="ln">  4903&nbsp;&nbsp;</span>		allgadd(newg) <span class="comment">// publishes with a g-&gt;status of Gdead so GC scanner doesn&#39;t look at uninitialized stack.</span>
<span id="L4904" class="ln">  4904&nbsp;&nbsp;</span>	}
<span id="L4905" class="ln">  4905&nbsp;&nbsp;</span>	if newg.stack.hi == 0 {
<span id="L4906" class="ln">  4906&nbsp;&nbsp;</span>		throw(&#34;newproc1: newg missing stack&#34;)
<span id="L4907" class="ln">  4907&nbsp;&nbsp;</span>	}
<span id="L4908" class="ln">  4908&nbsp;&nbsp;</span>
<span id="L4909" class="ln">  4909&nbsp;&nbsp;</span>	if readgstatus(newg) != _Gdead {
<span id="L4910" class="ln">  4910&nbsp;&nbsp;</span>		throw(&#34;newproc1: new g is not Gdead&#34;)
<span id="L4911" class="ln">  4911&nbsp;&nbsp;</span>	}
<span id="L4912" class="ln">  4912&nbsp;&nbsp;</span>
<span id="L4913" class="ln">  4913&nbsp;&nbsp;</span>	totalSize := uintptr(4*goarch.PtrSize + sys.MinFrameSize) <span class="comment">// extra space in case of reads slightly beyond frame</span>
<span id="L4914" class="ln">  4914&nbsp;&nbsp;</span>	totalSize = alignUp(totalSize, sys.StackAlign)
<span id="L4915" class="ln">  4915&nbsp;&nbsp;</span>	sp := newg.stack.hi - totalSize
<span id="L4916" class="ln">  4916&nbsp;&nbsp;</span>	if usesLR {
<span id="L4917" class="ln">  4917&nbsp;&nbsp;</span>		<span class="comment">// caller&#39;s LR</span>
<span id="L4918" class="ln">  4918&nbsp;&nbsp;</span>		*(*uintptr)(unsafe.Pointer(sp)) = 0
<span id="L4919" class="ln">  4919&nbsp;&nbsp;</span>		prepGoExitFrame(sp)
<span id="L4920" class="ln">  4920&nbsp;&nbsp;</span>	}
<span id="L4921" class="ln">  4921&nbsp;&nbsp;</span>	if GOARCH == &#34;arm64&#34; {
<span id="L4922" class="ln">  4922&nbsp;&nbsp;</span>		<span class="comment">// caller&#39;s FP</span>
<span id="L4923" class="ln">  4923&nbsp;&nbsp;</span>		*(*uintptr)(unsafe.Pointer(sp - goarch.PtrSize)) = 0
<span id="L4924" class="ln">  4924&nbsp;&nbsp;</span>	}
<span id="L4925" class="ln">  4925&nbsp;&nbsp;</span>
<span id="L4926" class="ln">  4926&nbsp;&nbsp;</span>	memclrNoHeapPointers(unsafe.Pointer(&amp;newg.sched), unsafe.Sizeof(newg.sched))
<span id="L4927" class="ln">  4927&nbsp;&nbsp;</span>	newg.sched.sp = sp
<span id="L4928" class="ln">  4928&nbsp;&nbsp;</span>	newg.stktopsp = sp
<span id="L4929" class="ln">  4929&nbsp;&nbsp;</span>	newg.sched.pc = abi.FuncPCABI0(goexit) + sys.PCQuantum <span class="comment">// +PCQuantum so that previous instruction is in same function</span>
<span id="L4930" class="ln">  4930&nbsp;&nbsp;</span>	newg.sched.g = guintptr(unsafe.Pointer(newg))
<span id="L4931" class="ln">  4931&nbsp;&nbsp;</span>	gostartcallfn(&amp;newg.sched, fn)
<span id="L4932" class="ln">  4932&nbsp;&nbsp;</span>	newg.parentGoid = callergp.goid
<span id="L4933" class="ln">  4933&nbsp;&nbsp;</span>	newg.gopc = callerpc
<span id="L4934" class="ln">  4934&nbsp;&nbsp;</span>	newg.ancestors = saveAncestors(callergp)
<span id="L4935" class="ln">  4935&nbsp;&nbsp;</span>	newg.startpc = fn.fn
<span id="L4936" class="ln">  4936&nbsp;&nbsp;</span>	if isSystemGoroutine(newg, false) {
<span id="L4937" class="ln">  4937&nbsp;&nbsp;</span>		sched.ngsys.Add(1)
<span id="L4938" class="ln">  4938&nbsp;&nbsp;</span>	} else {
<span id="L4939" class="ln">  4939&nbsp;&nbsp;</span>		<span class="comment">// Only user goroutines inherit pprof labels.</span>
<span id="L4940" class="ln">  4940&nbsp;&nbsp;</span>		if mp.curg != nil {
<span id="L4941" class="ln">  4941&nbsp;&nbsp;</span>			newg.labels = mp.curg.labels
<span id="L4942" class="ln">  4942&nbsp;&nbsp;</span>		}
<span id="L4943" class="ln">  4943&nbsp;&nbsp;</span>		if goroutineProfile.active {
<span id="L4944" class="ln">  4944&nbsp;&nbsp;</span>			<span class="comment">// A concurrent goroutine profile is running. It should include</span>
<span id="L4945" class="ln">  4945&nbsp;&nbsp;</span>			<span class="comment">// exactly the set of goroutines that were alive when the goroutine</span>
<span id="L4946" class="ln">  4946&nbsp;&nbsp;</span>			<span class="comment">// profiler first stopped the world. That does not include newg, so</span>
<span id="L4947" class="ln">  4947&nbsp;&nbsp;</span>			<span class="comment">// mark it as not needing a profile before transitioning it from</span>
<span id="L4948" class="ln">  4948&nbsp;&nbsp;</span>			<span class="comment">// _Gdead.</span>
<span id="L4949" class="ln">  4949&nbsp;&nbsp;</span>			newg.goroutineProfiled.Store(goroutineProfileSatisfied)
<span id="L4950" class="ln">  4950&nbsp;&nbsp;</span>		}
<span id="L4951" class="ln">  4951&nbsp;&nbsp;</span>	}
<span id="L4952" class="ln">  4952&nbsp;&nbsp;</span>	<span class="comment">// Track initial transition?</span>
<span id="L4953" class="ln">  4953&nbsp;&nbsp;</span>	newg.trackingSeq = uint8(cheaprand())
<span id="L4954" class="ln">  4954&nbsp;&nbsp;</span>	if newg.trackingSeq%gTrackingPeriod == 0 {
<span id="L4955" class="ln">  4955&nbsp;&nbsp;</span>		newg.tracking = true
<span id="L4956" class="ln">  4956&nbsp;&nbsp;</span>	}
<span id="L4957" class="ln">  4957&nbsp;&nbsp;</span>	gcController.addScannableStack(pp, int64(newg.stack.hi-newg.stack.lo))
<span id="L4958" class="ln">  4958&nbsp;&nbsp;</span>
<span id="L4959" class="ln">  4959&nbsp;&nbsp;</span>	<span class="comment">// Get a goid and switch to runnable. Make all this atomic to the tracer.</span>
<span id="L4960" class="ln">  4960&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L4961" class="ln">  4961&nbsp;&nbsp;</span>	casgstatus(newg, _Gdead, _Grunnable)
<span id="L4962" class="ln">  4962&nbsp;&nbsp;</span>	if pp.goidcache == pp.goidcacheend {
<span id="L4963" class="ln">  4963&nbsp;&nbsp;</span>		<span class="comment">// Sched.goidgen is the last allocated id,</span>
<span id="L4964" class="ln">  4964&nbsp;&nbsp;</span>		<span class="comment">// this batch must be [sched.goidgen+1, sched.goidgen+GoidCacheBatch].</span>
<span id="L4965" class="ln">  4965&nbsp;&nbsp;</span>		<span class="comment">// At startup sched.goidgen=0, so main goroutine receives goid=1.</span>
<span id="L4966" class="ln">  4966&nbsp;&nbsp;</span>		pp.goidcache = sched.goidgen.Add(_GoidCacheBatch)
<span id="L4967" class="ln">  4967&nbsp;&nbsp;</span>		pp.goidcache -= _GoidCacheBatch - 1
<span id="L4968" class="ln">  4968&nbsp;&nbsp;</span>		pp.goidcacheend = pp.goidcache + _GoidCacheBatch
<span id="L4969" class="ln">  4969&nbsp;&nbsp;</span>	}
<span id="L4970" class="ln">  4970&nbsp;&nbsp;</span>	newg.goid = pp.goidcache
<span id="L4971" class="ln">  4971&nbsp;&nbsp;</span>	pp.goidcache++
<span id="L4972" class="ln">  4972&nbsp;&nbsp;</span>	newg.trace.reset()
<span id="L4973" class="ln">  4973&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L4974" class="ln">  4974&nbsp;&nbsp;</span>		trace.GoCreate(newg, newg.startpc)
<span id="L4975" class="ln">  4975&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L4976" class="ln">  4976&nbsp;&nbsp;</span>	}
<span id="L4977" class="ln">  4977&nbsp;&nbsp;</span>
<span id="L4978" class="ln">  4978&nbsp;&nbsp;</span>	<span class="comment">// Set up race context.</span>
<span id="L4979" class="ln">  4979&nbsp;&nbsp;</span>	if raceenabled {
<span id="L4980" class="ln">  4980&nbsp;&nbsp;</span>		newg.racectx = racegostart(callerpc)
<span id="L4981" class="ln">  4981&nbsp;&nbsp;</span>		newg.raceignore = 0
<span id="L4982" class="ln">  4982&nbsp;&nbsp;</span>		if newg.labels != nil {
<span id="L4983" class="ln">  4983&nbsp;&nbsp;</span>			<span class="comment">// See note in proflabel.go on labelSync&#39;s role in synchronizing</span>
<span id="L4984" class="ln">  4984&nbsp;&nbsp;</span>			<span class="comment">// with the reads in the signal handler.</span>
<span id="L4985" class="ln">  4985&nbsp;&nbsp;</span>			racereleasemergeg(newg, unsafe.Pointer(&amp;labelSync))
<span id="L4986" class="ln">  4986&nbsp;&nbsp;</span>		}
<span id="L4987" class="ln">  4987&nbsp;&nbsp;</span>	}
<span id="L4988" class="ln">  4988&nbsp;&nbsp;</span>	releasem(mp)
<span id="L4989" class="ln">  4989&nbsp;&nbsp;</span>
<span id="L4990" class="ln">  4990&nbsp;&nbsp;</span>	return newg
<span id="L4991" class="ln">  4991&nbsp;&nbsp;</span>}
<span id="L4992" class="ln">  4992&nbsp;&nbsp;</span>
<span id="L4993" class="ln">  4993&nbsp;&nbsp;</span><span class="comment">// saveAncestors copies previous ancestors of the given caller g and</span>
<span id="L4994" class="ln">  4994&nbsp;&nbsp;</span><span class="comment">// includes info for the current caller into a new set of tracebacks for</span>
<span id="L4995" class="ln">  4995&nbsp;&nbsp;</span><span class="comment">// a g being created.</span>
<span id="L4996" class="ln">  4996&nbsp;&nbsp;</span>func saveAncestors(callergp *g) *[]ancestorInfo {
<span id="L4997" class="ln">  4997&nbsp;&nbsp;</span>	<span class="comment">// Copy all prior info, except for the root goroutine (goid 0).</span>
<span id="L4998" class="ln">  4998&nbsp;&nbsp;</span>	if debug.tracebackancestors &lt;= 0 || callergp.goid == 0 {
<span id="L4999" class="ln">  4999&nbsp;&nbsp;</span>		return nil
<span id="L5000" class="ln">  5000&nbsp;&nbsp;</span>	}
<span id="L5001" class="ln">  5001&nbsp;&nbsp;</span>	var callerAncestors []ancestorInfo
<span id="L5002" class="ln">  5002&nbsp;&nbsp;</span>	if callergp.ancestors != nil {
<span id="L5003" class="ln">  5003&nbsp;&nbsp;</span>		callerAncestors = *callergp.ancestors
<span id="L5004" class="ln">  5004&nbsp;&nbsp;</span>	}
<span id="L5005" class="ln">  5005&nbsp;&nbsp;</span>	n := int32(len(callerAncestors)) + 1
<span id="L5006" class="ln">  5006&nbsp;&nbsp;</span>	if n &gt; debug.tracebackancestors {
<span id="L5007" class="ln">  5007&nbsp;&nbsp;</span>		n = debug.tracebackancestors
<span id="L5008" class="ln">  5008&nbsp;&nbsp;</span>	}
<span id="L5009" class="ln">  5009&nbsp;&nbsp;</span>	ancestors := make([]ancestorInfo, n)
<span id="L5010" class="ln">  5010&nbsp;&nbsp;</span>	copy(ancestors[1:], callerAncestors)
<span id="L5011" class="ln">  5011&nbsp;&nbsp;</span>
<span id="L5012" class="ln">  5012&nbsp;&nbsp;</span>	var pcs [tracebackInnerFrames]uintptr
<span id="L5013" class="ln">  5013&nbsp;&nbsp;</span>	npcs := gcallers(callergp, 0, pcs[:])
<span id="L5014" class="ln">  5014&nbsp;&nbsp;</span>	ipcs := make([]uintptr, npcs)
<span id="L5015" class="ln">  5015&nbsp;&nbsp;</span>	copy(ipcs, pcs[:])
<span id="L5016" class="ln">  5016&nbsp;&nbsp;</span>	ancestors[0] = ancestorInfo{
<span id="L5017" class="ln">  5017&nbsp;&nbsp;</span>		pcs:  ipcs,
<span id="L5018" class="ln">  5018&nbsp;&nbsp;</span>		goid: callergp.goid,
<span id="L5019" class="ln">  5019&nbsp;&nbsp;</span>		gopc: callergp.gopc,
<span id="L5020" class="ln">  5020&nbsp;&nbsp;</span>	}
<span id="L5021" class="ln">  5021&nbsp;&nbsp;</span>
<span id="L5022" class="ln">  5022&nbsp;&nbsp;</span>	ancestorsp := new([]ancestorInfo)
<span id="L5023" class="ln">  5023&nbsp;&nbsp;</span>	*ancestorsp = ancestors
<span id="L5024" class="ln">  5024&nbsp;&nbsp;</span>	return ancestorsp
<span id="L5025" class="ln">  5025&nbsp;&nbsp;</span>}
<span id="L5026" class="ln">  5026&nbsp;&nbsp;</span>
<span id="L5027" class="ln">  5027&nbsp;&nbsp;</span><span class="comment">// Put on gfree list.</span>
<span id="L5028" class="ln">  5028&nbsp;&nbsp;</span><span class="comment">// If local list is too long, transfer a batch to the global list.</span>
<span id="L5029" class="ln">  5029&nbsp;&nbsp;</span>func gfput(pp *p, gp *g) {
<span id="L5030" class="ln">  5030&nbsp;&nbsp;</span>	if readgstatus(gp) != _Gdead {
<span id="L5031" class="ln">  5031&nbsp;&nbsp;</span>		throw(&#34;gfput: bad status (not Gdead)&#34;)
<span id="L5032" class="ln">  5032&nbsp;&nbsp;</span>	}
<span id="L5033" class="ln">  5033&nbsp;&nbsp;</span>
<span id="L5034" class="ln">  5034&nbsp;&nbsp;</span>	stksize := gp.stack.hi - gp.stack.lo
<span id="L5035" class="ln">  5035&nbsp;&nbsp;</span>
<span id="L5036" class="ln">  5036&nbsp;&nbsp;</span>	if stksize != uintptr(startingStackSize) {
<span id="L5037" class="ln">  5037&nbsp;&nbsp;</span>		<span class="comment">// non-standard stack size - free it.</span>
<span id="L5038" class="ln">  5038&nbsp;&nbsp;</span>		stackfree(gp.stack)
<span id="L5039" class="ln">  5039&nbsp;&nbsp;</span>		gp.stack.lo = 0
<span id="L5040" class="ln">  5040&nbsp;&nbsp;</span>		gp.stack.hi = 0
<span id="L5041" class="ln">  5041&nbsp;&nbsp;</span>		gp.stackguard0 = 0
<span id="L5042" class="ln">  5042&nbsp;&nbsp;</span>	}
<span id="L5043" class="ln">  5043&nbsp;&nbsp;</span>
<span id="L5044" class="ln">  5044&nbsp;&nbsp;</span>	pp.gFree.push(gp)
<span id="L5045" class="ln">  5045&nbsp;&nbsp;</span>	pp.gFree.n++
<span id="L5046" class="ln">  5046&nbsp;&nbsp;</span>	if pp.gFree.n &gt;= 64 {
<span id="L5047" class="ln">  5047&nbsp;&nbsp;</span>		var (
<span id="L5048" class="ln">  5048&nbsp;&nbsp;</span>			inc      int32
<span id="L5049" class="ln">  5049&nbsp;&nbsp;</span>			stackQ   gQueue
<span id="L5050" class="ln">  5050&nbsp;&nbsp;</span>			noStackQ gQueue
<span id="L5051" class="ln">  5051&nbsp;&nbsp;</span>		)
<span id="L5052" class="ln">  5052&nbsp;&nbsp;</span>		for pp.gFree.n &gt;= 32 {
<span id="L5053" class="ln">  5053&nbsp;&nbsp;</span>			gp := pp.gFree.pop()
<span id="L5054" class="ln">  5054&nbsp;&nbsp;</span>			pp.gFree.n--
<span id="L5055" class="ln">  5055&nbsp;&nbsp;</span>			if gp.stack.lo == 0 {
<span id="L5056" class="ln">  5056&nbsp;&nbsp;</span>				noStackQ.push(gp)
<span id="L5057" class="ln">  5057&nbsp;&nbsp;</span>			} else {
<span id="L5058" class="ln">  5058&nbsp;&nbsp;</span>				stackQ.push(gp)
<span id="L5059" class="ln">  5059&nbsp;&nbsp;</span>			}
<span id="L5060" class="ln">  5060&nbsp;&nbsp;</span>			inc++
<span id="L5061" class="ln">  5061&nbsp;&nbsp;</span>		}
<span id="L5062" class="ln">  5062&nbsp;&nbsp;</span>		lock(&amp;sched.gFree.lock)
<span id="L5063" class="ln">  5063&nbsp;&nbsp;</span>		sched.gFree.noStack.pushAll(noStackQ)
<span id="L5064" class="ln">  5064&nbsp;&nbsp;</span>		sched.gFree.stack.pushAll(stackQ)
<span id="L5065" class="ln">  5065&nbsp;&nbsp;</span>		sched.gFree.n += inc
<span id="L5066" class="ln">  5066&nbsp;&nbsp;</span>		unlock(&amp;sched.gFree.lock)
<span id="L5067" class="ln">  5067&nbsp;&nbsp;</span>	}
<span id="L5068" class="ln">  5068&nbsp;&nbsp;</span>}
<span id="L5069" class="ln">  5069&nbsp;&nbsp;</span>
<span id="L5070" class="ln">  5070&nbsp;&nbsp;</span><span class="comment">// Get from gfree list.</span>
<span id="L5071" class="ln">  5071&nbsp;&nbsp;</span><span class="comment">// If local list is empty, grab a batch from global list.</span>
<span id="L5072" class="ln">  5072&nbsp;&nbsp;</span>func gfget(pp *p) *g {
<span id="L5073" class="ln">  5073&nbsp;&nbsp;</span>retry:
<span id="L5074" class="ln">  5074&nbsp;&nbsp;</span>	if pp.gFree.empty() &amp;&amp; (!sched.gFree.stack.empty() || !sched.gFree.noStack.empty()) {
<span id="L5075" class="ln">  5075&nbsp;&nbsp;</span>		lock(&amp;sched.gFree.lock)
<span id="L5076" class="ln">  5076&nbsp;&nbsp;</span>		<span class="comment">// Move a batch of free Gs to the P.</span>
<span id="L5077" class="ln">  5077&nbsp;&nbsp;</span>		for pp.gFree.n &lt; 32 {
<span id="L5078" class="ln">  5078&nbsp;&nbsp;</span>			<span class="comment">// Prefer Gs with stacks.</span>
<span id="L5079" class="ln">  5079&nbsp;&nbsp;</span>			gp := sched.gFree.stack.pop()
<span id="L5080" class="ln">  5080&nbsp;&nbsp;</span>			if gp == nil {
<span id="L5081" class="ln">  5081&nbsp;&nbsp;</span>				gp = sched.gFree.noStack.pop()
<span id="L5082" class="ln">  5082&nbsp;&nbsp;</span>				if gp == nil {
<span id="L5083" class="ln">  5083&nbsp;&nbsp;</span>					break
<span id="L5084" class="ln">  5084&nbsp;&nbsp;</span>				}
<span id="L5085" class="ln">  5085&nbsp;&nbsp;</span>			}
<span id="L5086" class="ln">  5086&nbsp;&nbsp;</span>			sched.gFree.n--
<span id="L5087" class="ln">  5087&nbsp;&nbsp;</span>			pp.gFree.push(gp)
<span id="L5088" class="ln">  5088&nbsp;&nbsp;</span>			pp.gFree.n++
<span id="L5089" class="ln">  5089&nbsp;&nbsp;</span>		}
<span id="L5090" class="ln">  5090&nbsp;&nbsp;</span>		unlock(&amp;sched.gFree.lock)
<span id="L5091" class="ln">  5091&nbsp;&nbsp;</span>		goto retry
<span id="L5092" class="ln">  5092&nbsp;&nbsp;</span>	}
<span id="L5093" class="ln">  5093&nbsp;&nbsp;</span>	gp := pp.gFree.pop()
<span id="L5094" class="ln">  5094&nbsp;&nbsp;</span>	if gp == nil {
<span id="L5095" class="ln">  5095&nbsp;&nbsp;</span>		return nil
<span id="L5096" class="ln">  5096&nbsp;&nbsp;</span>	}
<span id="L5097" class="ln">  5097&nbsp;&nbsp;</span>	pp.gFree.n--
<span id="L5098" class="ln">  5098&nbsp;&nbsp;</span>	if gp.stack.lo != 0 &amp;&amp; gp.stack.hi-gp.stack.lo != uintptr(startingStackSize) {
<span id="L5099" class="ln">  5099&nbsp;&nbsp;</span>		<span class="comment">// Deallocate old stack. We kept it in gfput because it was the</span>
<span id="L5100" class="ln">  5100&nbsp;&nbsp;</span>		<span class="comment">// right size when the goroutine was put on the free list, but</span>
<span id="L5101" class="ln">  5101&nbsp;&nbsp;</span>		<span class="comment">// the right size has changed since then.</span>
<span id="L5102" class="ln">  5102&nbsp;&nbsp;</span>		systemstack(func() {
<span id="L5103" class="ln">  5103&nbsp;&nbsp;</span>			stackfree(gp.stack)
<span id="L5104" class="ln">  5104&nbsp;&nbsp;</span>			gp.stack.lo = 0
<span id="L5105" class="ln">  5105&nbsp;&nbsp;</span>			gp.stack.hi = 0
<span id="L5106" class="ln">  5106&nbsp;&nbsp;</span>			gp.stackguard0 = 0
<span id="L5107" class="ln">  5107&nbsp;&nbsp;</span>		})
<span id="L5108" class="ln">  5108&nbsp;&nbsp;</span>	}
<span id="L5109" class="ln">  5109&nbsp;&nbsp;</span>	if gp.stack.lo == 0 {
<span id="L5110" class="ln">  5110&nbsp;&nbsp;</span>		<span class="comment">// Stack was deallocated in gfput or just above. Allocate a new one.</span>
<span id="L5111" class="ln">  5111&nbsp;&nbsp;</span>		systemstack(func() {
<span id="L5112" class="ln">  5112&nbsp;&nbsp;</span>			gp.stack = stackalloc(startingStackSize)
<span id="L5113" class="ln">  5113&nbsp;&nbsp;</span>		})
<span id="L5114" class="ln">  5114&nbsp;&nbsp;</span>		gp.stackguard0 = gp.stack.lo + stackGuard
<span id="L5115" class="ln">  5115&nbsp;&nbsp;</span>	} else {
<span id="L5116" class="ln">  5116&nbsp;&nbsp;</span>		if raceenabled {
<span id="L5117" class="ln">  5117&nbsp;&nbsp;</span>			racemalloc(unsafe.Pointer(gp.stack.lo), gp.stack.hi-gp.stack.lo)
<span id="L5118" class="ln">  5118&nbsp;&nbsp;</span>		}
<span id="L5119" class="ln">  5119&nbsp;&nbsp;</span>		if msanenabled {
<span id="L5120" class="ln">  5120&nbsp;&nbsp;</span>			msanmalloc(unsafe.Pointer(gp.stack.lo), gp.stack.hi-gp.stack.lo)
<span id="L5121" class="ln">  5121&nbsp;&nbsp;</span>		}
<span id="L5122" class="ln">  5122&nbsp;&nbsp;</span>		if asanenabled {
<span id="L5123" class="ln">  5123&nbsp;&nbsp;</span>			asanunpoison(unsafe.Pointer(gp.stack.lo), gp.stack.hi-gp.stack.lo)
<span id="L5124" class="ln">  5124&nbsp;&nbsp;</span>		}
<span id="L5125" class="ln">  5125&nbsp;&nbsp;</span>	}
<span id="L5126" class="ln">  5126&nbsp;&nbsp;</span>	return gp
<span id="L5127" class="ln">  5127&nbsp;&nbsp;</span>}
<span id="L5128" class="ln">  5128&nbsp;&nbsp;</span>
<span id="L5129" class="ln">  5129&nbsp;&nbsp;</span><span class="comment">// Purge all cached G&#39;s from gfree list to the global list.</span>
<span id="L5130" class="ln">  5130&nbsp;&nbsp;</span>func gfpurge(pp *p) {
<span id="L5131" class="ln">  5131&nbsp;&nbsp;</span>	var (
<span id="L5132" class="ln">  5132&nbsp;&nbsp;</span>		inc      int32
<span id="L5133" class="ln">  5133&nbsp;&nbsp;</span>		stackQ   gQueue
<span id="L5134" class="ln">  5134&nbsp;&nbsp;</span>		noStackQ gQueue
<span id="L5135" class="ln">  5135&nbsp;&nbsp;</span>	)
<span id="L5136" class="ln">  5136&nbsp;&nbsp;</span>	for !pp.gFree.empty() {
<span id="L5137" class="ln">  5137&nbsp;&nbsp;</span>		gp := pp.gFree.pop()
<span id="L5138" class="ln">  5138&nbsp;&nbsp;</span>		pp.gFree.n--
<span id="L5139" class="ln">  5139&nbsp;&nbsp;</span>		if gp.stack.lo == 0 {
<span id="L5140" class="ln">  5140&nbsp;&nbsp;</span>			noStackQ.push(gp)
<span id="L5141" class="ln">  5141&nbsp;&nbsp;</span>		} else {
<span id="L5142" class="ln">  5142&nbsp;&nbsp;</span>			stackQ.push(gp)
<span id="L5143" class="ln">  5143&nbsp;&nbsp;</span>		}
<span id="L5144" class="ln">  5144&nbsp;&nbsp;</span>		inc++
<span id="L5145" class="ln">  5145&nbsp;&nbsp;</span>	}
<span id="L5146" class="ln">  5146&nbsp;&nbsp;</span>	lock(&amp;sched.gFree.lock)
<span id="L5147" class="ln">  5147&nbsp;&nbsp;</span>	sched.gFree.noStack.pushAll(noStackQ)
<span id="L5148" class="ln">  5148&nbsp;&nbsp;</span>	sched.gFree.stack.pushAll(stackQ)
<span id="L5149" class="ln">  5149&nbsp;&nbsp;</span>	sched.gFree.n += inc
<span id="L5150" class="ln">  5150&nbsp;&nbsp;</span>	unlock(&amp;sched.gFree.lock)
<span id="L5151" class="ln">  5151&nbsp;&nbsp;</span>}
<span id="L5152" class="ln">  5152&nbsp;&nbsp;</span>
<span id="L5153" class="ln">  5153&nbsp;&nbsp;</span><span class="comment">// Breakpoint executes a breakpoint trap.</span>
<span id="L5154" class="ln">  5154&nbsp;&nbsp;</span><span class="selection">func Breakpoint()</span> {
<span id="L5155" class="ln">  5155&nbsp;&nbsp;</span>	breakpoint()
<span id="L5156" class="ln">  5156&nbsp;&nbsp;</span>}
<span id="L5157" class="ln">  5157&nbsp;&nbsp;</span>
<span id="L5158" class="ln">  5158&nbsp;&nbsp;</span><span class="comment">// dolockOSThread is called by LockOSThread and lockOSThread below</span>
<span id="L5159" class="ln">  5159&nbsp;&nbsp;</span><span class="comment">// after they modify m.locked. Do not allow preemption during this call,</span>
<span id="L5160" class="ln">  5160&nbsp;&nbsp;</span><span class="comment">// or else the m might be different in this function than in the caller.</span>
<span id="L5161" class="ln">  5161&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5162" class="ln">  5162&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L5163" class="ln">  5163&nbsp;&nbsp;</span>func dolockOSThread() {
<span id="L5164" class="ln">  5164&nbsp;&nbsp;</span>	if GOARCH == &#34;wasm&#34; {
<span id="L5165" class="ln">  5165&nbsp;&nbsp;</span>		return <span class="comment">// no threads on wasm yet</span>
<span id="L5166" class="ln">  5166&nbsp;&nbsp;</span>	}
<span id="L5167" class="ln">  5167&nbsp;&nbsp;</span>	gp := getg()
<span id="L5168" class="ln">  5168&nbsp;&nbsp;</span>	gp.m.lockedg.set(gp)
<span id="L5169" class="ln">  5169&nbsp;&nbsp;</span>	gp.lockedm.set(gp.m)
<span id="L5170" class="ln">  5170&nbsp;&nbsp;</span>}
<span id="L5171" class="ln">  5171&nbsp;&nbsp;</span>
<span id="L5172" class="ln">  5172&nbsp;&nbsp;</span><span class="comment">// LockOSThread wires the calling goroutine to its current operating system thread.</span>
<span id="L5173" class="ln">  5173&nbsp;&nbsp;</span><span class="comment">// The calling goroutine will always execute in that thread,</span>
<span id="L5174" class="ln">  5174&nbsp;&nbsp;</span><span class="comment">// and no other goroutine will execute in it,</span>
<span id="L5175" class="ln">  5175&nbsp;&nbsp;</span><span class="comment">// until the calling goroutine has made as many calls to</span>
<span id="L5176" class="ln">  5176&nbsp;&nbsp;</span><span class="comment">// [UnlockOSThread] as to LockOSThread.</span>
<span id="L5177" class="ln">  5177&nbsp;&nbsp;</span><span class="comment">// If the calling goroutine exits without unlocking the thread,</span>
<span id="L5178" class="ln">  5178&nbsp;&nbsp;</span><span class="comment">// the thread will be terminated.</span>
<span id="L5179" class="ln">  5179&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5180" class="ln">  5180&nbsp;&nbsp;</span><span class="comment">// All init functions are run on the startup thread. Calling LockOSThread</span>
<span id="L5181" class="ln">  5181&nbsp;&nbsp;</span><span class="comment">// from an init function will cause the main function to be invoked on</span>
<span id="L5182" class="ln">  5182&nbsp;&nbsp;</span><span class="comment">// that thread.</span>
<span id="L5183" class="ln">  5183&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5184" class="ln">  5184&nbsp;&nbsp;</span><span class="comment">// A goroutine should call LockOSThread before calling OS services or</span>
<span id="L5185" class="ln">  5185&nbsp;&nbsp;</span><span class="comment">// non-Go library functions that depend on per-thread state.</span>
<span id="L5186" class="ln">  5186&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5187" class="ln">  5187&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L5188" class="ln">  5188&nbsp;&nbsp;</span>func LockOSThread() {
<span id="L5189" class="ln">  5189&nbsp;&nbsp;</span>	if atomic.Load(&amp;newmHandoff.haveTemplateThread) == 0 &amp;&amp; GOOS != &#34;plan9&#34; {
<span id="L5190" class="ln">  5190&nbsp;&nbsp;</span>		<span class="comment">// If we need to start a new thread from the locked</span>
<span id="L5191" class="ln">  5191&nbsp;&nbsp;</span>		<span class="comment">// thread, we need the template thread. Start it now</span>
<span id="L5192" class="ln">  5192&nbsp;&nbsp;</span>		<span class="comment">// while we&#39;re in a known-good state.</span>
<span id="L5193" class="ln">  5193&nbsp;&nbsp;</span>		startTemplateThread()
<span id="L5194" class="ln">  5194&nbsp;&nbsp;</span>	}
<span id="L5195" class="ln">  5195&nbsp;&nbsp;</span>	gp := getg()
<span id="L5196" class="ln">  5196&nbsp;&nbsp;</span>	gp.m.lockedExt++
<span id="L5197" class="ln">  5197&nbsp;&nbsp;</span>	if gp.m.lockedExt == 0 {
<span id="L5198" class="ln">  5198&nbsp;&nbsp;</span>		gp.m.lockedExt--
<span id="L5199" class="ln">  5199&nbsp;&nbsp;</span>		panic(&#34;LockOSThread nesting overflow&#34;)
<span id="L5200" class="ln">  5200&nbsp;&nbsp;</span>	}
<span id="L5201" class="ln">  5201&nbsp;&nbsp;</span>	dolockOSThread()
<span id="L5202" class="ln">  5202&nbsp;&nbsp;</span>}
<span id="L5203" class="ln">  5203&nbsp;&nbsp;</span>
<span id="L5204" class="ln">  5204&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L5205" class="ln">  5205&nbsp;&nbsp;</span>func lockOSThread() {
<span id="L5206" class="ln">  5206&nbsp;&nbsp;</span>	getg().m.lockedInt++
<span id="L5207" class="ln">  5207&nbsp;&nbsp;</span>	dolockOSThread()
<span id="L5208" class="ln">  5208&nbsp;&nbsp;</span>}
<span id="L5209" class="ln">  5209&nbsp;&nbsp;</span>
<span id="L5210" class="ln">  5210&nbsp;&nbsp;</span><span class="comment">// dounlockOSThread is called by UnlockOSThread and unlockOSThread below</span>
<span id="L5211" class="ln">  5211&nbsp;&nbsp;</span><span class="comment">// after they update m-&gt;locked. Do not allow preemption during this call,</span>
<span id="L5212" class="ln">  5212&nbsp;&nbsp;</span><span class="comment">// or else the m might be in different in this function than in the caller.</span>
<span id="L5213" class="ln">  5213&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5214" class="ln">  5214&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L5215" class="ln">  5215&nbsp;&nbsp;</span>func dounlockOSThread() {
<span id="L5216" class="ln">  5216&nbsp;&nbsp;</span>	if GOARCH == &#34;wasm&#34; {
<span id="L5217" class="ln">  5217&nbsp;&nbsp;</span>		return <span class="comment">// no threads on wasm yet</span>
<span id="L5218" class="ln">  5218&nbsp;&nbsp;</span>	}
<span id="L5219" class="ln">  5219&nbsp;&nbsp;</span>	gp := getg()
<span id="L5220" class="ln">  5220&nbsp;&nbsp;</span>	if gp.m.lockedInt != 0 || gp.m.lockedExt != 0 {
<span id="L5221" class="ln">  5221&nbsp;&nbsp;</span>		return
<span id="L5222" class="ln">  5222&nbsp;&nbsp;</span>	}
<span id="L5223" class="ln">  5223&nbsp;&nbsp;</span>	gp.m.lockedg = 0
<span id="L5224" class="ln">  5224&nbsp;&nbsp;</span>	gp.lockedm = 0
<span id="L5225" class="ln">  5225&nbsp;&nbsp;</span>}
<span id="L5226" class="ln">  5226&nbsp;&nbsp;</span>
<span id="L5227" class="ln">  5227&nbsp;&nbsp;</span><span class="comment">// UnlockOSThread undoes an earlier call to LockOSThread.</span>
<span id="L5228" class="ln">  5228&nbsp;&nbsp;</span><span class="comment">// If this drops the number of active LockOSThread calls on the</span>
<span id="L5229" class="ln">  5229&nbsp;&nbsp;</span><span class="comment">// calling goroutine to zero, it unwires the calling goroutine from</span>
<span id="L5230" class="ln">  5230&nbsp;&nbsp;</span><span class="comment">// its fixed operating system thread.</span>
<span id="L5231" class="ln">  5231&nbsp;&nbsp;</span><span class="comment">// If there are no active LockOSThread calls, this is a no-op.</span>
<span id="L5232" class="ln">  5232&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5233" class="ln">  5233&nbsp;&nbsp;</span><span class="comment">// Before calling UnlockOSThread, the caller must ensure that the OS</span>
<span id="L5234" class="ln">  5234&nbsp;&nbsp;</span><span class="comment">// thread is suitable for running other goroutines. If the caller made</span>
<span id="L5235" class="ln">  5235&nbsp;&nbsp;</span><span class="comment">// any permanent changes to the state of the thread that would affect</span>
<span id="L5236" class="ln">  5236&nbsp;&nbsp;</span><span class="comment">// other goroutines, it should not call this function and thus leave</span>
<span id="L5237" class="ln">  5237&nbsp;&nbsp;</span><span class="comment">// the goroutine locked to the OS thread until the goroutine (and</span>
<span id="L5238" class="ln">  5238&nbsp;&nbsp;</span><span class="comment">// hence the thread) exits.</span>
<span id="L5239" class="ln">  5239&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5240" class="ln">  5240&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L5241" class="ln">  5241&nbsp;&nbsp;</span>func UnlockOSThread() {
<span id="L5242" class="ln">  5242&nbsp;&nbsp;</span>	gp := getg()
<span id="L5243" class="ln">  5243&nbsp;&nbsp;</span>	if gp.m.lockedExt == 0 {
<span id="L5244" class="ln">  5244&nbsp;&nbsp;</span>		return
<span id="L5245" class="ln">  5245&nbsp;&nbsp;</span>	}
<span id="L5246" class="ln">  5246&nbsp;&nbsp;</span>	gp.m.lockedExt--
<span id="L5247" class="ln">  5247&nbsp;&nbsp;</span>	dounlockOSThread()
<span id="L5248" class="ln">  5248&nbsp;&nbsp;</span>}
<span id="L5249" class="ln">  5249&nbsp;&nbsp;</span>
<span id="L5250" class="ln">  5250&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L5251" class="ln">  5251&nbsp;&nbsp;</span>func unlockOSThread() {
<span id="L5252" class="ln">  5252&nbsp;&nbsp;</span>	gp := getg()
<span id="L5253" class="ln">  5253&nbsp;&nbsp;</span>	if gp.m.lockedInt == 0 {
<span id="L5254" class="ln">  5254&nbsp;&nbsp;</span>		systemstack(badunlockosthread)
<span id="L5255" class="ln">  5255&nbsp;&nbsp;</span>	}
<span id="L5256" class="ln">  5256&nbsp;&nbsp;</span>	gp.m.lockedInt--
<span id="L5257" class="ln">  5257&nbsp;&nbsp;</span>	dounlockOSThread()
<span id="L5258" class="ln">  5258&nbsp;&nbsp;</span>}
<span id="L5259" class="ln">  5259&nbsp;&nbsp;</span>
<span id="L5260" class="ln">  5260&nbsp;&nbsp;</span>func badunlockosthread() {
<span id="L5261" class="ln">  5261&nbsp;&nbsp;</span>	throw(&#34;runtime: internal error: misuse of lockOSThread/unlockOSThread&#34;)
<span id="L5262" class="ln">  5262&nbsp;&nbsp;</span>}
<span id="L5263" class="ln">  5263&nbsp;&nbsp;</span>
<span id="L5264" class="ln">  5264&nbsp;&nbsp;</span>func gcount() int32 {
<span id="L5265" class="ln">  5265&nbsp;&nbsp;</span>	n := int32(atomic.Loaduintptr(&amp;allglen)) - sched.gFree.n - sched.ngsys.Load()
<span id="L5266" class="ln">  5266&nbsp;&nbsp;</span>	for _, pp := range allp {
<span id="L5267" class="ln">  5267&nbsp;&nbsp;</span>		n -= pp.gFree.n
<span id="L5268" class="ln">  5268&nbsp;&nbsp;</span>	}
<span id="L5269" class="ln">  5269&nbsp;&nbsp;</span>
<span id="L5270" class="ln">  5270&nbsp;&nbsp;</span>	<span class="comment">// All these variables can be changed concurrently, so the result can be inconsistent.</span>
<span id="L5271" class="ln">  5271&nbsp;&nbsp;</span>	<span class="comment">// But at least the current goroutine is running.</span>
<span id="L5272" class="ln">  5272&nbsp;&nbsp;</span>	if n &lt; 1 {
<span id="L5273" class="ln">  5273&nbsp;&nbsp;</span>		n = 1
<span id="L5274" class="ln">  5274&nbsp;&nbsp;</span>	}
<span id="L5275" class="ln">  5275&nbsp;&nbsp;</span>	return n
<span id="L5276" class="ln">  5276&nbsp;&nbsp;</span>}
<span id="L5277" class="ln">  5277&nbsp;&nbsp;</span>
<span id="L5278" class="ln">  5278&nbsp;&nbsp;</span>func mcount() int32 {
<span id="L5279" class="ln">  5279&nbsp;&nbsp;</span>	return int32(sched.mnext - sched.nmfreed)
<span id="L5280" class="ln">  5280&nbsp;&nbsp;</span>}
<span id="L5281" class="ln">  5281&nbsp;&nbsp;</span>
<span id="L5282" class="ln">  5282&nbsp;&nbsp;</span>var prof struct {
<span id="L5283" class="ln">  5283&nbsp;&nbsp;</span>	signalLock atomic.Uint32
<span id="L5284" class="ln">  5284&nbsp;&nbsp;</span>
<span id="L5285" class="ln">  5285&nbsp;&nbsp;</span>	<span class="comment">// Must hold signalLock to write. Reads may be lock-free, but</span>
<span id="L5286" class="ln">  5286&nbsp;&nbsp;</span>	<span class="comment">// signalLock should be taken to synchronize with changes.</span>
<span id="L5287" class="ln">  5287&nbsp;&nbsp;</span>	hz atomic.Int32
<span id="L5288" class="ln">  5288&nbsp;&nbsp;</span>}
<span id="L5289" class="ln">  5289&nbsp;&nbsp;</span>
<span id="L5290" class="ln">  5290&nbsp;&nbsp;</span>func _System()                    { _System() }
<span id="L5291" class="ln">  5291&nbsp;&nbsp;</span>func _ExternalCode()              { _ExternalCode() }
<span id="L5292" class="ln">  5292&nbsp;&nbsp;</span>func _LostExternalCode()          { _LostExternalCode() }
<span id="L5293" class="ln">  5293&nbsp;&nbsp;</span>func _GC()                        { _GC() }
<span id="L5294" class="ln">  5294&nbsp;&nbsp;</span>func _LostSIGPROFDuringAtomic64() { _LostSIGPROFDuringAtomic64() }
<span id="L5295" class="ln">  5295&nbsp;&nbsp;</span>func _LostContendedRuntimeLock()  { _LostContendedRuntimeLock() }
<span id="L5296" class="ln">  5296&nbsp;&nbsp;</span>func _VDSO()                      { _VDSO() }
<span id="L5297" class="ln">  5297&nbsp;&nbsp;</span>
<span id="L5298" class="ln">  5298&nbsp;&nbsp;</span><span class="comment">// Called if we receive a SIGPROF signal.</span>
<span id="L5299" class="ln">  5299&nbsp;&nbsp;</span><span class="comment">// Called by the signal handler, may run during STW.</span>
<span id="L5300" class="ln">  5300&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5301" class="ln">  5301&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L5302" class="ln">  5302&nbsp;&nbsp;</span>func sigprof(pc, sp, lr uintptr, gp *g, mp *m) {
<span id="L5303" class="ln">  5303&nbsp;&nbsp;</span>	if prof.hz.Load() == 0 {
<span id="L5304" class="ln">  5304&nbsp;&nbsp;</span>		return
<span id="L5305" class="ln">  5305&nbsp;&nbsp;</span>	}
<span id="L5306" class="ln">  5306&nbsp;&nbsp;</span>
<span id="L5307" class="ln">  5307&nbsp;&nbsp;</span>	<span class="comment">// If mp.profilehz is 0, then profiling is not enabled for this thread.</span>
<span id="L5308" class="ln">  5308&nbsp;&nbsp;</span>	<span class="comment">// We must check this to avoid a deadlock between setcpuprofilerate</span>
<span id="L5309" class="ln">  5309&nbsp;&nbsp;</span>	<span class="comment">// and the call to cpuprof.add, below.</span>
<span id="L5310" class="ln">  5310&nbsp;&nbsp;</span>	if mp != nil &amp;&amp; mp.profilehz == 0 {
<span id="L5311" class="ln">  5311&nbsp;&nbsp;</span>		return
<span id="L5312" class="ln">  5312&nbsp;&nbsp;</span>	}
<span id="L5313" class="ln">  5313&nbsp;&nbsp;</span>
<span id="L5314" class="ln">  5314&nbsp;&nbsp;</span>	<span class="comment">// On mips{,le}/arm, 64bit atomics are emulated with spinlocks, in</span>
<span id="L5315" class="ln">  5315&nbsp;&nbsp;</span>	<span class="comment">// runtime/internal/atomic. If SIGPROF arrives while the program is inside</span>
<span id="L5316" class="ln">  5316&nbsp;&nbsp;</span>	<span class="comment">// the critical section, it creates a deadlock (when writing the sample).</span>
<span id="L5317" class="ln">  5317&nbsp;&nbsp;</span>	<span class="comment">// As a workaround, create a counter of SIGPROFs while in critical section</span>
<span id="L5318" class="ln">  5318&nbsp;&nbsp;</span>	<span class="comment">// to store the count, and pass it to sigprof.add() later when SIGPROF is</span>
<span id="L5319" class="ln">  5319&nbsp;&nbsp;</span>	<span class="comment">// received from somewhere else (with _LostSIGPROFDuringAtomic64 as pc).</span>
<span id="L5320" class="ln">  5320&nbsp;&nbsp;</span>	if GOARCH == &#34;mips&#34; || GOARCH == &#34;mipsle&#34; || GOARCH == &#34;arm&#34; {
<span id="L5321" class="ln">  5321&nbsp;&nbsp;</span>		if f := findfunc(pc); f.valid() {
<span id="L5322" class="ln">  5322&nbsp;&nbsp;</span>			if hasPrefix(funcname(f), &#34;runtime/internal/atomic&#34;) {
<span id="L5323" class="ln">  5323&nbsp;&nbsp;</span>				cpuprof.lostAtomic++
<span id="L5324" class="ln">  5324&nbsp;&nbsp;</span>				return
<span id="L5325" class="ln">  5325&nbsp;&nbsp;</span>			}
<span id="L5326" class="ln">  5326&nbsp;&nbsp;</span>		}
<span id="L5327" class="ln">  5327&nbsp;&nbsp;</span>		if GOARCH == &#34;arm&#34; &amp;&amp; goarm &lt; 7 &amp;&amp; GOOS == &#34;linux&#34; &amp;&amp; pc&amp;0xffff0000 == 0xffff0000 {
<span id="L5328" class="ln">  5328&nbsp;&nbsp;</span>			<span class="comment">// runtime/internal/atomic functions call into kernel</span>
<span id="L5329" class="ln">  5329&nbsp;&nbsp;</span>			<span class="comment">// helpers on arm &lt; 7. See</span>
<span id="L5330" class="ln">  5330&nbsp;&nbsp;</span>			<span class="comment">// runtime/internal/atomic/sys_linux_arm.s.</span>
<span id="L5331" class="ln">  5331&nbsp;&nbsp;</span>			cpuprof.lostAtomic++
<span id="L5332" class="ln">  5332&nbsp;&nbsp;</span>			return
<span id="L5333" class="ln">  5333&nbsp;&nbsp;</span>		}
<span id="L5334" class="ln">  5334&nbsp;&nbsp;</span>	}
<span id="L5335" class="ln">  5335&nbsp;&nbsp;</span>
<span id="L5336" class="ln">  5336&nbsp;&nbsp;</span>	<span class="comment">// Profiling runs concurrently with GC, so it must not allocate.</span>
<span id="L5337" class="ln">  5337&nbsp;&nbsp;</span>	<span class="comment">// Set a trap in case the code does allocate.</span>
<span id="L5338" class="ln">  5338&nbsp;&nbsp;</span>	<span class="comment">// Note that on windows, one thread takes profiles of all the</span>
<span id="L5339" class="ln">  5339&nbsp;&nbsp;</span>	<span class="comment">// other threads, so mp is usually not getg().m.</span>
<span id="L5340" class="ln">  5340&nbsp;&nbsp;</span>	<span class="comment">// In fact mp may not even be stopped.</span>
<span id="L5341" class="ln">  5341&nbsp;&nbsp;</span>	<span class="comment">// See golang.org/issue/17165.</span>
<span id="L5342" class="ln">  5342&nbsp;&nbsp;</span>	getg().m.mallocing++
<span id="L5343" class="ln">  5343&nbsp;&nbsp;</span>
<span id="L5344" class="ln">  5344&nbsp;&nbsp;</span>	var u unwinder
<span id="L5345" class="ln">  5345&nbsp;&nbsp;</span>	var stk [maxCPUProfStack]uintptr
<span id="L5346" class="ln">  5346&nbsp;&nbsp;</span>	n := 0
<span id="L5347" class="ln">  5347&nbsp;&nbsp;</span>	if mp.ncgo &gt; 0 &amp;&amp; mp.curg != nil &amp;&amp; mp.curg.syscallpc != 0 &amp;&amp; mp.curg.syscallsp != 0 {
<span id="L5348" class="ln">  5348&nbsp;&nbsp;</span>		cgoOff := 0
<span id="L5349" class="ln">  5349&nbsp;&nbsp;</span>		<span class="comment">// Check cgoCallersUse to make sure that we are not</span>
<span id="L5350" class="ln">  5350&nbsp;&nbsp;</span>		<span class="comment">// interrupting other code that is fiddling with</span>
<span id="L5351" class="ln">  5351&nbsp;&nbsp;</span>		<span class="comment">// cgoCallers.  We are running in a signal handler</span>
<span id="L5352" class="ln">  5352&nbsp;&nbsp;</span>		<span class="comment">// with all signals blocked, so we don&#39;t have to worry</span>
<span id="L5353" class="ln">  5353&nbsp;&nbsp;</span>		<span class="comment">// about any other code interrupting us.</span>
<span id="L5354" class="ln">  5354&nbsp;&nbsp;</span>		if mp.cgoCallersUse.Load() == 0 &amp;&amp; mp.cgoCallers != nil &amp;&amp; mp.cgoCallers[0] != 0 {
<span id="L5355" class="ln">  5355&nbsp;&nbsp;</span>			for cgoOff &lt; len(mp.cgoCallers) &amp;&amp; mp.cgoCallers[cgoOff] != 0 {
<span id="L5356" class="ln">  5356&nbsp;&nbsp;</span>				cgoOff++
<span id="L5357" class="ln">  5357&nbsp;&nbsp;</span>			}
<span id="L5358" class="ln">  5358&nbsp;&nbsp;</span>			n += copy(stk[:], mp.cgoCallers[:cgoOff])
<span id="L5359" class="ln">  5359&nbsp;&nbsp;</span>			mp.cgoCallers[0] = 0
<span id="L5360" class="ln">  5360&nbsp;&nbsp;</span>		}
<span id="L5361" class="ln">  5361&nbsp;&nbsp;</span>
<span id="L5362" class="ln">  5362&nbsp;&nbsp;</span>		<span class="comment">// Collect Go stack that leads to the cgo call.</span>
<span id="L5363" class="ln">  5363&nbsp;&nbsp;</span>		u.initAt(mp.curg.syscallpc, mp.curg.syscallsp, 0, mp.curg, unwindSilentErrors)
<span id="L5364" class="ln">  5364&nbsp;&nbsp;</span>	} else if usesLibcall() &amp;&amp; mp.libcallg != 0 &amp;&amp; mp.libcallpc != 0 &amp;&amp; mp.libcallsp != 0 {
<span id="L5365" class="ln">  5365&nbsp;&nbsp;</span>		<span class="comment">// Libcall, i.e. runtime syscall on windows.</span>
<span id="L5366" class="ln">  5366&nbsp;&nbsp;</span>		<span class="comment">// Collect Go stack that leads to the call.</span>
<span id="L5367" class="ln">  5367&nbsp;&nbsp;</span>		u.initAt(mp.libcallpc, mp.libcallsp, 0, mp.libcallg.ptr(), unwindSilentErrors)
<span id="L5368" class="ln">  5368&nbsp;&nbsp;</span>	} else if mp != nil &amp;&amp; mp.vdsoSP != 0 {
<span id="L5369" class="ln">  5369&nbsp;&nbsp;</span>		<span class="comment">// VDSO call, e.g. nanotime1 on Linux.</span>
<span id="L5370" class="ln">  5370&nbsp;&nbsp;</span>		<span class="comment">// Collect Go stack that leads to the call.</span>
<span id="L5371" class="ln">  5371&nbsp;&nbsp;</span>		u.initAt(mp.vdsoPC, mp.vdsoSP, 0, gp, unwindSilentErrors|unwindJumpStack)
<span id="L5372" class="ln">  5372&nbsp;&nbsp;</span>	} else {
<span id="L5373" class="ln">  5373&nbsp;&nbsp;</span>		u.initAt(pc, sp, lr, gp, unwindSilentErrors|unwindTrap|unwindJumpStack)
<span id="L5374" class="ln">  5374&nbsp;&nbsp;</span>	}
<span id="L5375" class="ln">  5375&nbsp;&nbsp;</span>	n += tracebackPCs(&amp;u, 0, stk[n:])
<span id="L5376" class="ln">  5376&nbsp;&nbsp;</span>
<span id="L5377" class="ln">  5377&nbsp;&nbsp;</span>	if n &lt;= 0 {
<span id="L5378" class="ln">  5378&nbsp;&nbsp;</span>		<span class="comment">// Normal traceback is impossible or has failed.</span>
<span id="L5379" class="ln">  5379&nbsp;&nbsp;</span>		<span class="comment">// Account it against abstract &#34;System&#34; or &#34;GC&#34;.</span>
<span id="L5380" class="ln">  5380&nbsp;&nbsp;</span>		n = 2
<span id="L5381" class="ln">  5381&nbsp;&nbsp;</span>		if inVDSOPage(pc) {
<span id="L5382" class="ln">  5382&nbsp;&nbsp;</span>			pc = abi.FuncPCABIInternal(_VDSO) + sys.PCQuantum
<span id="L5383" class="ln">  5383&nbsp;&nbsp;</span>		} else if pc &gt; firstmoduledata.etext {
<span id="L5384" class="ln">  5384&nbsp;&nbsp;</span>			<span class="comment">// &#34;ExternalCode&#34; is better than &#34;etext&#34;.</span>
<span id="L5385" class="ln">  5385&nbsp;&nbsp;</span>			pc = abi.FuncPCABIInternal(_ExternalCode) + sys.PCQuantum
<span id="L5386" class="ln">  5386&nbsp;&nbsp;</span>		}
<span id="L5387" class="ln">  5387&nbsp;&nbsp;</span>		stk[0] = pc
<span id="L5388" class="ln">  5388&nbsp;&nbsp;</span>		if mp.preemptoff != &#34;&#34; {
<span id="L5389" class="ln">  5389&nbsp;&nbsp;</span>			stk[1] = abi.FuncPCABIInternal(_GC) + sys.PCQuantum
<span id="L5390" class="ln">  5390&nbsp;&nbsp;</span>		} else {
<span id="L5391" class="ln">  5391&nbsp;&nbsp;</span>			stk[1] = abi.FuncPCABIInternal(_System) + sys.PCQuantum
<span id="L5392" class="ln">  5392&nbsp;&nbsp;</span>		}
<span id="L5393" class="ln">  5393&nbsp;&nbsp;</span>	}
<span id="L5394" class="ln">  5394&nbsp;&nbsp;</span>
<span id="L5395" class="ln">  5395&nbsp;&nbsp;</span>	if prof.hz.Load() != 0 {
<span id="L5396" class="ln">  5396&nbsp;&nbsp;</span>		<span class="comment">// Note: it can happen on Windows that we interrupted a system thread</span>
<span id="L5397" class="ln">  5397&nbsp;&nbsp;</span>		<span class="comment">// with no g, so gp could nil. The other nil checks are done out of</span>
<span id="L5398" class="ln">  5398&nbsp;&nbsp;</span>		<span class="comment">// caution, but not expected to be nil in practice.</span>
<span id="L5399" class="ln">  5399&nbsp;&nbsp;</span>		var tagPtr *unsafe.Pointer
<span id="L5400" class="ln">  5400&nbsp;&nbsp;</span>		if gp != nil &amp;&amp; gp.m != nil &amp;&amp; gp.m.curg != nil {
<span id="L5401" class="ln">  5401&nbsp;&nbsp;</span>			tagPtr = &amp;gp.m.curg.labels
<span id="L5402" class="ln">  5402&nbsp;&nbsp;</span>		}
<span id="L5403" class="ln">  5403&nbsp;&nbsp;</span>		cpuprof.add(tagPtr, stk[:n])
<span id="L5404" class="ln">  5404&nbsp;&nbsp;</span>
<span id="L5405" class="ln">  5405&nbsp;&nbsp;</span>		gprof := gp
<span id="L5406" class="ln">  5406&nbsp;&nbsp;</span>		var mp *m
<span id="L5407" class="ln">  5407&nbsp;&nbsp;</span>		var pp *p
<span id="L5408" class="ln">  5408&nbsp;&nbsp;</span>		if gp != nil &amp;&amp; gp.m != nil {
<span id="L5409" class="ln">  5409&nbsp;&nbsp;</span>			if gp.m.curg != nil {
<span id="L5410" class="ln">  5410&nbsp;&nbsp;</span>				gprof = gp.m.curg
<span id="L5411" class="ln">  5411&nbsp;&nbsp;</span>			}
<span id="L5412" class="ln">  5412&nbsp;&nbsp;</span>			mp = gp.m
<span id="L5413" class="ln">  5413&nbsp;&nbsp;</span>			pp = gp.m.p.ptr()
<span id="L5414" class="ln">  5414&nbsp;&nbsp;</span>		}
<span id="L5415" class="ln">  5415&nbsp;&nbsp;</span>		traceCPUSample(gprof, mp, pp, stk[:n])
<span id="L5416" class="ln">  5416&nbsp;&nbsp;</span>	}
<span id="L5417" class="ln">  5417&nbsp;&nbsp;</span>	getg().m.mallocing--
<span id="L5418" class="ln">  5418&nbsp;&nbsp;</span>}
<span id="L5419" class="ln">  5419&nbsp;&nbsp;</span>
<span id="L5420" class="ln">  5420&nbsp;&nbsp;</span><span class="comment">// setcpuprofilerate sets the CPU profiling rate to hz times per second.</span>
<span id="L5421" class="ln">  5421&nbsp;&nbsp;</span><span class="comment">// If hz &lt;= 0, setcpuprofilerate turns off CPU profiling.</span>
<span id="L5422" class="ln">  5422&nbsp;&nbsp;</span>func setcpuprofilerate(hz int32) {
<span id="L5423" class="ln">  5423&nbsp;&nbsp;</span>	<span class="comment">// Force sane arguments.</span>
<span id="L5424" class="ln">  5424&nbsp;&nbsp;</span>	if hz &lt; 0 {
<span id="L5425" class="ln">  5425&nbsp;&nbsp;</span>		hz = 0
<span id="L5426" class="ln">  5426&nbsp;&nbsp;</span>	}
<span id="L5427" class="ln">  5427&nbsp;&nbsp;</span>
<span id="L5428" class="ln">  5428&nbsp;&nbsp;</span>	<span class="comment">// Disable preemption, otherwise we can be rescheduled to another thread</span>
<span id="L5429" class="ln">  5429&nbsp;&nbsp;</span>	<span class="comment">// that has profiling enabled.</span>
<span id="L5430" class="ln">  5430&nbsp;&nbsp;</span>	gp := getg()
<span id="L5431" class="ln">  5431&nbsp;&nbsp;</span>	gp.m.locks++
<span id="L5432" class="ln">  5432&nbsp;&nbsp;</span>
<span id="L5433" class="ln">  5433&nbsp;&nbsp;</span>	<span class="comment">// Stop profiler on this thread so that it is safe to lock prof.</span>
<span id="L5434" class="ln">  5434&nbsp;&nbsp;</span>	<span class="comment">// if a profiling signal came in while we had prof locked,</span>
<span id="L5435" class="ln">  5435&nbsp;&nbsp;</span>	<span class="comment">// it would deadlock.</span>
<span id="L5436" class="ln">  5436&nbsp;&nbsp;</span>	setThreadCPUProfiler(0)
<span id="L5437" class="ln">  5437&nbsp;&nbsp;</span>
<span id="L5438" class="ln">  5438&nbsp;&nbsp;</span>	for !prof.signalLock.CompareAndSwap(0, 1) {
<span id="L5439" class="ln">  5439&nbsp;&nbsp;</span>		osyield()
<span id="L5440" class="ln">  5440&nbsp;&nbsp;</span>	}
<span id="L5441" class="ln">  5441&nbsp;&nbsp;</span>	if prof.hz.Load() != hz {
<span id="L5442" class="ln">  5442&nbsp;&nbsp;</span>		setProcessCPUProfiler(hz)
<span id="L5443" class="ln">  5443&nbsp;&nbsp;</span>		prof.hz.Store(hz)
<span id="L5444" class="ln">  5444&nbsp;&nbsp;</span>	}
<span id="L5445" class="ln">  5445&nbsp;&nbsp;</span>	prof.signalLock.Store(0)
<span id="L5446" class="ln">  5446&nbsp;&nbsp;</span>
<span id="L5447" class="ln">  5447&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L5448" class="ln">  5448&nbsp;&nbsp;</span>	sched.profilehz = hz
<span id="L5449" class="ln">  5449&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L5450" class="ln">  5450&nbsp;&nbsp;</span>
<span id="L5451" class="ln">  5451&nbsp;&nbsp;</span>	if hz != 0 {
<span id="L5452" class="ln">  5452&nbsp;&nbsp;</span>		setThreadCPUProfiler(hz)
<span id="L5453" class="ln">  5453&nbsp;&nbsp;</span>	}
<span id="L5454" class="ln">  5454&nbsp;&nbsp;</span>
<span id="L5455" class="ln">  5455&nbsp;&nbsp;</span>	gp.m.locks--
<span id="L5456" class="ln">  5456&nbsp;&nbsp;</span>}
<span id="L5457" class="ln">  5457&nbsp;&nbsp;</span>
<span id="L5458" class="ln">  5458&nbsp;&nbsp;</span><span class="comment">// init initializes pp, which may be a freshly allocated p or a</span>
<span id="L5459" class="ln">  5459&nbsp;&nbsp;</span><span class="comment">// previously destroyed p, and transitions it to status _Pgcstop.</span>
<span id="L5460" class="ln">  5460&nbsp;&nbsp;</span>func (pp *p) init(id int32) {
<span id="L5461" class="ln">  5461&nbsp;&nbsp;</span>	pp.id = id
<span id="L5462" class="ln">  5462&nbsp;&nbsp;</span>	pp.status = _Pgcstop
<span id="L5463" class="ln">  5463&nbsp;&nbsp;</span>	pp.sudogcache = pp.sudogbuf[:0]
<span id="L5464" class="ln">  5464&nbsp;&nbsp;</span>	pp.deferpool = pp.deferpoolbuf[:0]
<span id="L5465" class="ln">  5465&nbsp;&nbsp;</span>	pp.wbBuf.reset()
<span id="L5466" class="ln">  5466&nbsp;&nbsp;</span>	if pp.mcache == nil {
<span id="L5467" class="ln">  5467&nbsp;&nbsp;</span>		if id == 0 {
<span id="L5468" class="ln">  5468&nbsp;&nbsp;</span>			if mcache0 == nil {
<span id="L5469" class="ln">  5469&nbsp;&nbsp;</span>				throw(&#34;missing mcache?&#34;)
<span id="L5470" class="ln">  5470&nbsp;&nbsp;</span>			}
<span id="L5471" class="ln">  5471&nbsp;&nbsp;</span>			<span class="comment">// Use the bootstrap mcache0. Only one P will get</span>
<span id="L5472" class="ln">  5472&nbsp;&nbsp;</span>			<span class="comment">// mcache0: the one with ID 0.</span>
<span id="L5473" class="ln">  5473&nbsp;&nbsp;</span>			pp.mcache = mcache0
<span id="L5474" class="ln">  5474&nbsp;&nbsp;</span>		} else {
<span id="L5475" class="ln">  5475&nbsp;&nbsp;</span>			pp.mcache = allocmcache()
<span id="L5476" class="ln">  5476&nbsp;&nbsp;</span>		}
<span id="L5477" class="ln">  5477&nbsp;&nbsp;</span>	}
<span id="L5478" class="ln">  5478&nbsp;&nbsp;</span>	if raceenabled &amp;&amp; pp.raceprocctx == 0 {
<span id="L5479" class="ln">  5479&nbsp;&nbsp;</span>		if id == 0 {
<span id="L5480" class="ln">  5480&nbsp;&nbsp;</span>			pp.raceprocctx = raceprocctx0
<span id="L5481" class="ln">  5481&nbsp;&nbsp;</span>			raceprocctx0 = 0 <span class="comment">// bootstrap</span>
<span id="L5482" class="ln">  5482&nbsp;&nbsp;</span>		} else {
<span id="L5483" class="ln">  5483&nbsp;&nbsp;</span>			pp.raceprocctx = raceproccreate()
<span id="L5484" class="ln">  5484&nbsp;&nbsp;</span>		}
<span id="L5485" class="ln">  5485&nbsp;&nbsp;</span>	}
<span id="L5486" class="ln">  5486&nbsp;&nbsp;</span>	lockInit(&amp;pp.timersLock, lockRankTimers)
<span id="L5487" class="ln">  5487&nbsp;&nbsp;</span>
<span id="L5488" class="ln">  5488&nbsp;&nbsp;</span>	<span class="comment">// This P may get timers when it starts running. Set the mask here</span>
<span id="L5489" class="ln">  5489&nbsp;&nbsp;</span>	<span class="comment">// since the P may not go through pidleget (notably P 0 on startup).</span>
<span id="L5490" class="ln">  5490&nbsp;&nbsp;</span>	timerpMask.set(id)
<span id="L5491" class="ln">  5491&nbsp;&nbsp;</span>	<span class="comment">// Similarly, we may not go through pidleget before this P starts</span>
<span id="L5492" class="ln">  5492&nbsp;&nbsp;</span>	<span class="comment">// running if it is P 0 on startup.</span>
<span id="L5493" class="ln">  5493&nbsp;&nbsp;</span>	idlepMask.clear(id)
<span id="L5494" class="ln">  5494&nbsp;&nbsp;</span>}
<span id="L5495" class="ln">  5495&nbsp;&nbsp;</span>
<span id="L5496" class="ln">  5496&nbsp;&nbsp;</span><span class="comment">// destroy releases all of the resources associated with pp and</span>
<span id="L5497" class="ln">  5497&nbsp;&nbsp;</span><span class="comment">// transitions it to status _Pdead.</span>
<span id="L5498" class="ln">  5498&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5499" class="ln">  5499&nbsp;&nbsp;</span><span class="comment">// sched.lock must be held and the world must be stopped.</span>
<span id="L5500" class="ln">  5500&nbsp;&nbsp;</span>func (pp *p) destroy() {
<span id="L5501" class="ln">  5501&nbsp;&nbsp;</span>	assertLockHeld(&amp;sched.lock)
<span id="L5502" class="ln">  5502&nbsp;&nbsp;</span>	assertWorldStopped()
<span id="L5503" class="ln">  5503&nbsp;&nbsp;</span>
<span id="L5504" class="ln">  5504&nbsp;&nbsp;</span>	<span class="comment">// Move all runnable goroutines to the global queue</span>
<span id="L5505" class="ln">  5505&nbsp;&nbsp;</span>	for pp.runqhead != pp.runqtail {
<span id="L5506" class="ln">  5506&nbsp;&nbsp;</span>		<span class="comment">// Pop from tail of local queue</span>
<span id="L5507" class="ln">  5507&nbsp;&nbsp;</span>		pp.runqtail--
<span id="L5508" class="ln">  5508&nbsp;&nbsp;</span>		gp := pp.runq[pp.runqtail%uint32(len(pp.runq))].ptr()
<span id="L5509" class="ln">  5509&nbsp;&nbsp;</span>		<span class="comment">// Push onto head of global queue</span>
<span id="L5510" class="ln">  5510&nbsp;&nbsp;</span>		globrunqputhead(gp)
<span id="L5511" class="ln">  5511&nbsp;&nbsp;</span>	}
<span id="L5512" class="ln">  5512&nbsp;&nbsp;</span>	if pp.runnext != 0 {
<span id="L5513" class="ln">  5513&nbsp;&nbsp;</span>		globrunqputhead(pp.runnext.ptr())
<span id="L5514" class="ln">  5514&nbsp;&nbsp;</span>		pp.runnext = 0
<span id="L5515" class="ln">  5515&nbsp;&nbsp;</span>	}
<span id="L5516" class="ln">  5516&nbsp;&nbsp;</span>	if len(pp.timers) &gt; 0 {
<span id="L5517" class="ln">  5517&nbsp;&nbsp;</span>		plocal := getg().m.p.ptr()
<span id="L5518" class="ln">  5518&nbsp;&nbsp;</span>		<span class="comment">// The world is stopped, but we acquire timersLock to</span>
<span id="L5519" class="ln">  5519&nbsp;&nbsp;</span>		<span class="comment">// protect against sysmon calling timeSleepUntil.</span>
<span id="L5520" class="ln">  5520&nbsp;&nbsp;</span>		<span class="comment">// This is the only case where we hold the timersLock of</span>
<span id="L5521" class="ln">  5521&nbsp;&nbsp;</span>		<span class="comment">// more than one P, so there are no deadlock concerns.</span>
<span id="L5522" class="ln">  5522&nbsp;&nbsp;</span>		lock(&amp;plocal.timersLock)
<span id="L5523" class="ln">  5523&nbsp;&nbsp;</span>		lock(&amp;pp.timersLock)
<span id="L5524" class="ln">  5524&nbsp;&nbsp;</span>		moveTimers(plocal, pp.timers)
<span id="L5525" class="ln">  5525&nbsp;&nbsp;</span>		pp.timers = nil
<span id="L5526" class="ln">  5526&nbsp;&nbsp;</span>		pp.numTimers.Store(0)
<span id="L5527" class="ln">  5527&nbsp;&nbsp;</span>		pp.deletedTimers.Store(0)
<span id="L5528" class="ln">  5528&nbsp;&nbsp;</span>		pp.timer0When.Store(0)
<span id="L5529" class="ln">  5529&nbsp;&nbsp;</span>		unlock(&amp;pp.timersLock)
<span id="L5530" class="ln">  5530&nbsp;&nbsp;</span>		unlock(&amp;plocal.timersLock)
<span id="L5531" class="ln">  5531&nbsp;&nbsp;</span>	}
<span id="L5532" class="ln">  5532&nbsp;&nbsp;</span>	<span class="comment">// Flush p&#39;s write barrier buffer.</span>
<span id="L5533" class="ln">  5533&nbsp;&nbsp;</span>	if gcphase != _GCoff {
<span id="L5534" class="ln">  5534&nbsp;&nbsp;</span>		wbBufFlush1(pp)
<span id="L5535" class="ln">  5535&nbsp;&nbsp;</span>		pp.gcw.dispose()
<span id="L5536" class="ln">  5536&nbsp;&nbsp;</span>	}
<span id="L5537" class="ln">  5537&nbsp;&nbsp;</span>	for i := range pp.sudogbuf {
<span id="L5538" class="ln">  5538&nbsp;&nbsp;</span>		pp.sudogbuf[i] = nil
<span id="L5539" class="ln">  5539&nbsp;&nbsp;</span>	}
<span id="L5540" class="ln">  5540&nbsp;&nbsp;</span>	pp.sudogcache = pp.sudogbuf[:0]
<span id="L5541" class="ln">  5541&nbsp;&nbsp;</span>	pp.pinnerCache = nil
<span id="L5542" class="ln">  5542&nbsp;&nbsp;</span>	for j := range pp.deferpoolbuf {
<span id="L5543" class="ln">  5543&nbsp;&nbsp;</span>		pp.deferpoolbuf[j] = nil
<span id="L5544" class="ln">  5544&nbsp;&nbsp;</span>	}
<span id="L5545" class="ln">  5545&nbsp;&nbsp;</span>	pp.deferpool = pp.deferpoolbuf[:0]
<span id="L5546" class="ln">  5546&nbsp;&nbsp;</span>	systemstack(func() {
<span id="L5547" class="ln">  5547&nbsp;&nbsp;</span>		for i := 0; i &lt; pp.mspancache.len; i++ {
<span id="L5548" class="ln">  5548&nbsp;&nbsp;</span>			<span class="comment">// Safe to call since the world is stopped.</span>
<span id="L5549" class="ln">  5549&nbsp;&nbsp;</span>			mheap_.spanalloc.free(unsafe.Pointer(pp.mspancache.buf[i]))
<span id="L5550" class="ln">  5550&nbsp;&nbsp;</span>		}
<span id="L5551" class="ln">  5551&nbsp;&nbsp;</span>		pp.mspancache.len = 0
<span id="L5552" class="ln">  5552&nbsp;&nbsp;</span>		lock(&amp;mheap_.lock)
<span id="L5553" class="ln">  5553&nbsp;&nbsp;</span>		pp.pcache.flush(&amp;mheap_.pages)
<span id="L5554" class="ln">  5554&nbsp;&nbsp;</span>		unlock(&amp;mheap_.lock)
<span id="L5555" class="ln">  5555&nbsp;&nbsp;</span>	})
<span id="L5556" class="ln">  5556&nbsp;&nbsp;</span>	freemcache(pp.mcache)
<span id="L5557" class="ln">  5557&nbsp;&nbsp;</span>	pp.mcache = nil
<span id="L5558" class="ln">  5558&nbsp;&nbsp;</span>	gfpurge(pp)
<span id="L5559" class="ln">  5559&nbsp;&nbsp;</span>	traceProcFree(pp)
<span id="L5560" class="ln">  5560&nbsp;&nbsp;</span>	if raceenabled {
<span id="L5561" class="ln">  5561&nbsp;&nbsp;</span>		if pp.timerRaceCtx != 0 {
<span id="L5562" class="ln">  5562&nbsp;&nbsp;</span>			<span class="comment">// The race detector code uses a callback to fetch</span>
<span id="L5563" class="ln">  5563&nbsp;&nbsp;</span>			<span class="comment">// the proc context, so arrange for that callback</span>
<span id="L5564" class="ln">  5564&nbsp;&nbsp;</span>			<span class="comment">// to see the right thing.</span>
<span id="L5565" class="ln">  5565&nbsp;&nbsp;</span>			<span class="comment">// This hack only works because we are the only</span>
<span id="L5566" class="ln">  5566&nbsp;&nbsp;</span>			<span class="comment">// thread running.</span>
<span id="L5567" class="ln">  5567&nbsp;&nbsp;</span>			mp := getg().m
<span id="L5568" class="ln">  5568&nbsp;&nbsp;</span>			phold := mp.p.ptr()
<span id="L5569" class="ln">  5569&nbsp;&nbsp;</span>			mp.p.set(pp)
<span id="L5570" class="ln">  5570&nbsp;&nbsp;</span>
<span id="L5571" class="ln">  5571&nbsp;&nbsp;</span>			racectxend(pp.timerRaceCtx)
<span id="L5572" class="ln">  5572&nbsp;&nbsp;</span>			pp.timerRaceCtx = 0
<span id="L5573" class="ln">  5573&nbsp;&nbsp;</span>
<span id="L5574" class="ln">  5574&nbsp;&nbsp;</span>			mp.p.set(phold)
<span id="L5575" class="ln">  5575&nbsp;&nbsp;</span>		}
<span id="L5576" class="ln">  5576&nbsp;&nbsp;</span>		raceprocdestroy(pp.raceprocctx)
<span id="L5577" class="ln">  5577&nbsp;&nbsp;</span>		pp.raceprocctx = 0
<span id="L5578" class="ln">  5578&nbsp;&nbsp;</span>	}
<span id="L5579" class="ln">  5579&nbsp;&nbsp;</span>	pp.gcAssistTime = 0
<span id="L5580" class="ln">  5580&nbsp;&nbsp;</span>	pp.status = _Pdead
<span id="L5581" class="ln">  5581&nbsp;&nbsp;</span>}
<span id="L5582" class="ln">  5582&nbsp;&nbsp;</span>
<span id="L5583" class="ln">  5583&nbsp;&nbsp;</span><span class="comment">// Change number of processors.</span>
<span id="L5584" class="ln">  5584&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5585" class="ln">  5585&nbsp;&nbsp;</span><span class="comment">// sched.lock must be held, and the world must be stopped.</span>
<span id="L5586" class="ln">  5586&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5587" class="ln">  5587&nbsp;&nbsp;</span><span class="comment">// gcworkbufs must not be being modified by either the GC or the write barrier</span>
<span id="L5588" class="ln">  5588&nbsp;&nbsp;</span><span class="comment">// code, so the GC must not be running if the number of Ps actually changes.</span>
<span id="L5589" class="ln">  5589&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5590" class="ln">  5590&nbsp;&nbsp;</span><span class="comment">// Returns list of Ps with local work, they need to be scheduled by the caller.</span>
<span id="L5591" class="ln">  5591&nbsp;&nbsp;</span>func procresize(nprocs int32) *p {
<span id="L5592" class="ln">  5592&nbsp;&nbsp;</span>	assertLockHeld(&amp;sched.lock)
<span id="L5593" class="ln">  5593&nbsp;&nbsp;</span>	assertWorldStopped()
<span id="L5594" class="ln">  5594&nbsp;&nbsp;</span>
<span id="L5595" class="ln">  5595&nbsp;&nbsp;</span>	old := gomaxprocs
<span id="L5596" class="ln">  5596&nbsp;&nbsp;</span>	if old &lt; 0 || nprocs &lt;= 0 {
<span id="L5597" class="ln">  5597&nbsp;&nbsp;</span>		throw(&#34;procresize: invalid arg&#34;)
<span id="L5598" class="ln">  5598&nbsp;&nbsp;</span>	}
<span id="L5599" class="ln">  5599&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L5600" class="ln">  5600&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L5601" class="ln">  5601&nbsp;&nbsp;</span>		trace.Gomaxprocs(nprocs)
<span id="L5602" class="ln">  5602&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L5603" class="ln">  5603&nbsp;&nbsp;</span>	}
<span id="L5604" class="ln">  5604&nbsp;&nbsp;</span>
<span id="L5605" class="ln">  5605&nbsp;&nbsp;</span>	<span class="comment">// update statistics</span>
<span id="L5606" class="ln">  5606&nbsp;&nbsp;</span>	now := nanotime()
<span id="L5607" class="ln">  5607&nbsp;&nbsp;</span>	if sched.procresizetime != 0 {
<span id="L5608" class="ln">  5608&nbsp;&nbsp;</span>		sched.totaltime += int64(old) * (now - sched.procresizetime)
<span id="L5609" class="ln">  5609&nbsp;&nbsp;</span>	}
<span id="L5610" class="ln">  5610&nbsp;&nbsp;</span>	sched.procresizetime = now
<span id="L5611" class="ln">  5611&nbsp;&nbsp;</span>
<span id="L5612" class="ln">  5612&nbsp;&nbsp;</span>	maskWords := (nprocs + 31) / 32
<span id="L5613" class="ln">  5613&nbsp;&nbsp;</span>
<span id="L5614" class="ln">  5614&nbsp;&nbsp;</span>	<span class="comment">// Grow allp if necessary.</span>
<span id="L5615" class="ln">  5615&nbsp;&nbsp;</span>	if nprocs &gt; int32(len(allp)) {
<span id="L5616" class="ln">  5616&nbsp;&nbsp;</span>		<span class="comment">// Synchronize with retake, which could be running</span>
<span id="L5617" class="ln">  5617&nbsp;&nbsp;</span>		<span class="comment">// concurrently since it doesn&#39;t run on a P.</span>
<span id="L5618" class="ln">  5618&nbsp;&nbsp;</span>		lock(&amp;allpLock)
<span id="L5619" class="ln">  5619&nbsp;&nbsp;</span>		if nprocs &lt;= int32(cap(allp)) {
<span id="L5620" class="ln">  5620&nbsp;&nbsp;</span>			allp = allp[:nprocs]
<span id="L5621" class="ln">  5621&nbsp;&nbsp;</span>		} else {
<span id="L5622" class="ln">  5622&nbsp;&nbsp;</span>			nallp := make([]*p, nprocs)
<span id="L5623" class="ln">  5623&nbsp;&nbsp;</span>			<span class="comment">// Copy everything up to allp&#39;s cap so we</span>
<span id="L5624" class="ln">  5624&nbsp;&nbsp;</span>			<span class="comment">// never lose old allocated Ps.</span>
<span id="L5625" class="ln">  5625&nbsp;&nbsp;</span>			copy(nallp, allp[:cap(allp)])
<span id="L5626" class="ln">  5626&nbsp;&nbsp;</span>			allp = nallp
<span id="L5627" class="ln">  5627&nbsp;&nbsp;</span>		}
<span id="L5628" class="ln">  5628&nbsp;&nbsp;</span>
<span id="L5629" class="ln">  5629&nbsp;&nbsp;</span>		if maskWords &lt;= int32(cap(idlepMask)) {
<span id="L5630" class="ln">  5630&nbsp;&nbsp;</span>			idlepMask = idlepMask[:maskWords]
<span id="L5631" class="ln">  5631&nbsp;&nbsp;</span>			timerpMask = timerpMask[:maskWords]
<span id="L5632" class="ln">  5632&nbsp;&nbsp;</span>		} else {
<span id="L5633" class="ln">  5633&nbsp;&nbsp;</span>			nidlepMask := make([]uint32, maskWords)
<span id="L5634" class="ln">  5634&nbsp;&nbsp;</span>			<span class="comment">// No need to copy beyond len, old Ps are irrelevant.</span>
<span id="L5635" class="ln">  5635&nbsp;&nbsp;</span>			copy(nidlepMask, idlepMask)
<span id="L5636" class="ln">  5636&nbsp;&nbsp;</span>			idlepMask = nidlepMask
<span id="L5637" class="ln">  5637&nbsp;&nbsp;</span>
<span id="L5638" class="ln">  5638&nbsp;&nbsp;</span>			ntimerpMask := make([]uint32, maskWords)
<span id="L5639" class="ln">  5639&nbsp;&nbsp;</span>			copy(ntimerpMask, timerpMask)
<span id="L5640" class="ln">  5640&nbsp;&nbsp;</span>			timerpMask = ntimerpMask
<span id="L5641" class="ln">  5641&nbsp;&nbsp;</span>		}
<span id="L5642" class="ln">  5642&nbsp;&nbsp;</span>		unlock(&amp;allpLock)
<span id="L5643" class="ln">  5643&nbsp;&nbsp;</span>	}
<span id="L5644" class="ln">  5644&nbsp;&nbsp;</span>
<span id="L5645" class="ln">  5645&nbsp;&nbsp;</span>	<span class="comment">// initialize new P&#39;s</span>
<span id="L5646" class="ln">  5646&nbsp;&nbsp;</span>	for i := old; i &lt; nprocs; i++ {
<span id="L5647" class="ln">  5647&nbsp;&nbsp;</span>		pp := allp[i]
<span id="L5648" class="ln">  5648&nbsp;&nbsp;</span>		if pp == nil {
<span id="L5649" class="ln">  5649&nbsp;&nbsp;</span>			pp = new(p)
<span id="L5650" class="ln">  5650&nbsp;&nbsp;</span>		}
<span id="L5651" class="ln">  5651&nbsp;&nbsp;</span>		pp.init(i)
<span id="L5652" class="ln">  5652&nbsp;&nbsp;</span>		atomicstorep(unsafe.Pointer(&amp;allp[i]), unsafe.Pointer(pp))
<span id="L5653" class="ln">  5653&nbsp;&nbsp;</span>	}
<span id="L5654" class="ln">  5654&nbsp;&nbsp;</span>
<span id="L5655" class="ln">  5655&nbsp;&nbsp;</span>	gp := getg()
<span id="L5656" class="ln">  5656&nbsp;&nbsp;</span>	if gp.m.p != 0 &amp;&amp; gp.m.p.ptr().id &lt; nprocs {
<span id="L5657" class="ln">  5657&nbsp;&nbsp;</span>		<span class="comment">// continue to use the current P</span>
<span id="L5658" class="ln">  5658&nbsp;&nbsp;</span>		gp.m.p.ptr().status = _Prunning
<span id="L5659" class="ln">  5659&nbsp;&nbsp;</span>		gp.m.p.ptr().mcache.prepareForSweep()
<span id="L5660" class="ln">  5660&nbsp;&nbsp;</span>	} else {
<span id="L5661" class="ln">  5661&nbsp;&nbsp;</span>		<span class="comment">// release the current P and acquire allp[0].</span>
<span id="L5662" class="ln">  5662&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L5663" class="ln">  5663&nbsp;&nbsp;</span>		<span class="comment">// We must do this before destroying our current P</span>
<span id="L5664" class="ln">  5664&nbsp;&nbsp;</span>		<span class="comment">// because p.destroy itself has write barriers, so we</span>
<span id="L5665" class="ln">  5665&nbsp;&nbsp;</span>		<span class="comment">// need to do that from a valid P.</span>
<span id="L5666" class="ln">  5666&nbsp;&nbsp;</span>		if gp.m.p != 0 {
<span id="L5667" class="ln">  5667&nbsp;&nbsp;</span>			trace := traceAcquire()
<span id="L5668" class="ln">  5668&nbsp;&nbsp;</span>			if trace.ok() {
<span id="L5669" class="ln">  5669&nbsp;&nbsp;</span>				<span class="comment">// Pretend that we were descheduled</span>
<span id="L5670" class="ln">  5670&nbsp;&nbsp;</span>				<span class="comment">// and then scheduled again to keep</span>
<span id="L5671" class="ln">  5671&nbsp;&nbsp;</span>				<span class="comment">// the trace sane.</span>
<span id="L5672" class="ln">  5672&nbsp;&nbsp;</span>				trace.GoSched()
<span id="L5673" class="ln">  5673&nbsp;&nbsp;</span>				trace.ProcStop(gp.m.p.ptr())
<span id="L5674" class="ln">  5674&nbsp;&nbsp;</span>				traceRelease(trace)
<span id="L5675" class="ln">  5675&nbsp;&nbsp;</span>			}
<span id="L5676" class="ln">  5676&nbsp;&nbsp;</span>			gp.m.p.ptr().m = 0
<span id="L5677" class="ln">  5677&nbsp;&nbsp;</span>		}
<span id="L5678" class="ln">  5678&nbsp;&nbsp;</span>		gp.m.p = 0
<span id="L5679" class="ln">  5679&nbsp;&nbsp;</span>		pp := allp[0]
<span id="L5680" class="ln">  5680&nbsp;&nbsp;</span>		pp.m = 0
<span id="L5681" class="ln">  5681&nbsp;&nbsp;</span>		pp.status = _Pidle
<span id="L5682" class="ln">  5682&nbsp;&nbsp;</span>		acquirep(pp)
<span id="L5683" class="ln">  5683&nbsp;&nbsp;</span>		trace := traceAcquire()
<span id="L5684" class="ln">  5684&nbsp;&nbsp;</span>		if trace.ok() {
<span id="L5685" class="ln">  5685&nbsp;&nbsp;</span>			trace.GoStart()
<span id="L5686" class="ln">  5686&nbsp;&nbsp;</span>			traceRelease(trace)
<span id="L5687" class="ln">  5687&nbsp;&nbsp;</span>		}
<span id="L5688" class="ln">  5688&nbsp;&nbsp;</span>	}
<span id="L5689" class="ln">  5689&nbsp;&nbsp;</span>
<span id="L5690" class="ln">  5690&nbsp;&nbsp;</span>	<span class="comment">// g.m.p is now set, so we no longer need mcache0 for bootstrapping.</span>
<span id="L5691" class="ln">  5691&nbsp;&nbsp;</span>	mcache0 = nil
<span id="L5692" class="ln">  5692&nbsp;&nbsp;</span>
<span id="L5693" class="ln">  5693&nbsp;&nbsp;</span>	<span class="comment">// release resources from unused P&#39;s</span>
<span id="L5694" class="ln">  5694&nbsp;&nbsp;</span>	for i := nprocs; i &lt; old; i++ {
<span id="L5695" class="ln">  5695&nbsp;&nbsp;</span>		pp := allp[i]
<span id="L5696" class="ln">  5696&nbsp;&nbsp;</span>		pp.destroy()
<span id="L5697" class="ln">  5697&nbsp;&nbsp;</span>		<span class="comment">// can&#39;t free P itself because it can be referenced by an M in syscall</span>
<span id="L5698" class="ln">  5698&nbsp;&nbsp;</span>	}
<span id="L5699" class="ln">  5699&nbsp;&nbsp;</span>
<span id="L5700" class="ln">  5700&nbsp;&nbsp;</span>	<span class="comment">// Trim allp.</span>
<span id="L5701" class="ln">  5701&nbsp;&nbsp;</span>	if int32(len(allp)) != nprocs {
<span id="L5702" class="ln">  5702&nbsp;&nbsp;</span>		lock(&amp;allpLock)
<span id="L5703" class="ln">  5703&nbsp;&nbsp;</span>		allp = allp[:nprocs]
<span id="L5704" class="ln">  5704&nbsp;&nbsp;</span>		idlepMask = idlepMask[:maskWords]
<span id="L5705" class="ln">  5705&nbsp;&nbsp;</span>		timerpMask = timerpMask[:maskWords]
<span id="L5706" class="ln">  5706&nbsp;&nbsp;</span>		unlock(&amp;allpLock)
<span id="L5707" class="ln">  5707&nbsp;&nbsp;</span>	}
<span id="L5708" class="ln">  5708&nbsp;&nbsp;</span>
<span id="L5709" class="ln">  5709&nbsp;&nbsp;</span>	var runnablePs *p
<span id="L5710" class="ln">  5710&nbsp;&nbsp;</span>	for i := nprocs - 1; i &gt;= 0; i-- {
<span id="L5711" class="ln">  5711&nbsp;&nbsp;</span>		pp := allp[i]
<span id="L5712" class="ln">  5712&nbsp;&nbsp;</span>		if gp.m.p.ptr() == pp {
<span id="L5713" class="ln">  5713&nbsp;&nbsp;</span>			continue
<span id="L5714" class="ln">  5714&nbsp;&nbsp;</span>		}
<span id="L5715" class="ln">  5715&nbsp;&nbsp;</span>		pp.status = _Pidle
<span id="L5716" class="ln">  5716&nbsp;&nbsp;</span>		if runqempty(pp) {
<span id="L5717" class="ln">  5717&nbsp;&nbsp;</span>			pidleput(pp, now)
<span id="L5718" class="ln">  5718&nbsp;&nbsp;</span>		} else {
<span id="L5719" class="ln">  5719&nbsp;&nbsp;</span>			pp.m.set(mget())
<span id="L5720" class="ln">  5720&nbsp;&nbsp;</span>			pp.link.set(runnablePs)
<span id="L5721" class="ln">  5721&nbsp;&nbsp;</span>			runnablePs = pp
<span id="L5722" class="ln">  5722&nbsp;&nbsp;</span>		}
<span id="L5723" class="ln">  5723&nbsp;&nbsp;</span>	}
<span id="L5724" class="ln">  5724&nbsp;&nbsp;</span>	stealOrder.reset(uint32(nprocs))
<span id="L5725" class="ln">  5725&nbsp;&nbsp;</span>	var int32p *int32 = &amp;gomaxprocs <span class="comment">// make compiler check that gomaxprocs is an int32</span>
<span id="L5726" class="ln">  5726&nbsp;&nbsp;</span>	atomic.Store((*uint32)(unsafe.Pointer(int32p)), uint32(nprocs))
<span id="L5727" class="ln">  5727&nbsp;&nbsp;</span>	if old != nprocs {
<span id="L5728" class="ln">  5728&nbsp;&nbsp;</span>		<span class="comment">// Notify the limiter that the amount of procs has changed.</span>
<span id="L5729" class="ln">  5729&nbsp;&nbsp;</span>		gcCPULimiter.resetCapacity(now, nprocs)
<span id="L5730" class="ln">  5730&nbsp;&nbsp;</span>	}
<span id="L5731" class="ln">  5731&nbsp;&nbsp;</span>	return runnablePs
<span id="L5732" class="ln">  5732&nbsp;&nbsp;</span>}
<span id="L5733" class="ln">  5733&nbsp;&nbsp;</span>
<span id="L5734" class="ln">  5734&nbsp;&nbsp;</span><span class="comment">// Associate p and the current m.</span>
<span id="L5735" class="ln">  5735&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5736" class="ln">  5736&nbsp;&nbsp;</span><span class="comment">// This function is allowed to have write barriers even if the caller</span>
<span id="L5737" class="ln">  5737&nbsp;&nbsp;</span><span class="comment">// isn&#39;t because it immediately acquires pp.</span>
<span id="L5738" class="ln">  5738&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5739" class="ln">  5739&nbsp;&nbsp;</span><span class="comment">//go:yeswritebarrierrec</span>
<span id="L5740" class="ln">  5740&nbsp;&nbsp;</span>func acquirep(pp *p) {
<span id="L5741" class="ln">  5741&nbsp;&nbsp;</span>	<span class="comment">// Do the part that isn&#39;t allowed to have write barriers.</span>
<span id="L5742" class="ln">  5742&nbsp;&nbsp;</span>	wirep(pp)
<span id="L5743" class="ln">  5743&nbsp;&nbsp;</span>
<span id="L5744" class="ln">  5744&nbsp;&nbsp;</span>	<span class="comment">// Have p; write barriers now allowed.</span>
<span id="L5745" class="ln">  5745&nbsp;&nbsp;</span>
<span id="L5746" class="ln">  5746&nbsp;&nbsp;</span>	<span class="comment">// Perform deferred mcache flush before this P can allocate</span>
<span id="L5747" class="ln">  5747&nbsp;&nbsp;</span>	<span class="comment">// from a potentially stale mcache.</span>
<span id="L5748" class="ln">  5748&nbsp;&nbsp;</span>	pp.mcache.prepareForSweep()
<span id="L5749" class="ln">  5749&nbsp;&nbsp;</span>
<span id="L5750" class="ln">  5750&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L5751" class="ln">  5751&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L5752" class="ln">  5752&nbsp;&nbsp;</span>		trace.ProcStart()
<span id="L5753" class="ln">  5753&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L5754" class="ln">  5754&nbsp;&nbsp;</span>	}
<span id="L5755" class="ln">  5755&nbsp;&nbsp;</span>}
<span id="L5756" class="ln">  5756&nbsp;&nbsp;</span>
<span id="L5757" class="ln">  5757&nbsp;&nbsp;</span><span class="comment">// wirep is the first step of acquirep, which actually associates the</span>
<span id="L5758" class="ln">  5758&nbsp;&nbsp;</span><span class="comment">// current M to pp. This is broken out so we can disallow write</span>
<span id="L5759" class="ln">  5759&nbsp;&nbsp;</span><span class="comment">// barriers for this part, since we don&#39;t yet have a P.</span>
<span id="L5760" class="ln">  5760&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5761" class="ln">  5761&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L5762" class="ln">  5762&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L5763" class="ln">  5763&nbsp;&nbsp;</span>func wirep(pp *p) {
<span id="L5764" class="ln">  5764&nbsp;&nbsp;</span>	gp := getg()
<span id="L5765" class="ln">  5765&nbsp;&nbsp;</span>
<span id="L5766" class="ln">  5766&nbsp;&nbsp;</span>	if gp.m.p != 0 {
<span id="L5767" class="ln">  5767&nbsp;&nbsp;</span>		<span class="comment">// Call on the systemstack to avoid a nosplit overflow build failure</span>
<span id="L5768" class="ln">  5768&nbsp;&nbsp;</span>		<span class="comment">// on some platforms when built with -N -l. See #64113.</span>
<span id="L5769" class="ln">  5769&nbsp;&nbsp;</span>		systemstack(func() {
<span id="L5770" class="ln">  5770&nbsp;&nbsp;</span>			throw(&#34;wirep: already in go&#34;)
<span id="L5771" class="ln">  5771&nbsp;&nbsp;</span>		})
<span id="L5772" class="ln">  5772&nbsp;&nbsp;</span>	}
<span id="L5773" class="ln">  5773&nbsp;&nbsp;</span>	if pp.m != 0 || pp.status != _Pidle {
<span id="L5774" class="ln">  5774&nbsp;&nbsp;</span>		<span class="comment">// Call on the systemstack to avoid a nosplit overflow build failure</span>
<span id="L5775" class="ln">  5775&nbsp;&nbsp;</span>		<span class="comment">// on some platforms when built with -N -l. See #64113.</span>
<span id="L5776" class="ln">  5776&nbsp;&nbsp;</span>		systemstack(func() {
<span id="L5777" class="ln">  5777&nbsp;&nbsp;</span>			id := int64(0)
<span id="L5778" class="ln">  5778&nbsp;&nbsp;</span>			if pp.m != 0 {
<span id="L5779" class="ln">  5779&nbsp;&nbsp;</span>				id = pp.m.ptr().id
<span id="L5780" class="ln">  5780&nbsp;&nbsp;</span>			}
<span id="L5781" class="ln">  5781&nbsp;&nbsp;</span>			print(&#34;wirep: p-&gt;m=&#34;, pp.m, &#34;(&#34;, id, &#34;) p-&gt;status=&#34;, pp.status, &#34;\n&#34;)
<span id="L5782" class="ln">  5782&nbsp;&nbsp;</span>			throw(&#34;wirep: invalid p state&#34;)
<span id="L5783" class="ln">  5783&nbsp;&nbsp;</span>		})
<span id="L5784" class="ln">  5784&nbsp;&nbsp;</span>	}
<span id="L5785" class="ln">  5785&nbsp;&nbsp;</span>	gp.m.p.set(pp)
<span id="L5786" class="ln">  5786&nbsp;&nbsp;</span>	pp.m.set(gp.m)
<span id="L5787" class="ln">  5787&nbsp;&nbsp;</span>	pp.status = _Prunning
<span id="L5788" class="ln">  5788&nbsp;&nbsp;</span>}
<span id="L5789" class="ln">  5789&nbsp;&nbsp;</span>
<span id="L5790" class="ln">  5790&nbsp;&nbsp;</span><span class="comment">// Disassociate p and the current m.</span>
<span id="L5791" class="ln">  5791&nbsp;&nbsp;</span>func releasep() *p {
<span id="L5792" class="ln">  5792&nbsp;&nbsp;</span>	trace := traceAcquire()
<span id="L5793" class="ln">  5793&nbsp;&nbsp;</span>	if trace.ok() {
<span id="L5794" class="ln">  5794&nbsp;&nbsp;</span>		trace.ProcStop(getg().m.p.ptr())
<span id="L5795" class="ln">  5795&nbsp;&nbsp;</span>		traceRelease(trace)
<span id="L5796" class="ln">  5796&nbsp;&nbsp;</span>	}
<span id="L5797" class="ln">  5797&nbsp;&nbsp;</span>	return releasepNoTrace()
<span id="L5798" class="ln">  5798&nbsp;&nbsp;</span>}
<span id="L5799" class="ln">  5799&nbsp;&nbsp;</span>
<span id="L5800" class="ln">  5800&nbsp;&nbsp;</span><span class="comment">// Disassociate p and the current m without tracing an event.</span>
<span id="L5801" class="ln">  5801&nbsp;&nbsp;</span>func releasepNoTrace() *p {
<span id="L5802" class="ln">  5802&nbsp;&nbsp;</span>	gp := getg()
<span id="L5803" class="ln">  5803&nbsp;&nbsp;</span>
<span id="L5804" class="ln">  5804&nbsp;&nbsp;</span>	if gp.m.p == 0 {
<span id="L5805" class="ln">  5805&nbsp;&nbsp;</span>		throw(&#34;releasep: invalid arg&#34;)
<span id="L5806" class="ln">  5806&nbsp;&nbsp;</span>	}
<span id="L5807" class="ln">  5807&nbsp;&nbsp;</span>	pp := gp.m.p.ptr()
<span id="L5808" class="ln">  5808&nbsp;&nbsp;</span>	if pp.m.ptr() != gp.m || pp.status != _Prunning {
<span id="L5809" class="ln">  5809&nbsp;&nbsp;</span>		print(&#34;releasep: m=&#34;, gp.m, &#34; m-&gt;p=&#34;, gp.m.p.ptr(), &#34; p-&gt;m=&#34;, hex(pp.m), &#34; p-&gt;status=&#34;, pp.status, &#34;\n&#34;)
<span id="L5810" class="ln">  5810&nbsp;&nbsp;</span>		throw(&#34;releasep: invalid p state&#34;)
<span id="L5811" class="ln">  5811&nbsp;&nbsp;</span>	}
<span id="L5812" class="ln">  5812&nbsp;&nbsp;</span>	gp.m.p = 0
<span id="L5813" class="ln">  5813&nbsp;&nbsp;</span>	pp.m = 0
<span id="L5814" class="ln">  5814&nbsp;&nbsp;</span>	pp.status = _Pidle
<span id="L5815" class="ln">  5815&nbsp;&nbsp;</span>	return pp
<span id="L5816" class="ln">  5816&nbsp;&nbsp;</span>}
<span id="L5817" class="ln">  5817&nbsp;&nbsp;</span>
<span id="L5818" class="ln">  5818&nbsp;&nbsp;</span>func incidlelocked(v int32) {
<span id="L5819" class="ln">  5819&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L5820" class="ln">  5820&nbsp;&nbsp;</span>	sched.nmidlelocked += v
<span id="L5821" class="ln">  5821&nbsp;&nbsp;</span>	if v &gt; 0 {
<span id="L5822" class="ln">  5822&nbsp;&nbsp;</span>		checkdead()
<span id="L5823" class="ln">  5823&nbsp;&nbsp;</span>	}
<span id="L5824" class="ln">  5824&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L5825" class="ln">  5825&nbsp;&nbsp;</span>}
<span id="L5826" class="ln">  5826&nbsp;&nbsp;</span>
<span id="L5827" class="ln">  5827&nbsp;&nbsp;</span><span class="comment">// Check for deadlock situation.</span>
<span id="L5828" class="ln">  5828&nbsp;&nbsp;</span><span class="comment">// The check is based on number of running M&#39;s, if 0 -&gt; deadlock.</span>
<span id="L5829" class="ln">  5829&nbsp;&nbsp;</span><span class="comment">// sched.lock must be held.</span>
<span id="L5830" class="ln">  5830&nbsp;&nbsp;</span>func checkdead() {
<span id="L5831" class="ln">  5831&nbsp;&nbsp;</span>	assertLockHeld(&amp;sched.lock)
<span id="L5832" class="ln">  5832&nbsp;&nbsp;</span>
<span id="L5833" class="ln">  5833&nbsp;&nbsp;</span>	<span class="comment">// For -buildmode=c-shared or -buildmode=c-archive it&#39;s OK if</span>
<span id="L5834" class="ln">  5834&nbsp;&nbsp;</span>	<span class="comment">// there are no running goroutines. The calling program is</span>
<span id="L5835" class="ln">  5835&nbsp;&nbsp;</span>	<span class="comment">// assumed to be running.</span>
<span id="L5836" class="ln">  5836&nbsp;&nbsp;</span>	if islibrary || isarchive {
<span id="L5837" class="ln">  5837&nbsp;&nbsp;</span>		return
<span id="L5838" class="ln">  5838&nbsp;&nbsp;</span>	}
<span id="L5839" class="ln">  5839&nbsp;&nbsp;</span>
<span id="L5840" class="ln">  5840&nbsp;&nbsp;</span>	<span class="comment">// If we are dying because of a signal caught on an already idle thread,</span>
<span id="L5841" class="ln">  5841&nbsp;&nbsp;</span>	<span class="comment">// freezetheworld will cause all running threads to block.</span>
<span id="L5842" class="ln">  5842&nbsp;&nbsp;</span>	<span class="comment">// And runtime will essentially enter into deadlock state,</span>
<span id="L5843" class="ln">  5843&nbsp;&nbsp;</span>	<span class="comment">// except that there is a thread that will call exit soon.</span>
<span id="L5844" class="ln">  5844&nbsp;&nbsp;</span>	if panicking.Load() &gt; 0 {
<span id="L5845" class="ln">  5845&nbsp;&nbsp;</span>		return
<span id="L5846" class="ln">  5846&nbsp;&nbsp;</span>	}
<span id="L5847" class="ln">  5847&nbsp;&nbsp;</span>
<span id="L5848" class="ln">  5848&nbsp;&nbsp;</span>	<span class="comment">// If we are not running under cgo, but we have an extra M then account</span>
<span id="L5849" class="ln">  5849&nbsp;&nbsp;</span>	<span class="comment">// for it. (It is possible to have an extra M on Windows without cgo to</span>
<span id="L5850" class="ln">  5850&nbsp;&nbsp;</span>	<span class="comment">// accommodate callbacks created by syscall.NewCallback. See issue #6751</span>
<span id="L5851" class="ln">  5851&nbsp;&nbsp;</span>	<span class="comment">// for details.)</span>
<span id="L5852" class="ln">  5852&nbsp;&nbsp;</span>	var run0 int32
<span id="L5853" class="ln">  5853&nbsp;&nbsp;</span>	if !iscgo &amp;&amp; cgoHasExtraM &amp;&amp; extraMLength.Load() &gt; 0 {
<span id="L5854" class="ln">  5854&nbsp;&nbsp;</span>		run0 = 1
<span id="L5855" class="ln">  5855&nbsp;&nbsp;</span>	}
<span id="L5856" class="ln">  5856&nbsp;&nbsp;</span>
<span id="L5857" class="ln">  5857&nbsp;&nbsp;</span>	run := mcount() - sched.nmidle - sched.nmidlelocked - sched.nmsys
<span id="L5858" class="ln">  5858&nbsp;&nbsp;</span>	if run &gt; run0 {
<span id="L5859" class="ln">  5859&nbsp;&nbsp;</span>		return
<span id="L5860" class="ln">  5860&nbsp;&nbsp;</span>	}
<span id="L5861" class="ln">  5861&nbsp;&nbsp;</span>	if run &lt; 0 {
<span id="L5862" class="ln">  5862&nbsp;&nbsp;</span>		print(&#34;runtime: checkdead: nmidle=&#34;, sched.nmidle, &#34; nmidlelocked=&#34;, sched.nmidlelocked, &#34; mcount=&#34;, mcount(), &#34; nmsys=&#34;, sched.nmsys, &#34;\n&#34;)
<span id="L5863" class="ln">  5863&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L5864" class="ln">  5864&nbsp;&nbsp;</span>		throw(&#34;checkdead: inconsistent counts&#34;)
<span id="L5865" class="ln">  5865&nbsp;&nbsp;</span>	}
<span id="L5866" class="ln">  5866&nbsp;&nbsp;</span>
<span id="L5867" class="ln">  5867&nbsp;&nbsp;</span>	grunning := 0
<span id="L5868" class="ln">  5868&nbsp;&nbsp;</span>	forEachG(func(gp *g) {
<span id="L5869" class="ln">  5869&nbsp;&nbsp;</span>		if isSystemGoroutine(gp, false) {
<span id="L5870" class="ln">  5870&nbsp;&nbsp;</span>			return
<span id="L5871" class="ln">  5871&nbsp;&nbsp;</span>		}
<span id="L5872" class="ln">  5872&nbsp;&nbsp;</span>		s := readgstatus(gp)
<span id="L5873" class="ln">  5873&nbsp;&nbsp;</span>		switch s &amp;^ _Gscan {
<span id="L5874" class="ln">  5874&nbsp;&nbsp;</span>		case _Gwaiting,
<span id="L5875" class="ln">  5875&nbsp;&nbsp;</span>			_Gpreempted:
<span id="L5876" class="ln">  5876&nbsp;&nbsp;</span>			grunning++
<span id="L5877" class="ln">  5877&nbsp;&nbsp;</span>		case _Grunnable,
<span id="L5878" class="ln">  5878&nbsp;&nbsp;</span>			_Grunning,
<span id="L5879" class="ln">  5879&nbsp;&nbsp;</span>			_Gsyscall:
<span id="L5880" class="ln">  5880&nbsp;&nbsp;</span>			print(&#34;runtime: checkdead: find g &#34;, gp.goid, &#34; in status &#34;, s, &#34;\n&#34;)
<span id="L5881" class="ln">  5881&nbsp;&nbsp;</span>			unlock(&amp;sched.lock)
<span id="L5882" class="ln">  5882&nbsp;&nbsp;</span>			throw(&#34;checkdead: runnable g&#34;)
<span id="L5883" class="ln">  5883&nbsp;&nbsp;</span>		}
<span id="L5884" class="ln">  5884&nbsp;&nbsp;</span>	})
<span id="L5885" class="ln">  5885&nbsp;&nbsp;</span>	if grunning == 0 { <span class="comment">// possible if main goroutine calls runtime·Goexit()</span>
<span id="L5886" class="ln">  5886&nbsp;&nbsp;</span>		unlock(&amp;sched.lock) <span class="comment">// unlock so that GODEBUG=scheddetail=1 doesn&#39;t hang</span>
<span id="L5887" class="ln">  5887&nbsp;&nbsp;</span>		fatal(&#34;no goroutines (main called runtime.Goexit) - deadlock!&#34;)
<span id="L5888" class="ln">  5888&nbsp;&nbsp;</span>	}
<span id="L5889" class="ln">  5889&nbsp;&nbsp;</span>
<span id="L5890" class="ln">  5890&nbsp;&nbsp;</span>	<span class="comment">// Maybe jump time forward for playground.</span>
<span id="L5891" class="ln">  5891&nbsp;&nbsp;</span>	if faketime != 0 {
<span id="L5892" class="ln">  5892&nbsp;&nbsp;</span>		if when := timeSleepUntil(); when &lt; maxWhen {
<span id="L5893" class="ln">  5893&nbsp;&nbsp;</span>			faketime = when
<span id="L5894" class="ln">  5894&nbsp;&nbsp;</span>
<span id="L5895" class="ln">  5895&nbsp;&nbsp;</span>			<span class="comment">// Start an M to steal the timer.</span>
<span id="L5896" class="ln">  5896&nbsp;&nbsp;</span>			pp, _ := pidleget(faketime)
<span id="L5897" class="ln">  5897&nbsp;&nbsp;</span>			if pp == nil {
<span id="L5898" class="ln">  5898&nbsp;&nbsp;</span>				<span class="comment">// There should always be a free P since</span>
<span id="L5899" class="ln">  5899&nbsp;&nbsp;</span>				<span class="comment">// nothing is running.</span>
<span id="L5900" class="ln">  5900&nbsp;&nbsp;</span>				unlock(&amp;sched.lock)
<span id="L5901" class="ln">  5901&nbsp;&nbsp;</span>				throw(&#34;checkdead: no p for timer&#34;)
<span id="L5902" class="ln">  5902&nbsp;&nbsp;</span>			}
<span id="L5903" class="ln">  5903&nbsp;&nbsp;</span>			mp := mget()
<span id="L5904" class="ln">  5904&nbsp;&nbsp;</span>			if mp == nil {
<span id="L5905" class="ln">  5905&nbsp;&nbsp;</span>				<span class="comment">// There should always be a free M since</span>
<span id="L5906" class="ln">  5906&nbsp;&nbsp;</span>				<span class="comment">// nothing is running.</span>
<span id="L5907" class="ln">  5907&nbsp;&nbsp;</span>				unlock(&amp;sched.lock)
<span id="L5908" class="ln">  5908&nbsp;&nbsp;</span>				throw(&#34;checkdead: no m for timer&#34;)
<span id="L5909" class="ln">  5909&nbsp;&nbsp;</span>			}
<span id="L5910" class="ln">  5910&nbsp;&nbsp;</span>			<span class="comment">// M must be spinning to steal. We set this to be</span>
<span id="L5911" class="ln">  5911&nbsp;&nbsp;</span>			<span class="comment">// explicit, but since this is the only M it would</span>
<span id="L5912" class="ln">  5912&nbsp;&nbsp;</span>			<span class="comment">// become spinning on its own anyways.</span>
<span id="L5913" class="ln">  5913&nbsp;&nbsp;</span>			sched.nmspinning.Add(1)
<span id="L5914" class="ln">  5914&nbsp;&nbsp;</span>			mp.spinning = true
<span id="L5915" class="ln">  5915&nbsp;&nbsp;</span>			mp.nextp.set(pp)
<span id="L5916" class="ln">  5916&nbsp;&nbsp;</span>			notewakeup(&amp;mp.park)
<span id="L5917" class="ln">  5917&nbsp;&nbsp;</span>			return
<span id="L5918" class="ln">  5918&nbsp;&nbsp;</span>		}
<span id="L5919" class="ln">  5919&nbsp;&nbsp;</span>	}
<span id="L5920" class="ln">  5920&nbsp;&nbsp;</span>
<span id="L5921" class="ln">  5921&nbsp;&nbsp;</span>	<span class="comment">// There are no goroutines running, so we can look at the P&#39;s.</span>
<span id="L5922" class="ln">  5922&nbsp;&nbsp;</span>	for _, pp := range allp {
<span id="L5923" class="ln">  5923&nbsp;&nbsp;</span>		if len(pp.timers) &gt; 0 {
<span id="L5924" class="ln">  5924&nbsp;&nbsp;</span>			return
<span id="L5925" class="ln">  5925&nbsp;&nbsp;</span>		}
<span id="L5926" class="ln">  5926&nbsp;&nbsp;</span>	}
<span id="L5927" class="ln">  5927&nbsp;&nbsp;</span>
<span id="L5928" class="ln">  5928&nbsp;&nbsp;</span>	unlock(&amp;sched.lock) <span class="comment">// unlock so that GODEBUG=scheddetail=1 doesn&#39;t hang</span>
<span id="L5929" class="ln">  5929&nbsp;&nbsp;</span>	fatal(&#34;all goroutines are asleep - deadlock!&#34;)
<span id="L5930" class="ln">  5930&nbsp;&nbsp;</span>}
<span id="L5931" class="ln">  5931&nbsp;&nbsp;</span>
<span id="L5932" class="ln">  5932&nbsp;&nbsp;</span><span class="comment">// forcegcperiod is the maximum time in nanoseconds between garbage</span>
<span id="L5933" class="ln">  5933&nbsp;&nbsp;</span><span class="comment">// collections. If we go this long without a garbage collection, one</span>
<span id="L5934" class="ln">  5934&nbsp;&nbsp;</span><span class="comment">// is forced to run.</span>
<span id="L5935" class="ln">  5935&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5936" class="ln">  5936&nbsp;&nbsp;</span><span class="comment">// This is a variable for testing purposes. It normally doesn&#39;t change.</span>
<span id="L5937" class="ln">  5937&nbsp;&nbsp;</span>var forcegcperiod int64 = 2 * 60 * 1e9
<span id="L5938" class="ln">  5938&nbsp;&nbsp;</span>
<span id="L5939" class="ln">  5939&nbsp;&nbsp;</span><span class="comment">// needSysmonWorkaround is true if the workaround for</span>
<span id="L5940" class="ln">  5940&nbsp;&nbsp;</span><span class="comment">// golang.org/issue/42515 is needed on NetBSD.</span>
<span id="L5941" class="ln">  5941&nbsp;&nbsp;</span>var needSysmonWorkaround bool = false
<span id="L5942" class="ln">  5942&nbsp;&nbsp;</span>
<span id="L5943" class="ln">  5943&nbsp;&nbsp;</span><span class="comment">// Always runs without a P, so write barriers are not allowed.</span>
<span id="L5944" class="ln">  5944&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5945" class="ln">  5945&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L5946" class="ln">  5946&nbsp;&nbsp;</span>func sysmon() {
<span id="L5947" class="ln">  5947&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L5948" class="ln">  5948&nbsp;&nbsp;</span>	sched.nmsys++
<span id="L5949" class="ln">  5949&nbsp;&nbsp;</span>	checkdead()
<span id="L5950" class="ln">  5950&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L5951" class="ln">  5951&nbsp;&nbsp;</span>
<span id="L5952" class="ln">  5952&nbsp;&nbsp;</span>	lasttrace := int64(0)
<span id="L5953" class="ln">  5953&nbsp;&nbsp;</span>	idle := 0 <span class="comment">// how many cycles in succession we had not wokeup somebody</span>
<span id="L5954" class="ln">  5954&nbsp;&nbsp;</span>	delay := uint32(0)
<span id="L5955" class="ln">  5955&nbsp;&nbsp;</span>
<span id="L5956" class="ln">  5956&nbsp;&nbsp;</span>	for {
<span id="L5957" class="ln">  5957&nbsp;&nbsp;</span>		if idle == 0 { <span class="comment">// start with 20us sleep...</span>
<span id="L5958" class="ln">  5958&nbsp;&nbsp;</span>			delay = 20
<span id="L5959" class="ln">  5959&nbsp;&nbsp;</span>		} else if idle &gt; 50 { <span class="comment">// start doubling the sleep after 1ms...</span>
<span id="L5960" class="ln">  5960&nbsp;&nbsp;</span>			delay *= 2
<span id="L5961" class="ln">  5961&nbsp;&nbsp;</span>		}
<span id="L5962" class="ln">  5962&nbsp;&nbsp;</span>		if delay &gt; 10*1000 { <span class="comment">// up to 10ms</span>
<span id="L5963" class="ln">  5963&nbsp;&nbsp;</span>			delay = 10 * 1000
<span id="L5964" class="ln">  5964&nbsp;&nbsp;</span>		}
<span id="L5965" class="ln">  5965&nbsp;&nbsp;</span>		usleep(delay)
<span id="L5966" class="ln">  5966&nbsp;&nbsp;</span>
<span id="L5967" class="ln">  5967&nbsp;&nbsp;</span>		<span class="comment">// sysmon should not enter deep sleep if schedtrace is enabled so that</span>
<span id="L5968" class="ln">  5968&nbsp;&nbsp;</span>		<span class="comment">// it can print that information at the right time.</span>
<span id="L5969" class="ln">  5969&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L5970" class="ln">  5970&nbsp;&nbsp;</span>		<span class="comment">// It should also not enter deep sleep if there are any active P&#39;s so</span>
<span id="L5971" class="ln">  5971&nbsp;&nbsp;</span>		<span class="comment">// that it can retake P&#39;s from syscalls, preempt long running G&#39;s, and</span>
<span id="L5972" class="ln">  5972&nbsp;&nbsp;</span>		<span class="comment">// poll the network if all P&#39;s are busy for long stretches.</span>
<span id="L5973" class="ln">  5973&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L5974" class="ln">  5974&nbsp;&nbsp;</span>		<span class="comment">// It should wakeup from deep sleep if any P&#39;s become active either due</span>
<span id="L5975" class="ln">  5975&nbsp;&nbsp;</span>		<span class="comment">// to exiting a syscall or waking up due to a timer expiring so that it</span>
<span id="L5976" class="ln">  5976&nbsp;&nbsp;</span>		<span class="comment">// can resume performing those duties. If it wakes from a syscall it</span>
<span id="L5977" class="ln">  5977&nbsp;&nbsp;</span>		<span class="comment">// resets idle and delay as a bet that since it had retaken a P from a</span>
<span id="L5978" class="ln">  5978&nbsp;&nbsp;</span>		<span class="comment">// syscall before, it may need to do it again shortly after the</span>
<span id="L5979" class="ln">  5979&nbsp;&nbsp;</span>		<span class="comment">// application starts work again. It does not reset idle when waking</span>
<span id="L5980" class="ln">  5980&nbsp;&nbsp;</span>		<span class="comment">// from a timer to avoid adding system load to applications that spend</span>
<span id="L5981" class="ln">  5981&nbsp;&nbsp;</span>		<span class="comment">// most of their time sleeping.</span>
<span id="L5982" class="ln">  5982&nbsp;&nbsp;</span>		now := nanotime()
<span id="L5983" class="ln">  5983&nbsp;&nbsp;</span>		if debug.schedtrace &lt;= 0 &amp;&amp; (sched.gcwaiting.Load() || sched.npidle.Load() == gomaxprocs) {
<span id="L5984" class="ln">  5984&nbsp;&nbsp;</span>			lock(&amp;sched.lock)
<span id="L5985" class="ln">  5985&nbsp;&nbsp;</span>			if sched.gcwaiting.Load() || sched.npidle.Load() == gomaxprocs {
<span id="L5986" class="ln">  5986&nbsp;&nbsp;</span>				syscallWake := false
<span id="L5987" class="ln">  5987&nbsp;&nbsp;</span>				next := timeSleepUntil()
<span id="L5988" class="ln">  5988&nbsp;&nbsp;</span>				if next &gt; now {
<span id="L5989" class="ln">  5989&nbsp;&nbsp;</span>					sched.sysmonwait.Store(true)
<span id="L5990" class="ln">  5990&nbsp;&nbsp;</span>					unlock(&amp;sched.lock)
<span id="L5991" class="ln">  5991&nbsp;&nbsp;</span>					<span class="comment">// Make wake-up period small enough</span>
<span id="L5992" class="ln">  5992&nbsp;&nbsp;</span>					<span class="comment">// for the sampling to be correct.</span>
<span id="L5993" class="ln">  5993&nbsp;&nbsp;</span>					sleep := forcegcperiod / 2
<span id="L5994" class="ln">  5994&nbsp;&nbsp;</span>					if next-now &lt; sleep {
<span id="L5995" class="ln">  5995&nbsp;&nbsp;</span>						sleep = next - now
<span id="L5996" class="ln">  5996&nbsp;&nbsp;</span>					}
<span id="L5997" class="ln">  5997&nbsp;&nbsp;</span>					shouldRelax := sleep &gt;= osRelaxMinNS
<span id="L5998" class="ln">  5998&nbsp;&nbsp;</span>					if shouldRelax {
<span id="L5999" class="ln">  5999&nbsp;&nbsp;</span>						osRelax(true)
<span id="L6000" class="ln">  6000&nbsp;&nbsp;</span>					}
<span id="L6001" class="ln">  6001&nbsp;&nbsp;</span>					syscallWake = notetsleep(&amp;sched.sysmonnote, sleep)
<span id="L6002" class="ln">  6002&nbsp;&nbsp;</span>					if shouldRelax {
<span id="L6003" class="ln">  6003&nbsp;&nbsp;</span>						osRelax(false)
<span id="L6004" class="ln">  6004&nbsp;&nbsp;</span>					}
<span id="L6005" class="ln">  6005&nbsp;&nbsp;</span>					lock(&amp;sched.lock)
<span id="L6006" class="ln">  6006&nbsp;&nbsp;</span>					sched.sysmonwait.Store(false)
<span id="L6007" class="ln">  6007&nbsp;&nbsp;</span>					noteclear(&amp;sched.sysmonnote)
<span id="L6008" class="ln">  6008&nbsp;&nbsp;</span>				}
<span id="L6009" class="ln">  6009&nbsp;&nbsp;</span>				if syscallWake {
<span id="L6010" class="ln">  6010&nbsp;&nbsp;</span>					idle = 0
<span id="L6011" class="ln">  6011&nbsp;&nbsp;</span>					delay = 20
<span id="L6012" class="ln">  6012&nbsp;&nbsp;</span>				}
<span id="L6013" class="ln">  6013&nbsp;&nbsp;</span>			}
<span id="L6014" class="ln">  6014&nbsp;&nbsp;</span>			unlock(&amp;sched.lock)
<span id="L6015" class="ln">  6015&nbsp;&nbsp;</span>		}
<span id="L6016" class="ln">  6016&nbsp;&nbsp;</span>
<span id="L6017" class="ln">  6017&nbsp;&nbsp;</span>		lock(&amp;sched.sysmonlock)
<span id="L6018" class="ln">  6018&nbsp;&nbsp;</span>		<span class="comment">// Update now in case we blocked on sysmonnote or spent a long time</span>
<span id="L6019" class="ln">  6019&nbsp;&nbsp;</span>		<span class="comment">// blocked on schedlock or sysmonlock above.</span>
<span id="L6020" class="ln">  6020&nbsp;&nbsp;</span>		now = nanotime()
<span id="L6021" class="ln">  6021&nbsp;&nbsp;</span>
<span id="L6022" class="ln">  6022&nbsp;&nbsp;</span>		<span class="comment">// trigger libc interceptors if needed</span>
<span id="L6023" class="ln">  6023&nbsp;&nbsp;</span>		if *cgo_yield != nil {
<span id="L6024" class="ln">  6024&nbsp;&nbsp;</span>			asmcgocall(*cgo_yield, nil)
<span id="L6025" class="ln">  6025&nbsp;&nbsp;</span>		}
<span id="L6026" class="ln">  6026&nbsp;&nbsp;</span>		<span class="comment">// poll network if not polled for more than 10ms</span>
<span id="L6027" class="ln">  6027&nbsp;&nbsp;</span>		lastpoll := sched.lastpoll.Load()
<span id="L6028" class="ln">  6028&nbsp;&nbsp;</span>		if netpollinited() &amp;&amp; lastpoll != 0 &amp;&amp; lastpoll+10*1000*1000 &lt; now {
<span id="L6029" class="ln">  6029&nbsp;&nbsp;</span>			sched.lastpoll.CompareAndSwap(lastpoll, now)
<span id="L6030" class="ln">  6030&nbsp;&nbsp;</span>			list, delta := netpoll(0) <span class="comment">// non-blocking - returns list of goroutines</span>
<span id="L6031" class="ln">  6031&nbsp;&nbsp;</span>			if !list.empty() {
<span id="L6032" class="ln">  6032&nbsp;&nbsp;</span>				<span class="comment">// Need to decrement number of idle locked M&#39;s</span>
<span id="L6033" class="ln">  6033&nbsp;&nbsp;</span>				<span class="comment">// (pretending that one more is running) before injectglist.</span>
<span id="L6034" class="ln">  6034&nbsp;&nbsp;</span>				<span class="comment">// Otherwise it can lead to the following situation:</span>
<span id="L6035" class="ln">  6035&nbsp;&nbsp;</span>				<span class="comment">// injectglist grabs all P&#39;s but before it starts M&#39;s to run the P&#39;s,</span>
<span id="L6036" class="ln">  6036&nbsp;&nbsp;</span>				<span class="comment">// another M returns from syscall, finishes running its G,</span>
<span id="L6037" class="ln">  6037&nbsp;&nbsp;</span>				<span class="comment">// observes that there is no work to do and no other running M&#39;s</span>
<span id="L6038" class="ln">  6038&nbsp;&nbsp;</span>				<span class="comment">// and reports deadlock.</span>
<span id="L6039" class="ln">  6039&nbsp;&nbsp;</span>				incidlelocked(-1)
<span id="L6040" class="ln">  6040&nbsp;&nbsp;</span>				injectglist(&amp;list)
<span id="L6041" class="ln">  6041&nbsp;&nbsp;</span>				incidlelocked(1)
<span id="L6042" class="ln">  6042&nbsp;&nbsp;</span>				netpollAdjustWaiters(delta)
<span id="L6043" class="ln">  6043&nbsp;&nbsp;</span>			}
<span id="L6044" class="ln">  6044&nbsp;&nbsp;</span>		}
<span id="L6045" class="ln">  6045&nbsp;&nbsp;</span>		if GOOS == &#34;netbsd&#34; &amp;&amp; needSysmonWorkaround {
<span id="L6046" class="ln">  6046&nbsp;&nbsp;</span>			<span class="comment">// netpoll is responsible for waiting for timer</span>
<span id="L6047" class="ln">  6047&nbsp;&nbsp;</span>			<span class="comment">// expiration, so we typically don&#39;t have to worry</span>
<span id="L6048" class="ln">  6048&nbsp;&nbsp;</span>			<span class="comment">// about starting an M to service timers. (Note that</span>
<span id="L6049" class="ln">  6049&nbsp;&nbsp;</span>			<span class="comment">// sleep for timeSleepUntil above simply ensures sysmon</span>
<span id="L6050" class="ln">  6050&nbsp;&nbsp;</span>			<span class="comment">// starts running again when that timer expiration may</span>
<span id="L6051" class="ln">  6051&nbsp;&nbsp;</span>			<span class="comment">// cause Go code to run again).</span>
<span id="L6052" class="ln">  6052&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L6053" class="ln">  6053&nbsp;&nbsp;</span>			<span class="comment">// However, netbsd has a kernel bug that sometimes</span>
<span id="L6054" class="ln">  6054&nbsp;&nbsp;</span>			<span class="comment">// misses netpollBreak wake-ups, which can lead to</span>
<span id="L6055" class="ln">  6055&nbsp;&nbsp;</span>			<span class="comment">// unbounded delays servicing timers. If we detect this</span>
<span id="L6056" class="ln">  6056&nbsp;&nbsp;</span>			<span class="comment">// overrun, then startm to get something to handle the</span>
<span id="L6057" class="ln">  6057&nbsp;&nbsp;</span>			<span class="comment">// timer.</span>
<span id="L6058" class="ln">  6058&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L6059" class="ln">  6059&nbsp;&nbsp;</span>			<span class="comment">// See issue 42515 and</span>
<span id="L6060" class="ln">  6060&nbsp;&nbsp;</span>			<span class="comment">// https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=50094.</span>
<span id="L6061" class="ln">  6061&nbsp;&nbsp;</span>			if next := timeSleepUntil(); next &lt; now {
<span id="L6062" class="ln">  6062&nbsp;&nbsp;</span>				startm(nil, false, false)
<span id="L6063" class="ln">  6063&nbsp;&nbsp;</span>			}
<span id="L6064" class="ln">  6064&nbsp;&nbsp;</span>		}
<span id="L6065" class="ln">  6065&nbsp;&nbsp;</span>		if scavenger.sysmonWake.Load() != 0 {
<span id="L6066" class="ln">  6066&nbsp;&nbsp;</span>			<span class="comment">// Kick the scavenger awake if someone requested it.</span>
<span id="L6067" class="ln">  6067&nbsp;&nbsp;</span>			scavenger.wake()
<span id="L6068" class="ln">  6068&nbsp;&nbsp;</span>		}
<span id="L6069" class="ln">  6069&nbsp;&nbsp;</span>		<span class="comment">// retake P&#39;s blocked in syscalls</span>
<span id="L6070" class="ln">  6070&nbsp;&nbsp;</span>		<span class="comment">// and preempt long running G&#39;s</span>
<span id="L6071" class="ln">  6071&nbsp;&nbsp;</span>		if retake(now) != 0 {
<span id="L6072" class="ln">  6072&nbsp;&nbsp;</span>			idle = 0
<span id="L6073" class="ln">  6073&nbsp;&nbsp;</span>		} else {
<span id="L6074" class="ln">  6074&nbsp;&nbsp;</span>			idle++
<span id="L6075" class="ln">  6075&nbsp;&nbsp;</span>		}
<span id="L6076" class="ln">  6076&nbsp;&nbsp;</span>		<span class="comment">// check if we need to force a GC</span>
<span id="L6077" class="ln">  6077&nbsp;&nbsp;</span>		if t := (gcTrigger{kind: gcTriggerTime, now: now}); t.test() &amp;&amp; forcegc.idle.Load() {
<span id="L6078" class="ln">  6078&nbsp;&nbsp;</span>			lock(&amp;forcegc.lock)
<span id="L6079" class="ln">  6079&nbsp;&nbsp;</span>			forcegc.idle.Store(false)
<span id="L6080" class="ln">  6080&nbsp;&nbsp;</span>			var list gList
<span id="L6081" class="ln">  6081&nbsp;&nbsp;</span>			list.push(forcegc.g)
<span id="L6082" class="ln">  6082&nbsp;&nbsp;</span>			injectglist(&amp;list)
<span id="L6083" class="ln">  6083&nbsp;&nbsp;</span>			unlock(&amp;forcegc.lock)
<span id="L6084" class="ln">  6084&nbsp;&nbsp;</span>		}
<span id="L6085" class="ln">  6085&nbsp;&nbsp;</span>		if debug.schedtrace &gt; 0 &amp;&amp; lasttrace+int64(debug.schedtrace)*1000000 &lt;= now {
<span id="L6086" class="ln">  6086&nbsp;&nbsp;</span>			lasttrace = now
<span id="L6087" class="ln">  6087&nbsp;&nbsp;</span>			schedtrace(debug.scheddetail &gt; 0)
<span id="L6088" class="ln">  6088&nbsp;&nbsp;</span>		}
<span id="L6089" class="ln">  6089&nbsp;&nbsp;</span>		unlock(&amp;sched.sysmonlock)
<span id="L6090" class="ln">  6090&nbsp;&nbsp;</span>	}
<span id="L6091" class="ln">  6091&nbsp;&nbsp;</span>}
<span id="L6092" class="ln">  6092&nbsp;&nbsp;</span>
<span id="L6093" class="ln">  6093&nbsp;&nbsp;</span>type sysmontick struct {
<span id="L6094" class="ln">  6094&nbsp;&nbsp;</span>	schedtick   uint32
<span id="L6095" class="ln">  6095&nbsp;&nbsp;</span>	schedwhen   int64
<span id="L6096" class="ln">  6096&nbsp;&nbsp;</span>	syscalltick uint32
<span id="L6097" class="ln">  6097&nbsp;&nbsp;</span>	syscallwhen int64
<span id="L6098" class="ln">  6098&nbsp;&nbsp;</span>}
<span id="L6099" class="ln">  6099&nbsp;&nbsp;</span>
<span id="L6100" class="ln">  6100&nbsp;&nbsp;</span><span class="comment">// forcePreemptNS is the time slice given to a G before it is</span>
<span id="L6101" class="ln">  6101&nbsp;&nbsp;</span><span class="comment">// preempted.</span>
<span id="L6102" class="ln">  6102&nbsp;&nbsp;</span>const forcePreemptNS = 10 * 1000 * 1000 <span class="comment">// 10ms</span>
<span id="L6103" class="ln">  6103&nbsp;&nbsp;</span>
<span id="L6104" class="ln">  6104&nbsp;&nbsp;</span>func retake(now int64) uint32 {
<span id="L6105" class="ln">  6105&nbsp;&nbsp;</span>	n := 0
<span id="L6106" class="ln">  6106&nbsp;&nbsp;</span>	<span class="comment">// Prevent allp slice changes. This lock will be completely</span>
<span id="L6107" class="ln">  6107&nbsp;&nbsp;</span>	<span class="comment">// uncontended unless we&#39;re already stopping the world.</span>
<span id="L6108" class="ln">  6108&nbsp;&nbsp;</span>	lock(&amp;allpLock)
<span id="L6109" class="ln">  6109&nbsp;&nbsp;</span>	<span class="comment">// We can&#39;t use a range loop over allp because we may</span>
<span id="L6110" class="ln">  6110&nbsp;&nbsp;</span>	<span class="comment">// temporarily drop the allpLock. Hence, we need to re-fetch</span>
<span id="L6111" class="ln">  6111&nbsp;&nbsp;</span>	<span class="comment">// allp each time around the loop.</span>
<span id="L6112" class="ln">  6112&nbsp;&nbsp;</span>	for i := 0; i &lt; len(allp); i++ {
<span id="L6113" class="ln">  6113&nbsp;&nbsp;</span>		pp := allp[i]
<span id="L6114" class="ln">  6114&nbsp;&nbsp;</span>		if pp == nil {
<span id="L6115" class="ln">  6115&nbsp;&nbsp;</span>			<span class="comment">// This can happen if procresize has grown</span>
<span id="L6116" class="ln">  6116&nbsp;&nbsp;</span>			<span class="comment">// allp but not yet created new Ps.</span>
<span id="L6117" class="ln">  6117&nbsp;&nbsp;</span>			continue
<span id="L6118" class="ln">  6118&nbsp;&nbsp;</span>		}
<span id="L6119" class="ln">  6119&nbsp;&nbsp;</span>		pd := &amp;pp.sysmontick
<span id="L6120" class="ln">  6120&nbsp;&nbsp;</span>		s := pp.status
<span id="L6121" class="ln">  6121&nbsp;&nbsp;</span>		sysretake := false
<span id="L6122" class="ln">  6122&nbsp;&nbsp;</span>		if s == _Prunning || s == _Psyscall {
<span id="L6123" class="ln">  6123&nbsp;&nbsp;</span>			<span class="comment">// Preempt G if it&#39;s running for too long.</span>
<span id="L6124" class="ln">  6124&nbsp;&nbsp;</span>			t := int64(pp.schedtick)
<span id="L6125" class="ln">  6125&nbsp;&nbsp;</span>			if int64(pd.schedtick) != t {
<span id="L6126" class="ln">  6126&nbsp;&nbsp;</span>				pd.schedtick = uint32(t)
<span id="L6127" class="ln">  6127&nbsp;&nbsp;</span>				pd.schedwhen = now
<span id="L6128" class="ln">  6128&nbsp;&nbsp;</span>			} else if pd.schedwhen+forcePreemptNS &lt;= now {
<span id="L6129" class="ln">  6129&nbsp;&nbsp;</span>				preemptone(pp)
<span id="L6130" class="ln">  6130&nbsp;&nbsp;</span>				<span class="comment">// In case of syscall, preemptone() doesn&#39;t</span>
<span id="L6131" class="ln">  6131&nbsp;&nbsp;</span>				<span class="comment">// work, because there is no M wired to P.</span>
<span id="L6132" class="ln">  6132&nbsp;&nbsp;</span>				sysretake = true
<span id="L6133" class="ln">  6133&nbsp;&nbsp;</span>			}
<span id="L6134" class="ln">  6134&nbsp;&nbsp;</span>		}
<span id="L6135" class="ln">  6135&nbsp;&nbsp;</span>		if s == _Psyscall {
<span id="L6136" class="ln">  6136&nbsp;&nbsp;</span>			<span class="comment">// Retake P from syscall if it&#39;s there for more than 1 sysmon tick (at least 20us).</span>
<span id="L6137" class="ln">  6137&nbsp;&nbsp;</span>			t := int64(pp.syscalltick)
<span id="L6138" class="ln">  6138&nbsp;&nbsp;</span>			if !sysretake &amp;&amp; int64(pd.syscalltick) != t {
<span id="L6139" class="ln">  6139&nbsp;&nbsp;</span>				pd.syscalltick = uint32(t)
<span id="L6140" class="ln">  6140&nbsp;&nbsp;</span>				pd.syscallwhen = now
<span id="L6141" class="ln">  6141&nbsp;&nbsp;</span>				continue
<span id="L6142" class="ln">  6142&nbsp;&nbsp;</span>			}
<span id="L6143" class="ln">  6143&nbsp;&nbsp;</span>			<span class="comment">// On the one hand we don&#39;t want to retake Ps if there is no other work to do,</span>
<span id="L6144" class="ln">  6144&nbsp;&nbsp;</span>			<span class="comment">// but on the other hand we want to retake them eventually</span>
<span id="L6145" class="ln">  6145&nbsp;&nbsp;</span>			<span class="comment">// because they can prevent the sysmon thread from deep sleep.</span>
<span id="L6146" class="ln">  6146&nbsp;&nbsp;</span>			if runqempty(pp) &amp;&amp; sched.nmspinning.Load()+sched.npidle.Load() &gt; 0 &amp;&amp; pd.syscallwhen+10*1000*1000 &gt; now {
<span id="L6147" class="ln">  6147&nbsp;&nbsp;</span>				continue
<span id="L6148" class="ln">  6148&nbsp;&nbsp;</span>			}
<span id="L6149" class="ln">  6149&nbsp;&nbsp;</span>			<span class="comment">// Drop allpLock so we can take sched.lock.</span>
<span id="L6150" class="ln">  6150&nbsp;&nbsp;</span>			unlock(&amp;allpLock)
<span id="L6151" class="ln">  6151&nbsp;&nbsp;</span>			<span class="comment">// Need to decrement number of idle locked M&#39;s</span>
<span id="L6152" class="ln">  6152&nbsp;&nbsp;</span>			<span class="comment">// (pretending that one more is running) before the CAS.</span>
<span id="L6153" class="ln">  6153&nbsp;&nbsp;</span>			<span class="comment">// Otherwise the M from which we retake can exit the syscall,</span>
<span id="L6154" class="ln">  6154&nbsp;&nbsp;</span>			<span class="comment">// increment nmidle and report deadlock.</span>
<span id="L6155" class="ln">  6155&nbsp;&nbsp;</span>			incidlelocked(-1)
<span id="L6156" class="ln">  6156&nbsp;&nbsp;</span>			trace := traceAcquire()
<span id="L6157" class="ln">  6157&nbsp;&nbsp;</span>			if atomic.Cas(&amp;pp.status, s, _Pidle) {
<span id="L6158" class="ln">  6158&nbsp;&nbsp;</span>				if trace.ok() {
<span id="L6159" class="ln">  6159&nbsp;&nbsp;</span>					trace.GoSysBlock(pp)
<span id="L6160" class="ln">  6160&nbsp;&nbsp;</span>					trace.ProcSteal(pp, false)
<span id="L6161" class="ln">  6161&nbsp;&nbsp;</span>					traceRelease(trace)
<span id="L6162" class="ln">  6162&nbsp;&nbsp;</span>				}
<span id="L6163" class="ln">  6163&nbsp;&nbsp;</span>				n++
<span id="L6164" class="ln">  6164&nbsp;&nbsp;</span>				pp.syscalltick++
<span id="L6165" class="ln">  6165&nbsp;&nbsp;</span>				handoffp(pp)
<span id="L6166" class="ln">  6166&nbsp;&nbsp;</span>			} else if trace.ok() {
<span id="L6167" class="ln">  6167&nbsp;&nbsp;</span>				traceRelease(trace)
<span id="L6168" class="ln">  6168&nbsp;&nbsp;</span>			}
<span id="L6169" class="ln">  6169&nbsp;&nbsp;</span>			incidlelocked(1)
<span id="L6170" class="ln">  6170&nbsp;&nbsp;</span>			lock(&amp;allpLock)
<span id="L6171" class="ln">  6171&nbsp;&nbsp;</span>		}
<span id="L6172" class="ln">  6172&nbsp;&nbsp;</span>	}
<span id="L6173" class="ln">  6173&nbsp;&nbsp;</span>	unlock(&amp;allpLock)
<span id="L6174" class="ln">  6174&nbsp;&nbsp;</span>	return uint32(n)
<span id="L6175" class="ln">  6175&nbsp;&nbsp;</span>}
<span id="L6176" class="ln">  6176&nbsp;&nbsp;</span>
<span id="L6177" class="ln">  6177&nbsp;&nbsp;</span><span class="comment">// Tell all goroutines that they have been preempted and they should stop.</span>
<span id="L6178" class="ln">  6178&nbsp;&nbsp;</span><span class="comment">// This function is purely best-effort. It can fail to inform a goroutine if a</span>
<span id="L6179" class="ln">  6179&nbsp;&nbsp;</span><span class="comment">// processor just started running it.</span>
<span id="L6180" class="ln">  6180&nbsp;&nbsp;</span><span class="comment">// No locks need to be held.</span>
<span id="L6181" class="ln">  6181&nbsp;&nbsp;</span><span class="comment">// Returns true if preemption request was issued to at least one goroutine.</span>
<span id="L6182" class="ln">  6182&nbsp;&nbsp;</span>func preemptall() bool {
<span id="L6183" class="ln">  6183&nbsp;&nbsp;</span>	res := false
<span id="L6184" class="ln">  6184&nbsp;&nbsp;</span>	for _, pp := range allp {
<span id="L6185" class="ln">  6185&nbsp;&nbsp;</span>		if pp.status != _Prunning {
<span id="L6186" class="ln">  6186&nbsp;&nbsp;</span>			continue
<span id="L6187" class="ln">  6187&nbsp;&nbsp;</span>		}
<span id="L6188" class="ln">  6188&nbsp;&nbsp;</span>		if preemptone(pp) {
<span id="L6189" class="ln">  6189&nbsp;&nbsp;</span>			res = true
<span id="L6190" class="ln">  6190&nbsp;&nbsp;</span>		}
<span id="L6191" class="ln">  6191&nbsp;&nbsp;</span>	}
<span id="L6192" class="ln">  6192&nbsp;&nbsp;</span>	return res
<span id="L6193" class="ln">  6193&nbsp;&nbsp;</span>}
<span id="L6194" class="ln">  6194&nbsp;&nbsp;</span>
<span id="L6195" class="ln">  6195&nbsp;&nbsp;</span><span class="comment">// Tell the goroutine running on processor P to stop.</span>
<span id="L6196" class="ln">  6196&nbsp;&nbsp;</span><span class="comment">// This function is purely best-effort. It can incorrectly fail to inform the</span>
<span id="L6197" class="ln">  6197&nbsp;&nbsp;</span><span class="comment">// goroutine. It can inform the wrong goroutine. Even if it informs the</span>
<span id="L6198" class="ln">  6198&nbsp;&nbsp;</span><span class="comment">// correct goroutine, that goroutine might ignore the request if it is</span>
<span id="L6199" class="ln">  6199&nbsp;&nbsp;</span><span class="comment">// simultaneously executing newstack.</span>
<span id="L6200" class="ln">  6200&nbsp;&nbsp;</span><span class="comment">// No lock needs to be held.</span>
<span id="L6201" class="ln">  6201&nbsp;&nbsp;</span><span class="comment">// Returns true if preemption request was issued.</span>
<span id="L6202" class="ln">  6202&nbsp;&nbsp;</span><span class="comment">// The actual preemption will happen at some point in the future</span>
<span id="L6203" class="ln">  6203&nbsp;&nbsp;</span><span class="comment">// and will be indicated by the gp-&gt;status no longer being</span>
<span id="L6204" class="ln">  6204&nbsp;&nbsp;</span><span class="comment">// Grunning</span>
<span id="L6205" class="ln">  6205&nbsp;&nbsp;</span>func preemptone(pp *p) bool {
<span id="L6206" class="ln">  6206&nbsp;&nbsp;</span>	mp := pp.m.ptr()
<span id="L6207" class="ln">  6207&nbsp;&nbsp;</span>	if mp == nil || mp == getg().m {
<span id="L6208" class="ln">  6208&nbsp;&nbsp;</span>		return false
<span id="L6209" class="ln">  6209&nbsp;&nbsp;</span>	}
<span id="L6210" class="ln">  6210&nbsp;&nbsp;</span>	gp := mp.curg
<span id="L6211" class="ln">  6211&nbsp;&nbsp;</span>	if gp == nil || gp == mp.g0 {
<span id="L6212" class="ln">  6212&nbsp;&nbsp;</span>		return false
<span id="L6213" class="ln">  6213&nbsp;&nbsp;</span>	}
<span id="L6214" class="ln">  6214&nbsp;&nbsp;</span>
<span id="L6215" class="ln">  6215&nbsp;&nbsp;</span>	gp.preempt = true
<span id="L6216" class="ln">  6216&nbsp;&nbsp;</span>
<span id="L6217" class="ln">  6217&nbsp;&nbsp;</span>	<span class="comment">// Every call in a goroutine checks for stack overflow by</span>
<span id="L6218" class="ln">  6218&nbsp;&nbsp;</span>	<span class="comment">// comparing the current stack pointer to gp-&gt;stackguard0.</span>
<span id="L6219" class="ln">  6219&nbsp;&nbsp;</span>	<span class="comment">// Setting gp-&gt;stackguard0 to StackPreempt folds</span>
<span id="L6220" class="ln">  6220&nbsp;&nbsp;</span>	<span class="comment">// preemption into the normal stack overflow check.</span>
<span id="L6221" class="ln">  6221&nbsp;&nbsp;</span>	gp.stackguard0 = stackPreempt
<span id="L6222" class="ln">  6222&nbsp;&nbsp;</span>
<span id="L6223" class="ln">  6223&nbsp;&nbsp;</span>	<span class="comment">// Request an async preemption of this P.</span>
<span id="L6224" class="ln">  6224&nbsp;&nbsp;</span>	if preemptMSupported &amp;&amp; debug.asyncpreemptoff == 0 {
<span id="L6225" class="ln">  6225&nbsp;&nbsp;</span>		pp.preempt = true
<span id="L6226" class="ln">  6226&nbsp;&nbsp;</span>		preemptM(mp)
<span id="L6227" class="ln">  6227&nbsp;&nbsp;</span>	}
<span id="L6228" class="ln">  6228&nbsp;&nbsp;</span>
<span id="L6229" class="ln">  6229&nbsp;&nbsp;</span>	return true
<span id="L6230" class="ln">  6230&nbsp;&nbsp;</span>}
<span id="L6231" class="ln">  6231&nbsp;&nbsp;</span>
<span id="L6232" class="ln">  6232&nbsp;&nbsp;</span>var starttime int64
<span id="L6233" class="ln">  6233&nbsp;&nbsp;</span>
<span id="L6234" class="ln">  6234&nbsp;&nbsp;</span>func schedtrace(detailed bool) {
<span id="L6235" class="ln">  6235&nbsp;&nbsp;</span>	now := nanotime()
<span id="L6236" class="ln">  6236&nbsp;&nbsp;</span>	if starttime == 0 {
<span id="L6237" class="ln">  6237&nbsp;&nbsp;</span>		starttime = now
<span id="L6238" class="ln">  6238&nbsp;&nbsp;</span>	}
<span id="L6239" class="ln">  6239&nbsp;&nbsp;</span>
<span id="L6240" class="ln">  6240&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L6241" class="ln">  6241&nbsp;&nbsp;</span>	print(&#34;SCHED &#34;, (now-starttime)/1e6, &#34;ms: gomaxprocs=&#34;, gomaxprocs, &#34; idleprocs=&#34;, sched.npidle.Load(), &#34; threads=&#34;, mcount(), &#34; spinningthreads=&#34;, sched.nmspinning.Load(), &#34; needspinning=&#34;, sched.needspinning.Load(), &#34; idlethreads=&#34;, sched.nmidle, &#34; runqueue=&#34;, sched.runqsize)
<span id="L6242" class="ln">  6242&nbsp;&nbsp;</span>	if detailed {
<span id="L6243" class="ln">  6243&nbsp;&nbsp;</span>		print(&#34; gcwaiting=&#34;, sched.gcwaiting.Load(), &#34; nmidlelocked=&#34;, sched.nmidlelocked, &#34; stopwait=&#34;, sched.stopwait, &#34; sysmonwait=&#34;, sched.sysmonwait.Load(), &#34;\n&#34;)
<span id="L6244" class="ln">  6244&nbsp;&nbsp;</span>	}
<span id="L6245" class="ln">  6245&nbsp;&nbsp;</span>	<span class="comment">// We must be careful while reading data from P&#39;s, M&#39;s and G&#39;s.</span>
<span id="L6246" class="ln">  6246&nbsp;&nbsp;</span>	<span class="comment">// Even if we hold schedlock, most data can be changed concurrently.</span>
<span id="L6247" class="ln">  6247&nbsp;&nbsp;</span>	<span class="comment">// E.g. (p-&gt;m ? p-&gt;m-&gt;id : -1) can crash if p-&gt;m changes from non-nil to nil.</span>
<span id="L6248" class="ln">  6248&nbsp;&nbsp;</span>	for i, pp := range allp {
<span id="L6249" class="ln">  6249&nbsp;&nbsp;</span>		mp := pp.m.ptr()
<span id="L6250" class="ln">  6250&nbsp;&nbsp;</span>		h := atomic.Load(&amp;pp.runqhead)
<span id="L6251" class="ln">  6251&nbsp;&nbsp;</span>		t := atomic.Load(&amp;pp.runqtail)
<span id="L6252" class="ln">  6252&nbsp;&nbsp;</span>		if detailed {
<span id="L6253" class="ln">  6253&nbsp;&nbsp;</span>			print(&#34;  P&#34;, i, &#34;: status=&#34;, pp.status, &#34; schedtick=&#34;, pp.schedtick, &#34; syscalltick=&#34;, pp.syscalltick, &#34; m=&#34;)
<span id="L6254" class="ln">  6254&nbsp;&nbsp;</span>			if mp != nil {
<span id="L6255" class="ln">  6255&nbsp;&nbsp;</span>				print(mp.id)
<span id="L6256" class="ln">  6256&nbsp;&nbsp;</span>			} else {
<span id="L6257" class="ln">  6257&nbsp;&nbsp;</span>				print(&#34;nil&#34;)
<span id="L6258" class="ln">  6258&nbsp;&nbsp;</span>			}
<span id="L6259" class="ln">  6259&nbsp;&nbsp;</span>			print(&#34; runqsize=&#34;, t-h, &#34; gfreecnt=&#34;, pp.gFree.n, &#34; timerslen=&#34;, len(pp.timers), &#34;\n&#34;)
<span id="L6260" class="ln">  6260&nbsp;&nbsp;</span>		} else {
<span id="L6261" class="ln">  6261&nbsp;&nbsp;</span>			<span class="comment">// In non-detailed mode format lengths of per-P run queues as:</span>
<span id="L6262" class="ln">  6262&nbsp;&nbsp;</span>			<span class="comment">// [len1 len2 len3 len4]</span>
<span id="L6263" class="ln">  6263&nbsp;&nbsp;</span>			print(&#34; &#34;)
<span id="L6264" class="ln">  6264&nbsp;&nbsp;</span>			if i == 0 {
<span id="L6265" class="ln">  6265&nbsp;&nbsp;</span>				print(&#34;[&#34;)
<span id="L6266" class="ln">  6266&nbsp;&nbsp;</span>			}
<span id="L6267" class="ln">  6267&nbsp;&nbsp;</span>			print(t - h)
<span id="L6268" class="ln">  6268&nbsp;&nbsp;</span>			if i == len(allp)-1 {
<span id="L6269" class="ln">  6269&nbsp;&nbsp;</span>				print(&#34;]\n&#34;)
<span id="L6270" class="ln">  6270&nbsp;&nbsp;</span>			}
<span id="L6271" class="ln">  6271&nbsp;&nbsp;</span>		}
<span id="L6272" class="ln">  6272&nbsp;&nbsp;</span>	}
<span id="L6273" class="ln">  6273&nbsp;&nbsp;</span>
<span id="L6274" class="ln">  6274&nbsp;&nbsp;</span>	if !detailed {
<span id="L6275" class="ln">  6275&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L6276" class="ln">  6276&nbsp;&nbsp;</span>		return
<span id="L6277" class="ln">  6277&nbsp;&nbsp;</span>	}
<span id="L6278" class="ln">  6278&nbsp;&nbsp;</span>
<span id="L6279" class="ln">  6279&nbsp;&nbsp;</span>	for mp := allm; mp != nil; mp = mp.alllink {
<span id="L6280" class="ln">  6280&nbsp;&nbsp;</span>		pp := mp.p.ptr()
<span id="L6281" class="ln">  6281&nbsp;&nbsp;</span>		print(&#34;  M&#34;, mp.id, &#34;: p=&#34;)
<span id="L6282" class="ln">  6282&nbsp;&nbsp;</span>		if pp != nil {
<span id="L6283" class="ln">  6283&nbsp;&nbsp;</span>			print(pp.id)
<span id="L6284" class="ln">  6284&nbsp;&nbsp;</span>		} else {
<span id="L6285" class="ln">  6285&nbsp;&nbsp;</span>			print(&#34;nil&#34;)
<span id="L6286" class="ln">  6286&nbsp;&nbsp;</span>		}
<span id="L6287" class="ln">  6287&nbsp;&nbsp;</span>		print(&#34; curg=&#34;)
<span id="L6288" class="ln">  6288&nbsp;&nbsp;</span>		if mp.curg != nil {
<span id="L6289" class="ln">  6289&nbsp;&nbsp;</span>			print(mp.curg.goid)
<span id="L6290" class="ln">  6290&nbsp;&nbsp;</span>		} else {
<span id="L6291" class="ln">  6291&nbsp;&nbsp;</span>			print(&#34;nil&#34;)
<span id="L6292" class="ln">  6292&nbsp;&nbsp;</span>		}
<span id="L6293" class="ln">  6293&nbsp;&nbsp;</span>		print(&#34; mallocing=&#34;, mp.mallocing, &#34; throwing=&#34;, mp.throwing, &#34; preemptoff=&#34;, mp.preemptoff, &#34; locks=&#34;, mp.locks, &#34; dying=&#34;, mp.dying, &#34; spinning=&#34;, mp.spinning, &#34; blocked=&#34;, mp.blocked, &#34; lockedg=&#34;)
<span id="L6294" class="ln">  6294&nbsp;&nbsp;</span>		if lockedg := mp.lockedg.ptr(); lockedg != nil {
<span id="L6295" class="ln">  6295&nbsp;&nbsp;</span>			print(lockedg.goid)
<span id="L6296" class="ln">  6296&nbsp;&nbsp;</span>		} else {
<span id="L6297" class="ln">  6297&nbsp;&nbsp;</span>			print(&#34;nil&#34;)
<span id="L6298" class="ln">  6298&nbsp;&nbsp;</span>		}
<span id="L6299" class="ln">  6299&nbsp;&nbsp;</span>		print(&#34;\n&#34;)
<span id="L6300" class="ln">  6300&nbsp;&nbsp;</span>	}
<span id="L6301" class="ln">  6301&nbsp;&nbsp;</span>
<span id="L6302" class="ln">  6302&nbsp;&nbsp;</span>	forEachG(func(gp *g) {
<span id="L6303" class="ln">  6303&nbsp;&nbsp;</span>		print(&#34;  G&#34;, gp.goid, &#34;: status=&#34;, readgstatus(gp), &#34;(&#34;, gp.waitreason.String(), &#34;) m=&#34;)
<span id="L6304" class="ln">  6304&nbsp;&nbsp;</span>		if gp.m != nil {
<span id="L6305" class="ln">  6305&nbsp;&nbsp;</span>			print(gp.m.id)
<span id="L6306" class="ln">  6306&nbsp;&nbsp;</span>		} else {
<span id="L6307" class="ln">  6307&nbsp;&nbsp;</span>			print(&#34;nil&#34;)
<span id="L6308" class="ln">  6308&nbsp;&nbsp;</span>		}
<span id="L6309" class="ln">  6309&nbsp;&nbsp;</span>		print(&#34; lockedm=&#34;)
<span id="L6310" class="ln">  6310&nbsp;&nbsp;</span>		if lockedm := gp.lockedm.ptr(); lockedm != nil {
<span id="L6311" class="ln">  6311&nbsp;&nbsp;</span>			print(lockedm.id)
<span id="L6312" class="ln">  6312&nbsp;&nbsp;</span>		} else {
<span id="L6313" class="ln">  6313&nbsp;&nbsp;</span>			print(&#34;nil&#34;)
<span id="L6314" class="ln">  6314&nbsp;&nbsp;</span>		}
<span id="L6315" class="ln">  6315&nbsp;&nbsp;</span>		print(&#34;\n&#34;)
<span id="L6316" class="ln">  6316&nbsp;&nbsp;</span>	})
<span id="L6317" class="ln">  6317&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L6318" class="ln">  6318&nbsp;&nbsp;</span>}
<span id="L6319" class="ln">  6319&nbsp;&nbsp;</span>
<span id="L6320" class="ln">  6320&nbsp;&nbsp;</span><span class="comment">// schedEnableUser enables or disables the scheduling of user</span>
<span id="L6321" class="ln">  6321&nbsp;&nbsp;</span><span class="comment">// goroutines.</span>
<span id="L6322" class="ln">  6322&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6323" class="ln">  6323&nbsp;&nbsp;</span><span class="comment">// This does not stop already running user goroutines, so the caller</span>
<span id="L6324" class="ln">  6324&nbsp;&nbsp;</span><span class="comment">// should first stop the world when disabling user goroutines.</span>
<span id="L6325" class="ln">  6325&nbsp;&nbsp;</span>func schedEnableUser(enable bool) {
<span id="L6326" class="ln">  6326&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L6327" class="ln">  6327&nbsp;&nbsp;</span>	if sched.disable.user == !enable {
<span id="L6328" class="ln">  6328&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L6329" class="ln">  6329&nbsp;&nbsp;</span>		return
<span id="L6330" class="ln">  6330&nbsp;&nbsp;</span>	}
<span id="L6331" class="ln">  6331&nbsp;&nbsp;</span>	sched.disable.user = !enable
<span id="L6332" class="ln">  6332&nbsp;&nbsp;</span>	if enable {
<span id="L6333" class="ln">  6333&nbsp;&nbsp;</span>		n := sched.disable.n
<span id="L6334" class="ln">  6334&nbsp;&nbsp;</span>		sched.disable.n = 0
<span id="L6335" class="ln">  6335&nbsp;&nbsp;</span>		globrunqputbatch(&amp;sched.disable.runnable, n)
<span id="L6336" class="ln">  6336&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L6337" class="ln">  6337&nbsp;&nbsp;</span>		for ; n != 0 &amp;&amp; sched.npidle.Load() != 0; n-- {
<span id="L6338" class="ln">  6338&nbsp;&nbsp;</span>			startm(nil, false, false)
<span id="L6339" class="ln">  6339&nbsp;&nbsp;</span>		}
<span id="L6340" class="ln">  6340&nbsp;&nbsp;</span>	} else {
<span id="L6341" class="ln">  6341&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L6342" class="ln">  6342&nbsp;&nbsp;</span>	}
<span id="L6343" class="ln">  6343&nbsp;&nbsp;</span>}
<span id="L6344" class="ln">  6344&nbsp;&nbsp;</span>
<span id="L6345" class="ln">  6345&nbsp;&nbsp;</span><span class="comment">// schedEnabled reports whether gp should be scheduled. It returns</span>
<span id="L6346" class="ln">  6346&nbsp;&nbsp;</span><span class="comment">// false is scheduling of gp is disabled.</span>
<span id="L6347" class="ln">  6347&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6348" class="ln">  6348&nbsp;&nbsp;</span><span class="comment">// sched.lock must be held.</span>
<span id="L6349" class="ln">  6349&nbsp;&nbsp;</span>func schedEnabled(gp *g) bool {
<span id="L6350" class="ln">  6350&nbsp;&nbsp;</span>	assertLockHeld(&amp;sched.lock)
<span id="L6351" class="ln">  6351&nbsp;&nbsp;</span>
<span id="L6352" class="ln">  6352&nbsp;&nbsp;</span>	if sched.disable.user {
<span id="L6353" class="ln">  6353&nbsp;&nbsp;</span>		return isSystemGoroutine(gp, true)
<span id="L6354" class="ln">  6354&nbsp;&nbsp;</span>	}
<span id="L6355" class="ln">  6355&nbsp;&nbsp;</span>	return true
<span id="L6356" class="ln">  6356&nbsp;&nbsp;</span>}
<span id="L6357" class="ln">  6357&nbsp;&nbsp;</span>
<span id="L6358" class="ln">  6358&nbsp;&nbsp;</span><span class="comment">// Put mp on midle list.</span>
<span id="L6359" class="ln">  6359&nbsp;&nbsp;</span><span class="comment">// sched.lock must be held.</span>
<span id="L6360" class="ln">  6360&nbsp;&nbsp;</span><span class="comment">// May run during STW, so write barriers are not allowed.</span>
<span id="L6361" class="ln">  6361&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6362" class="ln">  6362&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L6363" class="ln">  6363&nbsp;&nbsp;</span>func mput(mp *m) {
<span id="L6364" class="ln">  6364&nbsp;&nbsp;</span>	assertLockHeld(&amp;sched.lock)
<span id="L6365" class="ln">  6365&nbsp;&nbsp;</span>
<span id="L6366" class="ln">  6366&nbsp;&nbsp;</span>	mp.schedlink = sched.midle
<span id="L6367" class="ln">  6367&nbsp;&nbsp;</span>	sched.midle.set(mp)
<span id="L6368" class="ln">  6368&nbsp;&nbsp;</span>	sched.nmidle++
<span id="L6369" class="ln">  6369&nbsp;&nbsp;</span>	checkdead()
<span id="L6370" class="ln">  6370&nbsp;&nbsp;</span>}
<span id="L6371" class="ln">  6371&nbsp;&nbsp;</span>
<span id="L6372" class="ln">  6372&nbsp;&nbsp;</span><span class="comment">// Try to get an m from midle list.</span>
<span id="L6373" class="ln">  6373&nbsp;&nbsp;</span><span class="comment">// sched.lock must be held.</span>
<span id="L6374" class="ln">  6374&nbsp;&nbsp;</span><span class="comment">// May run during STW, so write barriers are not allowed.</span>
<span id="L6375" class="ln">  6375&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6376" class="ln">  6376&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L6377" class="ln">  6377&nbsp;&nbsp;</span>func mget() *m {
<span id="L6378" class="ln">  6378&nbsp;&nbsp;</span>	assertLockHeld(&amp;sched.lock)
<span id="L6379" class="ln">  6379&nbsp;&nbsp;</span>
<span id="L6380" class="ln">  6380&nbsp;&nbsp;</span>	mp := sched.midle.ptr()
<span id="L6381" class="ln">  6381&nbsp;&nbsp;</span>	if mp != nil {
<span id="L6382" class="ln">  6382&nbsp;&nbsp;</span>		sched.midle = mp.schedlink
<span id="L6383" class="ln">  6383&nbsp;&nbsp;</span>		sched.nmidle--
<span id="L6384" class="ln">  6384&nbsp;&nbsp;</span>	}
<span id="L6385" class="ln">  6385&nbsp;&nbsp;</span>	return mp
<span id="L6386" class="ln">  6386&nbsp;&nbsp;</span>}
<span id="L6387" class="ln">  6387&nbsp;&nbsp;</span>
<span id="L6388" class="ln">  6388&nbsp;&nbsp;</span><span class="comment">// Put gp on the global runnable queue.</span>
<span id="L6389" class="ln">  6389&nbsp;&nbsp;</span><span class="comment">// sched.lock must be held.</span>
<span id="L6390" class="ln">  6390&nbsp;&nbsp;</span><span class="comment">// May run during STW, so write barriers are not allowed.</span>
<span id="L6391" class="ln">  6391&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6392" class="ln">  6392&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L6393" class="ln">  6393&nbsp;&nbsp;</span>func globrunqput(gp *g) {
<span id="L6394" class="ln">  6394&nbsp;&nbsp;</span>	assertLockHeld(&amp;sched.lock)
<span id="L6395" class="ln">  6395&nbsp;&nbsp;</span>
<span id="L6396" class="ln">  6396&nbsp;&nbsp;</span>	sched.runq.pushBack(gp)
<span id="L6397" class="ln">  6397&nbsp;&nbsp;</span>	sched.runqsize++
<span id="L6398" class="ln">  6398&nbsp;&nbsp;</span>}
<span id="L6399" class="ln">  6399&nbsp;&nbsp;</span>
<span id="L6400" class="ln">  6400&nbsp;&nbsp;</span><span class="comment">// Put gp at the head of the global runnable queue.</span>
<span id="L6401" class="ln">  6401&nbsp;&nbsp;</span><span class="comment">// sched.lock must be held.</span>
<span id="L6402" class="ln">  6402&nbsp;&nbsp;</span><span class="comment">// May run during STW, so write barriers are not allowed.</span>
<span id="L6403" class="ln">  6403&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6404" class="ln">  6404&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L6405" class="ln">  6405&nbsp;&nbsp;</span>func globrunqputhead(gp *g) {
<span id="L6406" class="ln">  6406&nbsp;&nbsp;</span>	assertLockHeld(&amp;sched.lock)
<span id="L6407" class="ln">  6407&nbsp;&nbsp;</span>
<span id="L6408" class="ln">  6408&nbsp;&nbsp;</span>	sched.runq.push(gp)
<span id="L6409" class="ln">  6409&nbsp;&nbsp;</span>	sched.runqsize++
<span id="L6410" class="ln">  6410&nbsp;&nbsp;</span>}
<span id="L6411" class="ln">  6411&nbsp;&nbsp;</span>
<span id="L6412" class="ln">  6412&nbsp;&nbsp;</span><span class="comment">// Put a batch of runnable goroutines on the global runnable queue.</span>
<span id="L6413" class="ln">  6413&nbsp;&nbsp;</span><span class="comment">// This clears *batch.</span>
<span id="L6414" class="ln">  6414&nbsp;&nbsp;</span><span class="comment">// sched.lock must be held.</span>
<span id="L6415" class="ln">  6415&nbsp;&nbsp;</span><span class="comment">// May run during STW, so write barriers are not allowed.</span>
<span id="L6416" class="ln">  6416&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6417" class="ln">  6417&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L6418" class="ln">  6418&nbsp;&nbsp;</span>func globrunqputbatch(batch *gQueue, n int32) {
<span id="L6419" class="ln">  6419&nbsp;&nbsp;</span>	assertLockHeld(&amp;sched.lock)
<span id="L6420" class="ln">  6420&nbsp;&nbsp;</span>
<span id="L6421" class="ln">  6421&nbsp;&nbsp;</span>	sched.runq.pushBackAll(*batch)
<span id="L6422" class="ln">  6422&nbsp;&nbsp;</span>	sched.runqsize += n
<span id="L6423" class="ln">  6423&nbsp;&nbsp;</span>	*batch = gQueue{}
<span id="L6424" class="ln">  6424&nbsp;&nbsp;</span>}
<span id="L6425" class="ln">  6425&nbsp;&nbsp;</span>
<span id="L6426" class="ln">  6426&nbsp;&nbsp;</span><span class="comment">// Try get a batch of G&#39;s from the global runnable queue.</span>
<span id="L6427" class="ln">  6427&nbsp;&nbsp;</span><span class="comment">// sched.lock must be held.</span>
<span id="L6428" class="ln">  6428&nbsp;&nbsp;</span>func globrunqget(pp *p, max int32) *g {
<span id="L6429" class="ln">  6429&nbsp;&nbsp;</span>	assertLockHeld(&amp;sched.lock)
<span id="L6430" class="ln">  6430&nbsp;&nbsp;</span>
<span id="L6431" class="ln">  6431&nbsp;&nbsp;</span>	if sched.runqsize == 0 {
<span id="L6432" class="ln">  6432&nbsp;&nbsp;</span>		return nil
<span id="L6433" class="ln">  6433&nbsp;&nbsp;</span>	}
<span id="L6434" class="ln">  6434&nbsp;&nbsp;</span>
<span id="L6435" class="ln">  6435&nbsp;&nbsp;</span>	n := sched.runqsize/gomaxprocs + 1
<span id="L6436" class="ln">  6436&nbsp;&nbsp;</span>	if n &gt; sched.runqsize {
<span id="L6437" class="ln">  6437&nbsp;&nbsp;</span>		n = sched.runqsize
<span id="L6438" class="ln">  6438&nbsp;&nbsp;</span>	}
<span id="L6439" class="ln">  6439&nbsp;&nbsp;</span>	if max &gt; 0 &amp;&amp; n &gt; max {
<span id="L6440" class="ln">  6440&nbsp;&nbsp;</span>		n = max
<span id="L6441" class="ln">  6441&nbsp;&nbsp;</span>	}
<span id="L6442" class="ln">  6442&nbsp;&nbsp;</span>	if n &gt; int32(len(pp.runq))/2 {
<span id="L6443" class="ln">  6443&nbsp;&nbsp;</span>		n = int32(len(pp.runq)) / 2
<span id="L6444" class="ln">  6444&nbsp;&nbsp;</span>	}
<span id="L6445" class="ln">  6445&nbsp;&nbsp;</span>
<span id="L6446" class="ln">  6446&nbsp;&nbsp;</span>	sched.runqsize -= n
<span id="L6447" class="ln">  6447&nbsp;&nbsp;</span>
<span id="L6448" class="ln">  6448&nbsp;&nbsp;</span>	gp := sched.runq.pop()
<span id="L6449" class="ln">  6449&nbsp;&nbsp;</span>	n--
<span id="L6450" class="ln">  6450&nbsp;&nbsp;</span>	for ; n &gt; 0; n-- {
<span id="L6451" class="ln">  6451&nbsp;&nbsp;</span>		gp1 := sched.runq.pop()
<span id="L6452" class="ln">  6452&nbsp;&nbsp;</span>		runqput(pp, gp1, false)
<span id="L6453" class="ln">  6453&nbsp;&nbsp;</span>	}
<span id="L6454" class="ln">  6454&nbsp;&nbsp;</span>	return gp
<span id="L6455" class="ln">  6455&nbsp;&nbsp;</span>}
<span id="L6456" class="ln">  6456&nbsp;&nbsp;</span>
<span id="L6457" class="ln">  6457&nbsp;&nbsp;</span><span class="comment">// pMask is an atomic bitstring with one bit per P.</span>
<span id="L6458" class="ln">  6458&nbsp;&nbsp;</span>type pMask []uint32
<span id="L6459" class="ln">  6459&nbsp;&nbsp;</span>
<span id="L6460" class="ln">  6460&nbsp;&nbsp;</span><span class="comment">// read returns true if P id&#39;s bit is set.</span>
<span id="L6461" class="ln">  6461&nbsp;&nbsp;</span>func (p pMask) read(id uint32) bool {
<span id="L6462" class="ln">  6462&nbsp;&nbsp;</span>	word := id / 32
<span id="L6463" class="ln">  6463&nbsp;&nbsp;</span>	mask := uint32(1) &lt;&lt; (id % 32)
<span id="L6464" class="ln">  6464&nbsp;&nbsp;</span>	return (atomic.Load(&amp;p[word]) &amp; mask) != 0
<span id="L6465" class="ln">  6465&nbsp;&nbsp;</span>}
<span id="L6466" class="ln">  6466&nbsp;&nbsp;</span>
<span id="L6467" class="ln">  6467&nbsp;&nbsp;</span><span class="comment">// set sets P id&#39;s bit.</span>
<span id="L6468" class="ln">  6468&nbsp;&nbsp;</span>func (p pMask) set(id int32) {
<span id="L6469" class="ln">  6469&nbsp;&nbsp;</span>	word := id / 32
<span id="L6470" class="ln">  6470&nbsp;&nbsp;</span>	mask := uint32(1) &lt;&lt; (id % 32)
<span id="L6471" class="ln">  6471&nbsp;&nbsp;</span>	atomic.Or(&amp;p[word], mask)
<span id="L6472" class="ln">  6472&nbsp;&nbsp;</span>}
<span id="L6473" class="ln">  6473&nbsp;&nbsp;</span>
<span id="L6474" class="ln">  6474&nbsp;&nbsp;</span><span class="comment">// clear clears P id&#39;s bit.</span>
<span id="L6475" class="ln">  6475&nbsp;&nbsp;</span>func (p pMask) clear(id int32) {
<span id="L6476" class="ln">  6476&nbsp;&nbsp;</span>	word := id / 32
<span id="L6477" class="ln">  6477&nbsp;&nbsp;</span>	mask := uint32(1) &lt;&lt; (id % 32)
<span id="L6478" class="ln">  6478&nbsp;&nbsp;</span>	atomic.And(&amp;p[word], ^mask)
<span id="L6479" class="ln">  6479&nbsp;&nbsp;</span>}
<span id="L6480" class="ln">  6480&nbsp;&nbsp;</span>
<span id="L6481" class="ln">  6481&nbsp;&nbsp;</span><span class="comment">// updateTimerPMask clears pp&#39;s timer mask if it has no timers on its heap.</span>
<span id="L6482" class="ln">  6482&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6483" class="ln">  6483&nbsp;&nbsp;</span><span class="comment">// Ideally, the timer mask would be kept immediately consistent on any timer</span>
<span id="L6484" class="ln">  6484&nbsp;&nbsp;</span><span class="comment">// operations. Unfortunately, updating a shared global data structure in the</span>
<span id="L6485" class="ln">  6485&nbsp;&nbsp;</span><span class="comment">// timer hot path adds too much overhead in applications frequently switching</span>
<span id="L6486" class="ln">  6486&nbsp;&nbsp;</span><span class="comment">// between no timers and some timers.</span>
<span id="L6487" class="ln">  6487&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6488" class="ln">  6488&nbsp;&nbsp;</span><span class="comment">// As a compromise, the timer mask is updated only on pidleget / pidleput. A</span>
<span id="L6489" class="ln">  6489&nbsp;&nbsp;</span><span class="comment">// running P (returned by pidleget) may add a timer at any time, so its mask</span>
<span id="L6490" class="ln">  6490&nbsp;&nbsp;</span><span class="comment">// must be set. An idle P (passed to pidleput) cannot add new timers while</span>
<span id="L6491" class="ln">  6491&nbsp;&nbsp;</span><span class="comment">// idle, so if it has no timers at that time, its mask may be cleared.</span>
<span id="L6492" class="ln">  6492&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6493" class="ln">  6493&nbsp;&nbsp;</span><span class="comment">// Thus, we get the following effects on timer-stealing in findrunnable:</span>
<span id="L6494" class="ln">  6494&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6495" class="ln">  6495&nbsp;&nbsp;</span><span class="comment">//   - Idle Ps with no timers when they go idle are never checked in findrunnable</span>
<span id="L6496" class="ln">  6496&nbsp;&nbsp;</span><span class="comment">//     (for work- or timer-stealing; this is the ideal case).</span>
<span id="L6497" class="ln">  6497&nbsp;&nbsp;</span><span class="comment">//   - Running Ps must always be checked.</span>
<span id="L6498" class="ln">  6498&nbsp;&nbsp;</span><span class="comment">//   - Idle Ps whose timers are stolen must continue to be checked until they run</span>
<span id="L6499" class="ln">  6499&nbsp;&nbsp;</span><span class="comment">//     again, even after timer expiration.</span>
<span id="L6500" class="ln">  6500&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6501" class="ln">  6501&nbsp;&nbsp;</span><span class="comment">// When the P starts running again, the mask should be set, as a timer may be</span>
<span id="L6502" class="ln">  6502&nbsp;&nbsp;</span><span class="comment">// added at any time.</span>
<span id="L6503" class="ln">  6503&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6504" class="ln">  6504&nbsp;&nbsp;</span><span class="comment">// TODO(prattmic): Additional targeted updates may improve the above cases.</span>
<span id="L6505" class="ln">  6505&nbsp;&nbsp;</span><span class="comment">// e.g., updating the mask when stealing a timer.</span>
<span id="L6506" class="ln">  6506&nbsp;&nbsp;</span>func updateTimerPMask(pp *p) {
<span id="L6507" class="ln">  6507&nbsp;&nbsp;</span>	if pp.numTimers.Load() &gt; 0 {
<span id="L6508" class="ln">  6508&nbsp;&nbsp;</span>		return
<span id="L6509" class="ln">  6509&nbsp;&nbsp;</span>	}
<span id="L6510" class="ln">  6510&nbsp;&nbsp;</span>
<span id="L6511" class="ln">  6511&nbsp;&nbsp;</span>	<span class="comment">// Looks like there are no timers, however another P may transiently</span>
<span id="L6512" class="ln">  6512&nbsp;&nbsp;</span>	<span class="comment">// decrement numTimers when handling a timerModified timer in</span>
<span id="L6513" class="ln">  6513&nbsp;&nbsp;</span>	<span class="comment">// checkTimers. We must take timersLock to serialize with these changes.</span>
<span id="L6514" class="ln">  6514&nbsp;&nbsp;</span>	lock(&amp;pp.timersLock)
<span id="L6515" class="ln">  6515&nbsp;&nbsp;</span>	if pp.numTimers.Load() == 0 {
<span id="L6516" class="ln">  6516&nbsp;&nbsp;</span>		timerpMask.clear(pp.id)
<span id="L6517" class="ln">  6517&nbsp;&nbsp;</span>	}
<span id="L6518" class="ln">  6518&nbsp;&nbsp;</span>	unlock(&amp;pp.timersLock)
<span id="L6519" class="ln">  6519&nbsp;&nbsp;</span>}
<span id="L6520" class="ln">  6520&nbsp;&nbsp;</span>
<span id="L6521" class="ln">  6521&nbsp;&nbsp;</span><span class="comment">// pidleput puts p on the _Pidle list. now must be a relatively recent call</span>
<span id="L6522" class="ln">  6522&nbsp;&nbsp;</span><span class="comment">// to nanotime or zero. Returns now or the current time if now was zero.</span>
<span id="L6523" class="ln">  6523&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6524" class="ln">  6524&nbsp;&nbsp;</span><span class="comment">// This releases ownership of p. Once sched.lock is released it is no longer</span>
<span id="L6525" class="ln">  6525&nbsp;&nbsp;</span><span class="comment">// safe to use p.</span>
<span id="L6526" class="ln">  6526&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6527" class="ln">  6527&nbsp;&nbsp;</span><span class="comment">// sched.lock must be held.</span>
<span id="L6528" class="ln">  6528&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6529" class="ln">  6529&nbsp;&nbsp;</span><span class="comment">// May run during STW, so write barriers are not allowed.</span>
<span id="L6530" class="ln">  6530&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6531" class="ln">  6531&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L6532" class="ln">  6532&nbsp;&nbsp;</span>func pidleput(pp *p, now int64) int64 {
<span id="L6533" class="ln">  6533&nbsp;&nbsp;</span>	assertLockHeld(&amp;sched.lock)
<span id="L6534" class="ln">  6534&nbsp;&nbsp;</span>
<span id="L6535" class="ln">  6535&nbsp;&nbsp;</span>	if !runqempty(pp) {
<span id="L6536" class="ln">  6536&nbsp;&nbsp;</span>		throw(&#34;pidleput: P has non-empty run queue&#34;)
<span id="L6537" class="ln">  6537&nbsp;&nbsp;</span>	}
<span id="L6538" class="ln">  6538&nbsp;&nbsp;</span>	if now == 0 {
<span id="L6539" class="ln">  6539&nbsp;&nbsp;</span>		now = nanotime()
<span id="L6540" class="ln">  6540&nbsp;&nbsp;</span>	}
<span id="L6541" class="ln">  6541&nbsp;&nbsp;</span>	updateTimerPMask(pp) <span class="comment">// clear if there are no timers.</span>
<span id="L6542" class="ln">  6542&nbsp;&nbsp;</span>	idlepMask.set(pp.id)
<span id="L6543" class="ln">  6543&nbsp;&nbsp;</span>	pp.link = sched.pidle
<span id="L6544" class="ln">  6544&nbsp;&nbsp;</span>	sched.pidle.set(pp)
<span id="L6545" class="ln">  6545&nbsp;&nbsp;</span>	sched.npidle.Add(1)
<span id="L6546" class="ln">  6546&nbsp;&nbsp;</span>	if !pp.limiterEvent.start(limiterEventIdle, now) {
<span id="L6547" class="ln">  6547&nbsp;&nbsp;</span>		throw(&#34;must be able to track idle limiter event&#34;)
<span id="L6548" class="ln">  6548&nbsp;&nbsp;</span>	}
<span id="L6549" class="ln">  6549&nbsp;&nbsp;</span>	return now
<span id="L6550" class="ln">  6550&nbsp;&nbsp;</span>}
<span id="L6551" class="ln">  6551&nbsp;&nbsp;</span>
<span id="L6552" class="ln">  6552&nbsp;&nbsp;</span><span class="comment">// pidleget tries to get a p from the _Pidle list, acquiring ownership.</span>
<span id="L6553" class="ln">  6553&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6554" class="ln">  6554&nbsp;&nbsp;</span><span class="comment">// sched.lock must be held.</span>
<span id="L6555" class="ln">  6555&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6556" class="ln">  6556&nbsp;&nbsp;</span><span class="comment">// May run during STW, so write barriers are not allowed.</span>
<span id="L6557" class="ln">  6557&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6558" class="ln">  6558&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L6559" class="ln">  6559&nbsp;&nbsp;</span>func pidleget(now int64) (*p, int64) {
<span id="L6560" class="ln">  6560&nbsp;&nbsp;</span>	assertLockHeld(&amp;sched.lock)
<span id="L6561" class="ln">  6561&nbsp;&nbsp;</span>
<span id="L6562" class="ln">  6562&nbsp;&nbsp;</span>	pp := sched.pidle.ptr()
<span id="L6563" class="ln">  6563&nbsp;&nbsp;</span>	if pp != nil {
<span id="L6564" class="ln">  6564&nbsp;&nbsp;</span>		<span class="comment">// Timer may get added at any time now.</span>
<span id="L6565" class="ln">  6565&nbsp;&nbsp;</span>		if now == 0 {
<span id="L6566" class="ln">  6566&nbsp;&nbsp;</span>			now = nanotime()
<span id="L6567" class="ln">  6567&nbsp;&nbsp;</span>		}
<span id="L6568" class="ln">  6568&nbsp;&nbsp;</span>		timerpMask.set(pp.id)
<span id="L6569" class="ln">  6569&nbsp;&nbsp;</span>		idlepMask.clear(pp.id)
<span id="L6570" class="ln">  6570&nbsp;&nbsp;</span>		sched.pidle = pp.link
<span id="L6571" class="ln">  6571&nbsp;&nbsp;</span>		sched.npidle.Add(-1)
<span id="L6572" class="ln">  6572&nbsp;&nbsp;</span>		pp.limiterEvent.stop(limiterEventIdle, now)
<span id="L6573" class="ln">  6573&nbsp;&nbsp;</span>	}
<span id="L6574" class="ln">  6574&nbsp;&nbsp;</span>	return pp, now
<span id="L6575" class="ln">  6575&nbsp;&nbsp;</span>}
<span id="L6576" class="ln">  6576&nbsp;&nbsp;</span>
<span id="L6577" class="ln">  6577&nbsp;&nbsp;</span><span class="comment">// pidlegetSpinning tries to get a p from the _Pidle list, acquiring ownership.</span>
<span id="L6578" class="ln">  6578&nbsp;&nbsp;</span><span class="comment">// This is called by spinning Ms (or callers than need a spinning M) that have</span>
<span id="L6579" class="ln">  6579&nbsp;&nbsp;</span><span class="comment">// found work. If no P is available, this must synchronized with non-spinning</span>
<span id="L6580" class="ln">  6580&nbsp;&nbsp;</span><span class="comment">// Ms that may be preparing to drop their P without discovering this work.</span>
<span id="L6581" class="ln">  6581&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6582" class="ln">  6582&nbsp;&nbsp;</span><span class="comment">// sched.lock must be held.</span>
<span id="L6583" class="ln">  6583&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6584" class="ln">  6584&nbsp;&nbsp;</span><span class="comment">// May run during STW, so write barriers are not allowed.</span>
<span id="L6585" class="ln">  6585&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6586" class="ln">  6586&nbsp;&nbsp;</span><span class="comment">//go:nowritebarrierrec</span>
<span id="L6587" class="ln">  6587&nbsp;&nbsp;</span>func pidlegetSpinning(now int64) (*p, int64) {
<span id="L6588" class="ln">  6588&nbsp;&nbsp;</span>	assertLockHeld(&amp;sched.lock)
<span id="L6589" class="ln">  6589&nbsp;&nbsp;</span>
<span id="L6590" class="ln">  6590&nbsp;&nbsp;</span>	pp, now := pidleget(now)
<span id="L6591" class="ln">  6591&nbsp;&nbsp;</span>	if pp == nil {
<span id="L6592" class="ln">  6592&nbsp;&nbsp;</span>		<span class="comment">// See &#34;Delicate dance&#34; comment in findrunnable. We found work</span>
<span id="L6593" class="ln">  6593&nbsp;&nbsp;</span>		<span class="comment">// that we cannot take, we must synchronize with non-spinning</span>
<span id="L6594" class="ln">  6594&nbsp;&nbsp;</span>		<span class="comment">// Ms that may be preparing to drop their P.</span>
<span id="L6595" class="ln">  6595&nbsp;&nbsp;</span>		sched.needspinning.Store(1)
<span id="L6596" class="ln">  6596&nbsp;&nbsp;</span>		return nil, now
<span id="L6597" class="ln">  6597&nbsp;&nbsp;</span>	}
<span id="L6598" class="ln">  6598&nbsp;&nbsp;</span>
<span id="L6599" class="ln">  6599&nbsp;&nbsp;</span>	return pp, now
<span id="L6600" class="ln">  6600&nbsp;&nbsp;</span>}
<span id="L6601" class="ln">  6601&nbsp;&nbsp;</span>
<span id="L6602" class="ln">  6602&nbsp;&nbsp;</span><span class="comment">// runqempty reports whether pp has no Gs on its local run queue.</span>
<span id="L6603" class="ln">  6603&nbsp;&nbsp;</span><span class="comment">// It never returns true spuriously.</span>
<span id="L6604" class="ln">  6604&nbsp;&nbsp;</span>func runqempty(pp *p) bool {
<span id="L6605" class="ln">  6605&nbsp;&nbsp;</span>	<span class="comment">// Defend against a race where 1) pp has G1 in runqnext but runqhead == runqtail,</span>
<span id="L6606" class="ln">  6606&nbsp;&nbsp;</span>	<span class="comment">// 2) runqput on pp kicks G1 to the runq, 3) runqget on pp empties runqnext.</span>
<span id="L6607" class="ln">  6607&nbsp;&nbsp;</span>	<span class="comment">// Simply observing that runqhead == runqtail and then observing that runqnext == nil</span>
<span id="L6608" class="ln">  6608&nbsp;&nbsp;</span>	<span class="comment">// does not mean the queue is empty.</span>
<span id="L6609" class="ln">  6609&nbsp;&nbsp;</span>	for {
<span id="L6610" class="ln">  6610&nbsp;&nbsp;</span>		head := atomic.Load(&amp;pp.runqhead)
<span id="L6611" class="ln">  6611&nbsp;&nbsp;</span>		tail := atomic.Load(&amp;pp.runqtail)
<span id="L6612" class="ln">  6612&nbsp;&nbsp;</span>		runnext := atomic.Loaduintptr((*uintptr)(unsafe.Pointer(&amp;pp.runnext)))
<span id="L6613" class="ln">  6613&nbsp;&nbsp;</span>		if tail == atomic.Load(&amp;pp.runqtail) {
<span id="L6614" class="ln">  6614&nbsp;&nbsp;</span>			return head == tail &amp;&amp; runnext == 0
<span id="L6615" class="ln">  6615&nbsp;&nbsp;</span>		}
<span id="L6616" class="ln">  6616&nbsp;&nbsp;</span>	}
<span id="L6617" class="ln">  6617&nbsp;&nbsp;</span>}
<span id="L6618" class="ln">  6618&nbsp;&nbsp;</span>
<span id="L6619" class="ln">  6619&nbsp;&nbsp;</span><span class="comment">// To shake out latent assumptions about scheduling order,</span>
<span id="L6620" class="ln">  6620&nbsp;&nbsp;</span><span class="comment">// we introduce some randomness into scheduling decisions</span>
<span id="L6621" class="ln">  6621&nbsp;&nbsp;</span><span class="comment">// when running with the race detector.</span>
<span id="L6622" class="ln">  6622&nbsp;&nbsp;</span><span class="comment">// The need for this was made obvious by changing the</span>
<span id="L6623" class="ln">  6623&nbsp;&nbsp;</span><span class="comment">// (deterministic) scheduling order in Go 1.5 and breaking</span>
<span id="L6624" class="ln">  6624&nbsp;&nbsp;</span><span class="comment">// many poorly-written tests.</span>
<span id="L6625" class="ln">  6625&nbsp;&nbsp;</span><span class="comment">// With the randomness here, as long as the tests pass</span>
<span id="L6626" class="ln">  6626&nbsp;&nbsp;</span><span class="comment">// consistently with -race, they shouldn&#39;t have latent scheduling</span>
<span id="L6627" class="ln">  6627&nbsp;&nbsp;</span><span class="comment">// assumptions.</span>
<span id="L6628" class="ln">  6628&nbsp;&nbsp;</span>const randomizeScheduler = raceenabled
<span id="L6629" class="ln">  6629&nbsp;&nbsp;</span>
<span id="L6630" class="ln">  6630&nbsp;&nbsp;</span><span class="comment">// runqput tries to put g on the local runnable queue.</span>
<span id="L6631" class="ln">  6631&nbsp;&nbsp;</span><span class="comment">// If next is false, runqput adds g to the tail of the runnable queue.</span>
<span id="L6632" class="ln">  6632&nbsp;&nbsp;</span><span class="comment">// If next is true, runqput puts g in the pp.runnext slot.</span>
<span id="L6633" class="ln">  6633&nbsp;&nbsp;</span><span class="comment">// If the run queue is full, runnext puts g on the global queue.</span>
<span id="L6634" class="ln">  6634&nbsp;&nbsp;</span><span class="comment">// Executed only by the owner P.</span>
<span id="L6635" class="ln">  6635&nbsp;&nbsp;</span>func runqput(pp *p, gp *g, next bool) {
<span id="L6636" class="ln">  6636&nbsp;&nbsp;</span>	if randomizeScheduler &amp;&amp; next &amp;&amp; randn(2) == 0 {
<span id="L6637" class="ln">  6637&nbsp;&nbsp;</span>		next = false
<span id="L6638" class="ln">  6638&nbsp;&nbsp;</span>	}
<span id="L6639" class="ln">  6639&nbsp;&nbsp;</span>
<span id="L6640" class="ln">  6640&nbsp;&nbsp;</span>	if next {
<span id="L6641" class="ln">  6641&nbsp;&nbsp;</span>	retryNext:
<span id="L6642" class="ln">  6642&nbsp;&nbsp;</span>		oldnext := pp.runnext
<span id="L6643" class="ln">  6643&nbsp;&nbsp;</span>		if !pp.runnext.cas(oldnext, guintptr(unsafe.Pointer(gp))) {
<span id="L6644" class="ln">  6644&nbsp;&nbsp;</span>			goto retryNext
<span id="L6645" class="ln">  6645&nbsp;&nbsp;</span>		}
<span id="L6646" class="ln">  6646&nbsp;&nbsp;</span>		if oldnext == 0 {
<span id="L6647" class="ln">  6647&nbsp;&nbsp;</span>			return
<span id="L6648" class="ln">  6648&nbsp;&nbsp;</span>		}
<span id="L6649" class="ln">  6649&nbsp;&nbsp;</span>		<span class="comment">// Kick the old runnext out to the regular run queue.</span>
<span id="L6650" class="ln">  6650&nbsp;&nbsp;</span>		gp = oldnext.ptr()
<span id="L6651" class="ln">  6651&nbsp;&nbsp;</span>	}
<span id="L6652" class="ln">  6652&nbsp;&nbsp;</span>
<span id="L6653" class="ln">  6653&nbsp;&nbsp;</span>retry:
<span id="L6654" class="ln">  6654&nbsp;&nbsp;</span>	h := atomic.LoadAcq(&amp;pp.runqhead) <span class="comment">// load-acquire, synchronize with consumers</span>
<span id="L6655" class="ln">  6655&nbsp;&nbsp;</span>	t := pp.runqtail
<span id="L6656" class="ln">  6656&nbsp;&nbsp;</span>	if t-h &lt; uint32(len(pp.runq)) {
<span id="L6657" class="ln">  6657&nbsp;&nbsp;</span>		pp.runq[t%uint32(len(pp.runq))].set(gp)
<span id="L6658" class="ln">  6658&nbsp;&nbsp;</span>		atomic.StoreRel(&amp;pp.runqtail, t+1) <span class="comment">// store-release, makes the item available for consumption</span>
<span id="L6659" class="ln">  6659&nbsp;&nbsp;</span>		return
<span id="L6660" class="ln">  6660&nbsp;&nbsp;</span>	}
<span id="L6661" class="ln">  6661&nbsp;&nbsp;</span>	if runqputslow(pp, gp, h, t) {
<span id="L6662" class="ln">  6662&nbsp;&nbsp;</span>		return
<span id="L6663" class="ln">  6663&nbsp;&nbsp;</span>	}
<span id="L6664" class="ln">  6664&nbsp;&nbsp;</span>	<span class="comment">// the queue is not full, now the put above must succeed</span>
<span id="L6665" class="ln">  6665&nbsp;&nbsp;</span>	goto retry
<span id="L6666" class="ln">  6666&nbsp;&nbsp;</span>}
<span id="L6667" class="ln">  6667&nbsp;&nbsp;</span>
<span id="L6668" class="ln">  6668&nbsp;&nbsp;</span><span class="comment">// Put g and a batch of work from local runnable queue on global queue.</span>
<span id="L6669" class="ln">  6669&nbsp;&nbsp;</span><span class="comment">// Executed only by the owner P.</span>
<span id="L6670" class="ln">  6670&nbsp;&nbsp;</span>func runqputslow(pp *p, gp *g, h, t uint32) bool {
<span id="L6671" class="ln">  6671&nbsp;&nbsp;</span>	var batch [len(pp.runq)/2 + 1]*g
<span id="L6672" class="ln">  6672&nbsp;&nbsp;</span>
<span id="L6673" class="ln">  6673&nbsp;&nbsp;</span>	<span class="comment">// First, grab a batch from local queue.</span>
<span id="L6674" class="ln">  6674&nbsp;&nbsp;</span>	n := t - h
<span id="L6675" class="ln">  6675&nbsp;&nbsp;</span>	n = n / 2
<span id="L6676" class="ln">  6676&nbsp;&nbsp;</span>	if n != uint32(len(pp.runq)/2) {
<span id="L6677" class="ln">  6677&nbsp;&nbsp;</span>		throw(&#34;runqputslow: queue is not full&#34;)
<span id="L6678" class="ln">  6678&nbsp;&nbsp;</span>	}
<span id="L6679" class="ln">  6679&nbsp;&nbsp;</span>	for i := uint32(0); i &lt; n; i++ {
<span id="L6680" class="ln">  6680&nbsp;&nbsp;</span>		batch[i] = pp.runq[(h+i)%uint32(len(pp.runq))].ptr()
<span id="L6681" class="ln">  6681&nbsp;&nbsp;</span>	}
<span id="L6682" class="ln">  6682&nbsp;&nbsp;</span>	if !atomic.CasRel(&amp;pp.runqhead, h, h+n) { <span class="comment">// cas-release, commits consume</span>
<span id="L6683" class="ln">  6683&nbsp;&nbsp;</span>		return false
<span id="L6684" class="ln">  6684&nbsp;&nbsp;</span>	}
<span id="L6685" class="ln">  6685&nbsp;&nbsp;</span>	batch[n] = gp
<span id="L6686" class="ln">  6686&nbsp;&nbsp;</span>
<span id="L6687" class="ln">  6687&nbsp;&nbsp;</span>	if randomizeScheduler {
<span id="L6688" class="ln">  6688&nbsp;&nbsp;</span>		for i := uint32(1); i &lt;= n; i++ {
<span id="L6689" class="ln">  6689&nbsp;&nbsp;</span>			j := cheaprandn(i + 1)
<span id="L6690" class="ln">  6690&nbsp;&nbsp;</span>			batch[i], batch[j] = batch[j], batch[i]
<span id="L6691" class="ln">  6691&nbsp;&nbsp;</span>		}
<span id="L6692" class="ln">  6692&nbsp;&nbsp;</span>	}
<span id="L6693" class="ln">  6693&nbsp;&nbsp;</span>
<span id="L6694" class="ln">  6694&nbsp;&nbsp;</span>	<span class="comment">// Link the goroutines.</span>
<span id="L6695" class="ln">  6695&nbsp;&nbsp;</span>	for i := uint32(0); i &lt; n; i++ {
<span id="L6696" class="ln">  6696&nbsp;&nbsp;</span>		batch[i].schedlink.set(batch[i+1])
<span id="L6697" class="ln">  6697&nbsp;&nbsp;</span>	}
<span id="L6698" class="ln">  6698&nbsp;&nbsp;</span>	var q gQueue
<span id="L6699" class="ln">  6699&nbsp;&nbsp;</span>	q.head.set(batch[0])
<span id="L6700" class="ln">  6700&nbsp;&nbsp;</span>	q.tail.set(batch[n])
<span id="L6701" class="ln">  6701&nbsp;&nbsp;</span>
<span id="L6702" class="ln">  6702&nbsp;&nbsp;</span>	<span class="comment">// Now put the batch on global queue.</span>
<span id="L6703" class="ln">  6703&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L6704" class="ln">  6704&nbsp;&nbsp;</span>	globrunqputbatch(&amp;q, int32(n+1))
<span id="L6705" class="ln">  6705&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L6706" class="ln">  6706&nbsp;&nbsp;</span>	return true
<span id="L6707" class="ln">  6707&nbsp;&nbsp;</span>}
<span id="L6708" class="ln">  6708&nbsp;&nbsp;</span>
<span id="L6709" class="ln">  6709&nbsp;&nbsp;</span><span class="comment">// runqputbatch tries to put all the G&#39;s on q on the local runnable queue.</span>
<span id="L6710" class="ln">  6710&nbsp;&nbsp;</span><span class="comment">// If the queue is full, they are put on the global queue; in that case</span>
<span id="L6711" class="ln">  6711&nbsp;&nbsp;</span><span class="comment">// this will temporarily acquire the scheduler lock.</span>
<span id="L6712" class="ln">  6712&nbsp;&nbsp;</span><span class="comment">// Executed only by the owner P.</span>
<span id="L6713" class="ln">  6713&nbsp;&nbsp;</span>func runqputbatch(pp *p, q *gQueue, qsize int) {
<span id="L6714" class="ln">  6714&nbsp;&nbsp;</span>	h := atomic.LoadAcq(&amp;pp.runqhead)
<span id="L6715" class="ln">  6715&nbsp;&nbsp;</span>	t := pp.runqtail
<span id="L6716" class="ln">  6716&nbsp;&nbsp;</span>	n := uint32(0)
<span id="L6717" class="ln">  6717&nbsp;&nbsp;</span>	for !q.empty() &amp;&amp; t-h &lt; uint32(len(pp.runq)) {
<span id="L6718" class="ln">  6718&nbsp;&nbsp;</span>		gp := q.pop()
<span id="L6719" class="ln">  6719&nbsp;&nbsp;</span>		pp.runq[t%uint32(len(pp.runq))].set(gp)
<span id="L6720" class="ln">  6720&nbsp;&nbsp;</span>		t++
<span id="L6721" class="ln">  6721&nbsp;&nbsp;</span>		n++
<span id="L6722" class="ln">  6722&nbsp;&nbsp;</span>	}
<span id="L6723" class="ln">  6723&nbsp;&nbsp;</span>	qsize -= int(n)
<span id="L6724" class="ln">  6724&nbsp;&nbsp;</span>
<span id="L6725" class="ln">  6725&nbsp;&nbsp;</span>	if randomizeScheduler {
<span id="L6726" class="ln">  6726&nbsp;&nbsp;</span>		off := func(o uint32) uint32 {
<span id="L6727" class="ln">  6727&nbsp;&nbsp;</span>			return (pp.runqtail + o) % uint32(len(pp.runq))
<span id="L6728" class="ln">  6728&nbsp;&nbsp;</span>		}
<span id="L6729" class="ln">  6729&nbsp;&nbsp;</span>		for i := uint32(1); i &lt; n; i++ {
<span id="L6730" class="ln">  6730&nbsp;&nbsp;</span>			j := cheaprandn(i + 1)
<span id="L6731" class="ln">  6731&nbsp;&nbsp;</span>			pp.runq[off(i)], pp.runq[off(j)] = pp.runq[off(j)], pp.runq[off(i)]
<span id="L6732" class="ln">  6732&nbsp;&nbsp;</span>		}
<span id="L6733" class="ln">  6733&nbsp;&nbsp;</span>	}
<span id="L6734" class="ln">  6734&nbsp;&nbsp;</span>
<span id="L6735" class="ln">  6735&nbsp;&nbsp;</span>	atomic.StoreRel(&amp;pp.runqtail, t)
<span id="L6736" class="ln">  6736&nbsp;&nbsp;</span>	if !q.empty() {
<span id="L6737" class="ln">  6737&nbsp;&nbsp;</span>		lock(&amp;sched.lock)
<span id="L6738" class="ln">  6738&nbsp;&nbsp;</span>		globrunqputbatch(q, int32(qsize))
<span id="L6739" class="ln">  6739&nbsp;&nbsp;</span>		unlock(&amp;sched.lock)
<span id="L6740" class="ln">  6740&nbsp;&nbsp;</span>	}
<span id="L6741" class="ln">  6741&nbsp;&nbsp;</span>}
<span id="L6742" class="ln">  6742&nbsp;&nbsp;</span>
<span id="L6743" class="ln">  6743&nbsp;&nbsp;</span><span class="comment">// Get g from local runnable queue.</span>
<span id="L6744" class="ln">  6744&nbsp;&nbsp;</span><span class="comment">// If inheritTime is true, gp should inherit the remaining time in the</span>
<span id="L6745" class="ln">  6745&nbsp;&nbsp;</span><span class="comment">// current time slice. Otherwise, it should start a new time slice.</span>
<span id="L6746" class="ln">  6746&nbsp;&nbsp;</span><span class="comment">// Executed only by the owner P.</span>
<span id="L6747" class="ln">  6747&nbsp;&nbsp;</span>func runqget(pp *p) (gp *g, inheritTime bool) {
<span id="L6748" class="ln">  6748&nbsp;&nbsp;</span>	<span class="comment">// If there&#39;s a runnext, it&#39;s the next G to run.</span>
<span id="L6749" class="ln">  6749&nbsp;&nbsp;</span>	next := pp.runnext
<span id="L6750" class="ln">  6750&nbsp;&nbsp;</span>	<span class="comment">// If the runnext is non-0 and the CAS fails, it could only have been stolen by another P,</span>
<span id="L6751" class="ln">  6751&nbsp;&nbsp;</span>	<span class="comment">// because other Ps can race to set runnext to 0, but only the current P can set it to non-0.</span>
<span id="L6752" class="ln">  6752&nbsp;&nbsp;</span>	<span class="comment">// Hence, there&#39;s no need to retry this CAS if it fails.</span>
<span id="L6753" class="ln">  6753&nbsp;&nbsp;</span>	if next != 0 &amp;&amp; pp.runnext.cas(next, 0) {
<span id="L6754" class="ln">  6754&nbsp;&nbsp;</span>		return next.ptr(), true
<span id="L6755" class="ln">  6755&nbsp;&nbsp;</span>	}
<span id="L6756" class="ln">  6756&nbsp;&nbsp;</span>
<span id="L6757" class="ln">  6757&nbsp;&nbsp;</span>	for {
<span id="L6758" class="ln">  6758&nbsp;&nbsp;</span>		h := atomic.LoadAcq(&amp;pp.runqhead) <span class="comment">// load-acquire, synchronize with other consumers</span>
<span id="L6759" class="ln">  6759&nbsp;&nbsp;</span>		t := pp.runqtail
<span id="L6760" class="ln">  6760&nbsp;&nbsp;</span>		if t == h {
<span id="L6761" class="ln">  6761&nbsp;&nbsp;</span>			return nil, false
<span id="L6762" class="ln">  6762&nbsp;&nbsp;</span>		}
<span id="L6763" class="ln">  6763&nbsp;&nbsp;</span>		gp := pp.runq[h%uint32(len(pp.runq))].ptr()
<span id="L6764" class="ln">  6764&nbsp;&nbsp;</span>		if atomic.CasRel(&amp;pp.runqhead, h, h+1) { <span class="comment">// cas-release, commits consume</span>
<span id="L6765" class="ln">  6765&nbsp;&nbsp;</span>			return gp, false
<span id="L6766" class="ln">  6766&nbsp;&nbsp;</span>		}
<span id="L6767" class="ln">  6767&nbsp;&nbsp;</span>	}
<span id="L6768" class="ln">  6768&nbsp;&nbsp;</span>}
<span id="L6769" class="ln">  6769&nbsp;&nbsp;</span>
<span id="L6770" class="ln">  6770&nbsp;&nbsp;</span><span class="comment">// runqdrain drains the local runnable queue of pp and returns all goroutines in it.</span>
<span id="L6771" class="ln">  6771&nbsp;&nbsp;</span><span class="comment">// Executed only by the owner P.</span>
<span id="L6772" class="ln">  6772&nbsp;&nbsp;</span>func runqdrain(pp *p) (drainQ gQueue, n uint32) {
<span id="L6773" class="ln">  6773&nbsp;&nbsp;</span>	oldNext := pp.runnext
<span id="L6774" class="ln">  6774&nbsp;&nbsp;</span>	if oldNext != 0 &amp;&amp; pp.runnext.cas(oldNext, 0) {
<span id="L6775" class="ln">  6775&nbsp;&nbsp;</span>		drainQ.pushBack(oldNext.ptr())
<span id="L6776" class="ln">  6776&nbsp;&nbsp;</span>		n++
<span id="L6777" class="ln">  6777&nbsp;&nbsp;</span>	}
<span id="L6778" class="ln">  6778&nbsp;&nbsp;</span>
<span id="L6779" class="ln">  6779&nbsp;&nbsp;</span>retry:
<span id="L6780" class="ln">  6780&nbsp;&nbsp;</span>	h := atomic.LoadAcq(&amp;pp.runqhead) <span class="comment">// load-acquire, synchronize with other consumers</span>
<span id="L6781" class="ln">  6781&nbsp;&nbsp;</span>	t := pp.runqtail
<span id="L6782" class="ln">  6782&nbsp;&nbsp;</span>	qn := t - h
<span id="L6783" class="ln">  6783&nbsp;&nbsp;</span>	if qn == 0 {
<span id="L6784" class="ln">  6784&nbsp;&nbsp;</span>		return
<span id="L6785" class="ln">  6785&nbsp;&nbsp;</span>	}
<span id="L6786" class="ln">  6786&nbsp;&nbsp;</span>	if qn &gt; uint32(len(pp.runq)) { <span class="comment">// read inconsistent h and t</span>
<span id="L6787" class="ln">  6787&nbsp;&nbsp;</span>		goto retry
<span id="L6788" class="ln">  6788&nbsp;&nbsp;</span>	}
<span id="L6789" class="ln">  6789&nbsp;&nbsp;</span>
<span id="L6790" class="ln">  6790&nbsp;&nbsp;</span>	if !atomic.CasRel(&amp;pp.runqhead, h, h+qn) { <span class="comment">// cas-release, commits consume</span>
<span id="L6791" class="ln">  6791&nbsp;&nbsp;</span>		goto retry
<span id="L6792" class="ln">  6792&nbsp;&nbsp;</span>	}
<span id="L6793" class="ln">  6793&nbsp;&nbsp;</span>
<span id="L6794" class="ln">  6794&nbsp;&nbsp;</span>	<span class="comment">// We&#39;ve inverted the order in which it gets G&#39;s from the local P&#39;s runnable queue</span>
<span id="L6795" class="ln">  6795&nbsp;&nbsp;</span>	<span class="comment">// and then advances the head pointer because we don&#39;t want to mess up the statuses of G&#39;s</span>
<span id="L6796" class="ln">  6796&nbsp;&nbsp;</span>	<span class="comment">// while runqdrain() and runqsteal() are running in parallel.</span>
<span id="L6797" class="ln">  6797&nbsp;&nbsp;</span>	<span class="comment">// Thus we should advance the head pointer before draining the local P into a gQueue,</span>
<span id="L6798" class="ln">  6798&nbsp;&nbsp;</span>	<span class="comment">// so that we can update any gp.schedlink only after we take the full ownership of G,</span>
<span id="L6799" class="ln">  6799&nbsp;&nbsp;</span>	<span class="comment">// meanwhile, other P&#39;s can&#39;t access to all G&#39;s in local P&#39;s runnable queue and steal them.</span>
<span id="L6800" class="ln">  6800&nbsp;&nbsp;</span>	<span class="comment">// See https://groups.google.com/g/golang-dev/c/0pTKxEKhHSc/m/6Q85QjdVBQAJ for more details.</span>
<span id="L6801" class="ln">  6801&nbsp;&nbsp;</span>	for i := uint32(0); i &lt; qn; i++ {
<span id="L6802" class="ln">  6802&nbsp;&nbsp;</span>		gp := pp.runq[(h+i)%uint32(len(pp.runq))].ptr()
<span id="L6803" class="ln">  6803&nbsp;&nbsp;</span>		drainQ.pushBack(gp)
<span id="L6804" class="ln">  6804&nbsp;&nbsp;</span>		n++
<span id="L6805" class="ln">  6805&nbsp;&nbsp;</span>	}
<span id="L6806" class="ln">  6806&nbsp;&nbsp;</span>	return
<span id="L6807" class="ln">  6807&nbsp;&nbsp;</span>}
<span id="L6808" class="ln">  6808&nbsp;&nbsp;</span>
<span id="L6809" class="ln">  6809&nbsp;&nbsp;</span><span class="comment">// Grabs a batch of goroutines from pp&#39;s runnable queue into batch.</span>
<span id="L6810" class="ln">  6810&nbsp;&nbsp;</span><span class="comment">// Batch is a ring buffer starting at batchHead.</span>
<span id="L6811" class="ln">  6811&nbsp;&nbsp;</span><span class="comment">// Returns number of grabbed goroutines.</span>
<span id="L6812" class="ln">  6812&nbsp;&nbsp;</span><span class="comment">// Can be executed by any P.</span>
<span id="L6813" class="ln">  6813&nbsp;&nbsp;</span>func runqgrab(pp *p, batch *[256]guintptr, batchHead uint32, stealRunNextG bool) uint32 {
<span id="L6814" class="ln">  6814&nbsp;&nbsp;</span>	for {
<span id="L6815" class="ln">  6815&nbsp;&nbsp;</span>		h := atomic.LoadAcq(&amp;pp.runqhead) <span class="comment">// load-acquire, synchronize with other consumers</span>
<span id="L6816" class="ln">  6816&nbsp;&nbsp;</span>		t := atomic.LoadAcq(&amp;pp.runqtail) <span class="comment">// load-acquire, synchronize with the producer</span>
<span id="L6817" class="ln">  6817&nbsp;&nbsp;</span>		n := t - h
<span id="L6818" class="ln">  6818&nbsp;&nbsp;</span>		n = n - n/2
<span id="L6819" class="ln">  6819&nbsp;&nbsp;</span>		if n == 0 {
<span id="L6820" class="ln">  6820&nbsp;&nbsp;</span>			if stealRunNextG {
<span id="L6821" class="ln">  6821&nbsp;&nbsp;</span>				<span class="comment">// Try to steal from pp.runnext.</span>
<span id="L6822" class="ln">  6822&nbsp;&nbsp;</span>				if next := pp.runnext; next != 0 {
<span id="L6823" class="ln">  6823&nbsp;&nbsp;</span>					if pp.status == _Prunning {
<span id="L6824" class="ln">  6824&nbsp;&nbsp;</span>						<span class="comment">// Sleep to ensure that pp isn&#39;t about to run the g</span>
<span id="L6825" class="ln">  6825&nbsp;&nbsp;</span>						<span class="comment">// we are about to steal.</span>
<span id="L6826" class="ln">  6826&nbsp;&nbsp;</span>						<span class="comment">// The important use case here is when the g running</span>
<span id="L6827" class="ln">  6827&nbsp;&nbsp;</span>						<span class="comment">// on pp ready()s another g and then almost</span>
<span id="L6828" class="ln">  6828&nbsp;&nbsp;</span>						<span class="comment">// immediately blocks. Instead of stealing runnext</span>
<span id="L6829" class="ln">  6829&nbsp;&nbsp;</span>						<span class="comment">// in this window, back off to give pp a chance to</span>
<span id="L6830" class="ln">  6830&nbsp;&nbsp;</span>						<span class="comment">// schedule runnext. This will avoid thrashing gs</span>
<span id="L6831" class="ln">  6831&nbsp;&nbsp;</span>						<span class="comment">// between different Ps.</span>
<span id="L6832" class="ln">  6832&nbsp;&nbsp;</span>						<span class="comment">// A sync chan send/recv takes ~50ns as of time of</span>
<span id="L6833" class="ln">  6833&nbsp;&nbsp;</span>						<span class="comment">// writing, so 3us gives ~50x overshoot.</span>
<span id="L6834" class="ln">  6834&nbsp;&nbsp;</span>						if !osHasLowResTimer {
<span id="L6835" class="ln">  6835&nbsp;&nbsp;</span>							usleep(3)
<span id="L6836" class="ln">  6836&nbsp;&nbsp;</span>						} else {
<span id="L6837" class="ln">  6837&nbsp;&nbsp;</span>							<span class="comment">// On some platforms system timer granularity is</span>
<span id="L6838" class="ln">  6838&nbsp;&nbsp;</span>							<span class="comment">// 1-15ms, which is way too much for this</span>
<span id="L6839" class="ln">  6839&nbsp;&nbsp;</span>							<span class="comment">// optimization. So just yield.</span>
<span id="L6840" class="ln">  6840&nbsp;&nbsp;</span>							osyield()
<span id="L6841" class="ln">  6841&nbsp;&nbsp;</span>						}
<span id="L6842" class="ln">  6842&nbsp;&nbsp;</span>					}
<span id="L6843" class="ln">  6843&nbsp;&nbsp;</span>					if !pp.runnext.cas(next, 0) {
<span id="L6844" class="ln">  6844&nbsp;&nbsp;</span>						continue
<span id="L6845" class="ln">  6845&nbsp;&nbsp;</span>					}
<span id="L6846" class="ln">  6846&nbsp;&nbsp;</span>					batch[batchHead%uint32(len(batch))] = next
<span id="L6847" class="ln">  6847&nbsp;&nbsp;</span>					return 1
<span id="L6848" class="ln">  6848&nbsp;&nbsp;</span>				}
<span id="L6849" class="ln">  6849&nbsp;&nbsp;</span>			}
<span id="L6850" class="ln">  6850&nbsp;&nbsp;</span>			return 0
<span id="L6851" class="ln">  6851&nbsp;&nbsp;</span>		}
<span id="L6852" class="ln">  6852&nbsp;&nbsp;</span>		if n &gt; uint32(len(pp.runq)/2) { <span class="comment">// read inconsistent h and t</span>
<span id="L6853" class="ln">  6853&nbsp;&nbsp;</span>			continue
<span id="L6854" class="ln">  6854&nbsp;&nbsp;</span>		}
<span id="L6855" class="ln">  6855&nbsp;&nbsp;</span>		for i := uint32(0); i &lt; n; i++ {
<span id="L6856" class="ln">  6856&nbsp;&nbsp;</span>			g := pp.runq[(h+i)%uint32(len(pp.runq))]
<span id="L6857" class="ln">  6857&nbsp;&nbsp;</span>			batch[(batchHead+i)%uint32(len(batch))] = g
<span id="L6858" class="ln">  6858&nbsp;&nbsp;</span>		}
<span id="L6859" class="ln">  6859&nbsp;&nbsp;</span>		if atomic.CasRel(&amp;pp.runqhead, h, h+n) { <span class="comment">// cas-release, commits consume</span>
<span id="L6860" class="ln">  6860&nbsp;&nbsp;</span>			return n
<span id="L6861" class="ln">  6861&nbsp;&nbsp;</span>		}
<span id="L6862" class="ln">  6862&nbsp;&nbsp;</span>	}
<span id="L6863" class="ln">  6863&nbsp;&nbsp;</span>}
<span id="L6864" class="ln">  6864&nbsp;&nbsp;</span>
<span id="L6865" class="ln">  6865&nbsp;&nbsp;</span><span class="comment">// Steal half of elements from local runnable queue of p2</span>
<span id="L6866" class="ln">  6866&nbsp;&nbsp;</span><span class="comment">// and put onto local runnable queue of p.</span>
<span id="L6867" class="ln">  6867&nbsp;&nbsp;</span><span class="comment">// Returns one of the stolen elements (or nil if failed).</span>
<span id="L6868" class="ln">  6868&nbsp;&nbsp;</span>func runqsteal(pp, p2 *p, stealRunNextG bool) *g {
<span id="L6869" class="ln">  6869&nbsp;&nbsp;</span>	t := pp.runqtail
<span id="L6870" class="ln">  6870&nbsp;&nbsp;</span>	n := runqgrab(p2, &amp;pp.runq, t, stealRunNextG)
<span id="L6871" class="ln">  6871&nbsp;&nbsp;</span>	if n == 0 {
<span id="L6872" class="ln">  6872&nbsp;&nbsp;</span>		return nil
<span id="L6873" class="ln">  6873&nbsp;&nbsp;</span>	}
<span id="L6874" class="ln">  6874&nbsp;&nbsp;</span>	n--
<span id="L6875" class="ln">  6875&nbsp;&nbsp;</span>	gp := pp.runq[(t+n)%uint32(len(pp.runq))].ptr()
<span id="L6876" class="ln">  6876&nbsp;&nbsp;</span>	if n == 0 {
<span id="L6877" class="ln">  6877&nbsp;&nbsp;</span>		return gp
<span id="L6878" class="ln">  6878&nbsp;&nbsp;</span>	}
<span id="L6879" class="ln">  6879&nbsp;&nbsp;</span>	h := atomic.LoadAcq(&amp;pp.runqhead) <span class="comment">// load-acquire, synchronize with consumers</span>
<span id="L6880" class="ln">  6880&nbsp;&nbsp;</span>	if t-h+n &gt;= uint32(len(pp.runq)) {
<span id="L6881" class="ln">  6881&nbsp;&nbsp;</span>		throw(&#34;runqsteal: runq overflow&#34;)
<span id="L6882" class="ln">  6882&nbsp;&nbsp;</span>	}
<span id="L6883" class="ln">  6883&nbsp;&nbsp;</span>	atomic.StoreRel(&amp;pp.runqtail, t+n) <span class="comment">// store-release, makes the item available for consumption</span>
<span id="L6884" class="ln">  6884&nbsp;&nbsp;</span>	return gp
<span id="L6885" class="ln">  6885&nbsp;&nbsp;</span>}
<span id="L6886" class="ln">  6886&nbsp;&nbsp;</span>
<span id="L6887" class="ln">  6887&nbsp;&nbsp;</span><span class="comment">// A gQueue is a dequeue of Gs linked through g.schedlink. A G can only</span>
<span id="L6888" class="ln">  6888&nbsp;&nbsp;</span><span class="comment">// be on one gQueue or gList at a time.</span>
<span id="L6889" class="ln">  6889&nbsp;&nbsp;</span>type gQueue struct {
<span id="L6890" class="ln">  6890&nbsp;&nbsp;</span>	head guintptr
<span id="L6891" class="ln">  6891&nbsp;&nbsp;</span>	tail guintptr
<span id="L6892" class="ln">  6892&nbsp;&nbsp;</span>}
<span id="L6893" class="ln">  6893&nbsp;&nbsp;</span>
<span id="L6894" class="ln">  6894&nbsp;&nbsp;</span><span class="comment">// empty reports whether q is empty.</span>
<span id="L6895" class="ln">  6895&nbsp;&nbsp;</span>func (q *gQueue) empty() bool {
<span id="L6896" class="ln">  6896&nbsp;&nbsp;</span>	return q.head == 0
<span id="L6897" class="ln">  6897&nbsp;&nbsp;</span>}
<span id="L6898" class="ln">  6898&nbsp;&nbsp;</span>
<span id="L6899" class="ln">  6899&nbsp;&nbsp;</span><span class="comment">// push adds gp to the head of q.</span>
<span id="L6900" class="ln">  6900&nbsp;&nbsp;</span>func (q *gQueue) push(gp *g) {
<span id="L6901" class="ln">  6901&nbsp;&nbsp;</span>	gp.schedlink = q.head
<span id="L6902" class="ln">  6902&nbsp;&nbsp;</span>	q.head.set(gp)
<span id="L6903" class="ln">  6903&nbsp;&nbsp;</span>	if q.tail == 0 {
<span id="L6904" class="ln">  6904&nbsp;&nbsp;</span>		q.tail.set(gp)
<span id="L6905" class="ln">  6905&nbsp;&nbsp;</span>	}
<span id="L6906" class="ln">  6906&nbsp;&nbsp;</span>}
<span id="L6907" class="ln">  6907&nbsp;&nbsp;</span>
<span id="L6908" class="ln">  6908&nbsp;&nbsp;</span><span class="comment">// pushBack adds gp to the tail of q.</span>
<span id="L6909" class="ln">  6909&nbsp;&nbsp;</span>func (q *gQueue) pushBack(gp *g) {
<span id="L6910" class="ln">  6910&nbsp;&nbsp;</span>	gp.schedlink = 0
<span id="L6911" class="ln">  6911&nbsp;&nbsp;</span>	if q.tail != 0 {
<span id="L6912" class="ln">  6912&nbsp;&nbsp;</span>		q.tail.ptr().schedlink.set(gp)
<span id="L6913" class="ln">  6913&nbsp;&nbsp;</span>	} else {
<span id="L6914" class="ln">  6914&nbsp;&nbsp;</span>		q.head.set(gp)
<span id="L6915" class="ln">  6915&nbsp;&nbsp;</span>	}
<span id="L6916" class="ln">  6916&nbsp;&nbsp;</span>	q.tail.set(gp)
<span id="L6917" class="ln">  6917&nbsp;&nbsp;</span>}
<span id="L6918" class="ln">  6918&nbsp;&nbsp;</span>
<span id="L6919" class="ln">  6919&nbsp;&nbsp;</span><span class="comment">// pushBackAll adds all Gs in q2 to the tail of q. After this q2 must</span>
<span id="L6920" class="ln">  6920&nbsp;&nbsp;</span><span class="comment">// not be used.</span>
<span id="L6921" class="ln">  6921&nbsp;&nbsp;</span>func (q *gQueue) pushBackAll(q2 gQueue) {
<span id="L6922" class="ln">  6922&nbsp;&nbsp;</span>	if q2.tail == 0 {
<span id="L6923" class="ln">  6923&nbsp;&nbsp;</span>		return
<span id="L6924" class="ln">  6924&nbsp;&nbsp;</span>	}
<span id="L6925" class="ln">  6925&nbsp;&nbsp;</span>	q2.tail.ptr().schedlink = 0
<span id="L6926" class="ln">  6926&nbsp;&nbsp;</span>	if q.tail != 0 {
<span id="L6927" class="ln">  6927&nbsp;&nbsp;</span>		q.tail.ptr().schedlink = q2.head
<span id="L6928" class="ln">  6928&nbsp;&nbsp;</span>	} else {
<span id="L6929" class="ln">  6929&nbsp;&nbsp;</span>		q.head = q2.head
<span id="L6930" class="ln">  6930&nbsp;&nbsp;</span>	}
<span id="L6931" class="ln">  6931&nbsp;&nbsp;</span>	q.tail = q2.tail
<span id="L6932" class="ln">  6932&nbsp;&nbsp;</span>}
<span id="L6933" class="ln">  6933&nbsp;&nbsp;</span>
<span id="L6934" class="ln">  6934&nbsp;&nbsp;</span><span class="comment">// pop removes and returns the head of queue q. It returns nil if</span>
<span id="L6935" class="ln">  6935&nbsp;&nbsp;</span><span class="comment">// q is empty.</span>
<span id="L6936" class="ln">  6936&nbsp;&nbsp;</span>func (q *gQueue) pop() *g {
<span id="L6937" class="ln">  6937&nbsp;&nbsp;</span>	gp := q.head.ptr()
<span id="L6938" class="ln">  6938&nbsp;&nbsp;</span>	if gp != nil {
<span id="L6939" class="ln">  6939&nbsp;&nbsp;</span>		q.head = gp.schedlink
<span id="L6940" class="ln">  6940&nbsp;&nbsp;</span>		if q.head == 0 {
<span id="L6941" class="ln">  6941&nbsp;&nbsp;</span>			q.tail = 0
<span id="L6942" class="ln">  6942&nbsp;&nbsp;</span>		}
<span id="L6943" class="ln">  6943&nbsp;&nbsp;</span>	}
<span id="L6944" class="ln">  6944&nbsp;&nbsp;</span>	return gp
<span id="L6945" class="ln">  6945&nbsp;&nbsp;</span>}
<span id="L6946" class="ln">  6946&nbsp;&nbsp;</span>
<span id="L6947" class="ln">  6947&nbsp;&nbsp;</span><span class="comment">// popList takes all Gs in q and returns them as a gList.</span>
<span id="L6948" class="ln">  6948&nbsp;&nbsp;</span>func (q *gQueue) popList() gList {
<span id="L6949" class="ln">  6949&nbsp;&nbsp;</span>	stack := gList{q.head}
<span id="L6950" class="ln">  6950&nbsp;&nbsp;</span>	*q = gQueue{}
<span id="L6951" class="ln">  6951&nbsp;&nbsp;</span>	return stack
<span id="L6952" class="ln">  6952&nbsp;&nbsp;</span>}
<span id="L6953" class="ln">  6953&nbsp;&nbsp;</span>
<span id="L6954" class="ln">  6954&nbsp;&nbsp;</span><span class="comment">// A gList is a list of Gs linked through g.schedlink. A G can only be</span>
<span id="L6955" class="ln">  6955&nbsp;&nbsp;</span><span class="comment">// on one gQueue or gList at a time.</span>
<span id="L6956" class="ln">  6956&nbsp;&nbsp;</span>type gList struct {
<span id="L6957" class="ln">  6957&nbsp;&nbsp;</span>	head guintptr
<span id="L6958" class="ln">  6958&nbsp;&nbsp;</span>}
<span id="L6959" class="ln">  6959&nbsp;&nbsp;</span>
<span id="L6960" class="ln">  6960&nbsp;&nbsp;</span><span class="comment">// empty reports whether l is empty.</span>
<span id="L6961" class="ln">  6961&nbsp;&nbsp;</span>func (l *gList) empty() bool {
<span id="L6962" class="ln">  6962&nbsp;&nbsp;</span>	return l.head == 0
<span id="L6963" class="ln">  6963&nbsp;&nbsp;</span>}
<span id="L6964" class="ln">  6964&nbsp;&nbsp;</span>
<span id="L6965" class="ln">  6965&nbsp;&nbsp;</span><span class="comment">// push adds gp to the head of l.</span>
<span id="L6966" class="ln">  6966&nbsp;&nbsp;</span>func (l *gList) push(gp *g) {
<span id="L6967" class="ln">  6967&nbsp;&nbsp;</span>	gp.schedlink = l.head
<span id="L6968" class="ln">  6968&nbsp;&nbsp;</span>	l.head.set(gp)
<span id="L6969" class="ln">  6969&nbsp;&nbsp;</span>}
<span id="L6970" class="ln">  6970&nbsp;&nbsp;</span>
<span id="L6971" class="ln">  6971&nbsp;&nbsp;</span><span class="comment">// pushAll prepends all Gs in q to l.</span>
<span id="L6972" class="ln">  6972&nbsp;&nbsp;</span>func (l *gList) pushAll(q gQueue) {
<span id="L6973" class="ln">  6973&nbsp;&nbsp;</span>	if !q.empty() {
<span id="L6974" class="ln">  6974&nbsp;&nbsp;</span>		q.tail.ptr().schedlink = l.head
<span id="L6975" class="ln">  6975&nbsp;&nbsp;</span>		l.head = q.head
<span id="L6976" class="ln">  6976&nbsp;&nbsp;</span>	}
<span id="L6977" class="ln">  6977&nbsp;&nbsp;</span>}
<span id="L6978" class="ln">  6978&nbsp;&nbsp;</span>
<span id="L6979" class="ln">  6979&nbsp;&nbsp;</span><span class="comment">// pop removes and returns the head of l. If l is empty, it returns nil.</span>
<span id="L6980" class="ln">  6980&nbsp;&nbsp;</span>func (l *gList) pop() *g {
<span id="L6981" class="ln">  6981&nbsp;&nbsp;</span>	gp := l.head.ptr()
<span id="L6982" class="ln">  6982&nbsp;&nbsp;</span>	if gp != nil {
<span id="L6983" class="ln">  6983&nbsp;&nbsp;</span>		l.head = gp.schedlink
<span id="L6984" class="ln">  6984&nbsp;&nbsp;</span>	}
<span id="L6985" class="ln">  6985&nbsp;&nbsp;</span>	return gp
<span id="L6986" class="ln">  6986&nbsp;&nbsp;</span>}
<span id="L6987" class="ln">  6987&nbsp;&nbsp;</span>
<span id="L6988" class="ln">  6988&nbsp;&nbsp;</span><span class="comment">//go:linkname setMaxThreads runtime/debug.setMaxThreads</span>
<span id="L6989" class="ln">  6989&nbsp;&nbsp;</span>func setMaxThreads(in int) (out int) {
<span id="L6990" class="ln">  6990&nbsp;&nbsp;</span>	lock(&amp;sched.lock)
<span id="L6991" class="ln">  6991&nbsp;&nbsp;</span>	out = int(sched.maxmcount)
<span id="L6992" class="ln">  6992&nbsp;&nbsp;</span>	if in &gt; 0x7fffffff { <span class="comment">// MaxInt32</span>
<span id="L6993" class="ln">  6993&nbsp;&nbsp;</span>		sched.maxmcount = 0x7fffffff
<span id="L6994" class="ln">  6994&nbsp;&nbsp;</span>	} else {
<span id="L6995" class="ln">  6995&nbsp;&nbsp;</span>		sched.maxmcount = int32(in)
<span id="L6996" class="ln">  6996&nbsp;&nbsp;</span>	}
<span id="L6997" class="ln">  6997&nbsp;&nbsp;</span>	checkmcount()
<span id="L6998" class="ln">  6998&nbsp;&nbsp;</span>	unlock(&amp;sched.lock)
<span id="L6999" class="ln">  6999&nbsp;&nbsp;</span>	return
<span id="L7000" class="ln">  7000&nbsp;&nbsp;</span>}
<span id="L7001" class="ln">  7001&nbsp;&nbsp;</span>
<span id="L7002" class="ln">  7002&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L7003" class="ln">  7003&nbsp;&nbsp;</span>func procPin() int {
<span id="L7004" class="ln">  7004&nbsp;&nbsp;</span>	gp := getg()
<span id="L7005" class="ln">  7005&nbsp;&nbsp;</span>	mp := gp.m
<span id="L7006" class="ln">  7006&nbsp;&nbsp;</span>
<span id="L7007" class="ln">  7007&nbsp;&nbsp;</span>	mp.locks++
<span id="L7008" class="ln">  7008&nbsp;&nbsp;</span>	return int(mp.p.ptr().id)
<span id="L7009" class="ln">  7009&nbsp;&nbsp;</span>}
<span id="L7010" class="ln">  7010&nbsp;&nbsp;</span>
<span id="L7011" class="ln">  7011&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L7012" class="ln">  7012&nbsp;&nbsp;</span>func procUnpin() {
<span id="L7013" class="ln">  7013&nbsp;&nbsp;</span>	gp := getg()
<span id="L7014" class="ln">  7014&nbsp;&nbsp;</span>	gp.m.locks--
<span id="L7015" class="ln">  7015&nbsp;&nbsp;</span>}
<span id="L7016" class="ln">  7016&nbsp;&nbsp;</span>
<span id="L7017" class="ln">  7017&nbsp;&nbsp;</span><span class="comment">//go:linkname sync_runtime_procPin sync.runtime_procPin</span>
<span id="L7018" class="ln">  7018&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L7019" class="ln">  7019&nbsp;&nbsp;</span>func sync_runtime_procPin() int {
<span id="L7020" class="ln">  7020&nbsp;&nbsp;</span>	return procPin()
<span id="L7021" class="ln">  7021&nbsp;&nbsp;</span>}
<span id="L7022" class="ln">  7022&nbsp;&nbsp;</span>
<span id="L7023" class="ln">  7023&nbsp;&nbsp;</span><span class="comment">//go:linkname sync_runtime_procUnpin sync.runtime_procUnpin</span>
<span id="L7024" class="ln">  7024&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L7025" class="ln">  7025&nbsp;&nbsp;</span>func sync_runtime_procUnpin() {
<span id="L7026" class="ln">  7026&nbsp;&nbsp;</span>	procUnpin()
<span id="L7027" class="ln">  7027&nbsp;&nbsp;</span>}
<span id="L7028" class="ln">  7028&nbsp;&nbsp;</span>
<span id="L7029" class="ln">  7029&nbsp;&nbsp;</span><span class="comment">//go:linkname sync_atomic_runtime_procPin sync/atomic.runtime_procPin</span>
<span id="L7030" class="ln">  7030&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L7031" class="ln">  7031&nbsp;&nbsp;</span>func sync_atomic_runtime_procPin() int {
<span id="L7032" class="ln">  7032&nbsp;&nbsp;</span>	return procPin()
<span id="L7033" class="ln">  7033&nbsp;&nbsp;</span>}
<span id="L7034" class="ln">  7034&nbsp;&nbsp;</span>
<span id="L7035" class="ln">  7035&nbsp;&nbsp;</span><span class="comment">//go:linkname sync_atomic_runtime_procUnpin sync/atomic.runtime_procUnpin</span>
<span id="L7036" class="ln">  7036&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L7037" class="ln">  7037&nbsp;&nbsp;</span>func sync_atomic_runtime_procUnpin() {
<span id="L7038" class="ln">  7038&nbsp;&nbsp;</span>	procUnpin()
<span id="L7039" class="ln">  7039&nbsp;&nbsp;</span>}
<span id="L7040" class="ln">  7040&nbsp;&nbsp;</span>
<span id="L7041" class="ln">  7041&nbsp;&nbsp;</span><span class="comment">// Active spinning for sync.Mutex.</span>
<span id="L7042" class="ln">  7042&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7043" class="ln">  7043&nbsp;&nbsp;</span><span class="comment">//go:linkname sync_runtime_canSpin sync.runtime_canSpin</span>
<span id="L7044" class="ln">  7044&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L7045" class="ln">  7045&nbsp;&nbsp;</span>func sync_runtime_canSpin(i int) bool {
<span id="L7046" class="ln">  7046&nbsp;&nbsp;</span>	<span class="comment">// sync.Mutex is cooperative, so we are conservative with spinning.</span>
<span id="L7047" class="ln">  7047&nbsp;&nbsp;</span>	<span class="comment">// Spin only few times and only if running on a multicore machine and</span>
<span id="L7048" class="ln">  7048&nbsp;&nbsp;</span>	<span class="comment">// GOMAXPROCS&gt;1 and there is at least one other running P and local runq is empty.</span>
<span id="L7049" class="ln">  7049&nbsp;&nbsp;</span>	<span class="comment">// As opposed to runtime mutex we don&#39;t do passive spinning here,</span>
<span id="L7050" class="ln">  7050&nbsp;&nbsp;</span>	<span class="comment">// because there can be work on global runq or on other Ps.</span>
<span id="L7051" class="ln">  7051&nbsp;&nbsp;</span>	if i &gt;= active_spin || ncpu &lt;= 1 || gomaxprocs &lt;= sched.npidle.Load()+sched.nmspinning.Load()+1 {
<span id="L7052" class="ln">  7052&nbsp;&nbsp;</span>		return false
<span id="L7053" class="ln">  7053&nbsp;&nbsp;</span>	}
<span id="L7054" class="ln">  7054&nbsp;&nbsp;</span>	if p := getg().m.p.ptr(); !runqempty(p) {
<span id="L7055" class="ln">  7055&nbsp;&nbsp;</span>		return false
<span id="L7056" class="ln">  7056&nbsp;&nbsp;</span>	}
<span id="L7057" class="ln">  7057&nbsp;&nbsp;</span>	return true
<span id="L7058" class="ln">  7058&nbsp;&nbsp;</span>}
<span id="L7059" class="ln">  7059&nbsp;&nbsp;</span>
<span id="L7060" class="ln">  7060&nbsp;&nbsp;</span><span class="comment">//go:linkname sync_runtime_doSpin sync.runtime_doSpin</span>
<span id="L7061" class="ln">  7061&nbsp;&nbsp;</span><span class="comment">//go:nosplit</span>
<span id="L7062" class="ln">  7062&nbsp;&nbsp;</span>func sync_runtime_doSpin() {
<span id="L7063" class="ln">  7063&nbsp;&nbsp;</span>	procyield(active_spin_cnt)
<span id="L7064" class="ln">  7064&nbsp;&nbsp;</span>}
<span id="L7065" class="ln">  7065&nbsp;&nbsp;</span>
<span id="L7066" class="ln">  7066&nbsp;&nbsp;</span>var stealOrder randomOrder
<span id="L7067" class="ln">  7067&nbsp;&nbsp;</span>
<span id="L7068" class="ln">  7068&nbsp;&nbsp;</span><span class="comment">// randomOrder/randomEnum are helper types for randomized work stealing.</span>
<span id="L7069" class="ln">  7069&nbsp;&nbsp;</span><span class="comment">// They allow to enumerate all Ps in different pseudo-random orders without repetitions.</span>
<span id="L7070" class="ln">  7070&nbsp;&nbsp;</span><span class="comment">// The algorithm is based on the fact that if we have X such that X and GOMAXPROCS</span>
<span id="L7071" class="ln">  7071&nbsp;&nbsp;</span><span class="comment">// are coprime, then a sequences of (i + X) % GOMAXPROCS gives the required enumeration.</span>
<span id="L7072" class="ln">  7072&nbsp;&nbsp;</span>type randomOrder struct {
<span id="L7073" class="ln">  7073&nbsp;&nbsp;</span>	count    uint32
<span id="L7074" class="ln">  7074&nbsp;&nbsp;</span>	coprimes []uint32
<span id="L7075" class="ln">  7075&nbsp;&nbsp;</span>}
<span id="L7076" class="ln">  7076&nbsp;&nbsp;</span>
<span id="L7077" class="ln">  7077&nbsp;&nbsp;</span>type randomEnum struct {
<span id="L7078" class="ln">  7078&nbsp;&nbsp;</span>	i     uint32
<span id="L7079" class="ln">  7079&nbsp;&nbsp;</span>	count uint32
<span id="L7080" class="ln">  7080&nbsp;&nbsp;</span>	pos   uint32
<span id="L7081" class="ln">  7081&nbsp;&nbsp;</span>	inc   uint32
<span id="L7082" class="ln">  7082&nbsp;&nbsp;</span>}
<span id="L7083" class="ln">  7083&nbsp;&nbsp;</span>
<span id="L7084" class="ln">  7084&nbsp;&nbsp;</span>func (ord *randomOrder) reset(count uint32) {
<span id="L7085" class="ln">  7085&nbsp;&nbsp;</span>	ord.count = count
<span id="L7086" class="ln">  7086&nbsp;&nbsp;</span>	ord.coprimes = ord.coprimes[:0]
<span id="L7087" class="ln">  7087&nbsp;&nbsp;</span>	for i := uint32(1); i &lt;= count; i++ {
<span id="L7088" class="ln">  7088&nbsp;&nbsp;</span>		if gcd(i, count) == 1 {
<span id="L7089" class="ln">  7089&nbsp;&nbsp;</span>			ord.coprimes = append(ord.coprimes, i)
<span id="L7090" class="ln">  7090&nbsp;&nbsp;</span>		}
<span id="L7091" class="ln">  7091&nbsp;&nbsp;</span>	}
<span id="L7092" class="ln">  7092&nbsp;&nbsp;</span>}
<span id="L7093" class="ln">  7093&nbsp;&nbsp;</span>
<span id="L7094" class="ln">  7094&nbsp;&nbsp;</span>func (ord *randomOrder) start(i uint32) randomEnum {
<span id="L7095" class="ln">  7095&nbsp;&nbsp;</span>	return randomEnum{
<span id="L7096" class="ln">  7096&nbsp;&nbsp;</span>		count: ord.count,
<span id="L7097" class="ln">  7097&nbsp;&nbsp;</span>		pos:   i % ord.count,
<span id="L7098" class="ln">  7098&nbsp;&nbsp;</span>		inc:   ord.coprimes[i/ord.count%uint32(len(ord.coprimes))],
<span id="L7099" class="ln">  7099&nbsp;&nbsp;</span>	}
<span id="L7100" class="ln">  7100&nbsp;&nbsp;</span>}
<span id="L7101" class="ln">  7101&nbsp;&nbsp;</span>
<span id="L7102" class="ln">  7102&nbsp;&nbsp;</span>func (enum *randomEnum) done() bool {
<span id="L7103" class="ln">  7103&nbsp;&nbsp;</span>	return enum.i == enum.count
<span id="L7104" class="ln">  7104&nbsp;&nbsp;</span>}
<span id="L7105" class="ln">  7105&nbsp;&nbsp;</span>
<span id="L7106" class="ln">  7106&nbsp;&nbsp;</span>func (enum *randomEnum) next() {
<span id="L7107" class="ln">  7107&nbsp;&nbsp;</span>	enum.i++
<span id="L7108" class="ln">  7108&nbsp;&nbsp;</span>	enum.pos = (enum.pos + enum.inc) % enum.count
<span id="L7109" class="ln">  7109&nbsp;&nbsp;</span>}
<span id="L7110" class="ln">  7110&nbsp;&nbsp;</span>
<span id="L7111" class="ln">  7111&nbsp;&nbsp;</span>func (enum *randomEnum) position() uint32 {
<span id="L7112" class="ln">  7112&nbsp;&nbsp;</span>	return enum.pos
<span id="L7113" class="ln">  7113&nbsp;&nbsp;</span>}
<span id="L7114" class="ln">  7114&nbsp;&nbsp;</span>
<span id="L7115" class="ln">  7115&nbsp;&nbsp;</span>func gcd(a, b uint32) uint32 {
<span id="L7116" class="ln">  7116&nbsp;&nbsp;</span>	for b != 0 {
<span id="L7117" class="ln">  7117&nbsp;&nbsp;</span>		a, b = b, a%b
<span id="L7118" class="ln">  7118&nbsp;&nbsp;</span>	}
<span id="L7119" class="ln">  7119&nbsp;&nbsp;</span>	return a
<span id="L7120" class="ln">  7120&nbsp;&nbsp;</span>}
<span id="L7121" class="ln">  7121&nbsp;&nbsp;</span>
<span id="L7122" class="ln">  7122&nbsp;&nbsp;</span><span class="comment">// An initTask represents the set of initializations that need to be done for a package.</span>
<span id="L7123" class="ln">  7123&nbsp;&nbsp;</span><span class="comment">// Keep in sync with ../../test/noinit.go:initTask</span>
<span id="L7124" class="ln">  7124&nbsp;&nbsp;</span>type initTask struct {
<span id="L7125" class="ln">  7125&nbsp;&nbsp;</span>	state uint32 <span class="comment">// 0 = uninitialized, 1 = in progress, 2 = done</span>
<span id="L7126" class="ln">  7126&nbsp;&nbsp;</span>	nfns  uint32
<span id="L7127" class="ln">  7127&nbsp;&nbsp;</span>	<span class="comment">// followed by nfns pcs, uintptr sized, one per init function to run</span>
<span id="L7128" class="ln">  7128&nbsp;&nbsp;</span>}
<span id="L7129" class="ln">  7129&nbsp;&nbsp;</span>
<span id="L7130" class="ln">  7130&nbsp;&nbsp;</span><span class="comment">// inittrace stores statistics for init functions which are</span>
<span id="L7131" class="ln">  7131&nbsp;&nbsp;</span><span class="comment">// updated by malloc and newproc when active is true.</span>
<span id="L7132" class="ln">  7132&nbsp;&nbsp;</span>var inittrace tracestat
<span id="L7133" class="ln">  7133&nbsp;&nbsp;</span>
<span id="L7134" class="ln">  7134&nbsp;&nbsp;</span>type tracestat struct {
<span id="L7135" class="ln">  7135&nbsp;&nbsp;</span>	active bool   <span class="comment">// init tracing activation status</span>
<span id="L7136" class="ln">  7136&nbsp;&nbsp;</span>	id     uint64 <span class="comment">// init goroutine id</span>
<span id="L7137" class="ln">  7137&nbsp;&nbsp;</span>	allocs uint64 <span class="comment">// heap allocations</span>
<span id="L7138" class="ln">  7138&nbsp;&nbsp;</span>	bytes  uint64 <span class="comment">// heap allocated bytes</span>
<span id="L7139" class="ln">  7139&nbsp;&nbsp;</span>}
<span id="L7140" class="ln">  7140&nbsp;&nbsp;</span>
<span id="L7141" class="ln">  7141&nbsp;&nbsp;</span>func doInit(ts []*initTask) {
<span id="L7142" class="ln">  7142&nbsp;&nbsp;</span>	for _, t := range ts {
<span id="L7143" class="ln">  7143&nbsp;&nbsp;</span>		doInit1(t)
<span id="L7144" class="ln">  7144&nbsp;&nbsp;</span>	}
<span id="L7145" class="ln">  7145&nbsp;&nbsp;</span>}
<span id="L7146" class="ln">  7146&nbsp;&nbsp;</span>
<span id="L7147" class="ln">  7147&nbsp;&nbsp;</span>func doInit1(t *initTask) {
<span id="L7148" class="ln">  7148&nbsp;&nbsp;</span>	switch t.state {
<span id="L7149" class="ln">  7149&nbsp;&nbsp;</span>	case 2: <span class="comment">// fully initialized</span>
<span id="L7150" class="ln">  7150&nbsp;&nbsp;</span>		return
<span id="L7151" class="ln">  7151&nbsp;&nbsp;</span>	case 1: <span class="comment">// initialization in progress</span>
<span id="L7152" class="ln">  7152&nbsp;&nbsp;</span>		throw(&#34;recursive call during initialization - linker skew&#34;)
<span id="L7153" class="ln">  7153&nbsp;&nbsp;</span>	default: <span class="comment">// not initialized yet</span>
<span id="L7154" class="ln">  7154&nbsp;&nbsp;</span>		t.state = 1 <span class="comment">// initialization in progress</span>
<span id="L7155" class="ln">  7155&nbsp;&nbsp;</span>
<span id="L7156" class="ln">  7156&nbsp;&nbsp;</span>		var (
<span id="L7157" class="ln">  7157&nbsp;&nbsp;</span>			start  int64
<span id="L7158" class="ln">  7158&nbsp;&nbsp;</span>			before tracestat
<span id="L7159" class="ln">  7159&nbsp;&nbsp;</span>		)
<span id="L7160" class="ln">  7160&nbsp;&nbsp;</span>
<span id="L7161" class="ln">  7161&nbsp;&nbsp;</span>		if inittrace.active {
<span id="L7162" class="ln">  7162&nbsp;&nbsp;</span>			start = nanotime()
<span id="L7163" class="ln">  7163&nbsp;&nbsp;</span>			<span class="comment">// Load stats non-atomically since tracinit is updated only by this init goroutine.</span>
<span id="L7164" class="ln">  7164&nbsp;&nbsp;</span>			before = inittrace
<span id="L7165" class="ln">  7165&nbsp;&nbsp;</span>		}
<span id="L7166" class="ln">  7166&nbsp;&nbsp;</span>
<span id="L7167" class="ln">  7167&nbsp;&nbsp;</span>		if t.nfns == 0 {
<span id="L7168" class="ln">  7168&nbsp;&nbsp;</span>			<span class="comment">// We should have pruned all of these in the linker.</span>
<span id="L7169" class="ln">  7169&nbsp;&nbsp;</span>			throw(&#34;inittask with no functions&#34;)
<span id="L7170" class="ln">  7170&nbsp;&nbsp;</span>		}
<span id="L7171" class="ln">  7171&nbsp;&nbsp;</span>
<span id="L7172" class="ln">  7172&nbsp;&nbsp;</span>		firstFunc := add(unsafe.Pointer(t), 8)
<span id="L7173" class="ln">  7173&nbsp;&nbsp;</span>		for i := uint32(0); i &lt; t.nfns; i++ {
<span id="L7174" class="ln">  7174&nbsp;&nbsp;</span>			p := add(firstFunc, uintptr(i)*goarch.PtrSize)
<span id="L7175" class="ln">  7175&nbsp;&nbsp;</span>			f := *(*func())(unsafe.Pointer(&amp;p))
<span id="L7176" class="ln">  7176&nbsp;&nbsp;</span>			f()
<span id="L7177" class="ln">  7177&nbsp;&nbsp;</span>		}
<span id="L7178" class="ln">  7178&nbsp;&nbsp;</span>
<span id="L7179" class="ln">  7179&nbsp;&nbsp;</span>		if inittrace.active {
<span id="L7180" class="ln">  7180&nbsp;&nbsp;</span>			end := nanotime()
<span id="L7181" class="ln">  7181&nbsp;&nbsp;</span>			<span class="comment">// Load stats non-atomically since tracinit is updated only by this init goroutine.</span>
<span id="L7182" class="ln">  7182&nbsp;&nbsp;</span>			after := inittrace
<span id="L7183" class="ln">  7183&nbsp;&nbsp;</span>
<span id="L7184" class="ln">  7184&nbsp;&nbsp;</span>			f := *(*func())(unsafe.Pointer(&amp;firstFunc))
<span id="L7185" class="ln">  7185&nbsp;&nbsp;</span>			pkg := funcpkgpath(findfunc(abi.FuncPCABIInternal(f)))
<span id="L7186" class="ln">  7186&nbsp;&nbsp;</span>
<span id="L7187" class="ln">  7187&nbsp;&nbsp;</span>			var sbuf [24]byte
<span id="L7188" class="ln">  7188&nbsp;&nbsp;</span>			print(&#34;init &#34;, pkg, &#34; @&#34;)
<span id="L7189" class="ln">  7189&nbsp;&nbsp;</span>			print(string(fmtNSAsMS(sbuf[:], uint64(start-runtimeInitTime))), &#34; ms, &#34;)
<span id="L7190" class="ln">  7190&nbsp;&nbsp;</span>			print(string(fmtNSAsMS(sbuf[:], uint64(end-start))), &#34; ms clock, &#34;)
<span id="L7191" class="ln">  7191&nbsp;&nbsp;</span>			print(string(itoa(sbuf[:], after.bytes-before.bytes)), &#34; bytes, &#34;)
<span id="L7192" class="ln">  7192&nbsp;&nbsp;</span>			print(string(itoa(sbuf[:], after.allocs-before.allocs)), &#34; allocs&#34;)
<span id="L7193" class="ln">  7193&nbsp;&nbsp;</span>			print(&#34;\n&#34;)
<span id="L7194" class="ln">  7194&nbsp;&nbsp;</span>		}
<span id="L7195" class="ln">  7195&nbsp;&nbsp;</span>
<span id="L7196" class="ln">  7196&nbsp;&nbsp;</span>		t.state = 2 <span class="comment">// initialization done</span>
<span id="L7197" class="ln">  7197&nbsp;&nbsp;</span>	}
<span id="L7198" class="ln">  7198&nbsp;&nbsp;</span>}
<span id="L7199" class="ln">  7199&nbsp;&nbsp;</span>
</pre><p><a href="proc.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
