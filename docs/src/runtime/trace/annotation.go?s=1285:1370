<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/runtime/trace/annotation.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./annotation.go?s=1285:1370#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/runtime">runtime</a>/<a href="http://localhost:8080/src/runtime/trace">trace</a>/<span class="text-muted">annotation.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/runtime/trace">runtime/trace</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2018 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package trace
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	_ &#34;unsafe&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>)
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>type traceContextKey struct{}
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// NewTask creates a task instance with the type taskType and returns</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// it along with a Context that carries the task.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// If the input context contains a task, the new task is its subtask.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// The taskType is used to classify task instances. Analysis tools</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// like the Go execution tracer may assume there are only a bounded</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// number of unique task types in the system.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// The returned Task&#39;s [Task.End] method is used to mark the task&#39;s end.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// The trace tool measures task latency as the time between task creation</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// and when the End method is called, and provides the latency</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// distribution per task type.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// If the End method is called multiple times, only the first</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// call is used in the latency measurement.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">//	ctx, task := trace.NewTask(ctx, &#34;awesomeTask&#34;)</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//	trace.WithRegion(ctx, &#34;preparation&#34;, prepWork)</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">//	// preparation of the task</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">//	go func() {  // continue processing the task in a separate goroutine.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//	    defer task.End()</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">//	    trace.WithRegion(ctx, &#34;remainingWork&#34;, remainingWork)</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//	}()</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="selection">func NewTask(pctx context.Context, taskType string) (ctx context.Context, task *Task)</span> {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	pid := fromContext(pctx).id
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	id := newID()
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	userTaskCreate(id, pid, taskType)
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	s := &amp;Task{id: id}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	return context.WithValue(pctx, traceContextKey{}, s), s
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">// We allocate a new task even when</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// the tracing is disabled because the context and task</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// can be used across trace enable/disable boundaries,</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	<span class="comment">// which complicates the problem.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// For example, consider the following scenario:</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">//   - trace is enabled.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">//   - trace.WithRegion is called, so a new context ctx</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	<span class="comment">//     with a new region is created.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	<span class="comment">//   - trace is disabled.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">//   - trace is enabled again.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">//   - trace APIs with the ctx is called. Is the ID in the task</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">//   a valid one to use?</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// TODO(hyangah): reduce the overhead at least when</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// tracing is disabled. Maybe the id can embed a tracing</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// round number and ignore ids generated from previous</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">// tracing round.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>func fromContext(ctx context.Context) *Task {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	if s, ok := ctx.Value(traceContextKey{}).(*Task); ok {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		return s
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	return &amp;bgTask
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// Task is a data type for tracing a user-defined, logical operation.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>type Task struct {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	id uint64
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// TODO(hyangah): record parent id?</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// End marks the end of the operation represented by the [Task].</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>func (t *Task) End() {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	userTaskEnd(t.id)
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>var lastTaskID uint64 = 0 <span class="comment">// task id issued last time</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>func newID() uint64 {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">// TODO(hyangah): use per-P cache</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	return atomic.AddUint64(&amp;lastTaskID, 1)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>var bgTask = Task{id: uint64(0)}
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// Log emits a one-off event with the given category and message.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// Category can be empty and the API assumes there are only a handful of</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// unique categories in the system.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>func Log(ctx context.Context, category, message string) {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	id := fromContext(ctx).id
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	userLog(id, category, message)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// Logf is like [Log], but the value is formatted using the specified format spec.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>func Logf(ctx context.Context, category, format string, args ...any) {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	if IsEnabled() {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		<span class="comment">// Ideally this should be just Log, but that will</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		<span class="comment">// add one more frame in the stack trace.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		id := fromContext(ctx).id
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		userLog(id, category, fmt.Sprintf(format, args...))
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>const (
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	regionStartCode = uint64(0)
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	regionEndCode   = uint64(1)
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>)
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// WithRegion starts a region associated with its calling goroutine, runs fn,</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// and then ends the region. If the context carries a task, the region is</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// associated with the task. Otherwise, the region is attached to the background</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// task.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// The regionType is used to classify regions, so there should be only a</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// handful of unique region types.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>func WithRegion(ctx context.Context, regionType string, fn func()) {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// NOTE:</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">// WithRegion helps avoiding misuse of the API but in practice,</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">// this is very restrictive:</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// - Use of WithRegion makes the stack traces captured from</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">//   region start and end are identical.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">// - Refactoring the existing code to use WithRegion is sometimes</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">//   hard and makes the code less readable.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">//     e.g. code block nested deep in the loop with various</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">//          exit point with return values</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// - Refactoring the code to use this API with closure can</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">//   cause different GC behavior such as retaining some parameters</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">//   longer.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// This causes more churns in code than I hoped, and sometimes</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	<span class="comment">// makes the code less readable.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	id := fromContext(ctx).id
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	userRegion(id, regionStartCode, regionType)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	defer userRegion(id, regionEndCode, regionType)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	fn()
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// StartRegion starts a region and returns it.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// The returned Region&#39;s [Region.End] method must be called</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// from the same goroutine where the region was started.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// Within each goroutine, regions must nest. That is, regions started</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">// after this region must be ended before this region can be ended.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// Recommended usage is</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">//	defer trace.StartRegion(ctx, &#34;myTracedRegion&#34;).End()</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>func StartRegion(ctx context.Context, regionType string) *Region {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	if !IsEnabled() {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		return noopRegion
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	id := fromContext(ctx).id
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	userRegion(id, regionStartCode, regionType)
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	return &amp;Region{id, regionType}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// Region is a region of code whose execution time interval is traced.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>type Region struct {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	id         uint64
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	regionType string
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>var noopRegion = &amp;Region{}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// End marks the end of the traced code region.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>func (r *Region) End() {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	if r == noopRegion {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		return
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	userRegion(r.id, regionEndCode, r.regionType)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// IsEnabled reports whether tracing is enabled.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// The information is advisory only. The tracing status</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// may have changed by the time this function returns.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>func IsEnabled() bool {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	return tracing.enabled.Load()
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// Function bodies are defined in runtime/trace.go</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// emits UserTaskCreate event.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>func userTaskCreate(id, parentID uint64, taskType string)
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// emits UserTaskEnd event.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>func userTaskEnd(id uint64)
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// emits UserRegion event.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>func userRegion(id, mode uint64, regionType string)
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// emits UserLog event.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>func userLog(id uint64, category, message string)
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
</pre><p><a href="annotation.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
