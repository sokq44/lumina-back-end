<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/runtime/trace/trace.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./trace.go?s=4584:4613#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/runtime">runtime</a>/<a href="http://localhost:8080/src/runtime/trace">trace</a>/<span class="text-muted">trace.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/runtime/trace">runtime/trace</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2015 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package trace contains facilities for programs to generate traces</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// for the Go execution tracer.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// # Tracing runtime activities</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// The execution trace captures a wide range of execution events such as</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// goroutine creation/blocking/unblocking, syscall enter/exit/block,</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// GC-related events, changes of heap size, processor start/stop, etc.</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// When CPU profiling is active, the execution tracer makes an effort to</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// include those samples as well.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// A precise nanosecond-precision timestamp and a stack trace is</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// captured for most events. The generated trace can be interpreted</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// using `go tool trace`.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// Support for tracing tests and benchmarks built with the standard</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// testing package is built into `go test`. For example, the following</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// command runs the test in the current directory and writes the trace</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// file (trace.out).</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">//	go test -trace=trace.out</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// This runtime/trace package provides APIs to add equivalent tracing</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// support to a standalone program. See the Example that demonstrates</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// how to use this API to enable tracing.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// There is also a standard HTTP interface to trace data. Adding the</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// following line will install a handler under the /debug/pprof/trace URL</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// to download a live trace:</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">//	import _ &#34;net/http/pprof&#34;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// See the [net/http/pprof] package for more details about all of the</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// debug endpoints installed by this import.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// # User annotation</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// Package trace provides user annotation APIs that can be used to</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// log interesting events during execution.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// There are three types of user annotations: log messages, regions,</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// and tasks.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// [Log] emits a timestamped message to the execution trace along with</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// additional information such as the category of the message and</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// which goroutine called [Log]. The execution tracer provides UIs to filter</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// and group goroutines using the log category and the message supplied</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// in [Log].</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// A region is for logging a time interval during a goroutine&#39;s execution.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// By definition, a region starts and ends in the same goroutine.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// Regions can be nested to represent subintervals.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// For example, the following code records four regions in the execution</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// trace to trace the durations of sequential steps in a cappuccino making</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// operation.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">//	trace.WithRegion(ctx, &#34;makeCappuccino&#34;, func() {</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">//	   // orderID allows to identify a specific order</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//	   // among many cappuccino order region records.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//	   trace.Log(ctx, &#34;orderID&#34;, orderID)</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">//	   trace.WithRegion(ctx, &#34;steamMilk&#34;, steamMilk)</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">//	   trace.WithRegion(ctx, &#34;extractCoffee&#34;, extractCoffee)</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">//	   trace.WithRegion(ctx, &#34;mixMilkCoffee&#34;, mixMilkCoffee)</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">//	})</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// A task is a higher-level component that aids tracing of logical</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// operations such as an RPC request, an HTTP request, or an</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// interesting local operation which may require multiple goroutines</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// working together. Since tasks can involve multiple goroutines,</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// they are tracked via a [context.Context] object. [NewTask] creates</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// a new task and embeds it in the returned [context.Context] object.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// Log messages and regions are attached to the task, if any, in the</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// Context passed to [Log] and [WithRegion].</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// For example, assume that we decided to froth milk, extract coffee,</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// and mix milk and coffee in separate goroutines. With a task,</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// the trace tool can identify the goroutines involved in a specific</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// cappuccino order.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">//	ctx, task := trace.NewTask(ctx, &#34;makeCappuccino&#34;)</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">//	trace.Log(ctx, &#34;orderID&#34;, orderID)</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">//	milk := make(chan bool)</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">//	espresso := make(chan bool)</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">//	go func() {</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">//	        trace.WithRegion(ctx, &#34;steamMilk&#34;, steamMilk)</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">//	        milk &lt;- true</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">//	}()</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">//	go func() {</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">//	        trace.WithRegion(ctx, &#34;extractCoffee&#34;, extractCoffee)</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">//	        espresso &lt;- true</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">//	}()</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">//	go func() {</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">//	        defer task.End() // When assemble is done, the order is complete.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">//	        &lt;-espresso</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">//	        &lt;-milk</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">//	        trace.WithRegion(ctx, &#34;mixMilkCoffee&#34;, mixMilkCoffee)</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">//	}()</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// The trace tool computes the latency of a task by measuring the</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// time between the task creation and the task end and provides</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// latency distributions for each task type found in the trace.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>package trace
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>import (
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	&#34;runtime&#34;
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// Start enables tracing for the current program.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// While tracing, the trace will be buffered and written to w.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// Start returns an error if tracing is already enabled.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="selection">func Start(w io.Writer) error</span> {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	tracing.Lock()
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	defer tracing.Unlock()
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	if err := runtime.StartTrace(); err != nil {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		return err
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	go func() {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		for {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>			data := runtime.ReadTrace()
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>			if data == nil {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>				break
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>			}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			w.Write(data)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	}()
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	tracing.enabled.Store(true)
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	return nil
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">// Stop stops the current tracing, if any.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// Stop only returns after all the writes for the trace have completed.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>func Stop() {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	tracing.Lock()
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	defer tracing.Unlock()
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	tracing.enabled.Store(false)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	runtime.StopTrace()
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>var tracing struct {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	sync.Mutex <span class="comment">// gate mutators (Start, Stop)</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	enabled    atomic.Bool
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>
</pre><p><a href="trace.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
