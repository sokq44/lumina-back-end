<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/slices/slices.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./slices.go?s=1760:1809#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/slices">slices</a>/<span class="text-muted">slices.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/slices">slices</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2021 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package slices defines various functions useful with slices of any type.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>package slices
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>import (
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;cmp&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;unsafe&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>)
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// Equal reports whether two slices are equal: the same length and all</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// elements equal. If the lengths are different, Equal returns false.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// Otherwise, the elements are compared in increasing index order, and the</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// comparison stops at the first unequal pair.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// Floating point NaNs are not considered equal.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>func Equal[S ~[]E, E comparable](s1, s2 S) bool {
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	if len(s1) != len(s2) {
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>		return false
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	}
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	for i := range s1 {
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>		if s1[i] != s2[i] {
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>			return false
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>		}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	}
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	return true
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>}
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// EqualFunc reports whether two slices are equal using an equality</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// function on each pair of elements. If the lengths are different,</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// EqualFunc returns false. Otherwise, the elements are compared in</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// increasing index order, and the comparison stops at the first index</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// for which eq returns false.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>func EqualFunc[S1 ~[]E1, S2 ~[]E2, E1, E2 any](s1 S1, s2 S2, eq func(E1, E2) bool) bool {
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	if len(s1) != len(s2) {
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>		return false
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	}
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	for i, v1 := range s1 {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>		v2 := s2[i]
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		if !eq(v1, v2) {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>			return false
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>		}
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	}
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	return true
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// Compare compares the elements of s1 and s2, using [cmp.Compare] on each pair</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// of elements. The elements are compared sequentially, starting at index 0,</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// until one element is not equal to the other.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// The result of comparing the first non-matching elements is returned.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// If both slices are equal until one of them ends, the shorter slice is</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// considered less than the longer one.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// The result is 0 if s1 == s2, -1 if s1 &lt; s2, and +1 if s1 &gt; s2.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="selection">func Compare[S ~[]E, E cmp.Ordered](s1, s2 S) int</span> {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	for i, v1 := range s1 {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		if i &gt;= len(s2) {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>			return +1
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		}
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		v2 := s2[i]
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		if c := cmp.Compare(v1, v2); c != 0 {
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>			return c
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	if len(s1) &lt; len(s2) {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		return -1
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	}
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	return 0
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// CompareFunc is like [Compare] but uses a custom comparison function on each</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// pair of elements.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// The result is the first non-zero result of cmp; if cmp always</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// returns 0 the result is 0 if len(s1) == len(s2), -1 if len(s1) &lt; len(s2),</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// and +1 if len(s1) &gt; len(s2).</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>func CompareFunc[S1 ~[]E1, S2 ~[]E2, E1, E2 any](s1 S1, s2 S2, cmp func(E1, E2) int) int {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	for i, v1 := range s1 {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		if i &gt;= len(s2) {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>			return +1
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		v2 := s2[i]
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		if c := cmp(v1, v2); c != 0 {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>			return c
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	if len(s1) &lt; len(s2) {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		return -1
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	return 0
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>}
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// Index returns the index of the first occurrence of v in s,</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// or -1 if not present.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>func Index[S ~[]E, E comparable](s S, v E) int {
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	for i := range s {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		if v == s[i] {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>			return i
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	return -1
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// IndexFunc returns the first index i satisfying f(s[i]),</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// or -1 if none do.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>func IndexFunc[S ~[]E, E any](s S, f func(E) bool) int {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	for i := range s {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		if f(s[i]) {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>			return i
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	return -1
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// Contains reports whether v is present in s.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>func Contains[S ~[]E, E comparable](s S, v E) bool {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	return Index(s, v) &gt;= 0
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// ContainsFunc reports whether at least one</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// element e of s satisfies f(e).</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>func ContainsFunc[S ~[]E, E any](s S, f func(E) bool) bool {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	return IndexFunc(s, f) &gt;= 0
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// Insert inserts the values v... into s at index i,</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// returning the modified slice.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// The elements at s[i:] are shifted up to make room.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// In the returned slice r, r[i] == v[0],</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// and r[i+len(v)] == value originally at r[i].</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// Insert panics if i is out of range.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// This function is O(len(s) + len(v)).</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>func Insert[S ~[]E, E any](s S, i int, v ...E) S {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	_ = s[i:] <span class="comment">// bounds check</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	m := len(v)
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	if m == 0 {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		return s
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	n := len(s)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	if i == n {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		return append(s, v...)
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	if n+m &gt; cap(s) {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		<span class="comment">// Use append rather than make so that we bump the size of</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		<span class="comment">// the slice up to the next storage class.</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		<span class="comment">// This is what Grow does but we don&#39;t call Grow because</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		<span class="comment">// that might copy the values twice.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		s2 := append(s[:i], make(S, n+m-i)...)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		copy(s2[i:], v)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		copy(s2[i+m:], s[i:])
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		return s2
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	s = s[:n+m]
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// before:</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">// s: aaaaaaaabbbbccccccccdddd</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">//            ^   ^       ^   ^</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">//            i  i+m      n  n+m</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	<span class="comment">// after:</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	<span class="comment">// s: aaaaaaaavvvvbbbbcccccccc</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	<span class="comment">//            ^   ^       ^   ^</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">//            i  i+m      n  n+m</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// a are the values that don&#39;t move in s.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	<span class="comment">// v are the values copied in from v.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	<span class="comment">// b and c are the values from s that are shifted up in index.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	<span class="comment">// d are the values that get overwritten, never to be seen again.</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	if !overlaps(v, s[i+m:]) {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		<span class="comment">// Easy case - v does not overlap either the c or d regions.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		<span class="comment">// (It might be in some of a or b, or elsewhere entirely.)</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		<span class="comment">// The data we copy up doesn&#39;t write to v at all, so just do it.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		copy(s[i+m:], s[i:])
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		<span class="comment">// Now we have</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		<span class="comment">// s: aaaaaaaabbbbbbbbcccccccc</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		<span class="comment">//            ^   ^       ^   ^</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		<span class="comment">//            i  i+m      n  n+m</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		<span class="comment">// Note the b values are duplicated.</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		copy(s[i:], v)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		<span class="comment">// Now we have</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		<span class="comment">// s: aaaaaaaavvvvbbbbcccccccc</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		<span class="comment">//            ^   ^       ^   ^</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		<span class="comment">//            i  i+m      n  n+m</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		<span class="comment">// That&#39;s the result we want.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		return s
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	<span class="comment">// The hard case - v overlaps c or d. We can&#39;t just shift up</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	<span class="comment">// the data because we&#39;d move or clobber the values we&#39;re trying</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	<span class="comment">// to insert.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	<span class="comment">// So instead, write v on top of d, then rotate.</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	copy(s[n:], v)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// Now we have</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	<span class="comment">// s: aaaaaaaabbbbccccccccvvvv</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">//            ^   ^       ^   ^</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	<span class="comment">//            i  i+m      n  n+m</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	rotateRight(s[i:], m)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	<span class="comment">// Now we have</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	<span class="comment">// s: aaaaaaaavvvvbbbbcccccccc</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	<span class="comment">//            ^   ^       ^   ^</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	<span class="comment">//            i  i+m      n  n+m</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	<span class="comment">// That&#39;s the result we want.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	return s
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">// Delete removes the elements s[i:j] from s, returning the modified slice.</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// Delete panics if j &gt; len(s) or s[i:j] is not a valid slice of s.</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// Delete is O(len(s)-i), so if many items must be deleted, it is better to</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// make a single call deleting them all together than to delete one at a time.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// Delete zeroes the elements s[len(s)-(j-i):len(s)].</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>func Delete[S ~[]E, E any](s S, i, j int) S {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	_ = s[i:j:len(s)] <span class="comment">// bounds check</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	if i == j {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		return s
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	oldlen := len(s)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	s = append(s[:i], s[j:]...)
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	clear(s[len(s):oldlen]) <span class="comment">// zero/nil out the obsolete elements, for GC</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	return s
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// DeleteFunc removes any elements from s for which del returns true,</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">// returning the modified slice.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">// DeleteFunc zeroes the elements between the new length and the original length.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>func DeleteFunc[S ~[]E, E any](s S, del func(E) bool) S {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	i := IndexFunc(s, del)
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	if i == -1 {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		return s
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	<span class="comment">// Don&#39;t start copying elements until we find one to delete.</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	for j := i + 1; j &lt; len(s); j++ {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		if v := s[j]; !del(v) {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>			s[i] = v
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			i++
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	clear(s[i:]) <span class="comment">// zero/nil out the obsolete elements, for GC</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	return s[:i]
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">// Replace replaces the elements s[i:j] by the given v, and returns the</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// modified slice.</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// Replace panics if j &gt; len(s) or s[i:j] is not a valid slice of s.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">// When len(v) &lt; (j-i), Replace zeroes the elements between the new length and the original length.</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>func Replace[S ~[]E, E any](s S, i, j int, v ...E) S {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	_ = s[i:j] <span class="comment">// bounds check</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	if i == j {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		return Insert(s, i, v...)
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	if j == len(s) {
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		return append(s[:i], v...)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	tot := len(s[:i]) + len(v) + len(s[j:])
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	if tot &gt; cap(s) {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		<span class="comment">// Too big to fit, allocate and copy over.</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		s2 := append(s[:i], make(S, tot-i)...) <span class="comment">// See Insert</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		copy(s2[i:], v)
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		copy(s2[i+len(v):], s[j:])
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		return s2
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	r := s[:tot]
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	if i+len(v) &lt;= j {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		<span class="comment">// Easy, as v fits in the deleted portion.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		copy(r[i:], v)
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		copy(r[i+len(v):], s[j:])
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		clear(s[tot:]) <span class="comment">// zero/nil out the obsolete elements, for GC</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		return r
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	<span class="comment">// We are expanding (v is bigger than j-i).</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	<span class="comment">// The situation is something like this:</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	<span class="comment">// (example has i=4,j=8,len(s)=16,len(v)=6)</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	<span class="comment">// s: aaaaxxxxbbbbbbbbyy</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	<span class="comment">//        ^   ^       ^ ^</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	<span class="comment">//        i   j  len(s) tot</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	<span class="comment">// a: prefix of s</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	<span class="comment">// x: deleted range</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	<span class="comment">// b: more of s</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	<span class="comment">// y: area to expand into</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	if !overlaps(r[i+len(v):], v) {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		<span class="comment">// Easy, as v is not clobbered by the first copy.</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		copy(r[i+len(v):], s[j:])
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		copy(r[i:], v)
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		return r
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	<span class="comment">// This is a situation where we don&#39;t have a single place to which</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	<span class="comment">// we can copy v. Parts of it need to go to two different places.</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	<span class="comment">// We want to copy the prefix of v into y and the suffix into x, then</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	<span class="comment">// rotate |y| spots to the right.</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	<span class="comment">//        v[2:]      v[:2]</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	<span class="comment">//         |           |</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	<span class="comment">// s: aaaavvvvbbbbbbbbvv</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	<span class="comment">//        ^   ^       ^ ^</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	<span class="comment">//        i   j  len(s) tot</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	<span class="comment">// If either of those two destinations don&#39;t alias v, then we&#39;re good.</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	y := len(v) - (j - i) <span class="comment">// length of y portion</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	if !overlaps(r[i:j], v) {
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		copy(r[i:j], v[y:])
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		copy(r[len(s):], v[:y])
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		rotateRight(r[i:], y)
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		return r
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	if !overlaps(r[len(s):], v) {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		copy(r[len(s):], v[:y])
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		copy(r[i:j], v[y:])
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		rotateRight(r[i:], y)
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		return r
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	<span class="comment">// Now we know that v overlaps both x and y.</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	<span class="comment">// That means that the entirety of b is *inside* v.</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	<span class="comment">// So we don&#39;t need to preserve b at all; instead we</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	<span class="comment">// can copy v first, then copy the b part of v out of</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	<span class="comment">// v to the right destination.</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	k := startIdx(v, s[j:])
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	copy(r[i:], v)
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	copy(r[i+len(v):], r[i+k:])
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	return r
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">// Clone returns a copy of the slice.</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// The elements are copied using assignment, so this is a shallow clone.</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>func Clone[S ~[]E, E any](s S) S {
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	<span class="comment">// The s[:0:0] preserves nil in case it matters.</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	return append(s[:0:0], s...)
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// Compact replaces consecutive runs of equal elements with a single copy.</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// This is like the uniq command found on Unix.</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span><span class="comment">// Compact modifies the contents of the slice s and returns the modified slice,</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">// which may have a smaller length.</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span><span class="comment">// Compact zeroes the elements between the new length and the original length.</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>func Compact[S ~[]E, E comparable](s S) S {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	if len(s) &lt; 2 {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		return s
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	i := 1
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	for k := 1; k &lt; len(s); k++ {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		if s[k] != s[k-1] {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>			if i != k {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>				s[i] = s[k]
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>			}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>			i++
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	clear(s[i:]) <span class="comment">// zero/nil out the obsolete elements, for GC</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	return s[:i]
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// CompactFunc is like [Compact] but uses an equality function to compare elements.</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// For runs of elements that compare equal, CompactFunc keeps the first one.</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">// CompactFunc zeroes the elements between the new length and the original length.</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>func CompactFunc[S ~[]E, E any](s S, eq func(E, E) bool) S {
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	if len(s) &lt; 2 {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		return s
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	i := 1
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	for k := 1; k &lt; len(s); k++ {
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>		if !eq(s[k], s[k-1]) {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>			if i != k {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>				s[i] = s[k]
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>			}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>			i++
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	}
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	clear(s[i:]) <span class="comment">// zero/nil out the obsolete elements, for GC</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	return s[:i]
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span><span class="comment">// Grow increases the slice&#39;s capacity, if necessary, to guarantee space for</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span><span class="comment">// another n elements. After Grow(n), at least n elements can be appended</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span><span class="comment">// to the slice without another allocation. If n is negative or too large to</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span><span class="comment">// allocate the memory, Grow panics.</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>func Grow[S ~[]E, E any](s S, n int) S {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	if n &lt; 0 {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		panic(&#34;cannot be negative&#34;)
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	}
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	if n -= cap(s) - len(s); n &gt; 0 {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>		s = append(s[:cap(s)], make([]E, n)...)[:len(s)]
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	}
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	return s
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>}
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span><span class="comment">// Clip removes unused capacity from the slice, returning s[:len(s):len(s)].</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>func Clip[S ~[]E, E any](s S) S {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	return s[:len(s):len(s)]
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>}
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span><span class="comment">// Rotation algorithm explanation:</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span><span class="comment">// rotate left by 2</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span><span class="comment">// start with</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span><span class="comment">//   0123456789</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span><span class="comment">// split up like this</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span><span class="comment">//   01 234567 89</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span><span class="comment">// swap first 2 and last 2</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span><span class="comment">//   89 234567 01</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span><span class="comment">// join first parts</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span><span class="comment">//   89234567 01</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span><span class="comment">// recursively rotate first left part by 2</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span><span class="comment">//   23456789 01</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span><span class="comment">// join at the end</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span><span class="comment">//   2345678901</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span><span class="comment">// rotate left by 8</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span><span class="comment">// start with</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span><span class="comment">//   0123456789</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span><span class="comment">// split up like this</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span><span class="comment">//   01 234567 89</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span><span class="comment">// swap first 2 and last 2</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span><span class="comment">//   89 234567 01</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span><span class="comment">// join last parts</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span><span class="comment">//   89 23456701</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span><span class="comment">// recursively rotate second part left by 6</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span><span class="comment">//   89 01234567</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span><span class="comment">// join at the end</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span><span class="comment">//   8901234567</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span><span class="comment">// TODO: There are other rotate algorithms.</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span><span class="comment">// This algorithm has the desirable property that it moves each element exactly twice.</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span><span class="comment">// The triple-reverse algorithm is simpler and more cache friendly, but takes more writes.</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span><span class="comment">// The follow-cycles algorithm can be 1-write but it is not very cache friendly.</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span><span class="comment">// rotateLeft rotates b left by n spaces.</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span><span class="comment">// s_final[i] = s_orig[i+r], wrapping around.</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>func rotateLeft[E any](s []E, r int) {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	for r != 0 &amp;&amp; r != len(s) {
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		if r*2 &lt;= len(s) {
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>			swap(s[:r], s[len(s)-r:])
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>			s = s[:len(s)-r]
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		} else {
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>			swap(s[:len(s)-r], s[r:])
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>			s, r = s[len(s)-r:], r*2-len(s)
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		}
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	}
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>func rotateRight[E any](s []E, r int) {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	rotateLeft(s, len(s)-r)
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span><span class="comment">// swap swaps the contents of x and y. x and y must be equal length and disjoint.</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>func swap[E any](x, y []E) {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	for i := 0; i &lt; len(x); i++ {
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		x[i], y[i] = y[i], x[i]
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span><span class="comment">// overlaps reports whether the memory ranges a[0:len(a)] and b[0:len(b)] overlap.</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>func overlaps[E any](a, b []E) bool {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	if len(a) == 0 || len(b) == 0 {
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		return false
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	elemSize := unsafe.Sizeof(a[0])
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	if elemSize == 0 {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		return false
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	}
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	<span class="comment">// TODO: use a runtime/unsafe facility once one becomes available. See issue 12445.</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	<span class="comment">// Also see crypto/internal/alias/alias.go:AnyOverlap</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	return uintptr(unsafe.Pointer(&amp;a[0])) &lt;= uintptr(unsafe.Pointer(&amp;b[len(b)-1]))+(elemSize-1) &amp;&amp;
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		uintptr(unsafe.Pointer(&amp;b[0])) &lt;= uintptr(unsafe.Pointer(&amp;a[len(a)-1]))+(elemSize-1)
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">// startIdx returns the index in haystack where the needle starts.</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span><span class="comment">// prerequisite: the needle must be aliased entirely inside the haystack.</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>func startIdx[E any](haystack, needle []E) int {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	p := &amp;needle[0]
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	for i := range haystack {
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		if p == &amp;haystack[i] {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>			return i
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	}
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	<span class="comment">// TODO: what if the overlap is by a non-integral number of Es?</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	panic(&#34;needle not found&#34;)
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>}
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span><span class="comment">// Reverse reverses the elements of the slice in place.</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>func Reverse[S ~[]E, E any](s S) {
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	for i, j := 0, len(s)-1; i &lt; j; i, j = i+1, j-1 {
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		s[i], s[j] = s[j], s[i]
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	}
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span><span class="comment">// Concat returns a new slice concatenating the passed in slices.</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>func Concat[S ~[]E, E any](slices ...S) S {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	size := 0
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	for _, s := range slices {
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		size += len(s)
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		if size &lt; 0 {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>			panic(&#34;len out of range&#34;)
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>		}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	newslice := Grow[S](nil, size)
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	for _, s := range slices {
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		newslice = append(newslice, s...)
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	}
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	return newslice
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>}
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>
</pre><p><a href="slices.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
