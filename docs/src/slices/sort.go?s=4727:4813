<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/slices/sort.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./sort.go?s=4727:4813#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/slices">slices</a>/<span class="text-muted">sort.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/slices">slices</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2023 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">//go:generate go run $GOROOT/src/sort/gen_sort_variants.go -generic</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package slices
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;cmp&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;math/bits&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>)
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// Sort sorts a slice of any ordered type in ascending order.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// When sorting floating-point numbers, NaNs are ordered before other values.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>func Sort[S ~[]E, E cmp.Ordered](x S) {
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	n := len(x)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	pdqsortOrdered(x, 0, n, bits.Len(uint(n)))
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>}
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// SortFunc sorts the slice x in ascending order as determined by the cmp</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// function. This sort is not guaranteed to be stable.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// cmp(a, b) should return a negative number when a &lt; b, a positive number when</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// a &gt; b and zero when a == b.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// SortFunc requires that cmp is a strict weak ordering.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// See https://en.wikipedia.org/wiki/Weak_ordering#Strict_weak_orderings.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>func SortFunc[S ~[]E, E any](x S, cmp func(a, b E) int) {
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	n := len(x)
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	pdqsortCmpFunc(x, 0, n, bits.Len(uint(n)), cmp)
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>}
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// SortStableFunc sorts the slice x while keeping the original order of equal</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// elements, using cmp to compare elements in the same way as [SortFunc].</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>func SortStableFunc[S ~[]E, E any](x S, cmp func(a, b E) int) {
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	stableCmpFunc(x, len(x), cmp)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>}
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// IsSorted reports whether x is sorted in ascending order.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>func IsSorted[S ~[]E, E cmp.Ordered](x S) bool {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	for i := len(x) - 1; i &gt; 0; i-- {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>		if cmp.Less(x[i], x[i-1]) {
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>			return false
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>		}
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	return true
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>}
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// IsSortedFunc reports whether x is sorted in ascending order, with cmp as the</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// comparison function as defined by [SortFunc].</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>func IsSortedFunc[S ~[]E, E any](x S, cmp func(a, b E) int) bool {
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	for i := len(x) - 1; i &gt; 0; i-- {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		if cmp(x[i], x[i-1]) &lt; 0 {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>			return false
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		}
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	return true
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// Min returns the minimal value in x. It panics if x is empty.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// For floating-point numbers, Min propagates NaNs (any NaN value in x</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// forces the output to be NaN).</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>func Min[S ~[]E, E cmp.Ordered](x S) E {
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	if len(x) &lt; 1 {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		panic(&#34;slices.Min: empty list&#34;)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	m := x[0]
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	for i := 1; i &lt; len(x); i++ {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		m = min(m, x[i])
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	return m
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// MinFunc returns the minimal value in x, using cmp to compare elements.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// It panics if x is empty. If there is more than one minimal element</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// according to the cmp function, MinFunc returns the first one.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>func MinFunc[S ~[]E, E any](x S, cmp func(a, b E) int) E {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	if len(x) &lt; 1 {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		panic(&#34;slices.MinFunc: empty list&#34;)
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	m := x[0]
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	for i := 1; i &lt; len(x); i++ {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		if cmp(x[i], m) &lt; 0 {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>			m = x[i]
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	return m
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// Max returns the maximal value in x. It panics if x is empty.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// For floating-point E, Max propagates NaNs (any NaN value in x</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// forces the output to be NaN).</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>func Max[S ~[]E, E cmp.Ordered](x S) E {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	if len(x) &lt; 1 {
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		panic(&#34;slices.Max: empty list&#34;)
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	m := x[0]
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	for i := 1; i &lt; len(x); i++ {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		m = max(m, x[i])
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	return m
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// MaxFunc returns the maximal value in x, using cmp to compare elements.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// It panics if x is empty. If there is more than one maximal element</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// according to the cmp function, MaxFunc returns the first one.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>func MaxFunc[S ~[]E, E any](x S, cmp func(a, b E) int) E {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	if len(x) &lt; 1 {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		panic(&#34;slices.MaxFunc: empty list&#34;)
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	m := x[0]
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	for i := 1; i &lt; len(x); i++ {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		if cmp(x[i], m) &gt; 0 {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>			m = x[i]
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	return m
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>}
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// BinarySearch searches for target in a sorted slice and returns the position</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// where target is found, or the position where target would appear in the</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// sort order; it also returns a bool saying whether the target is really found</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// in the slice. The slice must be sorted in increasing order.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>func BinarySearch[S ~[]E, E cmp.Ordered](x S, target E) (int, bool) {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">// Inlining is faster than calling BinarySearchFunc with a lambda.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	n := len(x)
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">// Define x[-1] &lt; target and x[n] &gt;= target.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">// Invariant: x[i-1] &lt; target, x[j] &gt;= target.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	i, j := 0, n
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	for i &lt; j {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		h := int(uint(i+j) &gt;&gt; 1) <span class="comment">// avoid overflow when computing h</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		<span class="comment">// i ≤ h &lt; j</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		if cmp.Less(x[h], target) {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			i = h + 1 <span class="comment">// preserves x[i-1] &lt; target</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		} else {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			j = h <span class="comment">// preserves x[j] &gt;= target</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	<span class="comment">// i == j, x[i-1] &lt; target, and x[j] (= x[i]) &gt;= target  =&gt;  answer is i.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	return i, i &lt; n &amp;&amp; (x[i] == target || (isNaN(x[i]) &amp;&amp; isNaN(target)))
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// BinarySearchFunc works like [BinarySearch], but uses a custom comparison</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// function. The slice must be sorted in increasing order, where &#34;increasing&#34;</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// is defined by cmp. cmp should return 0 if the slice element matches</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// the target, a negative number if the slice element precedes the target,</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// or a positive number if the slice element follows the target.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">// cmp must implement the same ordering as the slice, such that if</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// cmp(a, t) &lt; 0 and cmp(b, t) &gt;= 0, then a must precede b in the slice.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="selection">func BinarySearchFunc[S ~[]E, E, T any](x S, target T, cmp func(E, T) int) (int, bool)</span> {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	n := len(x)
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">// Define cmp(x[-1], target) &lt; 0 and cmp(x[n], target) &gt;= 0 .</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">// Invariant: cmp(x[i - 1], target) &lt; 0, cmp(x[j], target) &gt;= 0.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	i, j := 0, n
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	for i &lt; j {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		h := int(uint(i+j) &gt;&gt; 1) <span class="comment">// avoid overflow when computing h</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		<span class="comment">// i ≤ h &lt; j</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		if cmp(x[h], target) &lt; 0 {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>			i = h + 1 <span class="comment">// preserves cmp(x[i - 1], target) &lt; 0</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		} else {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>			j = h <span class="comment">// preserves cmp(x[j], target) &gt;= 0</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// i == j, cmp(x[i-1], target) &lt; 0, and cmp(x[j], target) (= cmp(x[i], target)) &gt;= 0  =&gt;  answer is i.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	return i, i &lt; n &amp;&amp; cmp(x[i], target) == 0
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>type sortedHint int <span class="comment">// hint for pdqsort when choosing the pivot</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>const (
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	unknownHint sortedHint = iota
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	increasingHint
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	decreasingHint
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// xorshift paper: https://www.jstatsoft.org/article/view/v008i14/xorshift.pdf</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>type xorshift uint64
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>func (r *xorshift) Next() uint64 {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	*r ^= *r &lt;&lt; 13
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	*r ^= *r &gt;&gt; 17
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	*r ^= *r &lt;&lt; 5
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	return uint64(*r)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>func nextPowerOfTwo(length int) uint {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	return 1 &lt;&lt; bits.Len(uint(length))
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// isNaN reports whether x is a NaN without requiring the math package.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// This will always return false if T is not floating-point.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>func isNaN[T cmp.Ordered](x T) bool {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	return x != x
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
</pre><p><a href="sort.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
