<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/sort/search.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./search.go?s=5244:5288#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/sort">sort</a>/<span class="text-muted">search.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/sort">sort</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// This file implements binary search.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package sort
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// Search uses binary search to find and return the smallest index i</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// in [0, n) at which f(i) is true, assuming that on the range [0, n),</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// f(i) == true implies f(i+1) == true. That is, Search requires that</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// f is false for some (possibly empty) prefix of the input range [0, n)</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// and then true for the (possibly empty) remainder; Search returns</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// the first true index. If there is no such index, Search returns n.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// (Note that the &#34;not found&#34; return value is not -1 as in, for instance,</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// strings.Index.)</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// Search calls f(i) only for i in the range [0, n).</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// A common use of Search is to find the index i for a value x in</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// a sorted, indexable data structure such as an array or slice.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// In this case, the argument f, typically a closure, captures the value</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// to be searched for, and how the data structure is indexed and</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// ordered.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// For instance, given a slice data sorted in ascending order,</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// the call Search(len(data), func(i int) bool { return data[i] &gt;= 23 })</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// returns the smallest index i such that data[i] &gt;= 23. If the caller</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// wants to find whether 23 is in the slice, it must test data[i] == 23</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// separately.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// Searching data sorted in descending order would use the &lt;=</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// operator instead of the &gt;= operator.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// To complete the example above, the following code tries to find the value</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// x in an integer slice data sorted in ascending order:</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//	x := 23</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//	i := sort.Search(len(data), func(i int) bool { return data[i] &gt;= x })</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//	if i &lt; len(data) &amp;&amp; data[i] == x {</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//		// x is present at data[i]</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//	} else {</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//		// x is not present in data,</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//		// but i is the index where it would be inserted.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// As a more whimsical example, this program guesses your number:</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//	func GuessingGame() {</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//		var s string</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//		fmt.Printf(&#34;Pick an integer from 0 to 100.\n&#34;)</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//		answer := sort.Search(100, func(i int) bool {</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//			fmt.Printf(&#34;Is your number &lt;= %d? &#34;, i)</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//			fmt.Scanf(&#34;%s&#34;, &amp;s)</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//			return s != &#34;&#34; &amp;&amp; s[0] == &#39;y&#39;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">//		})</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//		fmt.Printf(&#34;Your number is %d.\n&#34;, answer)</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>func Search(n int, f func(int) bool) int {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// Define f(-1) == false and f(n) == true.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// Invariant: f(i-1) == false, f(j) == true.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	i, j := 0, n
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	for i &lt; j {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		h := int(uint(i+j) &gt;&gt; 1) <span class="comment">// avoid overflow when computing h</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		<span class="comment">// i â‰¤ h &lt; j</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		if !f(h) {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>			i = h + 1 <span class="comment">// preserves f(i-1) == false</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		} else {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>			j = h <span class="comment">// preserves f(j) == true</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">// i == j, f(i-1) == false, and f(j) (= f(i)) == true  =&gt;  answer is i.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	return i
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// Find uses binary search to find and return the smallest index i in [0, n)</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// at which cmp(i) &lt;= 0. If there is no such index i, Find returns i = n.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// The found result is true if i &lt; n and cmp(i) == 0.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// Find calls cmp(i) only for i in the range [0, n).</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// To permit binary search, Find requires that cmp(i) &gt; 0 for a leading</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// prefix of the range, cmp(i) == 0 in the middle, and cmp(i) &lt; 0 for</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// the final suffix of the range. (Each subrange could be empty.)</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// The usual way to establish this condition is to interpret cmp(i)</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// as a comparison of a desired target value t against entry i in an</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// underlying indexed data structure x, returning &lt;0, 0, and &gt;0</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// when t &lt; x[i], t == x[i], and t &gt; x[i], respectively.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// For example, to look for a particular string in a sorted, random-access</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// list of strings:</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">//	i, found := sort.Find(x.Len(), func(i int) int {</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">//	    return strings.Compare(target, x.At(i))</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">//	})</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">//	if found {</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">//	    fmt.Printf(&#34;found %s at entry %d\n&#34;, target, i)</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">//	} else {</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">//	    fmt.Printf(&#34;%s not found, would insert at %d&#34;, target, i)</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>func Find(n int, cmp func(int) int) (i int, found bool) {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// The invariants here are similar to the ones in Search.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">// Define cmp(-1) &gt; 0 and cmp(n) &lt;= 0</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">// Invariant: cmp(i-1) &gt; 0, cmp(j) &lt;= 0</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	i, j := 0, n
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	for i &lt; j {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		h := int(uint(i+j) &gt;&gt; 1) <span class="comment">// avoid overflow when computing h</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		<span class="comment">// i â‰¤ h &lt; j</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		if cmp(h) &gt; 0 {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>			i = h + 1 <span class="comment">// preserves cmp(i-1) &gt; 0</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		} else {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>			j = h <span class="comment">// preserves cmp(j) &lt;= 0</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// i == j, cmp(i-1) &gt; 0 and cmp(j) &lt;= 0</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	return i, i &lt; n &amp;&amp; cmp(i) == 0
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// Convenience wrappers for common cases.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// SearchInts searches for x in a sorted slice of ints and returns the index</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// as specified by [Search]. The return value is the index to insert x if x is</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// not present (it could be len(a)).</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// The slice must be sorted in ascending order.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>func SearchInts(a []int, x int) int {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	return Search(len(a), func(i int) bool { return a[i] &gt;= x })
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// SearchFloat64s searches for x in a sorted slice of float64s and returns the index</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// as specified by [Search]. The return value is the index to insert x if x is not</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// present (it could be len(a)).</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// The slice must be sorted in ascending order.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>func SearchFloat64s(a []float64, x float64) int {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	return Search(len(a), func(i int) bool { return a[i] &gt;= x })
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// SearchStrings searches for x in a sorted slice of strings and returns the index</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// as specified by Search. The return value is the index to insert x if x is not</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// present (it could be len(a)).</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// The slice must be sorted in ascending order.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="selection">func SearchStrings(a []string, x string) int</span> {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	return Search(len(a), func(i int) bool { return a[i] &gt;= x })
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// Search returns the result of applying [SearchInts] to the receiver and x.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>func (p IntSlice) Search(x int) int { return SearchInts(p, x) }
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// Search returns the result of applying [SearchFloat64s] to the receiver and x.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>func (p Float64Slice) Search(x float64) int { return SearchFloat64s(p, x) }
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// Search returns the result of applying [SearchStrings] to the receiver and x.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>func (p StringSlice) Search(x string) int { return SearchStrings(p, x) }
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
</pre><p><a href="search.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
