<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/sort/sort.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./sort.go?s=4834:4859#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/sort">sort</a>/<span class="text-muted">sort.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/sort">sort</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">//go:generate go run gen_sort_variants.go</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// Package sort provides primitives for sorting slices and user-defined collections.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>package sort
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>import &#34;math/bits&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// An implementation of Interface can be sorted by the routines in this package.</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// The methods refer to elements of the underlying collection by integer index.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>type Interface interface {
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	<span class="comment">// Len is the number of elements in the collection.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	Len() int
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	<span class="comment">// Less reports whether the element with index i</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	<span class="comment">// must sort before the element with index j.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	<span class="comment">// If both Less(i, j) and Less(j, i) are false,</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	<span class="comment">// then the elements at index i and j are considered equal.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	<span class="comment">// Sort may place equal elements in any order in the final result,</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	<span class="comment">// while Stable preserves the original input order of equal elements.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	<span class="comment">// Less must describe a transitive ordering:</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	<span class="comment">//  - if both Less(i, j) and Less(j, k) are true, then Less(i, k) must be true as well.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	<span class="comment">//  - if both Less(i, j) and Less(j, k) are false, then Less(i, k) must be false as well.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	<span class="comment">// Note that floating-point comparison (the &lt; operator on float32 or float64 values)</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	<span class="comment">// is not a transitive ordering when not-a-number (NaN) values are involved.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	<span class="comment">// See Float64Slice.Less for a correct implementation for floating-point values.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	Less(i, j int) bool
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	<span class="comment">// Swap swaps the elements with indexes i and j.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	Swap(i, j int)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>}
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// Sort sorts data in ascending order as determined by the Less method.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// It makes one call to data.Len to determine n and O(n*log(n)) calls to</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// data.Less and data.Swap. The sort is not guaranteed to be stable.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// Note: in many situations, the newer [slices.SortFunc] function is more</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// ergonomic and runs faster.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>func Sort(data Interface) {
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	n := data.Len()
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	if n &lt;= 1 {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		return
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	limit := bits.Len(uint(n))
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	pdqsort(data, 0, n, limit)
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>type sortedHint int <span class="comment">// hint for pdqsort when choosing the pivot</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>const (
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	unknownHint sortedHint = iota
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	increasingHint
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	decreasingHint
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>)
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// xorshift paper: https://www.jstatsoft.org/article/view/v008i14/xorshift.pdf</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>type xorshift uint64
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>func (r *xorshift) Next() uint64 {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	*r ^= *r &lt;&lt; 13
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	*r ^= *r &gt;&gt; 17
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	*r ^= *r &lt;&lt; 5
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	return uint64(*r)
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>func nextPowerOfTwo(length int) uint {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	shift := uint(bits.Len(uint(length)))
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	return uint(1 &lt;&lt; shift)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// lessSwap is a pair of Less and Swap function for use with the</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// auto-generated func-optimized variant of sort.go in</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// zfuncversion.go.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>type lessSwap struct {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	Less func(i, j int) bool
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	Swap func(i, j int)
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>type reverse struct {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">// This embedded Interface permits Reverse to use the methods of</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// another Interface implementation.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	Interface
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// Less returns the opposite of the embedded implementation&#39;s Less method.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>func (r reverse) Less(i, j int) bool {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	return r.Interface.Less(j, i)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// Reverse returns the reverse order for data.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>func Reverse(data Interface) Interface {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	return &amp;reverse{data}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// IsSorted reports whether data is sorted.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// Note: in many situations, the newer [slices.IsSortedFunc] function is more</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// ergonomic and runs faster.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>func IsSorted(data Interface) bool {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	n := data.Len()
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	for i := n - 1; i &gt; 0; i-- {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		if data.Less(i, i-1) {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>			return false
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	return true
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// Convenience types for common cases</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// IntSlice attaches the methods of Interface to []int, sorting in increasing order.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>type IntSlice []int
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>func (x IntSlice) Len() int           { return len(x) }
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>func (x IntSlice) Less(i, j int) bool { return x[i] &lt; x[j] }
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>func (x IntSlice) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// Sort is a convenience method: x.Sort() calls Sort(x).</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>func (x IntSlice) Sort() { Sort(x) }
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// Float64Slice implements Interface for a []float64, sorting in increasing order,</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// with not-a-number (NaN) values ordered before other values.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>type Float64Slice []float64
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>func (x Float64Slice) Len() int { return len(x) }
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// Less reports whether x[i] should be ordered before x[j], as required by the sort Interface.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// Note that floating-point comparison by itself is not a transitive relation: it does not</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// report a consistent ordering for not-a-number (NaN) values.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// This implementation of Less places NaN values before any others, by using:</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">//	x[i] &lt; x[j] || (math.IsNaN(x[i]) &amp;&amp; !math.IsNaN(x[j]))</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>func (x Float64Slice) Less(i, j int) bool { return x[i] &lt; x[j] || (isNaN(x[i]) &amp;&amp; !isNaN(x[j])) }
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>func (x Float64Slice) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// isNaN is a copy of math.IsNaN to avoid a dependency on the math package.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>func isNaN(f float64) bool {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	return f != f
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// Sort is a convenience method: x.Sort() calls Sort(x).</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>func (x Float64Slice) Sort() { Sort(x) }
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// StringSlice attaches the methods of Interface to []string, sorting in increasing order.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="selection">type StringSlice []string</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>func (x StringSlice) Len() int           { return len(x) }
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>func (x StringSlice) Less(i, j int) bool { return x[i] &lt; x[j] }
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>func (x StringSlice) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// Sort is a convenience method: x.Sort() calls Sort(x).</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>func (x StringSlice) Sort() { Sort(x) }
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// Convenience wrappers for common cases</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// Ints sorts a slice of ints in increasing order.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">// Note: as of Go 1.22, this function simply calls [slices.Sort].</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>func Ints(x []int) { intsImpl(x) }
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// Float64s sorts a slice of float64s in increasing order.</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// Not-a-number (NaN) values are ordered before other values.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// Note: as of Go 1.22, this function simply calls [slices.Sort].</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>func Float64s(x []float64) { float64sImpl(x) }
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// Strings sorts a slice of strings in increasing order.</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// Note: as of Go 1.22, this function simply calls [slices.Sort].</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>func Strings(x []string) { stringsImpl(x) }
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// IntsAreSorted reports whether the slice x is sorted in increasing order.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// Note: as of Go 1.22, this function simply calls [slices.IsSorted].</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>func IntsAreSorted(x []int) bool { return intsAreSortedImpl(x) }
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// Float64sAreSorted reports whether the slice x is sorted in increasing order,</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// with not-a-number (NaN) values before any other values.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// Note: as of Go 1.22, this function simply calls [slices.IsSorted].</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>func Float64sAreSorted(x []float64) bool { return float64sAreSortedImpl(x) }
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// StringsAreSorted reports whether the slice x is sorted in increasing order.</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// Note: as of Go 1.22, this function simply calls [slices.IsSorted].</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>func StringsAreSorted(x []string) bool { return stringsAreSortedImpl(x) }
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// Notes on stable sorting:</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// The used algorithms are simple and provable correct on all input and use</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// only logarithmic additional stack space. They perform well if compared</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// experimentally to other stable in-place sorting algorithms.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// Remarks on other algorithms evaluated:</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">//  - GCC&#39;s 4.6.3 stable_sort with merge_without_buffer from libstdc++:</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">//    Not faster.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">//  - GCC&#39;s __rotate for block rotations: Not faster.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">//  - &#34;Practical in-place mergesort&#34; from  Jyrki Katajainen, Tomi A. Pasanen</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">//    and Jukka Teuhola; Nordic Journal of Computing 3,1 (1996), 27-40:</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">//    The given algorithms are in-place, number of Swap and Assignments</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">//    grow as n log n but the algorithm is not stable.</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">//  - &#34;Fast Stable In-Place Sorting with O(n) Data Moves&#34; J.I. Munro and</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">//    V. Raman in Algorithmica (1996) 16, 115-160:</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">//    This algorithm either needs additional 2n bits or works only if there</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">//    are enough different elements available to encode some permutations</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">//    which have to be undone later (so not stable on any input).</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">//  - All the optimal in-place sorting/merging algorithms I found are either</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">//    unstable or rely on enough different elements in each step to encode the</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">//    performed block rearrangements. See also &#34;In-Place Merging Algorithms&#34;,</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">//    Denham Coates-Evely, Department of Computer Science, Kings College,</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">//    January 2004 and the references in there.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">//  - Often &#34;optimal&#34; algorithms are optimal in the number of assignments</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">//    but Interface has only Swap as operation.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// Stable sorts data in ascending order as determined by the Less method,</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// while keeping the original order of equal elements.</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// It makes one call to data.Len to determine n, O(n*log(n)) calls to</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">// data.Less and O(n*log(n)*log(n)) calls to data.Swap.</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">// Note: in many situations, the newer slices.SortStableFunc function is more</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// ergonomic and runs faster.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>func Stable(data Interface) {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	stable(data, data.Len())
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">/*
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>Complexity of Stable Sorting
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>Complexity of block swapping rotation
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>Each Swap puts one new element into its correct, final position.
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>Elements which reach their final position are no longer moved.
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>Thus block swapping rotation needs |u|+|v| calls to Swaps.
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>This is best possible as each element might need a move.
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>Pay attention when comparing to other optimal algorithms which
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>typically count the number of assignments instead of swaps:
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>E.g. the optimal algorithm of Dudzinski and Dydek for in-place
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>rotations uses O(u + v + gcd(u,v)) assignments which is
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>better than our O(3 * (u+v)) as gcd(u,v) &lt;= u.
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>Stable sorting by SymMerge and BlockSwap rotations
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>SymMerg complexity for same size input M = N:
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>Calls to Less:  O(M*log(N/M+1)) = O(N*log(2)) = O(N)
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>Calls to Swap:  O((M+N)*log(M)) = O(2*N*log(N)) = O(N*log(N))
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>(The following argument does not fuzz over a missing -1 or
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>other stuff which does not impact the final result).
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>Let n = data.Len(). Assume n = 2^k.
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>Plain merge sort performs log(n) = k iterations.
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>On iteration i the algorithm merges 2^(k-i) blocks, each of size 2^i.
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>Thus iteration i of merge sort performs:
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>Calls to Less  O(2^(k-i) * 2^i) = O(2^k) = O(2^log(n)) = O(n)
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>Calls to Swap  O(2^(k-i) * 2^i * log(2^i)) = O(2^k * i) = O(n*i)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>In total k = log(n) iterations are performed; so in total:
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>Calls to Less O(log(n) * n)
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>Calls to Swap O(n + 2*n + 3*n + ... + (k-1)*n + k*n)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>   = O((k/2) * k * n) = O(n * k^2) = O(n * log^2(n))
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>Above results should generalize to arbitrary n = 2^k + p
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>and should not be influenced by the initial insertion sort phase:
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>Insertion sort is O(n^2) on Swap and Less, thus O(bs^2) per block of
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>size bs at n/bs blocks:  O(bs*n) Swaps and Less during insertion sort.
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>Merge sort iterations start at i = log(bs). With t = log(bs) constant:
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>Calls to Less O((log(n)-t) * n + bs*n) = O(log(n)*n + (bs-t)*n)
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>   = O(n * log(n))
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>Calls to Swap O(n * log^2(n) - (t^2+t)/2*n) = O(n * log^2(n))
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>*/</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>
</pre><p><a href="sort.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
