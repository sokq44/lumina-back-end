<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/sort/zsortfunc.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="zsortfunc.go#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/sort">sort</a>/<span class="text-muted">zsortfunc.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/sort">sort</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Code generated by gen_sort_variants.go; DO NOT EDIT.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2022 The Go Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package sort
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// insertionSort_func sorts data[a:b] using insertion sort.</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>func insertionSort_func(data lessSwap, a, b int) {
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	for i := a + 1; i &lt; b; i++ {
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>		for j := i; j &gt; a &amp;&amp; data.Less(j, j-1); j-- {
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>			data.Swap(j, j-1)
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>		}
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	}
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>}
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// siftDown_func implements the heap property on data[lo:hi].</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// first is an offset into the array where the root of the heap lies.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>func siftDown_func(data lessSwap, lo, hi, first int) {
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	root := lo
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	for {
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>		child := 2*root + 1
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>		if child &gt;= hi {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>			break
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>		}
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>		if child+1 &lt; hi &amp;&amp; data.Less(first+child, first+child+1) {
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>			child++
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>		}
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>		if !data.Less(first+root, first+child) {
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>			return
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>		}
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>		data.Swap(first+root, first+child)
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>		root = child
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>}
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>func heapSort_func(data lessSwap, a, b int) {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	first := a
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	lo := 0
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	hi := b - a
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	<span class="comment">// Build heap with greatest element at top.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	for i := (hi - 1) / 2; i &gt;= 0; i-- {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		siftDown_func(data, i, hi, first)
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	<span class="comment">// Pop elements, largest first, into end of data.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	for i := hi - 1; i &gt;= 0; i-- {
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>		data.Swap(first, first+i)
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		siftDown_func(data, lo, i, first)
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>}
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// pdqsort_func sorts data[a:b].</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// The algorithm based on pattern-defeating quicksort(pdqsort), but without the optimizations from BlockQuicksort.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// pdqsort paper: https://arxiv.org/pdf/2106.05123.pdf</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// C++ implementation: https://github.com/orlp/pdqsort</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// Rust implementation: https://docs.rs/pdqsort/latest/pdqsort/</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// limit is the number of allowed bad (very unbalanced) pivots before falling back to heapsort.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>func pdqsort_func(data lessSwap, a, b, limit int) {
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	const maxInsertion = 12
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	var (
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		wasBalanced    = true <span class="comment">// whether the last partitioning was reasonably balanced</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		wasPartitioned = true <span class="comment">// whether the slice was already partitioned</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	)
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	for {
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		length := b - a
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		if length &lt;= maxInsertion {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>			insertionSort_func(data, a, b)
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>			return
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		<span class="comment">// Fall back to heapsort if too many bad choices were made.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		if limit == 0 {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>			heapSort_func(data, a, b)
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>			return
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		<span class="comment">// If the last partitioning was imbalanced, we need to breaking patterns.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		if !wasBalanced {
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>			breakPatterns_func(data, a, b)
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>			limit--
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		pivot, hint := choosePivot_func(data, a, b)
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		if hint == decreasingHint {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>			reverseRange_func(data, a, b)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>			<span class="comment">// The chosen pivot was pivot-a elements after the start of the array.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>			<span class="comment">// After reversing it is pivot-a elements before the end of the array.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>			<span class="comment">// The idea came from Rust&#39;s implementation.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>			pivot = (b - 1) - (pivot - a)
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>			hint = increasingHint
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		<span class="comment">// The slice is likely already sorted.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		if wasBalanced &amp;&amp; wasPartitioned &amp;&amp; hint == increasingHint {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>			if partialInsertionSort_func(data, a, b) {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>				return
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>			}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		<span class="comment">// Probably the slice contains many duplicate elements, partition the slice into</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		<span class="comment">// elements equal to and elements greater than the pivot.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		if a &gt; 0 &amp;&amp; !data.Less(a-1, pivot) {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>			mid := partitionEqual_func(data, a, b, pivot)
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>			a = mid
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>			continue
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		mid, alreadyPartitioned := partition_func(data, a, b, pivot)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		wasPartitioned = alreadyPartitioned
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		leftLen, rightLen := mid-a, b-mid
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		balanceThreshold := length / 8
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		if leftLen &lt; rightLen {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			wasBalanced = leftLen &gt;= balanceThreshold
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			pdqsort_func(data, a, mid, limit)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>			a = mid + 1
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		} else {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			wasBalanced = rightLen &gt;= balanceThreshold
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			pdqsort_func(data, mid+1, b, limit)
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			b = mid
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// partition_func does one quicksort partition.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// Let p = data[pivot]</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// Moves elements in data[a:b] around, so that data[i]&lt;p and data[j]&gt;=p for i&lt;newpivot and j&gt;newpivot.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// On return, data[newpivot] = p</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>func partition_func(data lessSwap, a, b, pivot int) (newpivot int, alreadyPartitioned bool) {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	data.Swap(a, pivot)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	i, j := a+1, b-1 <span class="comment">// i and j are inclusive of the elements remaining to be partitioned</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	for i &lt;= j &amp;&amp; data.Less(i, a) {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		i++
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	for i &lt;= j &amp;&amp; !data.Less(j, a) {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		j--
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	if i &gt; j {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		data.Swap(j, a)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		return j, true
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	data.Swap(i, j)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	i++
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	j--
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	for {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		for i &lt;= j &amp;&amp; data.Less(i, a) {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>			i++
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		for i &lt;= j &amp;&amp; !data.Less(j, a) {
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>			j--
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		if i &gt; j {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>			break
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		data.Swap(i, j)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		i++
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		j--
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	data.Swap(j, a)
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	return j, false
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// partitionEqual_func partitions data[a:b] into elements equal to data[pivot] followed by elements greater than data[pivot].</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// It assumed that data[a:b] does not contain elements smaller than the data[pivot].</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>func partitionEqual_func(data lessSwap, a, b, pivot int) (newpivot int) {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	data.Swap(a, pivot)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	i, j := a+1, b-1 <span class="comment">// i and j are inclusive of the elements remaining to be partitioned</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	for {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		for i &lt;= j &amp;&amp; !data.Less(a, i) {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>			i++
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		for i &lt;= j &amp;&amp; data.Less(a, j) {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>			j--
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		if i &gt; j {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>			break
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		data.Swap(i, j)
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		i++
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		j--
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	return i
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// partialInsertionSort_func partially sorts a slice, returns true if the slice is sorted at the end.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>func partialInsertionSort_func(data lessSwap, a, b int) bool {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	const (
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		maxSteps         = 5  <span class="comment">// maximum number of adjacent out-of-order pairs that will get shifted</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		shortestShifting = 50 <span class="comment">// don&#39;t shift any elements on short arrays</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	)
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	i := a + 1
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	for j := 0; j &lt; maxSteps; j++ {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		for i &lt; b &amp;&amp; !data.Less(i, i-1) {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			i++
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		if i == b {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>			return true
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		if b-a &lt; shortestShifting {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>			return false
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		data.Swap(i, i-1)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		<span class="comment">// Shift the smaller one to the left.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		if i-a &gt;= 2 {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>			for j := i - 1; j &gt;= 1; j-- {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>				if !data.Less(j, j-1) {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>					break
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>				}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>				data.Swap(j, j-1)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>			}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		<span class="comment">// Shift the greater one to the right.</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		if b-i &gt;= 2 {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>			for j := i + 1; j &lt; b; j++ {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>				if !data.Less(j, j-1) {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>					break
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>				}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>				data.Swap(j, j-1)
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	return false
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// breakPatterns_func scatters some elements around in an attempt to break some patterns</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span><span class="comment">// that might cause imbalanced partitions in quicksort.</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>func breakPatterns_func(data lessSwap, a, b int) {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	length := b - a
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	if length &gt;= 8 {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		random := xorshift(length)
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		modulus := nextPowerOfTwo(length)
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		for idx := a + (length/4)*2 - 1; idx &lt;= a+(length/4)*2+1; idx++ {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>			other := int(uint(random.Next()) &amp; (modulus - 1))
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>			if other &gt;= length {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>				other -= length
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>			}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>			data.Swap(idx, a+other)
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// choosePivot_func chooses a pivot in data[a:b].</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// [0,8): chooses a static pivot.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// [8,shortestNinther): uses the simple median-of-three method.</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// [shortestNinther,∞): uses the Tukey ninther method.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>func choosePivot_func(data lessSwap, a, b int) (pivot int, hint sortedHint) {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	const (
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		shortestNinther = 50
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		maxSwaps        = 4 * 3
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	)
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	l := b - a
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	var (
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		swaps int
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		i     = a + l/4*1
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		j     = a + l/4*2
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		k     = a + l/4*3
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	if l &gt;= 8 {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		if l &gt;= shortestNinther {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>			<span class="comment">// Tukey ninther method, the idea came from Rust&#39;s implementation.</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>			i = medianAdjacent_func(data, i, &amp;swaps)
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>			j = medianAdjacent_func(data, j, &amp;swaps)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>			k = medianAdjacent_func(data, k, &amp;swaps)
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		<span class="comment">// Find the median among i, j, k and stores it into j.</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		j = median_func(data, i, j, k, &amp;swaps)
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	switch swaps {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	case 0:
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		return j, increasingHint
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	case maxSwaps:
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		return j, decreasingHint
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	default:
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		return j, unknownHint
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">// order2_func returns x,y where data[x] &lt;= data[y], where x,y=a,b or x,y=b,a.</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>func order2_func(data lessSwap, a, b int, swaps *int) (int, int) {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	if data.Less(b, a) {
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		*swaps++
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		return b, a
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	return a, b
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">// median_func returns x where data[x] is the median of data[a],data[b],data[c], where x is a, b, or c.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>func median_func(data lessSwap, a, b, c int, swaps *int) int {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	a, b = order2_func(data, a, b, swaps)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	b, c = order2_func(data, b, c, swaps)
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	a, b = order2_func(data, a, b, swaps)
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	return b
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">// medianAdjacent_func finds the median of data[a - 1], data[a], data[a + 1] and stores the index into a.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>func medianAdjacent_func(data lessSwap, a int, swaps *int) int {
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	return median_func(data, a-1, a, a+1, swaps)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>func reverseRange_func(data lessSwap, a, b int) {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	i := a
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	j := b - 1
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	for i &lt; j {
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		data.Swap(i, j)
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		i++
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		j--
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>func swapRange_func(data lessSwap, a, b, n int) {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	for i := 0; i &lt; n; i++ {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		data.Swap(a+i, b+i)
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>func stable_func(data lessSwap, n int) {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	blockSize := 20 <span class="comment">// must be &gt; 0</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	a, b := 0, blockSize
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	for b &lt;= n {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		insertionSort_func(data, a, b)
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		a = b
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		b += blockSize
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	}
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	insertionSort_func(data, a, n)
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	for blockSize &lt; n {
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		a, b = 0, 2*blockSize
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		for b &lt;= n {
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>			symMerge_func(data, a, a+blockSize, b)
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>			a = b
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>			b += 2 * blockSize
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		if m := a + blockSize; m &lt; n {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>			symMerge_func(data, a, m, n)
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		blockSize *= 2
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	}
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span><span class="comment">// symMerge_func merges the two sorted subsequences data[a:m] and data[m:b] using</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span><span class="comment">// the SymMerge algorithm from Pok-Son Kim and Arne Kutzner, &#34;Stable Minimum</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span><span class="comment">// Storage Merging by Symmetric Comparisons&#34;, in Susanne Albers and Tomasz</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">// Radzik, editors, Algorithms - ESA 2004, volume 3221 of Lecture Notes in</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span><span class="comment">// Computer Science, pages 714-723. Springer, 2004.</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span><span class="comment">// Let M = m-a and N = b-n. Wolog M &lt; N.</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span><span class="comment">// The recursion depth is bound by ceil(log(N+M)).</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span><span class="comment">// The algorithm needs O(M*log(N/M + 1)) calls to data.Less.</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// The algorithm needs O((M+N)*log(M)) calls to data.Swap.</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">// The paper gives O((M+N)*log(M)) as the number of assignments assuming a</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// rotation algorithm which uses O(M+N+gcd(M+N)) assignments. The argumentation</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="comment">// in the paper carries through for Swap operations, especially as the block</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">// swapping rotate uses only O(M+N) Swaps.</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span><span class="comment">// symMerge assumes non-degenerate arguments: a &lt; m &amp;&amp; m &lt; b.</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span><span class="comment">// Having the caller check this condition eliminates many leaf recursion calls,</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span><span class="comment">// which improves performance.</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>func symMerge_func(data lessSwap, a, m, b int) {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	<span class="comment">// Avoid unnecessary recursions of symMerge</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	<span class="comment">// by direct insertion of data[a] into data[m:b]</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	<span class="comment">// if data[a:m] only contains one element.</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	if m-a == 1 {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		<span class="comment">// Use binary search to find the lowest index i</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		<span class="comment">// such that data[i] &gt;= data[a] for m &lt;= i &lt; b.</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		<span class="comment">// Exit the search loop with i == b in case no such index exists.</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		i := m
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		j := b
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		for i &lt; j {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>			h := int(uint(i+j) &gt;&gt; 1)
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>			if data.Less(h, a) {
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>				i = h + 1
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>			} else {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>				j = h
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>			}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		}
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>		<span class="comment">// Swap values until data[a] reaches the position before i.</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>		for k := a; k &lt; i-1; k++ {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>			data.Swap(k, k+1)
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		return
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	}
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	<span class="comment">// Avoid unnecessary recursions of symMerge</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	<span class="comment">// by direct insertion of data[m] into data[a:m]</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	<span class="comment">// if data[m:b] only contains one element.</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	if b-m == 1 {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>		<span class="comment">// Use binary search to find the lowest index i</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		<span class="comment">// such that data[i] &gt; data[m] for a &lt;= i &lt; m.</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		<span class="comment">// Exit the search loop with i == m in case no such index exists.</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		i := a
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		j := m
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		for i &lt; j {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>			h := int(uint(i+j) &gt;&gt; 1)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			if !data.Less(m, h) {
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>				i = h + 1
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>			} else {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>				j = h
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>			}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>		<span class="comment">// Swap values until data[m] reaches the position i.</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		for k := m; k &gt; i; k-- {
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>			data.Swap(k, k-1)
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		}
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		return
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	mid := int(uint(a+b) &gt;&gt; 1)
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	n := mid + m
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	var start, r int
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	if m &gt; mid {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		start = n - b
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		r = mid
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	} else {
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		start = a
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		r = m
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	p := n - 1
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	for start &lt; r {
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		c := int(uint(start+r) &gt;&gt; 1)
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		if !data.Less(p-c, c) {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>			start = c + 1
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		} else {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>			r = c
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	end := n - start
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	if start &lt; m &amp;&amp; m &lt; end {
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		rotate_func(data, start, m, end)
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	}
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	if a &lt; start &amp;&amp; start &lt; mid {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		symMerge_func(data, a, start, mid)
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	if mid &lt; end &amp;&amp; end &lt; b {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		symMerge_func(data, mid, end, b)
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span><span class="comment">// rotate_func rotates two consecutive blocks u = data[a:m] and v = data[m:b] in data:</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span><span class="comment">// Data of the form &#39;x u v y&#39; is changed to &#39;x v u y&#39;.</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span><span class="comment">// rotate performs at most b-a many calls to data.Swap,</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span><span class="comment">// and it assumes non-degenerate arguments: a &lt; m &amp;&amp; m &lt; b.</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>func rotate_func(data lessSwap, a, m, b int) {
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	i := m - a
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	j := b - m
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	for i != j {
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		if i &gt; j {
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>			swapRange_func(data, m-i, m, j)
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>			i -= j
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		} else {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>			swapRange_func(data, m-i, m+j-i, i)
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>			j -= i
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	}
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	<span class="comment">// i == j</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	swapRange_func(data, m-i, m, i)
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>
</pre><p><a href="zsortfunc.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
