<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/strconv/atoi.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./atoi.go?s=6830:6862#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/strconv">strconv</a>/<span class="text-muted">atoi.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/strconv">strconv</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package strconv
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import &#34;errors&#34;
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// lower(c) is a lower-case letter if and only if</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// c is either that lower-case letter or the equivalent upper-case letter.</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// Instead of writing c == &#39;x&#39; || c == &#39;X&#39; one can write lower(c) == &#39;x&#39;.</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// Note that lower of non-letters can produce other non-letters.</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>func lower(c byte) byte {
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	return c | (&#39;x&#39; - &#39;X&#39;)
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>}
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// ErrRange indicates that a value is out of range for the target type.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>var ErrRange = errors.New(&#34;value out of range&#34;)
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// ErrSyntax indicates that a value does not have the right syntax for the target type.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>var ErrSyntax = errors.New(&#34;invalid syntax&#34;)
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// A NumError records a failed conversion.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>type NumError struct {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	Func string <span class="comment">// the failing function (ParseBool, ParseInt, ParseUint, ParseFloat, ParseComplex)</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	Num  string <span class="comment">// the input</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	Err  error  <span class="comment">// the reason the conversion failed (e.g. ErrRange, ErrSyntax, etc.)</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>}
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>func (e *NumError) Error() string {
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	return &#34;strconv.&#34; + e.Func + &#34;: &#34; + &#34;parsing &#34; + Quote(e.Num) + &#34;: &#34; + e.Err.Error()
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>}
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>func (e *NumError) Unwrap() error { return e.Err }
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// cloneString returns a string copy of x.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// All ParseXXX functions allow the input string to escape to the error value.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// This hurts strconv.ParseXXX(string(b)) calls where b is []byte since</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// the conversion from []byte must allocate a string on the heap.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// If we assume errors are infrequent, then we can avoid escaping the input</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// back to the output by copying it first. This allows the compiler to call</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// strconv.ParseXXX without a heap allocation for most []byte to string</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// conversions, since it can now prove that the string cannot escape Parse.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// TODO: Use strings.Clone instead? However, we cannot depend on &#34;strings&#34;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// since it incurs a transitive dependency on &#34;unicode&#34;.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// Either move strings.Clone to an internal/bytealg or make the</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// &#34;strings&#34; to &#34;unicode&#34; dependency lighter (see https://go.dev/issue/54098).</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>func cloneString(x string) string { return string([]byte(x)) }
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>func syntaxError(fn, str string) *NumError {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	return &amp;NumError{fn, cloneString(str), ErrSyntax}
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>func rangeError(fn, str string) *NumError {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	return &amp;NumError{fn, cloneString(str), ErrRange}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>func baseError(fn, str string, base int) *NumError {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	return &amp;NumError{fn, cloneString(str), errors.New(&#34;invalid base &#34; + Itoa(base))}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>func bitSizeError(fn, str string, bitSize int) *NumError {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	return &amp;NumError{fn, cloneString(str), errors.New(&#34;invalid bit size &#34; + Itoa(bitSize))}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>const intSize = 32 &lt;&lt; (^uint(0) &gt;&gt; 63)
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// IntSize is the size in bits of an int or uint value.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>const IntSize = intSize
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>const maxUint64 = 1&lt;&lt;64 - 1
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// ParseUint is like ParseInt but for unsigned numbers.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// A sign prefix is not permitted.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>func ParseUint(s string, base int, bitSize int) (uint64, error) {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	const fnParseUint = &#34;ParseUint&#34;
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	if s == &#34;&#34; {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		return 0, syntaxError(fnParseUint, s)
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	base0 := base == 0
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	s0 := s
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	switch {
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	case 2 &lt;= base &amp;&amp; base &lt;= 36:
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		<span class="comment">// valid base; nothing to do</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	case base == 0:
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		<span class="comment">// Look for octal, hex prefix.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		base = 10
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		if s[0] == &#39;0&#39; {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>			switch {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>			case len(s) &gt;= 3 &amp;&amp; lower(s[1]) == &#39;b&#39;:
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>				base = 2
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>				s = s[2:]
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>			case len(s) &gt;= 3 &amp;&amp; lower(s[1]) == &#39;o&#39;:
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>				base = 8
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>				s = s[2:]
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>			case len(s) &gt;= 3 &amp;&amp; lower(s[1]) == &#39;x&#39;:
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>				base = 16
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>				s = s[2:]
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>			default:
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>				base = 8
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>				s = s[1:]
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>			}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	default:
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		return 0, baseError(fnParseUint, s0, base)
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	if bitSize == 0 {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		bitSize = IntSize
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	} else if bitSize &lt; 0 || bitSize &gt; 64 {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		return 0, bitSizeError(fnParseUint, s0, bitSize)
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// Cutoff is the smallest number such that cutoff*base &gt; maxUint64.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// Use compile-time constants for common cases.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	var cutoff uint64
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	switch base {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	case 10:
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		cutoff = maxUint64/10 + 1
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	case 16:
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		cutoff = maxUint64/16 + 1
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	default:
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		cutoff = maxUint64/uint64(base) + 1
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	maxVal := uint64(1)&lt;&lt;uint(bitSize) - 1
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	underscores := false
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	var n uint64
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	for _, c := range []byte(s) {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		var d byte
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		switch {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		case c == &#39;_&#39; &amp;&amp; base0:
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>			underscores = true
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>			continue
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		case &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39;:
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>			d = c - &#39;0&#39;
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		case &#39;a&#39; &lt;= lower(c) &amp;&amp; lower(c) &lt;= &#39;z&#39;:
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>			d = lower(c) - &#39;a&#39; + 10
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		default:
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>			return 0, syntaxError(fnParseUint, s0)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		if d &gt;= byte(base) {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>			return 0, syntaxError(fnParseUint, s0)
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		if n &gt;= cutoff {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>			<span class="comment">// n*base overflows</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>			return maxVal, rangeError(fnParseUint, s0)
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		n *= uint64(base)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		n1 := n + uint64(d)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		if n1 &lt; n || n1 &gt; maxVal {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>			<span class="comment">// n+d overflows</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>			return maxVal, rangeError(fnParseUint, s0)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		n = n1
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	if underscores &amp;&amp; !underscoreOK(s0) {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		return 0, syntaxError(fnParseUint, s0)
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	return n, nil
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// ParseInt interprets a string s in the given base (0, 2 to 36) and</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// bit size (0 to 64) and returns the corresponding value i.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// The string may begin with a leading sign: &#34;+&#34; or &#34;-&#34;.</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// If the base argument is 0, the true base is implied by the string&#39;s</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// prefix following the sign (if present): 2 for &#34;0b&#34;, 8 for &#34;0&#34; or &#34;0o&#34;,</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// 16 for &#34;0x&#34;, and 10 otherwise. Also, for argument base 0 only,</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// underscore characters are permitted as defined by the Go syntax for</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// [integer literals].</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// The bitSize argument specifies the integer type</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// that the result must fit into. Bit sizes 0, 8, 16, 32, and 64</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// correspond to int, int8, int16, int32, and int64.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// If bitSize is below 0 or above 64, an error is returned.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// The errors that ParseInt returns have concrete type *NumError</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// and include err.Num = s. If s is empty or contains invalid</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// digits, err.Err = ErrSyntax and the returned value is 0;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// if the value corresponding to s cannot be represented by a</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// signed integer of the given size, err.Err = ErrRange and the</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">// returned value is the maximum magnitude integer of the</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// appropriate bitSize and sign.</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// [integer literals]: https://go.dev/ref/spec#Integer_literals</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>func ParseInt(s string, base int, bitSize int) (i int64, err error) {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	const fnParseInt = &#34;ParseInt&#34;
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	if s == &#34;&#34; {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		return 0, syntaxError(fnParseInt, s)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	<span class="comment">// Pick off leading sign.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	s0 := s
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	neg := false
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	if s[0] == &#39;+&#39; {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		s = s[1:]
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	} else if s[0] == &#39;-&#39; {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		neg = true
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		s = s[1:]
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	<span class="comment">// Convert unsigned and check range.</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	var un uint64
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	un, err = ParseUint(s, base, bitSize)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	if err != nil &amp;&amp; err.(*NumError).Err != ErrRange {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		err.(*NumError).Func = fnParseInt
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		err.(*NumError).Num = cloneString(s0)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		return 0, err
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	if bitSize == 0 {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		bitSize = IntSize
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	cutoff := uint64(1 &lt;&lt; uint(bitSize-1))
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	if !neg &amp;&amp; un &gt;= cutoff {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		return int64(cutoff - 1), rangeError(fnParseInt, s0)
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	if neg &amp;&amp; un &gt; cutoff {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		return -int64(cutoff), rangeError(fnParseInt, s0)
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	n := int64(un)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	if neg {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		n = -n
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	return n, nil
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// Atoi is equivalent to ParseInt(s, 10, 0), converted to type int.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="selection">func Atoi(s string) (int, error)</span> {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	const fnAtoi = &#34;Atoi&#34;
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	sLen := len(s)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	if intSize == 32 &amp;&amp; (0 &lt; sLen &amp;&amp; sLen &lt; 10) ||
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		intSize == 64 &amp;&amp; (0 &lt; sLen &amp;&amp; sLen &lt; 19) {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		<span class="comment">// Fast path for small integers that fit int type.</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		s0 := s
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		if s[0] == &#39;-&#39; || s[0] == &#39;+&#39; {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>			s = s[1:]
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>			if len(s) &lt; 1 {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>				return 0, syntaxError(fnAtoi, s0)
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>			}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		n := 0
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		for _, ch := range []byte(s) {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>			ch -= &#39;0&#39;
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>			if ch &gt; 9 {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>				return 0, syntaxError(fnAtoi, s0)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>			}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>			n = n*10 + int(ch)
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		if s0[0] == &#39;-&#39; {
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>			n = -n
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		return n, nil
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	}
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	<span class="comment">// Slow path for invalid, big, or underscored integers.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	i64, err := ParseInt(s, 10, 0)
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	if nerr, ok := err.(*NumError); ok {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		nerr.Func = fnAtoi
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	return int(i64), err
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">// underscoreOK reports whether the underscores in s are allowed.</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// Checking them in this one function lets all the parsers skip over them simply.</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">// Underscore must appear only between digits or between a base prefix and a digit.</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>func underscoreOK(s string) bool {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	<span class="comment">// saw tracks the last character (class) we saw:</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	<span class="comment">// ^ for beginning of number,</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	<span class="comment">// 0 for a digit or base prefix,</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	<span class="comment">// _ for an underscore,</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	<span class="comment">// ! for none of the above.</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	saw := &#39;^&#39;
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	i := 0
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	<span class="comment">// Optional sign.</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	if len(s) &gt;= 1 &amp;&amp; (s[0] == &#39;-&#39; || s[0] == &#39;+&#39;) {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		s = s[1:]
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	<span class="comment">// Optional base prefix.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	hex := false
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	if len(s) &gt;= 2 &amp;&amp; s[0] == &#39;0&#39; &amp;&amp; (lower(s[1]) == &#39;b&#39; || lower(s[1]) == &#39;o&#39; || lower(s[1]) == &#39;x&#39;) {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		i = 2
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		saw = &#39;0&#39; <span class="comment">// base prefix counts as a digit for &#34;underscore as digit separator&#34;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		hex = lower(s[1]) == &#39;x&#39;
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	<span class="comment">// Number proper.</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	for ; i &lt; len(s); i++ {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		<span class="comment">// Digits are always okay.</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		if &#39;0&#39; &lt;= s[i] &amp;&amp; s[i] &lt;= &#39;9&#39; || hex &amp;&amp; &#39;a&#39; &lt;= lower(s[i]) &amp;&amp; lower(s[i]) &lt;= &#39;f&#39; {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>			saw = &#39;0&#39;
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			continue
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		<span class="comment">// Underscore must follow digit.</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		if s[i] == &#39;_&#39; {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>			if saw != &#39;0&#39; {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>				return false
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>			}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>			saw = &#39;_&#39;
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>			continue
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		<span class="comment">// Underscore must also be followed by digit.</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		if saw == &#39;_&#39; {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>			return false
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		<span class="comment">// Saw non-digit, non-underscore.</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		saw = &#39;!&#39;
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	return saw != &#39;_&#39;
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>
</pre><p><a href="atoi.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
