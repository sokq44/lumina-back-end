<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/strconv/ftoa.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./ftoa.go?s=1994:2069#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/strconv">strconv</a>/<span class="text-muted">ftoa.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/strconv">strconv</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Binary to decimal floating point conversion.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// Algorithm:</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">//   1) store mantissa in multiprecision decimal</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">//   2) shift decimal by exponent</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">//   3) read digits out &amp; format</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>package strconv
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>import &#34;math&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// TODO: move elsewhere?</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>type floatInfo struct {
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	mantbits uint
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	expbits  uint
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	bias     int
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>}
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>var float32info = floatInfo{23, 8, -127}
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>var float64info = floatInfo{52, 11, -1023}
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// FormatFloat converts the floating-point number f to a string,</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// according to the format fmt and precision prec. It rounds the</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// result assuming that the original was obtained from a floating-point</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// value of bitSize bits (32 for float32, 64 for float64).</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// The format fmt is one of</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// &#39;b&#39; (-ddddp±ddd, a binary exponent),</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// &#39;e&#39; (-d.dddde±dd, a decimal exponent),</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// &#39;E&#39; (-d.ddddE±dd, a decimal exponent),</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// &#39;f&#39; (-ddd.dddd, no exponent),</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// &#39;g&#39; (&#39;e&#39; for large exponents, &#39;f&#39; otherwise),</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// &#39;G&#39; (&#39;E&#39; for large exponents, &#39;f&#39; otherwise),</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// &#39;x&#39; (-0xd.ddddp±ddd, a hexadecimal fraction and binary exponent), or</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// &#39;X&#39; (-0Xd.ddddP±ddd, a hexadecimal fraction and binary exponent).</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// The precision prec controls the number of digits (excluding the exponent)</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// printed by the &#39;e&#39;, &#39;E&#39;, &#39;f&#39;, &#39;g&#39;, &#39;G&#39;, &#39;x&#39;, and &#39;X&#39; formats.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// For &#39;e&#39;, &#39;E&#39;, &#39;f&#39;, &#39;x&#39;, and &#39;X&#39;, it is the number of digits after the decimal point.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// For &#39;g&#39; and &#39;G&#39; it is the maximum number of significant digits (trailing</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// zeros are removed).</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// The special precision -1 uses the smallest number of digits</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// necessary such that ParseFloat will return f exactly.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>func FormatFloat(f float64, fmt byte, prec, bitSize int) string {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	return string(genericFtoa(make([]byte, 0, max(prec+4, 24)), f, fmt, prec, bitSize))
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// AppendFloat appends the string form of the floating-point number f,</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// as generated by FormatFloat, to dst and returns the extended buffer.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="selection">func AppendFloat(dst []byte, f float64, fmt byte, prec, bitSize int) []byte</span> {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	return genericFtoa(dst, f, fmt, prec, bitSize)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>}
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>func genericFtoa(dst []byte, val float64, fmt byte, prec, bitSize int) []byte {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	var bits uint64
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	var flt *floatInfo
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	switch bitSize {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	case 32:
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		bits = uint64(math.Float32bits(float32(val)))
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		flt = &amp;float32info
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	case 64:
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		bits = math.Float64bits(val)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		flt = &amp;float64info
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	default:
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		panic(&#34;strconv: illegal AppendFloat/FormatFloat bitSize&#34;)
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	neg := bits&gt;&gt;(flt.expbits+flt.mantbits) != 0
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	exp := int(bits&gt;&gt;flt.mantbits) &amp; (1&lt;&lt;flt.expbits - 1)
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	mant := bits &amp; (uint64(1)&lt;&lt;flt.mantbits - 1)
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	switch exp {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	case 1&lt;&lt;flt.expbits - 1:
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		<span class="comment">// Inf, NaN</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		var s string
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		switch {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		case mant != 0:
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>			s = &#34;NaN&#34;
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		case neg:
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>			s = &#34;-Inf&#34;
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		default:
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>			s = &#34;+Inf&#34;
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		return append(dst, s...)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	case 0:
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		<span class="comment">// denormalized</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		exp++
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	default:
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		<span class="comment">// add implicit top bit</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		mant |= uint64(1) &lt;&lt; flt.mantbits
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	exp += flt.bias
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// Pick off easy binary, hex formats.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	if fmt == &#39;b&#39; {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		return fmtB(dst, neg, mant, exp, flt)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	if fmt == &#39;x&#39; || fmt == &#39;X&#39; {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		return fmtX(dst, prec, fmt, neg, mant, exp, flt)
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	if !optimize {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		return bigFtoa(dst, prec, fmt, neg, mant, exp, flt)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	var digs decimalSlice
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	ok := false
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// Negative precision means &#34;only as much as needed to be exact.&#34;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	shortest := prec &lt; 0
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	if shortest {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		<span class="comment">// Use Ryu algorithm.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		var buf [32]byte
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		digs.d = buf[:]
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		ryuFtoaShortest(&amp;digs, mant, exp-int(flt.mantbits), flt)
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		ok = true
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		<span class="comment">// Precision for shortest representation mode.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		switch fmt {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		case &#39;e&#39;, &#39;E&#39;:
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			prec = max(digs.nd-1, 0)
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		case &#39;f&#39;:
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			prec = max(digs.nd-digs.dp, 0)
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		case &#39;g&#39;, &#39;G&#39;:
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>			prec = digs.nd
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	} else if fmt != &#39;f&#39; {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		<span class="comment">// Fixed number of digits.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		digits := prec
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		switch fmt {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		case &#39;e&#39;, &#39;E&#39;:
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>			digits++
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		case &#39;g&#39;, &#39;G&#39;:
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>			if prec == 0 {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>				prec = 1
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>			}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>			digits = prec
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		default:
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>			<span class="comment">// Invalid mode.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>			digits = 1
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		var buf [24]byte
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		if bitSize == 32 &amp;&amp; digits &lt;= 9 {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>			digs.d = buf[:]
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>			ryuFtoaFixed32(&amp;digs, uint32(mant), exp-int(flt.mantbits), digits)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>			ok = true
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		} else if digits &lt;= 18 {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>			digs.d = buf[:]
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>			ryuFtoaFixed64(&amp;digs, mant, exp-int(flt.mantbits), digits)
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>			ok = true
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	if !ok {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		return bigFtoa(dst, prec, fmt, neg, mant, exp, flt)
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	return formatDigits(dst, shortest, neg, digs, prec, fmt)
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// bigFtoa uses multiprecision computations to format a float.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>func bigFtoa(dst []byte, prec int, fmt byte, neg bool, mant uint64, exp int, flt *floatInfo) []byte {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	d := new(decimal)
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	d.Assign(mant)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	d.Shift(exp - int(flt.mantbits))
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	var digs decimalSlice
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	shortest := prec &lt; 0
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	if shortest {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		roundShortest(d, mant, exp, flt)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		digs = decimalSlice{d: d.d[:], nd: d.nd, dp: d.dp}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		<span class="comment">// Precision for shortest representation mode.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		switch fmt {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		case &#39;e&#39;, &#39;E&#39;:
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>			prec = digs.nd - 1
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		case &#39;f&#39;:
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>			prec = max(digs.nd-digs.dp, 0)
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		case &#39;g&#39;, &#39;G&#39;:
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>			prec = digs.nd
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	} else {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		<span class="comment">// Round appropriately.</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		switch fmt {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		case &#39;e&#39;, &#39;E&#39;:
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>			d.Round(prec + 1)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		case &#39;f&#39;:
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>			d.Round(d.dp + prec)
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		case &#39;g&#39;, &#39;G&#39;:
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>			if prec == 0 {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>				prec = 1
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>			}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>			d.Round(prec)
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		digs = decimalSlice{d: d.d[:], nd: d.nd, dp: d.dp}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	return formatDigits(dst, shortest, neg, digs, prec, fmt)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>func formatDigits(dst []byte, shortest bool, neg bool, digs decimalSlice, prec int, fmt byte) []byte {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	switch fmt {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	case &#39;e&#39;, &#39;E&#39;:
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		return fmtE(dst, neg, digs, prec, fmt)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	case &#39;f&#39;:
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		return fmtF(dst, neg, digs, prec)
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	case &#39;g&#39;, &#39;G&#39;:
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		<span class="comment">// trailing fractional zeros in &#39;e&#39; form will be trimmed.</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		eprec := prec
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		if eprec &gt; digs.nd &amp;&amp; digs.nd &gt;= digs.dp {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>			eprec = digs.nd
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		<span class="comment">// %e is used if the exponent from the conversion</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		<span class="comment">// is less than -4 or greater than or equal to the precision.</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		<span class="comment">// if precision was the shortest possible, use precision 6 for this decision.</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		if shortest {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>			eprec = 6
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		exp := digs.dp - 1
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		if exp &lt; -4 || exp &gt;= eprec {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			if prec &gt; digs.nd {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>				prec = digs.nd
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>			}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>			return fmtE(dst, neg, digs, prec-1, fmt+&#39;e&#39;-&#39;g&#39;)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		if prec &gt; digs.dp {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>			prec = digs.nd
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		return fmtF(dst, neg, digs, max(prec-digs.dp, 0))
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	<span class="comment">// unknown format</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	return append(dst, &#39;%&#39;, fmt)
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">// roundShortest rounds d (= mant * 2^exp) to the shortest number of digits</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// that will let the original floating point value be precisely reconstructed.</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>func roundShortest(d *decimal, mant uint64, exp int, flt *floatInfo) {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	<span class="comment">// If mantissa is zero, the number is zero; stop now.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	if mant == 0 {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		d.nd = 0
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		return
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	<span class="comment">// Compute upper and lower such that any decimal number</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	<span class="comment">// between upper and lower (possibly inclusive)</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	<span class="comment">// will round to the original floating point number.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	<span class="comment">// We may see at once that the number is already shortest.</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	<span class="comment">// Suppose d is not denormal, so that 2^exp &lt;= d &lt; 10^dp.</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	<span class="comment">// The closest shorter number is at least 10^(dp-nd) away.</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	<span class="comment">// The lower/upper bounds computed below are at distance</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	<span class="comment">// at most 2^(exp-mantbits).</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	<span class="comment">// So the number is already shortest if 10^(dp-nd) &gt; 2^(exp-mantbits),</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	<span class="comment">// or equivalently log2(10)*(dp-nd) &gt; exp-mantbits.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	<span class="comment">// It is true if 332/100*(dp-nd) &gt;= exp-mantbits (log2(10) &gt; 3.32).</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	minexp := flt.bias + 1 <span class="comment">// minimum possible exponent</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	if exp &gt; minexp &amp;&amp; 332*(d.dp-d.nd) &gt;= 100*(exp-int(flt.mantbits)) {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		<span class="comment">// The number is already shortest.</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		return
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	<span class="comment">// d = mant &lt;&lt; (exp - mantbits)</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	<span class="comment">// Next highest floating point number is mant+1 &lt;&lt; exp-mantbits.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	<span class="comment">// Our upper bound is halfway between, mant*2+1 &lt;&lt; exp-mantbits-1.</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	upper := new(decimal)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	upper.Assign(mant*2 + 1)
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	upper.Shift(exp - int(flt.mantbits) - 1)
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	<span class="comment">// d = mant &lt;&lt; (exp - mantbits)</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	<span class="comment">// Next lowest floating point number is mant-1 &lt;&lt; exp-mantbits,</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	<span class="comment">// unless mant-1 drops the significant bit and exp is not the minimum exp,</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	<span class="comment">// in which case the next lowest is mant*2-1 &lt;&lt; exp-mantbits-1.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	<span class="comment">// Either way, call it mantlo &lt;&lt; explo-mantbits.</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	<span class="comment">// Our lower bound is halfway between, mantlo*2+1 &lt;&lt; explo-mantbits-1.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	var mantlo uint64
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	var explo int
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	if mant &gt; 1&lt;&lt;flt.mantbits || exp == minexp {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		mantlo = mant - 1
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		explo = exp
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	} else {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		mantlo = mant*2 - 1
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		explo = exp - 1
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	lower := new(decimal)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	lower.Assign(mantlo*2 + 1)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	lower.Shift(explo - int(flt.mantbits) - 1)
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	<span class="comment">// The upper and lower bounds are possible outputs only if</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	<span class="comment">// the original mantissa is even, so that IEEE round-to-even</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	<span class="comment">// would round to the original mantissa and not the neighbors.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	inclusive := mant%2 == 0
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	<span class="comment">// As we walk the digits we want to know whether rounding up would fall</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	<span class="comment">// within the upper bound. This is tracked by upperdelta:</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	<span class="comment">// If upperdelta == 0, the digits of d and upper are the same so far.</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	<span class="comment">// If upperdelta == 1, we saw a difference of 1 between d and upper on a</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	<span class="comment">// previous digit and subsequently only 9s for d and 0s for upper.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	<span class="comment">// (Thus rounding up may fall outside the bound, if it is exclusive.)</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	<span class="comment">// If upperdelta == 2, then the difference is greater than 1</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	<span class="comment">// and we know that rounding up falls within the bound.</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	var upperdelta uint8
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	<span class="comment">// Now we can figure out the minimum number of digits required.</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	<span class="comment">// Walk along until d has distinguished itself from upper and lower.</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	for ui := 0; ; ui++ {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		<span class="comment">// lower, d, and upper may have the decimal points at different</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		<span class="comment">// places. In this case upper is the longest, so we iterate from</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		<span class="comment">// ui==0 and start li and mi at (possibly) -1.</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		mi := ui - upper.dp + d.dp
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		if mi &gt;= d.nd {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>			break
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		li := ui - upper.dp + lower.dp
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		l := byte(&#39;0&#39;) <span class="comment">// lower digit</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		if li &gt;= 0 &amp;&amp; li &lt; lower.nd {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>			l = lower.d[li]
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		m := byte(&#39;0&#39;) <span class="comment">// middle digit</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		if mi &gt;= 0 {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>			m = d.d[mi]
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		u := byte(&#39;0&#39;) <span class="comment">// upper digit</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		if ui &lt; upper.nd {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>			u = upper.d[ui]
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		<span class="comment">// Okay to round down (truncate) if lower has a different digit</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		<span class="comment">// or if lower is inclusive and is exactly the result of rounding</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		<span class="comment">// down (i.e., and we have reached the final digit of lower).</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		okdown := l != m || inclusive &amp;&amp; li+1 == lower.nd
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		switch {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		case upperdelta == 0 &amp;&amp; m+1 &lt; u:
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>			<span class="comment">// Example:</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>			<span class="comment">// m = 12345xxx</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>			<span class="comment">// u = 12347xxx</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>			upperdelta = 2
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		case upperdelta == 0 &amp;&amp; m != u:
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>			<span class="comment">// Example:</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>			<span class="comment">// m = 12345xxx</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>			<span class="comment">// u = 12346xxx</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>			upperdelta = 1
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		case upperdelta == 1 &amp;&amp; (m != &#39;9&#39; || u != &#39;0&#39;):
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>			<span class="comment">// Example:</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>			<span class="comment">// m = 1234598x</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>			<span class="comment">// u = 1234600x</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>			upperdelta = 2
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		<span class="comment">// Okay to round up if upper has a different digit and either upper</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		<span class="comment">// is inclusive or upper is bigger than the result of rounding up.</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		okup := upperdelta &gt; 0 &amp;&amp; (inclusive || upperdelta &gt; 1 || ui+1 &lt; upper.nd)
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		<span class="comment">// If it&#39;s okay to do either, then round to the nearest one.</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>		<span class="comment">// If it&#39;s okay to do only one, do it.</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		switch {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		case okdown &amp;&amp; okup:
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>			d.Round(mi + 1)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			return
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		case okdown:
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>			d.RoundDown(mi + 1)
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>			return
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		case okup:
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			d.RoundUp(mi + 1)
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>			return
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	}
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>}
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>type decimalSlice struct {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	d      []byte
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	nd, dp int
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span><span class="comment">// %e: -d.ddddde±dd</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>func fmtE(dst []byte, neg bool, d decimalSlice, prec int, fmt byte) []byte {
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	<span class="comment">// sign</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	if neg {
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		dst = append(dst, &#39;-&#39;)
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	}
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	<span class="comment">// first digit</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	ch := byte(&#39;0&#39;)
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	if d.nd != 0 {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		ch = d.d[0]
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	dst = append(dst, ch)
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	<span class="comment">// .moredigits</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	if prec &gt; 0 {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		dst = append(dst, &#39;.&#39;)
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		i := 1
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>		m := min(d.nd, prec+1)
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>		if i &lt; m {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>			dst = append(dst, d.d[i:m]...)
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>			i = m
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		}
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>		for ; i &lt;= prec; i++ {
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>			dst = append(dst, &#39;0&#39;)
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>		}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	}
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	<span class="comment">// e±</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	dst = append(dst, fmt)
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	exp := d.dp - 1
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	if d.nd == 0 { <span class="comment">// special case: 0 has exponent 0</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		exp = 0
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	if exp &lt; 0 {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		ch = &#39;-&#39;
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		exp = -exp
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	} else {
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		ch = &#39;+&#39;
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	dst = append(dst, ch)
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	<span class="comment">// dd or ddd</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	switch {
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	case exp &lt; 10:
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		dst = append(dst, &#39;0&#39;, byte(exp)+&#39;0&#39;)
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	case exp &lt; 100:
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		dst = append(dst, byte(exp/10)+&#39;0&#39;, byte(exp%10)+&#39;0&#39;)
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	default:
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		dst = append(dst, byte(exp/100)+&#39;0&#39;, byte(exp/10)%10+&#39;0&#39;, byte(exp%10)+&#39;0&#39;)
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	}
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	return dst
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>}
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span><span class="comment">// %f: -ddddddd.ddddd</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>func fmtF(dst []byte, neg bool, d decimalSlice, prec int) []byte {
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	<span class="comment">// sign</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	if neg {
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>		dst = append(dst, &#39;-&#39;)
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	}
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	<span class="comment">// integer, padded with zeros as needed.</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	if d.dp &gt; 0 {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		m := min(d.nd, d.dp)
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		dst = append(dst, d.d[:m]...)
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		for ; m &lt; d.dp; m++ {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>			dst = append(dst, &#39;0&#39;)
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	} else {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		dst = append(dst, &#39;0&#39;)
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	}
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	<span class="comment">// fraction</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	if prec &gt; 0 {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		dst = append(dst, &#39;.&#39;)
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		for i := 0; i &lt; prec; i++ {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>			ch := byte(&#39;0&#39;)
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>			if j := d.dp + i; 0 &lt;= j &amp;&amp; j &lt; d.nd {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>				ch = d.d[j]
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>			}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>			dst = append(dst, ch)
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	return dst
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span><span class="comment">// %b: -ddddddddp±ddd</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>func fmtB(dst []byte, neg bool, mant uint64, exp int, flt *floatInfo) []byte {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	<span class="comment">// sign</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	if neg {
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		dst = append(dst, &#39;-&#39;)
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	<span class="comment">// mantissa</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	dst, _ = formatBits(dst, mant, 10, false, true)
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	<span class="comment">// p</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	dst = append(dst, &#39;p&#39;)
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	<span class="comment">// ±exponent</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	exp -= int(flt.mantbits)
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	if exp &gt;= 0 {
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>		dst = append(dst, &#39;+&#39;)
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	}
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	dst, _ = formatBits(dst, uint64(exp), 10, exp &lt; 0, true)
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	return dst
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>}
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span><span class="comment">// %x: -0x1.yyyyyyyyp±ddd or -0x0p+0. (y is hex digit, d is decimal digit)</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>func fmtX(dst []byte, prec int, fmt byte, neg bool, mant uint64, exp int, flt *floatInfo) []byte {
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	if mant == 0 {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		exp = 0
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	<span class="comment">// Shift digits so leading 1 (if any) is at bit 1&lt;&lt;60.</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	mant &lt;&lt;= 60 - flt.mantbits
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	for mant != 0 &amp;&amp; mant&amp;(1&lt;&lt;60) == 0 {
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		mant &lt;&lt;= 1
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		exp--
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	<span class="comment">// Round if requested.</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	if prec &gt;= 0 &amp;&amp; prec &lt; 15 {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		shift := uint(prec * 4)
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		extra := (mant &lt;&lt; shift) &amp; (1&lt;&lt;60 - 1)
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		mant &gt;&gt;= 60 - shift
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		if extra|(mant&amp;1) &gt; 1&lt;&lt;59 {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>			mant++
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		mant &lt;&lt;= 60 - shift
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		if mant&amp;(1&lt;&lt;61) != 0 {
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>			<span class="comment">// Wrapped around.</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>			mant &gt;&gt;= 1
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>			exp++
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		}
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	}
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	hex := lowerhex
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	if fmt == &#39;X&#39; {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>		hex = upperhex
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	<span class="comment">// sign, 0x, leading digit</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	if neg {
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>		dst = append(dst, &#39;-&#39;)
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	}
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	dst = append(dst, &#39;0&#39;, fmt, &#39;0&#39;+byte((mant&gt;&gt;60)&amp;1))
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	<span class="comment">// .fraction</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	mant &lt;&lt;= 4 <span class="comment">// remove leading 0 or 1</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	if prec &lt; 0 &amp;&amp; mant != 0 {
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		dst = append(dst, &#39;.&#39;)
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		for mant != 0 {
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>			dst = append(dst, hex[(mant&gt;&gt;60)&amp;15])
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>			mant &lt;&lt;= 4
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	} else if prec &gt; 0 {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		dst = append(dst, &#39;.&#39;)
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		for i := 0; i &lt; prec; i++ {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>			dst = append(dst, hex[(mant&gt;&gt;60)&amp;15])
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>			mant &lt;&lt;= 4
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>		}
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	}
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	<span class="comment">// p±</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	ch := byte(&#39;P&#39;)
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	if fmt == lower(fmt) {
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>		ch = &#39;p&#39;
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	}
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	dst = append(dst, ch)
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	if exp &lt; 0 {
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		ch = &#39;-&#39;
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		exp = -exp
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	} else {
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		ch = &#39;+&#39;
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	dst = append(dst, ch)
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	<span class="comment">// dd or ddd or dddd</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	switch {
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	case exp &lt; 100:
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		dst = append(dst, byte(exp/10)+&#39;0&#39;, byte(exp%10)+&#39;0&#39;)
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	case exp &lt; 1000:
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		dst = append(dst, byte(exp/100)+&#39;0&#39;, byte((exp/10)%10)+&#39;0&#39;, byte(exp%10)+&#39;0&#39;)
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	default:
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		dst = append(dst, byte(exp/1000)+&#39;0&#39;, byte(exp/100)%10+&#39;0&#39;, byte((exp/10)%10)+&#39;0&#39;, byte(exp%10)+&#39;0&#39;)
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	return dst
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>}
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>
</pre><p><a href="ftoa.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
