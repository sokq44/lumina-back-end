<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/strconv/quote.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./quote.go?s=16673:16700#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/strconv">strconv</a>/<span class="text-muted">quote.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/strconv">strconv</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">//go:generate go run makeisprint.go -output isprint.go</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package strconv
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>)
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>const (
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	lowerhex = &#34;0123456789abcdef&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	upperhex = &#34;0123456789ABCDEF&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// contains reports whether the string contains the byte c.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>func contains(s string, c byte) bool {
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	return index(s, c) != -1
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>}
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>func quoteWith(s string, quote byte, ASCIIonly, graphicOnly bool) string {
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	return string(appendQuotedWith(make([]byte, 0, 3*len(s)/2), s, quote, ASCIIonly, graphicOnly))
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>func quoteRuneWith(r rune, quote byte, ASCIIonly, graphicOnly bool) string {
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	return string(appendQuotedRuneWith(nil, r, quote, ASCIIonly, graphicOnly))
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>}
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>func appendQuotedWith(buf []byte, s string, quote byte, ASCIIonly, graphicOnly bool) []byte {
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	<span class="comment">// Often called with big strings, so preallocate. If there&#39;s quoting,</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	<span class="comment">// this is conservative but still helps a lot.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	if cap(buf)-len(buf) &lt; len(s) {
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>		nBuf := make([]byte, len(buf), len(buf)+1+len(s)+1)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>		copy(nBuf, buf)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>		buf = nBuf
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	}
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	buf = append(buf, quote)
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	for width := 0; len(s) &gt; 0; s = s[width:] {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		r := rune(s[0])
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>		width = 1
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>		if r &gt;= utf8.RuneSelf {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>			r, width = utf8.DecodeRuneInString(s)
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>		if width == 1 &amp;&amp; r == utf8.RuneError {
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>			buf = append(buf, `\x`...)
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>			buf = append(buf, lowerhex[s[0]&gt;&gt;4])
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>			buf = append(buf, lowerhex[s[0]&amp;0xF])
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>			continue
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly)
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	}
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	buf = append(buf, quote)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	return buf
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>func appendQuotedRuneWith(buf []byte, r rune, quote byte, ASCIIonly, graphicOnly bool) []byte {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	buf = append(buf, quote)
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	if !utf8.ValidRune(r) {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		r = utf8.RuneError
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly)
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	buf = append(buf, quote)
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	return buf
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>func appendEscapedRune(buf []byte, r rune, quote byte, ASCIIonly, graphicOnly bool) []byte {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	if r == rune(quote) || r == &#39;\\&#39; { <span class="comment">// always backslashed</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		buf = append(buf, &#39;\\&#39;)
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		buf = append(buf, byte(r))
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		return buf
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	if ASCIIonly {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		if r &lt; utf8.RuneSelf &amp;&amp; IsPrint(r) {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>			buf = append(buf, byte(r))
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>			return buf
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	} else if IsPrint(r) || graphicOnly &amp;&amp; isInGraphicList(r) {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		return utf8.AppendRune(buf, r)
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	switch r {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	case &#39;\a&#39;:
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		buf = append(buf, `\a`...)
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	case &#39;\b&#39;:
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		buf = append(buf, `\b`...)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	case &#39;\f&#39;:
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		buf = append(buf, `\f`...)
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	case &#39;\n&#39;:
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		buf = append(buf, `\n`...)
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	case &#39;\r&#39;:
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		buf = append(buf, `\r`...)
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	case &#39;\t&#39;:
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		buf = append(buf, `\t`...)
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	case &#39;\v&#39;:
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		buf = append(buf, `\v`...)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	default:
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		switch {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		case r &lt; &#39; &#39; || r == 0x7f:
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>			buf = append(buf, `\x`...)
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>			buf = append(buf, lowerhex[byte(r)&gt;&gt;4])
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>			buf = append(buf, lowerhex[byte(r)&amp;0xF])
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		case !utf8.ValidRune(r):
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			r = 0xFFFD
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>			fallthrough
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		case r &lt; 0x10000:
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>			buf = append(buf, `\u`...)
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>			for s := 12; s &gt;= 0; s -= 4 {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>				buf = append(buf, lowerhex[r&gt;&gt;uint(s)&amp;0xF])
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>			}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		default:
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>			buf = append(buf, `\U`...)
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>			for s := 28; s &gt;= 0; s -= 4 {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>				buf = append(buf, lowerhex[r&gt;&gt;uint(s)&amp;0xF])
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>			}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	return buf
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// Quote returns a double-quoted Go string literal representing s. The</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// returned string uses Go escape sequences (\t, \n, \xFF, \u0100) for</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// control characters and non-printable characters as defined by</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// IsPrint.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>func Quote(s string) string {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	return quoteWith(s, &#39;&#34;&#39;, false, false)
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// AppendQuote appends a double-quoted Go string literal representing s,</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// as generated by Quote, to dst and returns the extended buffer.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>func AppendQuote(dst []byte, s string) []byte {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	return appendQuotedWith(dst, s, &#39;&#34;&#39;, false, false)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// QuoteToASCII returns a double-quoted Go string literal representing s.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// The returned string uses Go escape sequences (\t, \n, \xFF, \u0100) for</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// non-ASCII characters and non-printable characters as defined by IsPrint.</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>func QuoteToASCII(s string) string {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	return quoteWith(s, &#39;&#34;&#39;, true, false)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// AppendQuoteToASCII appends a double-quoted Go string literal representing s,</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// as generated by QuoteToASCII, to dst and returns the extended buffer.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>func AppendQuoteToASCII(dst []byte, s string) []byte {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	return appendQuotedWith(dst, s, &#39;&#34;&#39;, true, false)
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">// QuoteToGraphic returns a double-quoted Go string literal representing s.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// The returned string leaves Unicode graphic characters, as defined by</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// IsGraphic, unchanged and uses Go escape sequences (\t, \n, \xFF, \u0100)</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// for non-graphic characters.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>func QuoteToGraphic(s string) string {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	return quoteWith(s, &#39;&#34;&#39;, false, true)
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// AppendQuoteToGraphic appends a double-quoted Go string literal representing s,</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// as generated by QuoteToGraphic, to dst and returns the extended buffer.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>func AppendQuoteToGraphic(dst []byte, s string) []byte {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	return appendQuotedWith(dst, s, &#39;&#34;&#39;, false, true)
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// QuoteRune returns a single-quoted Go character literal representing the</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">// rune. The returned string uses Go escape sequences (\t, \n, \xFF, \u0100)</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">// for control characters and non-printable characters as defined by IsPrint.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// If r is not a valid Unicode code point, it is interpreted as the Unicode</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// replacement character U+FFFD.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>func QuoteRune(r rune) string {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	return quoteRuneWith(r, &#39;\&#39;&#39;, false, false)
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// AppendQuoteRune appends a single-quoted Go character literal representing the rune,</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// as generated by QuoteRune, to dst and returns the extended buffer.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>func AppendQuoteRune(dst []byte, r rune) []byte {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	return appendQuotedRuneWith(dst, r, &#39;\&#39;&#39;, false, false)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// QuoteRuneToASCII returns a single-quoted Go character literal representing</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// the rune. The returned string uses Go escape sequences (\t, \n, \xFF,</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// \u0100) for non-ASCII characters and non-printable characters as defined</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// by IsPrint.</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">// If r is not a valid Unicode code point, it is interpreted as the Unicode</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// replacement character U+FFFD.</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>func QuoteRuneToASCII(r rune) string {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	return quoteRuneWith(r, &#39;\&#39;&#39;, true, false)
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// AppendQuoteRuneToASCII appends a single-quoted Go character literal representing the rune,</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// as generated by QuoteRuneToASCII, to dst and returns the extended buffer.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>func AppendQuoteRuneToASCII(dst []byte, r rune) []byte {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	return appendQuotedRuneWith(dst, r, &#39;\&#39;&#39;, true, false)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// QuoteRuneToGraphic returns a single-quoted Go character literal representing</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// the rune. If the rune is not a Unicode graphic character,</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// as defined by IsGraphic, the returned string will use a Go escape sequence</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// (\t, \n, \xFF, \u0100).</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// If r is not a valid Unicode code point, it is interpreted as the Unicode</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">// replacement character U+FFFD.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>func QuoteRuneToGraphic(r rune) string {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	return quoteRuneWith(r, &#39;\&#39;&#39;, false, true)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// AppendQuoteRuneToGraphic appends a single-quoted Go character literal representing the rune,</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// as generated by QuoteRuneToGraphic, to dst and returns the extended buffer.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>func AppendQuoteRuneToGraphic(dst []byte, r rune) []byte {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	return appendQuotedRuneWith(dst, r, &#39;\&#39;&#39;, false, true)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// CanBackquote reports whether the string s can be represented</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// unchanged as a single-line backquoted string without control</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// characters other than tab.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>func CanBackquote(s string) bool {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	for len(s) &gt; 0 {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		r, wid := utf8.DecodeRuneInString(s)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		s = s[wid:]
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		if wid &gt; 1 {
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>			if r == &#39;\ufeff&#39; {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>				return false <span class="comment">// BOMs are invisible and should not be quoted.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>			continue <span class="comment">// All other multibyte runes are correctly encoded and assumed printable.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		if r == utf8.RuneError {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>			return false
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		if (r &lt; &#39; &#39; &amp;&amp; r != &#39;\t&#39;) || r == &#39;`&#39; || r == &#39;\u007F&#39; {
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			return false
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	return true
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>func unhex(b byte) (v rune, ok bool) {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	c := rune(b)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	switch {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	case &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39;:
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		return c - &#39;0&#39;, true
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	case &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;f&#39;:
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		return c - &#39;a&#39; + 10, true
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	case &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;F&#39;:
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		return c - &#39;A&#39; + 10, true
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	return
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>}
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// UnquoteChar decodes the first character or byte in the escaped string</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// or character literal represented by the string s.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">// It returns four values:</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span><span class="comment">//  1. value, the decoded Unicode code point or byte value;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">//  2. multibyte, a boolean indicating whether the decoded character requires a multibyte UTF-8 representation;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">//  3. tail, the remainder of the string after the character; and</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">//  4. an error that will be nil if the character is syntactically valid.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// The second argument, quote, specifies the type of literal being parsed</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// and therefore which escaped quote character is permitted.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// If set to a single quote, it permits the sequence \&#39; and disallows unescaped &#39;.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// If set to a double quote, it permits \&#34; and disallows unescaped &#34;.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// If set to zero, it does not permit either escape and allows both quote characters to appear unescaped.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>func UnquoteChar(s string, quote byte) (value rune, multibyte bool, tail string, err error) {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	<span class="comment">// easy cases</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	if len(s) == 0 {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		err = ErrSyntax
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		return
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	switch c := s[0]; {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	case c == quote &amp;&amp; (quote == &#39;\&#39;&#39; || quote == &#39;&#34;&#39;):
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		err = ErrSyntax
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		return
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	case c &gt;= utf8.RuneSelf:
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		r, size := utf8.DecodeRuneInString(s)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		return r, true, s[size:], nil
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	case c != &#39;\\&#39;:
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		return rune(s[0]), false, s[1:], nil
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	}
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	<span class="comment">// hard case: c is backslash</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	if len(s) &lt;= 1 {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		err = ErrSyntax
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		return
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	c := s[1]
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	s = s[2:]
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	switch c {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	case &#39;a&#39;:
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		value = &#39;\a&#39;
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	case &#39;b&#39;:
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		value = &#39;\b&#39;
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	case &#39;f&#39;:
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		value = &#39;\f&#39;
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	case &#39;n&#39;:
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		value = &#39;\n&#39;
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	case &#39;r&#39;:
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		value = &#39;\r&#39;
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	case &#39;t&#39;:
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		value = &#39;\t&#39;
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	case &#39;v&#39;:
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		value = &#39;\v&#39;
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	case &#39;x&#39;, &#39;u&#39;, &#39;U&#39;:
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		n := 0
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		switch c {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		case &#39;x&#39;:
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>			n = 2
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		case &#39;u&#39;:
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			n = 4
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		case &#39;U&#39;:
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>			n = 8
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		var v rune
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		if len(s) &lt; n {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>			err = ErrSyntax
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>			return
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		}
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		for j := 0; j &lt; n; j++ {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>			x, ok := unhex(s[j])
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>			if !ok {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>				err = ErrSyntax
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>				return
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>			}
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>			v = v&lt;&lt;4 | x
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		s = s[n:]
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		if c == &#39;x&#39; {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>			<span class="comment">// single-byte string, possibly not UTF-8</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>			value = v
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>			break
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		if !utf8.ValidRune(v) {
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>			err = ErrSyntax
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>			return
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		value = v
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		multibyte = true
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	case &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;:
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		v := rune(c) - &#39;0&#39;
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		if len(s) &lt; 2 {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>			err = ErrSyntax
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>			return
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		for j := 0; j &lt; 2; j++ { <span class="comment">// one digit already; two more</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>			x := rune(s[j]) - &#39;0&#39;
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>			if x &lt; 0 || x &gt; 7 {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>				err = ErrSyntax
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>				return
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>			}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>			v = (v &lt;&lt; 3) | x
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		s = s[2:]
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		if v &gt; 255 {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>			err = ErrSyntax
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>			return
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		value = v
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	case &#39;\\&#39;:
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		value = &#39;\\&#39;
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	case &#39;\&#39;&#39;, &#39;&#34;&#39;:
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		if c != quote {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>			err = ErrSyntax
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>			return
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		value = rune(c)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	default:
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		err = ErrSyntax
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		return
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	}
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	tail = s
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	return
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>}
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">// QuotedPrefix returns the quoted string (as understood by Unquote) at the prefix of s.</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// If s does not start with a valid quoted string, QuotedPrefix returns an error.</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>func QuotedPrefix(s string) (string, error) {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	out, _, err := unquote(s, false)
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	return out, err
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>}
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span><span class="comment">// Unquote interprets s as a single-quoted, double-quoted,</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span><span class="comment">// or backquoted Go string literal, returning the string value</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">// that s quotes.  (If s is single-quoted, it would be a Go</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">// character literal; Unquote returns the corresponding</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">// one-character string.)</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>func Unquote(s string) (string, error) {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	out, rem, err := unquote(s, true)
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	if len(rem) &gt; 0 {
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		return &#34;&#34;, ErrSyntax
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	return out, err
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>}
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span><span class="comment">// unquote parses a quoted string at the start of the input,</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span><span class="comment">// returning the parsed prefix, the remaining suffix, and any parse errors.</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span><span class="comment">// If unescape is true, the parsed prefix is unescaped,</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span><span class="comment">// otherwise the input prefix is provided verbatim.</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>func unquote(in string, unescape bool) (out, rem string, err error) {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	<span class="comment">// Determine the quote form and optimistically find the terminating quote.</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	if len(in) &lt; 2 {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>		return &#34;&#34;, in, ErrSyntax
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	}
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	quote := in[0]
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	end := index(in[1:], quote)
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	if end &lt; 0 {
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		return &#34;&#34;, in, ErrSyntax
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	end += 2 <span class="comment">// position after terminating quote; may be wrong if escape sequences are present</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	switch quote {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	case &#39;`&#39;:
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		switch {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		case !unescape:
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>			out = in[:end] <span class="comment">// include quotes</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		case !contains(in[:end], &#39;\r&#39;):
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>			out = in[len(&#34;`&#34;) : end-len(&#34;`&#34;)] <span class="comment">// exclude quotes</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		default:
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			<span class="comment">// Carriage return characters (&#39;\r&#39;) inside raw string literals</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>			<span class="comment">// are discarded from the raw string value.</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>			buf := make([]byte, 0, end-len(&#34;`&#34;)-len(&#34;\r&#34;)-len(&#34;`&#34;))
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>			for i := len(&#34;`&#34;); i &lt; end-len(&#34;`&#34;); i++ {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>				if in[i] != &#39;\r&#39; {
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>					buf = append(buf, in[i])
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>				}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>			}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>			out = string(buf)
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		}
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		<span class="comment">// NOTE: Prior implementations did not verify that raw strings consist</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		<span class="comment">// of valid UTF-8 characters and we continue to not verify it as such.</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		<span class="comment">// The Go specification does not explicitly require valid UTF-8,</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		<span class="comment">// but only mention that it is implicitly valid for Go source code</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		<span class="comment">// (which must be valid UTF-8).</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		return out, in[end:], nil
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	case &#39;&#34;&#39;, &#39;\&#39;&#39;:
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		<span class="comment">// Handle quoted strings without any escape sequences.</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		if !contains(in[:end], &#39;\\&#39;) &amp;&amp; !contains(in[:end], &#39;\n&#39;) {
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>			var valid bool
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>			switch quote {
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>			case &#39;&#34;&#39;:
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>				valid = utf8.ValidString(in[len(`&#34;`) : end-len(`&#34;`)])
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>			case &#39;\&#39;&#39;:
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>				r, n := utf8.DecodeRuneInString(in[len(&#34;&#39;&#34;) : end-len(&#34;&#39;&#34;)])
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>				valid = len(&#34;&#39;&#34;)+n+len(&#34;&#39;&#34;) == end &amp;&amp; (r != utf8.RuneError || n != 1)
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>			}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>			if valid {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>				out = in[:end]
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>				if unescape {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>					out = out[1 : end-1] <span class="comment">// exclude quotes</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>				}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>				return out, in[end:], nil
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>			}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		<span class="comment">// Handle quoted strings with escape sequences.</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		var buf []byte
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		in0 := in
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		in = in[1:] <span class="comment">// skip starting quote</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		if unescape {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>			buf = make([]byte, 0, 3*end/2) <span class="comment">// try to avoid more allocations</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		}
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		for len(in) &gt; 0 &amp;&amp; in[0] != quote {
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>			<span class="comment">// Process the next character,</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>			<span class="comment">// rejecting any unescaped newline characters which are invalid.</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>			r, multibyte, rem, err := UnquoteChar(in, quote)
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>			if in[0] == &#39;\n&#39; || err != nil {
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>				return &#34;&#34;, in0, ErrSyntax
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>			}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>			in = rem
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>			<span class="comment">// Append the character if unescaping the input.</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>			if unescape {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>				if r &lt; utf8.RuneSelf || !multibyte {
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>					buf = append(buf, byte(r))
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>				} else {
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>					buf = utf8.AppendRune(buf, r)
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>				}
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>			}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>			<span class="comment">// Single quoted strings must be a single character.</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>			if quote == &#39;\&#39;&#39; {
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>				break
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>			}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>		}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		<span class="comment">// Verify that the string ends with a terminating quote.</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>		if !(len(in) &gt; 0 &amp;&amp; in[0] == quote) {
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>			return &#34;&#34;, in0, ErrSyntax
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		in = in[1:] <span class="comment">// skip terminating quote</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		if unescape {
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>			return string(buf), in, nil
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>		}
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		return in0[:len(in0)-len(in)], in, nil
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	default:
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		return &#34;&#34;, in, ErrSyntax
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>}
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span><span class="comment">// bsearch16 returns the smallest i such that a[i] &gt;= x.</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span><span class="comment">// If there is no such i, bsearch16 returns len(a).</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>func bsearch16(a []uint16, x uint16) int {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	i, j := 0, len(a)
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	for i &lt; j {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		h := i + (j-i)&gt;&gt;1
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		if a[h] &lt; x {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>			i = h + 1
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		} else {
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>			j = h
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		}
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	return i
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span><span class="comment">// bsearch32 returns the smallest i such that a[i] &gt;= x.</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span><span class="comment">// If there is no such i, bsearch32 returns len(a).</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>func bsearch32(a []uint32, x uint32) int {
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	i, j := 0, len(a)
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	for i &lt; j {
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		h := i + (j-i)&gt;&gt;1
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		if a[h] &lt; x {
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>			i = h + 1
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		} else {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>			j = h
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	}
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	return i
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span><span class="comment">// TODO: IsPrint is a local implementation of unicode.IsPrint, verified by the tests</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span><span class="comment">// to give the same answer. It allows this package not to depend on unicode,</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span><span class="comment">// and therefore not pull in all the Unicode tables. If the linker were better</span>
<span id="L529" class="ln">   529&nbsp;&nbsp;</span><span class="comment">// at tossing unused tables, we could get rid of this implementation.</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span><span class="comment">// That would be nice.</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span><span class="comment">// IsPrint reports whether the rune is defined as printable by Go, with</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span><span class="comment">// the same definition as unicode.IsPrint: letters, numbers, punctuation,</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span><span class="comment">// symbols and ASCII space.</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>func IsPrint(r rune) bool {
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	<span class="comment">// Fast check for Latin-1</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	if r &lt;= 0xFF {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		if 0x20 &lt;= r &amp;&amp; r &lt;= 0x7E {
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>			<span class="comment">// All the ASCII is printable from space through DEL-1.</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>			return true
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		}
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>		if 0xA1 &lt;= r &amp;&amp; r &lt;= 0xFF {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>			<span class="comment">// Similarly for ¡ through ÿ...</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>			return r != 0xAD <span class="comment">// ...except for the bizarre soft hyphen.</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		}
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		return false
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	}
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	<span class="comment">// Same algorithm, either on uint16 or uint32 value.</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	<span class="comment">// First, find first i such that isPrint[i] &gt;= x.</span>
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	<span class="comment">// This is the index of either the start or end of a pair that might span x.</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	<span class="comment">// The start is even (isPrint[i&amp;^1]) and the end is odd (isPrint[i|1]).</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	<span class="comment">// If we find x in a range, make sure x is not in isNotPrint list.</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	if 0 &lt;= r &amp;&amp; r &lt; 1&lt;&lt;16 {
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		rr, isPrint, isNotPrint := uint16(r), isPrint16, isNotPrint16
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>		i := bsearch16(isPrint, rr)
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		if i &gt;= len(isPrint) || rr &lt; isPrint[i&amp;^1] || isPrint[i|1] &lt; rr {
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>			return false
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		}
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		j := bsearch16(isNotPrint, rr)
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		return j &gt;= len(isNotPrint) || isNotPrint[j] != rr
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	rr, isPrint, isNotPrint := uint32(r), isPrint32, isNotPrint32
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	i := bsearch32(isPrint, rr)
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	if i &gt;= len(isPrint) || rr &lt; isPrint[i&amp;^1] || isPrint[i|1] &lt; rr {
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		return false
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	if r &gt;= 0x20000 {
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>		return true
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	}
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	r -= 0x10000
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	j := bsearch16(isNotPrint, uint16(r))
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	return j &gt;= len(isNotPrint) || isNotPrint[j] != uint16(r)
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>}
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span><span class="comment">// IsGraphic reports whether the rune is defined as a Graphic by Unicode. Such</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span><span class="comment">// characters include letters, marks, numbers, punctuation, symbols, and</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span><span class="comment">// spaces, from categories L, M, N, P, S, and Zs.</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span><span class="selection">func IsGraphic(r rune) bool</span> {
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	if IsPrint(r) {
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		return true
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	}
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	return isInGraphicList(r)
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>}
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span><span class="comment">// isInGraphicList reports whether the rune is in the isGraphic list. This separation</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span><span class="comment">// from IsGraphic allows quoteWith to avoid two calls to IsPrint.</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span><span class="comment">// Should be called only if IsPrint fails.</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>func isInGraphicList(r rune) bool {
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	<span class="comment">// We know r must fit in 16 bits - see makeisprint.go.</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	if r &gt; 0xFFFF {
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		return false
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	}
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	rr := uint16(r)
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	i := bsearch16(isGraphic, rr)
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	return i &lt; len(isGraphic) &amp;&amp; rr == isGraphic[i]
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>}
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>
</pre><p><a href="quote.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
