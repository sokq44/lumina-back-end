<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/sync/atomic/doc.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./doc.go?s=3944:4012#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/sync">sync</a>/<a href="http://localhost:8080/src/sync/atomic">atomic</a>/<span class="text-muted">doc.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/sync/atomic">sync/atomic</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package atomic provides low-level atomic memory primitives</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// useful for implementing synchronization algorithms.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// These functions require great care to be used correctly.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// Except for special, low-level applications, synchronization is better</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// done with channels or the facilities of the [sync] package.</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// Share memory by communicating;</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// don&#39;t communicate by sharing memory.</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// The swap operation, implemented by the SwapT functions, is the atomic</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// equivalent of:</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">//	old = *addr</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//	*addr = new</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">//	return old</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// The compare-and-swap operation, implemented by the CompareAndSwapT</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// functions, is the atomic equivalent of:</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">//	if *addr == old {</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">//		*addr = new</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">//		return true</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">//	return false</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// The add operation, implemented by the AddT functions, is the atomic</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// equivalent of:</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">//	*addr += delta</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">//	return *addr</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// The load and store operations, implemented by the LoadT and StoreT</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// functions, are the atomic equivalents of &#34;return *addr&#34; and</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// &#34;*addr = val&#34;.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// In the terminology of the Go memory model, if the effect of</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// an atomic operation A is observed by atomic operation B,</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// then A “synchronizes before” B.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// Additionally, all the atomic operations executed in a program</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// behave as though executed in some sequentially consistent order.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// This definition provides the same semantics as</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// C++&#39;s sequentially consistent atomics and Java&#39;s volatile variables.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>package atomic
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>import (
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	&#34;unsafe&#34;
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>)
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// BUG(rsc): On 386, the 64-bit functions use instructions unavailable before the Pentium MMX.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// On non-Linux ARM, the 64-bit functions use instructions unavailable before the ARMv6k core.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// On ARM, 386, and 32-bit MIPS, it is the caller&#39;s responsibility to arrange</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// for 64-bit alignment of 64-bit words accessed atomically via the primitive</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// atomic functions (types [Int64] and [Uint64] are automatically aligned).</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// The first word in an allocated struct, array, or slice; in a global</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// variable; or in a local variable (because the subject of all atomic operations</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// will escape to the heap) can be relied upon to be 64-bit aligned.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// SwapInt32 atomically stores new into *addr and returns the previous *addr value.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Int32.Swap] instead.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>func SwapInt32(addr *int32, new int32) (old int32)
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// SwapInt64 atomically stores new into *addr and returns the previous *addr value.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Int64.Swap] instead</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// (particularly if you target 32-bit platforms; see the bugs section).</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>func SwapInt64(addr *int64, new int64) (old int64)
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// SwapUint32 atomically stores new into *addr and returns the previous *addr value.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Uint32.Swap] instead.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>func SwapUint32(addr *uint32, new uint32) (old uint32)
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// SwapUint64 atomically stores new into *addr and returns the previous *addr value.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Uint64.Swap] instead</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// (particularly if you target 32-bit platforms; see the bugs section).</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>func SwapUint64(addr *uint64, new uint64) (old uint64)
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// SwapUintptr atomically stores new into *addr and returns the previous *addr value.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Uintptr.Swap] instead.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>func SwapUintptr(addr *uintptr, new uintptr) (old uintptr)
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// SwapPointer atomically stores new into *addr and returns the previous *addr value.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Pointer.Swap] instead.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>func SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// CompareAndSwapInt32 executes the compare-and-swap operation for an int32 value.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Int32.CompareAndSwap] instead.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="selection">func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// CompareAndSwapInt64 executes the compare-and-swap operation for an int64 value.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Int64.CompareAndSwap] instead</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// (particularly if you target 32-bit platforms; see the bugs section).</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// CompareAndSwapUint32 executes the compare-and-swap operation for a uint32 value.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Uint32.CompareAndSwap] instead.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>func CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// CompareAndSwapUint64 executes the compare-and-swap operation for a uint64 value.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Uint64.CompareAndSwap] instead</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// (particularly if you target 32-bit platforms; see the bugs section).</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>func CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// CompareAndSwapUintptr executes the compare-and-swap operation for a uintptr value.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Uintptr.CompareAndSwap] instead.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// CompareAndSwapPointer executes the compare-and-swap operation for a unsafe.Pointer value.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Pointer.CompareAndSwap] instead.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// AddInt32 atomically adds delta to *addr and returns the new value.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Int32.Add] instead.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>func AddInt32(addr *int32, delta int32) (new int32)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// AddUint32 atomically adds delta to *addr and returns the new value.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// To subtract a signed positive constant value c from x, do AddUint32(&amp;x, ^uint32(c-1)).</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// In particular, to decrement x, do AddUint32(&amp;x, ^uint32(0)).</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Uint32.Add] instead.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>func AddUint32(addr *uint32, delta uint32) (new uint32)
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// AddInt64 atomically adds delta to *addr and returns the new value.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Int64.Add] instead</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// (particularly if you target 32-bit platforms; see the bugs section).</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>func AddInt64(addr *int64, delta int64) (new int64)
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// AddUint64 atomically adds delta to *addr and returns the new value.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// To subtract a signed positive constant value c from x, do AddUint64(&amp;x, ^uint64(c-1)).</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// In particular, to decrement x, do AddUint64(&amp;x, ^uint64(0)).</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Uint64.Add] instead</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// (particularly if you target 32-bit platforms; see the bugs section).</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>func AddUint64(addr *uint64, delta uint64) (new uint64)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// AddUintptr atomically adds delta to *addr and returns the new value.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Uintptr.Add] instead.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>func AddUintptr(addr *uintptr, delta uintptr) (new uintptr)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// LoadInt32 atomically loads *addr.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Int32.Load] instead.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>func LoadInt32(addr *int32) (val int32)
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// LoadInt64 atomically loads *addr.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Int64.Load] instead</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">// (particularly if you target 32-bit platforms; see the bugs section).</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>func LoadInt64(addr *int64) (val int64)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// LoadUint32 atomically loads *addr.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Uint32.Load] instead.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>func LoadUint32(addr *uint32) (val uint32)
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// LoadUint64 atomically loads *addr.</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Uint64.Load] instead</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// (particularly if you target 32-bit platforms; see the bugs section).</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>func LoadUint64(addr *uint64) (val uint64)
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// LoadUintptr atomically loads *addr.</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Uintptr.Load] instead.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>func LoadUintptr(addr *uintptr) (val uintptr)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">// LoadPointer atomically loads *addr.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Pointer.Load] instead.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// StoreInt32 atomically stores val into *addr.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Int32.Store] instead.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>func StoreInt32(addr *int32, val int32)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// StoreInt64 atomically stores val into *addr.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Int64.Store] instead</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// (particularly if you target 32-bit platforms; see the bugs section).</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>func StoreInt64(addr *int64, val int64)
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// StoreUint32 atomically stores val into *addr.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Uint32.Store] instead.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>func StoreUint32(addr *uint32, val uint32)
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">// StoreUint64 atomically stores val into *addr.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Uint64.Store] instead</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// (particularly if you target 32-bit platforms; see the bugs section).</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>func StoreUint64(addr *uint64, val uint64)
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// StoreUintptr atomically stores val into *addr.</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Uintptr.Store] instead.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>func StoreUintptr(addr *uintptr, val uintptr)
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// StorePointer atomically stores val into *addr.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// Consider using the more ergonomic and less error-prone [Pointer.Store] instead.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
</pre><p><a href="doc.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
