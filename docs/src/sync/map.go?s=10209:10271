<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/sync/map.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./map.go?s=10209:10271#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/sync">sync</a>/<span class="text-muted">map.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/sync">sync</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2016 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package sync
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>)
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// Map is like a Go map[any]any but is safe for concurrent use</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// by multiple goroutines without additional locking or coordination.</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// Loads, stores, and deletes run in amortized constant time.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// The Map type is specialized. Most code should use a plain Go map instead,</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// with separate locking or coordination, for better type safety and to make it</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// easier to maintain other invariants along with the map content.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// The Map type is optimized for two common use cases: (1) when the entry for a given</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// key is only ever written once but read many times, as in caches that only grow,</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// or (2) when multiple goroutines read, write, and overwrite entries for disjoint</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// sets of keys. In these two cases, use of a Map may significantly reduce lock</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// contention compared to a Go map paired with a separate Mutex or RWMutex.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// The zero Map is empty and ready for use. A Map must not be copied after first use.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// In the terminology of the Go memory model, Map arranges that a write operation</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// “synchronizes before” any read operation that observes the effect of the write, where</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// read and write operations are defined as follows.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// Load, LoadAndDelete, LoadOrStore, Swap, CompareAndSwap, and CompareAndDelete</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// are read operations; Delete, LoadAndDelete, Store, and Swap are write operations;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// LoadOrStore is a write operation when it returns loaded set to false;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// CompareAndSwap is a write operation when it returns swapped set to true;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// and CompareAndDelete is a write operation when it returns deleted set to true.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>type Map struct {
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	mu Mutex
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	<span class="comment">// read contains the portion of the map&#39;s contents that are safe for</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// concurrent access (with or without mu held).</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	<span class="comment">// The read field itself is always safe to load, but must only be stored with</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// mu held.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	<span class="comment">// Entries stored in read may be updated concurrently without mu, but updating</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">// a previously-expunged entry requires that the entry be copied to the dirty</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// map and unexpunged with mu held.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	read atomic.Pointer[readOnly]
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">// dirty contains the portion of the map&#39;s contents that require mu to be</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// held. To ensure that the dirty map can be promoted to the read map quickly,</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// it also includes all of the non-expunged entries in the read map.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	<span class="comment">// Expunged entries are not stored in the dirty map. An expunged entry in the</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	<span class="comment">// clean map must be unexpunged and added to the dirty map before a new value</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">// can be stored to it.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// If the dirty map is nil, the next write to the map will initialize it by</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// making a shallow copy of the clean map, omitting stale entries.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	dirty map[any]*entry
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// misses counts the number of loads since the read map was last updated that</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">// needed to lock mu to determine whether the key was present.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	<span class="comment">// Once enough misses have occurred to cover the cost of copying the dirty</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	<span class="comment">// map, the dirty map will be promoted to the read map (in the unamended</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">// state) and the next store to the map will make a new dirty copy.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	misses int
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// readOnly is an immutable struct stored atomically in the Map.read field.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>type readOnly struct {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	m       map[any]*entry
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	amended bool <span class="comment">// true if the dirty map contains some key not in m.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// expunged is an arbitrary pointer that marks entries which have been deleted</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// from the dirty map.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>var expunged = new(any)
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// An entry is a slot in the map corresponding to a particular key.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>type entry struct {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	<span class="comment">// p points to the interface{} value stored for the entry.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// If p == nil, the entry has been deleted, and either m.dirty == nil or</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	<span class="comment">// m.dirty[key] is e.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// If p == expunged, the entry has been deleted, m.dirty != nil, and the entry</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// is missing from m.dirty.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// Otherwise, the entry is valid and recorded in m.read.m[key] and, if m.dirty</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	<span class="comment">// != nil, in m.dirty[key].</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">// An entry can be deleted by atomic replacement with nil: when m.dirty is</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// next created, it will atomically replace nil with expunged and leave</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// m.dirty[key] unset.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// An entry&#39;s associated value can be updated by atomic replacement, provided</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// p != expunged. If p == expunged, an entry&#39;s associated value can be updated</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// only after first setting m.dirty[key] = e so that lookups using the dirty</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// map find the entry.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	p atomic.Pointer[any]
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>func newEntry(i any) *entry {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	e := &amp;entry{}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	e.p.Store(&amp;i)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	return e
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>func (m *Map) loadReadOnly() readOnly {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	if p := m.read.Load(); p != nil {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		return *p
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	return readOnly{}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// Load returns the value stored in the map for a key, or nil if no</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// value is present.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// The ok result indicates whether value was found in the map.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>func (m *Map) Load(key any) (value any, ok bool) {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	read := m.loadReadOnly()
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	e, ok := read.m[key]
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	if !ok &amp;&amp; read.amended {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		m.mu.Lock()
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		<span class="comment">// Avoid reporting a spurious miss if m.dirty got promoted while we were</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		<span class="comment">// blocked on m.mu. (If further loads of the same key will not miss, it&#39;s</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		<span class="comment">// not worth copying the dirty map for this key.)</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		read = m.loadReadOnly()
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		e, ok = read.m[key]
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		if !ok &amp;&amp; read.amended {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>			e, ok = m.dirty[key]
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			<span class="comment">// Regardless of whether the entry was present, record a miss: this key</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>			<span class="comment">// will take the slow path until the dirty map is promoted to the read</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			<span class="comment">// map.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>			m.missLocked()
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		m.mu.Unlock()
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	if !ok {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		return nil, false
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	return e.load()
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>func (e *entry) load() (value any, ok bool) {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	p := e.p.Load()
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	if p == nil || p == expunged {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		return nil, false
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	return *p, true
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">// Store sets the value for a key.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>func (m *Map) Store(key, value any) {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	_, _ = m.Swap(key, value)
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// tryCompareAndSwap compare the entry with the given old value and swaps</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// it with a new value if the entry is equal to the old value, and the entry</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// has not been expunged.</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// If the entry is expunged, tryCompareAndSwap returns false and leaves</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">// the entry unchanged.</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>func (e *entry) tryCompareAndSwap(old, new any) bool {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	p := e.p.Load()
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	if p == nil || p == expunged || *p != old {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		return false
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	<span class="comment">// Copy the interface after the first load to make this method more amenable</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	<span class="comment">// to escape analysis: if the comparison fails from the start, we shouldn&#39;t</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	<span class="comment">// bother heap-allocating an interface value to store.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	nc := new
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	for {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		if e.p.CompareAndSwap(p, &amp;nc) {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>			return true
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		p = e.p.Load()
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		if p == nil || p == expunged || *p != old {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>			return false
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// unexpungeLocked ensures that the entry is not marked as expunged.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// If the entry was previously expunged, it must be added to the dirty map</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// before m.mu is unlocked.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>func (e *entry) unexpungeLocked() (wasExpunged bool) {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	return e.p.CompareAndSwap(expunged, nil)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// swapLocked unconditionally swaps a value into the entry.</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// The entry must be known not to be expunged.</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>func (e *entry) swapLocked(i *any) *any {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	return e.p.Swap(i)
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// LoadOrStore returns the existing value for the key if present.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// Otherwise, it stores and returns the given value.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// The loaded result is true if the value was loaded, false if stored.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>func (m *Map) LoadOrStore(key, value any) (actual any, loaded bool) {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	<span class="comment">// Avoid locking if it&#39;s a clean hit.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	read := m.loadReadOnly()
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	if e, ok := read.m[key]; ok {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		actual, loaded, ok := e.tryLoadOrStore(value)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		if ok {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>			return actual, loaded
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	m.mu.Lock()
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	read = m.loadReadOnly()
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	if e, ok := read.m[key]; ok {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		if e.unexpungeLocked() {
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>			m.dirty[key] = e
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		actual, loaded, _ = e.tryLoadOrStore(value)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	} else if e, ok := m.dirty[key]; ok {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		actual, loaded, _ = e.tryLoadOrStore(value)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		m.missLocked()
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	} else {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		if !read.amended {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>			<span class="comment">// We&#39;re adding the first new key to the dirty map.</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			<span class="comment">// Make sure it is allocated and mark the read-only map as incomplete.</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>			m.dirtyLocked()
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			m.read.Store(&amp;readOnly{m: read.m, amended: true})
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		m.dirty[key] = newEntry(value)
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		actual, loaded = value, false
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	m.mu.Unlock()
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	return actual, loaded
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// tryLoadOrStore atomically loads or stores a value if the entry is not</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span><span class="comment">// expunged.</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">// If the entry is expunged, tryLoadOrStore leaves the entry unchanged and</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// returns with ok==false.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>func (e *entry) tryLoadOrStore(i any) (actual any, loaded, ok bool) {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	p := e.p.Load()
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	if p == expunged {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		return nil, false, false
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	if p != nil {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		return *p, true, true
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	<span class="comment">// Copy the interface after the first load to make this method more amenable</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	<span class="comment">// to escape analysis: if we hit the &#34;load&#34; path or the entry is expunged, we</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	<span class="comment">// shouldn&#39;t bother heap-allocating.</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	ic := i
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	for {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		if e.p.CompareAndSwap(nil, &amp;ic) {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>			return i, false, true
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		p = e.p.Load()
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		if p == expunged {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>			return nil, false, false
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		if p != nil {
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>			return *p, true, true
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// LoadAndDelete deletes the value for a key, returning the previous value if any.</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// The loaded result reports whether the key was present.</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>func (m *Map) LoadAndDelete(key any) (value any, loaded bool) {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	read := m.loadReadOnly()
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	e, ok := read.m[key]
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	if !ok &amp;&amp; read.amended {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		m.mu.Lock()
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		read = m.loadReadOnly()
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		e, ok = read.m[key]
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		if !ok &amp;&amp; read.amended {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>			e, ok = m.dirty[key]
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>			delete(m.dirty, key)
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>			<span class="comment">// Regardless of whether the entry was present, record a miss: this key</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>			<span class="comment">// will take the slow path until the dirty map is promoted to the read</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			<span class="comment">// map.</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>			m.missLocked()
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		m.mu.Unlock()
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	if ok {
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		return e.delete()
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	return nil, false
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">// Delete deletes the value for a key.</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>func (m *Map) Delete(key any) {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	m.LoadAndDelete(key)
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>func (e *entry) delete() (value any, ok bool) {
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	for {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		p := e.p.Load()
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		if p == nil || p == expunged {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>			return nil, false
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		if e.p.CompareAndSwap(p, nil) {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>			return *p, true
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">// trySwap swaps a value if the entry has not been expunged.</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">// If the entry is expunged, trySwap returns false and leaves the entry</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span><span class="comment">// unchanged.</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>func (e *entry) trySwap(i *any) (*any, bool) {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	for {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		p := e.p.Load()
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		if p == expunged {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>			return nil, false
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		if e.p.CompareAndSwap(p, i) {
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>			return p, true
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">// Swap swaps the value for a key and returns the previous value if any.</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">// The loaded result reports whether the key was present.</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="selection">func (m *Map) Swap(key, value any) (previous any, loaded bool)</span> {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	read := m.loadReadOnly()
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	if e, ok := read.m[key]; ok {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		if v, ok := e.trySwap(&amp;value); ok {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>			if v == nil {
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>				return nil, false
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>			}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>			return *v, true
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	m.mu.Lock()
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	read = m.loadReadOnly()
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	if e, ok := read.m[key]; ok {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		if e.unexpungeLocked() {
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>			<span class="comment">// The entry was previously expunged, which implies that there is a</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>			<span class="comment">// non-nil dirty map and this entry is not in it.</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>			m.dirty[key] = e
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		}
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		if v := e.swapLocked(&amp;value); v != nil {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>			loaded = true
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>			previous = *v
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	} else if e, ok := m.dirty[key]; ok {
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		if v := e.swapLocked(&amp;value); v != nil {
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>			loaded = true
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>			previous = *v
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	} else {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		if !read.amended {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>			<span class="comment">// We&#39;re adding the first new key to the dirty map.</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>			<span class="comment">// Make sure it is allocated and mark the read-only map as incomplete.</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			m.dirtyLocked()
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>			m.read.Store(&amp;readOnly{m: read.m, amended: true})
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		m.dirty[key] = newEntry(value)
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	m.mu.Unlock()
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	return previous, loaded
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// CompareAndSwap swaps the old and new values for key</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="comment">// if the value stored in the map is equal to old.</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">// The old value must be of a comparable type.</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>func (m *Map) CompareAndSwap(key, old, new any) bool {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	read := m.loadReadOnly()
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	if e, ok := read.m[key]; ok {
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>		return e.tryCompareAndSwap(old, new)
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	} else if !read.amended {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		return false <span class="comment">// No existing value for key.</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	m.mu.Lock()
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	defer m.mu.Unlock()
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	read = m.loadReadOnly()
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	swapped := false
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	if e, ok := read.m[key]; ok {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		swapped = e.tryCompareAndSwap(old, new)
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	} else if e, ok := m.dirty[key]; ok {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		swapped = e.tryCompareAndSwap(old, new)
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		<span class="comment">// We needed to lock mu in order to load the entry for key,</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>		<span class="comment">// and the operation didn&#39;t change the set of keys in the map</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>		<span class="comment">// (so it would be made more efficient by promoting the dirty</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		<span class="comment">// map to read-only).</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		<span class="comment">// Count it as a miss so that we will eventually switch to the</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		<span class="comment">// more efficient steady state.</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>		m.missLocked()
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	}
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	return swapped
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span><span class="comment">// CompareAndDelete deletes the entry for key if its value is equal to old.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span><span class="comment">// The old value must be of a comparable type.</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span><span class="comment">// If there is no current value for key in the map, CompareAndDelete</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span><span class="comment">// returns false (even if the old value is the nil interface value).</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>func (m *Map) CompareAndDelete(key, old any) (deleted bool) {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	read := m.loadReadOnly()
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	e, ok := read.m[key]
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	if !ok &amp;&amp; read.amended {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		m.mu.Lock()
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		read = m.loadReadOnly()
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		e, ok = read.m[key]
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		if !ok &amp;&amp; read.amended {
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			e, ok = m.dirty[key]
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>			<span class="comment">// Don&#39;t delete key from m.dirty: we still need to do the “compare” part</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>			<span class="comment">// of the operation. The entry will eventually be expunged when the</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>			<span class="comment">// dirty map is promoted to the read map.</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>			<span class="comment">// Regardless of whether the entry was present, record a miss: this key</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>			<span class="comment">// will take the slow path until the dirty map is promoted to the read</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>			<span class="comment">// map.</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>			m.missLocked()
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		}
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		m.mu.Unlock()
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	for ok {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		p := e.p.Load()
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		if p == nil || p == expunged || *p != old {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>			return false
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		if e.p.CompareAndSwap(p, nil) {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			return true
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	}
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	return false
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span><span class="comment">// Range calls f sequentially for each key and value present in the map.</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span><span class="comment">// If f returns false, range stops the iteration.</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span><span class="comment">// Range does not necessarily correspond to any consistent snapshot of the Map&#39;s</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span><span class="comment">// contents: no key will be visited more than once, but if the value for any key</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span><span class="comment">// is stored or deleted concurrently (including by f), Range may reflect any</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span><span class="comment">// mapping for that key from any point during the Range call. Range does not</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span><span class="comment">// block other methods on the receiver; even f itself may call any method on m.</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span><span class="comment">// Range may be O(N) with the number of elements in the map even if f returns</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span><span class="comment">// false after a constant number of calls.</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>func (m *Map) Range(f func(key, value any) bool) {
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	<span class="comment">// We need to be able to iterate over all of the keys that were already</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	<span class="comment">// present at the start of the call to Range.</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	<span class="comment">// If read.amended is false, then read.m satisfies that property without</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	<span class="comment">// requiring us to hold m.mu for a long time.</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	read := m.loadReadOnly()
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	if read.amended {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		<span class="comment">// m.dirty contains keys not in read.m. Fortunately, Range is already O(N)</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		<span class="comment">// (assuming the caller does not break out early), so a call to Range</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		<span class="comment">// amortizes an entire copy of the map: we can promote the dirty copy</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		<span class="comment">// immediately!</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		m.mu.Lock()
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		read = m.loadReadOnly()
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		if read.amended {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>			read = readOnly{m: m.dirty}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>			copyRead := read
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>			m.read.Store(&amp;copyRead)
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>			m.dirty = nil
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>			m.misses = 0
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		}
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		m.mu.Unlock()
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	for k, e := range read.m {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		v, ok := e.load()
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		if !ok {
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>			continue
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		}
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>		if !f(k, v) {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>			break
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>		}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	}
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>}
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>func (m *Map) missLocked() {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	m.misses++
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	if m.misses &lt; len(m.dirty) {
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		return
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	}
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	m.read.Store(&amp;readOnly{m: m.dirty})
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	m.dirty = nil
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	m.misses = 0
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>}
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>func (m *Map) dirtyLocked() {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	if m.dirty != nil {
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		return
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	}
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	read := m.loadReadOnly()
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	m.dirty = make(map[any]*entry, len(read.m))
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	for k, e := range read.m {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		if !e.tryExpungeLocked() {
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>			m.dirty[k] = e
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		}
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>func (e *entry) tryExpungeLocked() (isExpunged bool) {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	p := e.p.Load()
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	for p == nil {
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		if e.p.CompareAndSwap(nil, expunged) {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>			return true
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		}
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		p = e.p.Load()
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	}
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	return p == expunged
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>}
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>
</pre><p><a href="map.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
