<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/sync/waitgroup.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./waitgroup.go?s=1606:1641#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/sync">sync</a>/<span class="text-muted">waitgroup.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/sync">sync</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package sync
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;internal/race&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;unsafe&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>)
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// A WaitGroup waits for a collection of goroutines to finish.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// The main goroutine calls Add to set the number of</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// goroutines to wait for. Then each of the goroutines</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// runs and calls Done when finished. At the same time,</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// Wait can be used to block until all goroutines have finished.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// A WaitGroup must not be copied after first use.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// In the terminology of the Go memory model, a call to Done</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// “synchronizes before” the return of any Wait call that it unblocks.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>type WaitGroup struct {
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	noCopy noCopy
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	state atomic.Uint64 <span class="comment">// high 32 bits are counter, low 32 bits are waiter count.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	sema  uint32
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>}
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// Add adds delta, which may be negative, to the WaitGroup counter.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// If the counter becomes zero, all goroutines blocked on Wait are released.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// If the counter goes negative, Add panics.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// Note that calls with a positive delta that occur when the counter is zero</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// must happen before a Wait. Calls with a negative delta, or calls with a</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// positive delta that start when the counter is greater than zero, may happen</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// at any time.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// Typically this means the calls to Add should execute before the statement</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// creating the goroutine or other event to be waited for.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// If a WaitGroup is reused to wait for several independent sets of events,</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// new Add calls must happen after all previous Wait calls have returned.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// See the WaitGroup example.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="selection">func (wg *WaitGroup) Add(delta int)</span> {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	if race.Enabled {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		if delta &lt; 0 {
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>			<span class="comment">// Synchronize decrements with Wait.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>			race.ReleaseMerge(unsafe.Pointer(wg))
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		}
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		race.Disable()
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>		defer race.Enable()
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	state := wg.state.Add(uint64(delta) &lt;&lt; 32)
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	v := int32(state &gt;&gt; 32)
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	w := uint32(state)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	if race.Enabled &amp;&amp; delta &gt; 0 &amp;&amp; v == int32(delta) {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		<span class="comment">// The first increment must be synchronized with Wait.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		<span class="comment">// Need to model this as a read, because there can be</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		<span class="comment">// several concurrent wg.counter transitions from 0.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		race.Read(unsafe.Pointer(&amp;wg.sema))
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	if v &lt; 0 {
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		panic(&#34;sync: negative WaitGroup counter&#34;)
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	if w != 0 &amp;&amp; delta &gt; 0 &amp;&amp; v == int32(delta) {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		panic(&#34;sync: WaitGroup misuse: Add called concurrently with Wait&#34;)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	if v &gt; 0 || w == 0 {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		return
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	<span class="comment">// This goroutine has set counter to 0 when waiters &gt; 0.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">// Now there can&#39;t be concurrent mutations of state:</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// - Adds must not happen concurrently with Wait,</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">// - Wait does not increment waiters if it sees counter == 0.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// Still do a cheap sanity check to detect WaitGroup misuse.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	if wg.state.Load() != state {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		panic(&#34;sync: WaitGroup misuse: Add called concurrently with Wait&#34;)
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// Reset waiters count to 0.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	wg.state.Store(0)
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	for ; w != 0; w-- {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		runtime_Semrelease(&amp;wg.sema, false, 0)
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// Done decrements the WaitGroup counter by one.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>func (wg *WaitGroup) Done() {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	wg.Add(-1)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// Wait blocks until the WaitGroup counter is zero.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>func (wg *WaitGroup) Wait() {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	if race.Enabled {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		race.Disable()
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	for {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		state := wg.state.Load()
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		v := int32(state &gt;&gt; 32)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		w := uint32(state)
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		if v == 0 {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>			<span class="comment">// Counter is 0, no need to wait.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>			if race.Enabled {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>				race.Enable()
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>				race.Acquire(unsafe.Pointer(wg))
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>			return
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		<span class="comment">// Increment waiters count.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		if wg.state.CompareAndSwap(state, state+1) {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>			if race.Enabled &amp;&amp; w == 0 {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>				<span class="comment">// Wait must be synchronized with the first Add.</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>				<span class="comment">// Need to model this is as a write to race with the read in Add.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>				<span class="comment">// As a consequence, can do the write only for the first waiter,</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>				<span class="comment">// otherwise concurrent Waits will race with each other.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>				race.Write(unsafe.Pointer(&amp;wg.sema))
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>			}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>			runtime_Semacquire(&amp;wg.sema)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>			if wg.state.Load() != 0 {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>				panic(&#34;sync: WaitGroup is reused before previous Wait has returned&#34;)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>			}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			if race.Enabled {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>				race.Enable()
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>				race.Acquire(unsafe.Pointer(wg))
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			return
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
</pre><p><a href="waitgroup.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
