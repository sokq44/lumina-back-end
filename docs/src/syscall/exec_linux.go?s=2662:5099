<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/syscall/exec_linux.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./exec_linux.go?s=2662:5099#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/syscall">syscall</a>/<span class="text-muted">exec_linux.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/syscall">syscall</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">//go:build linux</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package syscall
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;internal/itoa&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;runtime&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;unsafe&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>)
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// Linux unshare/clone/clone2/clone3 flags, architecture-independent,</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// copied from linux/sched.h.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>const (
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	CLONE_VM             = 0x00000100 <span class="comment">// set if VM shared between processes</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	CLONE_FS             = 0x00000200 <span class="comment">// set if fs info shared between processes</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	CLONE_FILES          = 0x00000400 <span class="comment">// set if open files shared between processes</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	CLONE_SIGHAND        = 0x00000800 <span class="comment">// set if signal handlers and blocked signals shared</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	CLONE_PIDFD          = 0x00001000 <span class="comment">// set if a pidfd should be placed in parent</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	CLONE_PTRACE         = 0x00002000 <span class="comment">// set if we want to let tracing continue on the child too</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	CLONE_VFORK          = 0x00004000 <span class="comment">// set if the parent wants the child to wake it up on mm_release</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	CLONE_PARENT         = 0x00008000 <span class="comment">// set if we want to have the same parent as the cloner</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	CLONE_THREAD         = 0x00010000 <span class="comment">// Same thread group?</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	CLONE_NEWNS          = 0x00020000 <span class="comment">// New mount namespace group</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	CLONE_SYSVSEM        = 0x00040000 <span class="comment">// share system V SEM_UNDO semantics</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	CLONE_SETTLS         = 0x00080000 <span class="comment">// create a new TLS for the child</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	CLONE_PARENT_SETTID  = 0x00100000 <span class="comment">// set the TID in the parent</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	CLONE_CHILD_CLEARTID = 0x00200000 <span class="comment">// clear the TID in the child</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	CLONE_DETACHED       = 0x00400000 <span class="comment">// Unused, ignored</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	CLONE_UNTRACED       = 0x00800000 <span class="comment">// set if the tracing process can&#39;t force CLONE_PTRACE on this clone</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	CLONE_CHILD_SETTID   = 0x01000000 <span class="comment">// set the TID in the child</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	CLONE_NEWCGROUP      = 0x02000000 <span class="comment">// New cgroup namespace</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	CLONE_NEWUTS         = 0x04000000 <span class="comment">// New utsname namespace</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	CLONE_NEWIPC         = 0x08000000 <span class="comment">// New ipc namespace</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	CLONE_NEWUSER        = 0x10000000 <span class="comment">// New user namespace</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	CLONE_NEWPID         = 0x20000000 <span class="comment">// New pid namespace</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	CLONE_NEWNET         = 0x40000000 <span class="comment">// New network namespace</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	CLONE_IO             = 0x80000000 <span class="comment">// Clone io context</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	<span class="comment">// Flags for the clone3() syscall.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	CLONE_CLEAR_SIGHAND = 0x100000000 <span class="comment">// Clear any signal handler and reset to SIG_DFL.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	CLONE_INTO_CGROUP   = 0x200000000 <span class="comment">// Clone into a specific cgroup given the right permissions.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	<span class="comment">// Cloning flags intersect with CSIGNAL so can be used with unshare and clone3</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">// syscalls only:</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	CLONE_NEWTIME = 0x00000080 <span class="comment">// New time namespace</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>)
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// SysProcIDMap holds Container ID to Host ID mappings used for User Namespaces in Linux.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// See user_namespaces(7).</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>type SysProcIDMap struct {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	ContainerID int <span class="comment">// Container ID.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	HostID      int <span class="comment">// Host ID.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	Size        int <span class="comment">// Size.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="selection">type SysProcAttr struct {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	Chroot     string      </span><span class="selection-comment">// Chroot.</span><span class="selection">
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	Credential *Credential </span><span class="selection-comment">// Credential.</span><span class="selection">
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Ptrace tells the child to call ptrace(PTRACE_TRACEME).</span><span class="selection">
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Call runtime.LockOSThread before starting a process with this set,</span><span class="selection">
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	</span><span class="selection-comment">// and don&#39;t call UnlockOSThread until done with PtraceSyscall calls.</span><span class="selection">
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	Ptrace bool
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	Setsid bool </span><span class="selection-comment">// Create session.</span><span class="selection">
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Setpgid sets the process group ID of the child to Pgid,</span><span class="selection">
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	</span><span class="selection-comment">// or, if Pgid == 0, to the new child&#39;s process ID.</span><span class="selection">
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	Setpgid bool
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Setctty sets the controlling terminal of the child to</span><span class="selection">
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	</span><span class="selection-comment">// file descriptor Ctty. Ctty must be a descriptor number</span><span class="selection">
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	</span><span class="selection-comment">// in the child process: an index into ProcAttr.Files.</span><span class="selection">
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	</span><span class="selection-comment">// This is only meaningful if Setsid is true.</span><span class="selection">
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	Setctty bool
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	Noctty  bool </span><span class="selection-comment">// Detach fd 0 from controlling terminal.</span><span class="selection">
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	Ctty    int  </span><span class="selection-comment">// Controlling TTY fd.</span><span class="selection">
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Foreground places the child process group in the foreground.</span><span class="selection">
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	</span><span class="selection-comment">// This implies Setpgid. The Ctty field must be set to</span><span class="selection">
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	</span><span class="selection-comment">// the descriptor of the controlling TTY.</span><span class="selection">
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Unlike Setctty, in this case Ctty must be a descriptor</span><span class="selection">
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	</span><span class="selection-comment">// number in the parent process.</span><span class="selection">
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	Foreground bool
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	Pgid       int </span><span class="selection-comment">// Child&#39;s process group ID if Setpgid.</span><span class="selection">
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Pdeathsig, if non-zero, is a signal that the kernel will send to</span><span class="selection">
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	</span><span class="selection-comment">// the child process when the creating thread dies. Note that the signal</span><span class="selection">
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	</span><span class="selection-comment">// is sent on thread termination, which may happen before process termination.</span><span class="selection">
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	</span><span class="selection-comment">// There are more details at https://go.dev/issue/27505.</span><span class="selection">
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	Pdeathsig    Signal
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	Cloneflags   uintptr        </span><span class="selection-comment">// Flags for clone calls.</span><span class="selection">
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	Unshareflags uintptr        </span><span class="selection-comment">// Flags for unshare calls.</span><span class="selection">
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	UidMappings  []SysProcIDMap </span><span class="selection-comment">// User ID mappings for user namespaces.</span><span class="selection">
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	GidMappings  []SysProcIDMap </span><span class="selection-comment">// Group ID mappings for user namespaces.</span><span class="selection">
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	</span><span class="selection-comment">// GidMappingsEnableSetgroups enabling setgroups syscall.</span><span class="selection">
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	</span><span class="selection-comment">// If false, then setgroups syscall will be disabled for the child process.</span><span class="selection">
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	</span><span class="selection-comment">// This parameter is no-op if GidMappings == nil. Otherwise for unprivileged</span><span class="selection">
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	</span><span class="selection-comment">// users this should be set to false for mappings work.</span><span class="selection">
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	GidMappingsEnableSetgroups bool
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	AmbientCaps                []uintptr </span><span class="selection-comment">// Ambient capabilities.</span><span class="selection">
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	UseCgroupFD                bool      </span><span class="selection-comment">// Whether to make use of the CgroupFD field.</span><span class="selection">
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	CgroupFD                   int       </span><span class="selection-comment">// File descriptor of a cgroup to put the new process into.</span><span class="selection">
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	</span><span class="selection-comment">// PidFD, if not nil, is used to store the pidfd of a child, if the</span><span class="selection">
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	</span><span class="selection-comment">// functionality is supported by the kernel, or -1. Note *PidFD is</span><span class="selection">
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	</span><span class="selection-comment">// changed only if the process starts successfully.</span><span class="selection">
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	PidFD *int
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>}</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>var (
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	none  = [...]byte{&#39;n&#39;, &#39;o&#39;, &#39;n&#39;, &#39;e&#39;, 0}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	slash = [...]byte{&#39;/&#39;, 0}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	forceClone3 = false <span class="comment">// Used by unit tests only.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>)
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// Implemented in runtime package.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>func runtime_BeforeFork()
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>func runtime_AfterFork()
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>func runtime_AfterForkInChild()
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// Fork, dup fd onto 0..len(fd), and exec(argv0, argvv, envv) in child.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// If a dup or exec fails, write the errno error to pipe.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// (Pipe is close-on-exec so if exec succeeds, it will be closed.)</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// In the child, this function must not acquire any locks, because</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// they might have been locked at the time of the fork. This means</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// no rescheduling, no malloc calls, and no new stack segments.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// For the same reason compiler does not race instrument it.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// The calls to RawSyscall are okay because they are assembly</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// functions that do not grow the stack.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">//go:norace</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr *ProcAttr, sys *SysProcAttr, pipe int) (pid int, err Errno) {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// Set up and fork. This returns immediately in the parent or</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// if there&#39;s an error.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	upid, pidfd, err, mapPipe, locked := forkAndExecInChild1(argv0, argv, envv, chroot, dir, attr, sys, pipe)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	if locked {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		runtime_AfterFork()
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	if err != 0 {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		return 0, err
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">// parent; return PID</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	pid = int(upid)
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	if sys.PidFD != nil {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		*sys.PidFD = int(pidfd)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	if sys.UidMappings != nil || sys.GidMappings != nil {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		Close(mapPipe[0])
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		var err2 Errno
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		<span class="comment">// uid/gid mappings will be written after fork and unshare(2) for user</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		<span class="comment">// namespaces.</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		if sys.Unshareflags&amp;CLONE_NEWUSER == 0 {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>			if err := writeUidGidMappings(pid, sys); err != nil {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>				err2 = err.(Errno)
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>			}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		RawSyscall(SYS_WRITE, uintptr(mapPipe[1]), uintptr(unsafe.Pointer(&amp;err2)), unsafe.Sizeof(err2))
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		Close(mapPipe[1])
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	return pid, 0
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>const _LINUX_CAPABILITY_VERSION_3 = 0x20080522
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>type capHeader struct {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	version uint32
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	pid     int32
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>type capData struct {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	effective   uint32
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	permitted   uint32
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	inheritable uint32
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>type caps struct {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	hdr  capHeader
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	data [2]capData
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// See CAP_TO_INDEX in linux/capability.h:</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>func capToIndex(cap uintptr) uintptr { return cap &gt;&gt; 5 }
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// See CAP_TO_MASK in linux/capability.h:</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>func capToMask(cap uintptr) uint32 { return 1 &lt;&lt; uint(cap&amp;31) }
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// cloneArgs holds arguments for clone3 Linux syscall.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>type cloneArgs struct {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	flags      uint64 <span class="comment">// Flags bit mask</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	pidFD      uint64 <span class="comment">// Where to store PID file descriptor (int *)</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	childTID   uint64 <span class="comment">// Where to store child TID, in child&#39;s memory (pid_t *)</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	parentTID  uint64 <span class="comment">// Where to store child TID, in parent&#39;s memory (pid_t *)</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	exitSignal uint64 <span class="comment">// Signal to deliver to parent on child termination</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	stack      uint64 <span class="comment">// Pointer to lowest byte of stack</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	stackSize  uint64 <span class="comment">// Size of stack</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	tls        uint64 <span class="comment">// Location of new TLS</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	setTID     uint64 <span class="comment">// Pointer to a pid_t array (since Linux 5.5)</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	setTIDSize uint64 <span class="comment">// Number of elements in set_tid (since Linux 5.5)</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	cgroup     uint64 <span class="comment">// File descriptor for target cgroup of child (since Linux 5.7)</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// forkAndExecInChild1 implements the body of forkAndExecInChild up to</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// the parent&#39;s post-fork path. This is a separate function so we can</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">// separate the child&#39;s and parent&#39;s stack frames if we&#39;re using</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">// vfork.</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// This is go:noinline because the point is to keep the stack frames</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// of this and forkAndExecInChild separate.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">//go:noinline</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">//go:norace</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">//go:nocheckptr</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>func forkAndExecInChild1(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr *ProcAttr, sys *SysProcAttr, pipe int) (pid uintptr, pidfd int32, err1 Errno, mapPipe [2]int, locked bool) {
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	<span class="comment">// Defined in linux/prctl.h starting with Linux 4.3.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	const (
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		PR_CAP_AMBIENT       = 0x2f
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		PR_CAP_AMBIENT_RAISE = 0x2
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	<span class="comment">// vfork requires that the child not touch any of the parent&#39;s</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	<span class="comment">// active stack frames. Hence, the child does all post-fork</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	<span class="comment">// processing in this stack frame and never returns, while the</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	<span class="comment">// parent returns immediately from this frame and does all</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	<span class="comment">// post-fork processing in the outer frame.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	<span class="comment">// Declare all variables at top in case any</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	<span class="comment">// declarations require heap allocation (e.g., err2).</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	<span class="comment">// &#34;:=&#34; should not be used to declare any variable after</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	<span class="comment">// the call to runtime_BeforeFork.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	<span class="comment">// NOTE(bcmills): The allocation behavior described in the above comment</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	<span class="comment">// seems to lack a corresponding test, and it may be rendered invalid</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	<span class="comment">// by an otherwise-correct change in the compiler.</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	var (
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		err2                      Errno
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		nextfd                    int
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		i                         int
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		caps                      caps
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		fd1, flags                uintptr
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		puid, psetgroups, pgid    []byte
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		uidmap, setgroups, gidmap []byte
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		clone3                    *cloneArgs
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		pgrp                      int32
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		dirfd                     int
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		cred                      *Credential
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		ngroups, groups           uintptr
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		c                         uintptr
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	)
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	pidfd = -1
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	rlim := origRlimitNofile.Load()
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	if sys.UidMappings != nil {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		puid = []byte(&#34;/proc/self/uid_map\000&#34;)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		uidmap = formatIDMappings(sys.UidMappings)
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	if sys.GidMappings != nil {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		psetgroups = []byte(&#34;/proc/self/setgroups\000&#34;)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		pgid = []byte(&#34;/proc/self/gid_map\000&#34;)
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		if sys.GidMappingsEnableSetgroups {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>			setgroups = []byte(&#34;allow\000&#34;)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		} else {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>			setgroups = []byte(&#34;deny\000&#34;)
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		gidmap = formatIDMappings(sys.GidMappings)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	<span class="comment">// Record parent PID so child can test if it has died.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	ppid, _ := rawSyscallNoError(SYS_GETPID, 0, 0, 0)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	<span class="comment">// Guard against side effects of shuffling fds below.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	<span class="comment">// Make sure that nextfd is beyond any currently open files so</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	<span class="comment">// that we can&#39;t run the risk of overwriting any of them.</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	fd := make([]int, len(attr.Files))
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	nextfd = len(attr.Files)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	for i, ufd := range attr.Files {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		if nextfd &lt; int(ufd) {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>			nextfd = int(ufd)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		fd[i] = int(ufd)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	nextfd++
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	<span class="comment">// Allocate another pipe for parent to child communication for</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	<span class="comment">// synchronizing writing of User ID/Group ID mappings.</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	if sys.UidMappings != nil || sys.GidMappings != nil {
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		if err := forkExecPipe(mapPipe[:]); err != nil {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>			err1 = err.(Errno)
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>			return
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	flags = sys.Cloneflags
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	if sys.Cloneflags&amp;CLONE_NEWUSER == 0 &amp;&amp; sys.Unshareflags&amp;CLONE_NEWUSER == 0 {
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		flags |= CLONE_VFORK | CLONE_VM
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	if sys.PidFD != nil {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		flags |= CLONE_PIDFD
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	<span class="comment">// Whether to use clone3.</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	if sys.UseCgroupFD || flags&amp;CLONE_NEWTIME != 0 || forceClone3 {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		clone3 = &amp;cloneArgs{
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>			flags:      uint64(flags),
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>			exitSignal: uint64(SIGCHLD),
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		if sys.UseCgroupFD {
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>			clone3.flags |= CLONE_INTO_CGROUP
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>			clone3.cgroup = uint64(sys.CgroupFD)
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		if sys.PidFD != nil {
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>			clone3.pidFD = uint64(uintptr(unsafe.Pointer(&amp;pidfd)))
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	<span class="comment">// About to call fork.</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	<span class="comment">// No more allocation or calls of non-assembly functions.</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	runtime_BeforeFork()
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	locked = true
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	if clone3 != nil {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		pid, err1 = rawVforkSyscall(_SYS_clone3, uintptr(unsafe.Pointer(clone3)), unsafe.Sizeof(*clone3), 0)
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	} else {
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		flags |= uintptr(SIGCHLD)
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		if runtime.GOARCH == &#34;s390x&#34; {
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>			<span class="comment">// On Linux/s390, the first two arguments of clone(2) are swapped.</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>			pid, err1 = rawVforkSyscall(SYS_CLONE, 0, flags, uintptr(unsafe.Pointer(&amp;pidfd)))
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		} else {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>			pid, err1 = rawVforkSyscall(SYS_CLONE, flags, 0, uintptr(unsafe.Pointer(&amp;pidfd)))
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	if err1 != 0 || pid != 0 {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		<span class="comment">// If we&#39;re in the parent, we must return immediately</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		<span class="comment">// so we&#39;re not in the same stack frame as the child.</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		<span class="comment">// This can at most use the return PC, which the child</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		<span class="comment">// will not modify, and the results of</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		<span class="comment">// rawVforkSyscall, which must have been written after</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		<span class="comment">// the child was replaced.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		return
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	<span class="comment">// Fork succeeded, now in child.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	<span class="comment">// Enable the &#34;keep capabilities&#34; flag to set ambient capabilities later.</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	if len(sys.AmbientCaps) &gt; 0 {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		_, _, err1 = RawSyscall6(SYS_PRCTL, PR_SET_KEEPCAPS, 1, 0, 0, 0, 0)
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>			goto childerror
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	}
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	<span class="comment">// Wait for User ID/Group ID mappings to be written.</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	if sys.UidMappings != nil || sys.GidMappings != nil {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		if _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(mapPipe[1]), 0, 0); err1 != 0 {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>			goto childerror
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		}
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		pid, _, err1 = RawSyscall(SYS_READ, uintptr(mapPipe[0]), uintptr(unsafe.Pointer(&amp;err2)), unsafe.Sizeof(err2))
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			goto childerror
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		if pid != unsafe.Sizeof(err2) {
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>			err1 = EINVAL
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>			goto childerror
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>		}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		if err2 != 0 {
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>			err1 = err2
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>			goto childerror
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>		}
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	<span class="comment">// Session ID</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	if sys.Setsid {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		_, _, err1 = RawSyscall(SYS_SETSID, 0, 0, 0)
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>			goto childerror
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	<span class="comment">// Set process group</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	if sys.Setpgid || sys.Foreground {
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		<span class="comment">// Place child in process group.</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		_, _, err1 = RawSyscall(SYS_SETPGID, 0, uintptr(sys.Pgid), 0)
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>			goto childerror
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		}
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	if sys.Foreground {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>		pgrp = int32(sys.Pgid)
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		if pgrp == 0 {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>			pid, _ = rawSyscallNoError(SYS_GETPID, 0, 0, 0)
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>			pgrp = int32(pid)
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>		}
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		<span class="comment">// Place process group in foreground.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		_, _, err1 = RawSyscall(SYS_IOCTL, uintptr(sys.Ctty), uintptr(TIOCSPGRP), uintptr(unsafe.Pointer(&amp;pgrp)))
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>			goto childerror
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>		}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	}
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	<span class="comment">// Restore the signal mask. We do this after TIOCSPGRP to avoid</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	<span class="comment">// having the kernel send a SIGTTOU signal to the process group.</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	runtime_AfterForkInChild()
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	<span class="comment">// Unshare</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	if sys.Unshareflags != 0 {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		_, _, err1 = RawSyscall(SYS_UNSHARE, sys.Unshareflags, 0, 0)
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			goto childerror
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		if sys.Unshareflags&amp;CLONE_NEWUSER != 0 &amp;&amp; sys.GidMappings != nil {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>			dirfd = int(_AT_FDCWD)
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>			if fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&amp;psetgroups[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>				goto childerror
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>			}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>			pid, _, err1 = RawSyscall(SYS_WRITE, fd1, uintptr(unsafe.Pointer(&amp;setgroups[0])), uintptr(len(setgroups)))
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>			if err1 != 0 {
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>				goto childerror
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>			}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>			if _, _, err1 = RawSyscall(SYS_CLOSE, fd1, 0, 0); err1 != 0 {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>				goto childerror
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>			}
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>			if fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&amp;pgid[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>				goto childerror
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>			pid, _, err1 = RawSyscall(SYS_WRITE, fd1, uintptr(unsafe.Pointer(&amp;gidmap[0])), uintptr(len(gidmap)))
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>			if err1 != 0 {
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>				goto childerror
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>			}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>			if _, _, err1 = RawSyscall(SYS_CLOSE, fd1, 0, 0); err1 != 0 {
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>				goto childerror
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>			}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		if sys.Unshareflags&amp;CLONE_NEWUSER != 0 &amp;&amp; sys.UidMappings != nil {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>			dirfd = int(_AT_FDCWD)
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>			if fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&amp;puid[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>				goto childerror
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>			}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>			pid, _, err1 = RawSyscall(SYS_WRITE, fd1, uintptr(unsafe.Pointer(&amp;uidmap[0])), uintptr(len(uidmap)))
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>			if err1 != 0 {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>				goto childerror
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>			}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>			if _, _, err1 = RawSyscall(SYS_CLOSE, fd1, 0, 0); err1 != 0 {
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>				goto childerror
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>			}
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		<span class="comment">// The unshare system call in Linux doesn&#39;t unshare mount points</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		<span class="comment">// mounted with --shared. Systemd mounts / with --shared. For a</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		<span class="comment">// long discussion of the pros and cons of this see debian bug 739593.</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		<span class="comment">// The Go model of unsharing is more like Plan 9, where you ask</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		<span class="comment">// to unshare and the namespaces are unconditionally unshared.</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		<span class="comment">// To make this model work we must further mark / as MS_PRIVATE.</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		<span class="comment">// This is what the standard unshare command does.</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		if sys.Unshareflags&amp;CLONE_NEWNS == CLONE_NEWNS {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>			_, _, err1 = RawSyscall6(SYS_MOUNT, uintptr(unsafe.Pointer(&amp;none[0])), uintptr(unsafe.Pointer(&amp;slash[0])), 0, MS_REC|MS_PRIVATE, 0, 0)
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>			if err1 != 0 {
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>				goto childerror
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>			}
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		}
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	<span class="comment">// Chroot</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	if chroot != nil {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		_, _, err1 = RawSyscall(SYS_CHROOT, uintptr(unsafe.Pointer(chroot)), 0, 0)
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>			goto childerror
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		}
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	<span class="comment">// User and groups</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	if cred = sys.Credential; cred != nil {
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		ngroups = uintptr(len(cred.Groups))
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>		groups = uintptr(0)
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>		if ngroups &gt; 0 {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>			groups = uintptr(unsafe.Pointer(&amp;cred.Groups[0]))
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		if !(sys.GidMappings != nil &amp;&amp; !sys.GidMappingsEnableSetgroups &amp;&amp; ngroups == 0) &amp;&amp; !cred.NoSetGroups {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>			_, _, err1 = RawSyscall(_SYS_setgroups, ngroups, groups, 0)
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>			if err1 != 0 {
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>				goto childerror
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>			}
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		}
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		_, _, err1 = RawSyscall(sys_SETGID, uintptr(cred.Gid), 0, 0)
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>			goto childerror
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		_, _, err1 = RawSyscall(sys_SETUID, uintptr(cred.Uid), 0, 0)
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>			goto childerror
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	if len(sys.AmbientCaps) != 0 {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		<span class="comment">// Ambient capabilities were added in the 4.3 kernel,</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		<span class="comment">// so it is safe to always use _LINUX_CAPABILITY_VERSION_3.</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		caps.hdr.version = _LINUX_CAPABILITY_VERSION_3
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		if _, _, err1 = RawSyscall(SYS_CAPGET, uintptr(unsafe.Pointer(&amp;caps.hdr)), uintptr(unsafe.Pointer(&amp;caps.data[0])), 0); err1 != 0 {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>			goto childerror
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		for _, c = range sys.AmbientCaps {
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>			<span class="comment">// Add the c capability to the permitted and inheritable capability mask,</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>			<span class="comment">// otherwise we will not be able to add it to the ambient capability mask.</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>			caps.data[capToIndex(c)].permitted |= capToMask(c)
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>			caps.data[capToIndex(c)].inheritable |= capToMask(c)
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		}
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>		if _, _, err1 = RawSyscall(SYS_CAPSET, uintptr(unsafe.Pointer(&amp;caps.hdr)), uintptr(unsafe.Pointer(&amp;caps.data[0])), 0); err1 != 0 {
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>			goto childerror
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>		}
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		for _, c = range sys.AmbientCaps {
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>			_, _, err1 = RawSyscall6(SYS_PRCTL, PR_CAP_AMBIENT, uintptr(PR_CAP_AMBIENT_RAISE), c, 0, 0, 0)
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>			if err1 != 0 {
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>				goto childerror
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>			}
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		}
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	}
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	<span class="comment">// Chdir</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	if dir != nil {
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		_, _, err1 = RawSyscall(SYS_CHDIR, uintptr(unsafe.Pointer(dir)), 0, 0)
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>			goto childerror
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		}
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	<span class="comment">// Parent death signal</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	if sys.Pdeathsig != 0 {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		_, _, err1 = RawSyscall6(SYS_PRCTL, PR_SET_PDEATHSIG, uintptr(sys.Pdeathsig), 0, 0, 0, 0)
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>			goto childerror
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		}
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		<span class="comment">// Signal self if parent is already dead. This might cause a</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		<span class="comment">// duplicate signal in rare cases, but it won&#39;t matter when</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		<span class="comment">// using SIGKILL.</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>		pid, _ = rawSyscallNoError(SYS_GETPPID, 0, 0, 0)
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		if pid != ppid {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>			pid, _ = rawSyscallNoError(SYS_GETPID, 0, 0, 0)
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>			_, _, err1 = RawSyscall(SYS_KILL, pid, uintptr(sys.Pdeathsig), 0)
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>			if err1 != 0 {
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>				goto childerror
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>			}
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		}
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	<span class="comment">// Pass 1: look for fd[i] &lt; i and move those up above len(fd)</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	<span class="comment">// so that pass 2 won&#39;t stomp on an fd it needs later.</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	if pipe &lt; nextfd {
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		_, _, err1 = RawSyscall(SYS_DUP3, uintptr(pipe), uintptr(nextfd), O_CLOEXEC)
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>			goto childerror
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		}
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		pipe = nextfd
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		nextfd++
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	for i = 0; i &lt; len(fd); i++ {
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		if fd[i] &gt;= 0 &amp;&amp; fd[i] &lt; i {
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>			if nextfd == pipe { <span class="comment">// don&#39;t stomp on pipe</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>				nextfd++
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>			}
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>			_, _, err1 = RawSyscall(SYS_DUP3, uintptr(fd[i]), uintptr(nextfd), O_CLOEXEC)
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>			if err1 != 0 {
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>				goto childerror
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>			}
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>			fd[i] = nextfd
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>			nextfd++
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		}
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	}
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	<span class="comment">// Pass 2: dup fd[i] down onto i.</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	for i = 0; i &lt; len(fd); i++ {
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		if fd[i] == -1 {
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>			RawSyscall(SYS_CLOSE, uintptr(i), 0, 0)
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>			continue
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		}
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		if fd[i] == i {
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>			<span class="comment">// dup2(i, i) won&#39;t clear close-on-exec flag on Linux,</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>			<span class="comment">// probably not elsewhere either.</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>			_, _, err1 = RawSyscall(fcntl64Syscall, uintptr(fd[i]), F_SETFD, 0)
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>			if err1 != 0 {
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>				goto childerror
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>			}
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>			continue
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>		}
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>		<span class="comment">// The new fd is created NOT close-on-exec,</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		<span class="comment">// which is exactly what we want.</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>		_, _, err1 = RawSyscall(SYS_DUP3, uintptr(fd[i]), uintptr(i), 0)
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>			goto childerror
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		}
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	}
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	<span class="comment">// By convention, we don&#39;t close-on-exec the fds we are</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	<span class="comment">// started with, so if len(fd) &lt; 3, close 0, 1, 2 as needed.</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	<span class="comment">// Programs that know they inherit fds &gt;= 3 will need</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	<span class="comment">// to set them close-on-exec.</span>
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	for i = len(fd); i &lt; 3; i++ {
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>		RawSyscall(SYS_CLOSE, uintptr(i), 0, 0)
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	}
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	<span class="comment">// Detach fd 0 from tty</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	if sys.Noctty {
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>		_, _, err1 = RawSyscall(SYS_IOCTL, 0, uintptr(TIOCNOTTY), 0)
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>			goto childerror
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		}
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	<span class="comment">// Set the controlling TTY to Ctty</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	if sys.Setctty {
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		_, _, err1 = RawSyscall(SYS_IOCTL, uintptr(sys.Ctty), uintptr(TIOCSCTTY), 1)
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>			goto childerror
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		}
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	}
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	<span class="comment">// Restore original rlimit.</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	if rlim != nil {
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		rawSetrlimit(RLIMIT_NOFILE, rlim)
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	}
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	<span class="comment">// Enable tracing if requested.</span>
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	<span class="comment">// Do this right before exec so that we don&#39;t unnecessarily trace the runtime</span>
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	<span class="comment">// setting up after the fork. See issue #21428.</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	if sys.Ptrace {
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		_, _, err1 = RawSyscall(SYS_PTRACE, uintptr(PTRACE_TRACEME), 0, 0)
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		if err1 != 0 {
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>			goto childerror
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		}
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	<span class="comment">// Time to exec.</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	_, _, err1 = RawSyscall(SYS_EXECVE,
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		uintptr(unsafe.Pointer(argv0)),
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		uintptr(unsafe.Pointer(&amp;argv[0])),
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		uintptr(unsafe.Pointer(&amp;envv[0])))
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>childerror:
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	<span class="comment">// send error code on pipe</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	RawSyscall(SYS_WRITE, uintptr(pipe), uintptr(unsafe.Pointer(&amp;err1)), unsafe.Sizeof(err1))
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	for {
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		RawSyscall(SYS_EXIT, 253, 0, 0)
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	}
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>}
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>func formatIDMappings(idMap []SysProcIDMap) []byte {
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	var data []byte
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	for _, im := range idMap {
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		data = append(data, itoa.Itoa(im.ContainerID)+&#34; &#34;+itoa.Itoa(im.HostID)+&#34; &#34;+itoa.Itoa(im.Size)+&#34;\n&#34;...)
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	}
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	return data
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>}
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>
<span id="L666" class="ln">   666&nbsp;&nbsp;</span><span class="comment">// writeIDMappings writes the user namespace User ID or Group ID mappings to the specified path.</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>func writeIDMappings(path string, idMap []SysProcIDMap) error {
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	fd, err := Open(path, O_RDWR, 0)
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	if err != nil {
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>		return err
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	}
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	if _, err := Write(fd, formatIDMappings(idMap)); err != nil {
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		Close(fd)
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		return err
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>	}
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	if err := Close(fd); err != nil {
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		return err
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	}
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	return nil
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>}
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span><span class="comment">// writeSetgroups writes to /proc/PID/setgroups &#34;deny&#34; if enable is false</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span><span class="comment">// and &#34;allow&#34; if enable is true.</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span><span class="comment">// This is needed since kernel 3.19, because you can&#39;t write gid_map without</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span><span class="comment">// disabling setgroups() system call.</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>func writeSetgroups(pid int, enable bool) error {
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	sgf := &#34;/proc/&#34; + itoa.Itoa(pid) + &#34;/setgroups&#34;
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>	fd, err := Open(sgf, O_RDWR, 0)
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	if err != nil {
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>		return err
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>	}
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	var data []byte
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	if enable {
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>		data = []byte(&#34;allow&#34;)
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>	} else {
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		data = []byte(&#34;deny&#34;)
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>	}
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	if _, err := Write(fd, data); err != nil {
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>		Close(fd)
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>		return err
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	}
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	return Close(fd)
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>}
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span><span class="comment">// writeUidGidMappings writes User ID and Group ID mappings for user namespaces</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span><span class="comment">// for a process and it is called from the parent process.</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>func writeUidGidMappings(pid int, sys *SysProcAttr) error {
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	if sys.UidMappings != nil {
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>		uidf := &#34;/proc/&#34; + itoa.Itoa(pid) + &#34;/uid_map&#34;
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>		if err := writeIDMappings(uidf, sys.UidMappings); err != nil {
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>			return err
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>		}
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	}
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	if sys.GidMappings != nil {
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		<span class="comment">// If the kernel is too old to support /proc/PID/setgroups, writeSetGroups will return ENOENT; this is OK.</span>
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		if err := writeSetgroups(pid, sys.GidMappingsEnableSetgroups); err != nil &amp;&amp; err != ENOENT {
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>			return err
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		}
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		gidf := &#34;/proc/&#34; + itoa.Itoa(pid) + &#34;/gid_map&#34;
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>		if err := writeIDMappings(gidf, sys.GidMappings); err != nil {
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>			return err
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		}
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>	return nil
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>}
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>
</pre><p><a href="exec_linux.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
