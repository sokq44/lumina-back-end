<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/testing/benchmark.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./benchmark.go?s=10458:10878#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/testing">testing</a>/<span class="text-muted">benchmark.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/testing">testing</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package testing
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;flag&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;internal/sysinfo&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;runtime&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;unicode&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>)
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>func initBenchmarkFlags() {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	matchBenchmarks = flag.String(&#34;test.bench&#34;, &#34;&#34;, &#34;run only benchmarks matching `regexp`&#34;)
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	benchmarkMemory = flag.Bool(&#34;test.benchmem&#34;, false, &#34;print memory allocations for benchmarks&#34;)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	flag.Var(&amp;benchTime, &#34;test.benchtime&#34;, &#34;run each benchmark for duration `d` or N times if `d` is of the form Nx&#34;)
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>}
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>var (
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	matchBenchmarks *string
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	benchmarkMemory *bool
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	benchTime = durationOrCountFlag{d: 1 * time.Second} <span class="comment">// changed during test of testing package</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>type durationOrCountFlag struct {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	d         time.Duration
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	n         int
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	allowZero bool
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>}
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>func (f *durationOrCountFlag) String() string {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	if f.n &gt; 0 {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		return fmt.Sprintf(&#34;%dx&#34;, f.n)
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	return f.d.String()
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>}
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>func (f *durationOrCountFlag) Set(s string) error {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	if strings.HasSuffix(s, &#34;x&#34;) {
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		n, err := strconv.ParseInt(s[:len(s)-1], 10, 0)
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		if err != nil || n &lt; 0 || (!f.allowZero &amp;&amp; n == 0) {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;invalid count&#34;)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		}
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		*f = durationOrCountFlag{n: int(n)}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		return nil
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	d, err := time.ParseDuration(s)
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	if err != nil || d &lt; 0 || (!f.allowZero &amp;&amp; d == 0) {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;invalid duration&#34;)
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	*f = durationOrCountFlag{d: d}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	return nil
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// Global lock to ensure only one benchmark runs at a time.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>var benchmarkLock sync.Mutex
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// Used for every benchmark for measuring memory.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>var memStats runtime.MemStats
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// InternalBenchmark is an internal type but exported because it is cross-package;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// it is part of the implementation of the &#34;go test&#34; command.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>type InternalBenchmark struct {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	Name string
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	F    func(b *B)
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// B is a type passed to [Benchmark] functions to manage benchmark</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// timing and to specify the number of iterations to run.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// A benchmark ends when its Benchmark function returns or calls any of the methods</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// FailNow, Fatal, Fatalf, SkipNow, Skip, or Skipf. Those methods must be called</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// only from the goroutine running the Benchmark function.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// The other reporting methods, such as the variations of Log and Error,</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// may be called simultaneously from multiple goroutines.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// Like in tests, benchmark logs are accumulated during execution</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// and dumped to standard output when done. Unlike in tests, benchmark logs</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// are always printed, so as not to hide output whose existence may be</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// affecting benchmark results.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>type B struct {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	common
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	importPath       string <span class="comment">// import path of the package containing the benchmark</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	context          *benchContext
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	N                int
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	previousN        int           <span class="comment">// number of iterations in the previous run</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	previousDuration time.Duration <span class="comment">// total duration of the previous run</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	benchFunc        func(b *B)
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	benchTime        durationOrCountFlag
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	bytes            int64
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	missingBytes     bool <span class="comment">// one of the subbenchmarks does not have bytes set.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	timerOn          bool
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	showAllocResult  bool
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	result           BenchmarkResult
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	parallelism      int <span class="comment">// RunParallel creates parallelism*GOMAXPROCS goroutines</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">// The initial states of memStats.Mallocs and memStats.TotalAlloc.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	startAllocs uint64
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	startBytes  uint64
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// The net total of this test after being run.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	netAllocs uint64
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	netBytes  uint64
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// Extra metrics collected by ReportMetric.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	extra map[string]float64
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// StartTimer starts timing a test. This function is called automatically</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// before a benchmark starts, but it can also be used to resume timing after</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// a call to [B.StopTimer].</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>func (b *B) StartTimer() {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	if !b.timerOn {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		runtime.ReadMemStats(&amp;memStats)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		b.startAllocs = memStats.Mallocs
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		b.startBytes = memStats.TotalAlloc
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		b.start = time.Now()
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		b.timerOn = true
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// StopTimer stops timing a test. This can be used to pause the timer</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// while performing complex initialization that you don&#39;t</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// want to measure.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>func (b *B) StopTimer() {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	if b.timerOn {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		b.duration += time.Since(b.start)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		runtime.ReadMemStats(&amp;memStats)
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		b.netAllocs += memStats.Mallocs - b.startAllocs
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		b.netBytes += memStats.TotalAlloc - b.startBytes
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		b.timerOn = false
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// ResetTimer zeroes the elapsed benchmark time and memory allocation counters</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// and deletes user-reported metrics.</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// It does not affect whether the timer is running.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>func (b *B) ResetTimer() {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	if b.extra == nil {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		<span class="comment">// Allocate the extra map before reading memory stats.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		<span class="comment">// Pre-size it to make more allocation unlikely.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		b.extra = make(map[string]float64, 16)
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	} else {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		clear(b.extra)
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	if b.timerOn {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		runtime.ReadMemStats(&amp;memStats)
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		b.startAllocs = memStats.Mallocs
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		b.startBytes = memStats.TotalAlloc
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		b.start = time.Now()
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	b.duration = 0
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	b.netAllocs = 0
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	b.netBytes = 0
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// SetBytes records the number of bytes processed in a single operation.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// If this is called, the benchmark will report ns/op and MB/s.</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>func (b *B) SetBytes(n int64) { b.bytes = n }
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// ReportAllocs enables malloc statistics for this benchmark.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// It is equivalent to setting -test.benchmem, but it only affects the</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// benchmark function that calls ReportAllocs.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>func (b *B) ReportAllocs() {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	b.showAllocResult = true
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// runN runs a single benchmark for the specified number of iterations.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>func (b *B) runN(n int) {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	benchmarkLock.Lock()
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	defer benchmarkLock.Unlock()
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	defer func() {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		b.runCleanup(normalPanic)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		b.checkRaces()
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}()
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	<span class="comment">// Try to get a comparable environment for each run</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	<span class="comment">// by clearing garbage from previous runs.</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	runtime.GC()
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	b.resetRaces()
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	b.N = n
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	b.parallelism = 1
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	b.ResetTimer()
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	b.StartTimer()
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	b.benchFunc(b)
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	b.StopTimer()
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	b.previousN = n
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	b.previousDuration = b.duration
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// run1 runs the first iteration of benchFunc. It reports whether more</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// iterations of this benchmarks should be run.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>func (b *B) run1() bool {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	if ctx := b.context; ctx != nil {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		<span class="comment">// Extend maxLen, if needed.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		if n := len(b.name) + ctx.extLen + 1; n &gt; ctx.maxLen {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			ctx.maxLen = n + 8 <span class="comment">// Add additional slack to avoid too many jumps in size.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	go func() {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		<span class="comment">// Signal that we&#39;re done whether we return normally</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		<span class="comment">// or by FailNow&#39;s runtime.Goexit.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		defer func() {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>			b.signal &lt;- true
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		}()
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		b.runN(1)
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	}()
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	&lt;-b.signal
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	if b.failed {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		fmt.Fprintf(b.w, &#34;%s--- FAIL: %s\n%s&#34;, b.chatty.prefix(), b.name, b.output)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		return false
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	<span class="comment">// Only print the output if we know we are not going to proceed.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	<span class="comment">// Otherwise it is printed in processBench.</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	b.mu.RLock()
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	finished := b.finished
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	b.mu.RUnlock()
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	if b.hasSub.Load() || finished {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		tag := &#34;BENCH&#34;
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		if b.skipped {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>			tag = &#34;SKIP&#34;
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		if b.chatty != nil &amp;&amp; (len(b.output) &gt; 0 || finished) {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>			b.trimOutput()
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>			fmt.Fprintf(b.w, &#34;%s--- %s: %s\n%s&#34;, b.chatty.prefix(), tag, b.name, b.output)
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		return false
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	return true
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>}
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>var labelsOnce sync.Once
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// run executes the benchmark in a separate goroutine, including all of its</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// subbenchmarks. b must not have subbenchmarks.</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>func (b *B) run() {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	labelsOnce.Do(func() {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		fmt.Fprintf(b.w, &#34;goos: %s\n&#34;, runtime.GOOS)
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		fmt.Fprintf(b.w, &#34;goarch: %s\n&#34;, runtime.GOARCH)
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		if b.importPath != &#34;&#34; {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>			fmt.Fprintf(b.w, &#34;pkg: %s\n&#34;, b.importPath)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		if cpu := sysinfo.CPUName(); cpu != &#34;&#34; {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>			fmt.Fprintf(b.w, &#34;cpu: %s\n&#34;, cpu)
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	})
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	if b.context != nil {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		<span class="comment">// Running go test --test.bench</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		b.context.processBench(b) <span class="comment">// Must call doBench.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	} else {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		<span class="comment">// Running func Benchmark.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		b.doBench()
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>func (b *B) doBench() BenchmarkResult {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	go b.launch()
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	&lt;-b.signal
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	return b.result
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// launch launches the benchmark function. It gradually increases the number</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// of benchmark iterations until the benchmark runs for the requested benchtime.</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// launch is run by the doBench function as a separate goroutine.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">// run1 must have been called on b.</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>func (b *B) launch() {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	<span class="comment">// Signal that we&#39;re done whether we return normally</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	<span class="comment">// or by FailNow&#39;s runtime.Goexit.</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	defer func() {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		b.signal &lt;- true
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	}()
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	<span class="comment">// Run the benchmark for at least the specified amount of time.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	if b.benchTime.n &gt; 0 {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		<span class="comment">// We already ran a single iteration in run1.</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		<span class="comment">// If -benchtime=1x was requested, use that result.</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		<span class="comment">// See https://golang.org/issue/32051.</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		if b.benchTime.n &gt; 1 {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>			b.runN(b.benchTime.n)
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	} else {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		d := b.benchTime.d
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		for n := int64(1); !b.failed &amp;&amp; b.duration &lt; d &amp;&amp; n &lt; 1e9; {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>			last := n
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>			<span class="comment">// Predict required iterations.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>			goalns := d.Nanoseconds()
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>			prevIters := int64(b.N)
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>			prevns := b.duration.Nanoseconds()
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>			if prevns &lt;= 0 {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>				<span class="comment">// Round up, to avoid div by zero.</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>				prevns = 1
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>			}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>			<span class="comment">// Order of operations matters.</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>			<span class="comment">// For very fast benchmarks, prevIters ~= prevns.</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>			<span class="comment">// If you divide first, you get 0 or 1,</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			<span class="comment">// which can hide an order of magnitude in execution time.</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>			<span class="comment">// So multiply first, then divide.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>			n = goalns * prevIters / prevns
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>			<span class="comment">// Run more iterations than we think we&#39;ll need (1.2x).</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>			n += n / 5
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>			<span class="comment">// Don&#39;t grow too fast in case we had timing errors previously.</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>			n = min(n, 100*last)
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>			<span class="comment">// Be sure to run at least one more than last time.</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>			n = max(n, last+1)
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			<span class="comment">// Don&#39;t run more than 1e9 times. (This also keeps n in int range on 32 bit platforms.)</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>			n = min(n, 1e9)
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>			b.runN(int(n))
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	b.result = BenchmarkResult{b.N, b.duration, b.bytes, b.netAllocs, b.netBytes, b.extra}
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span><span class="comment">// Elapsed returns the measured elapsed time of the benchmark.</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">// The duration reported by Elapsed matches the one measured by</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span><span class="comment">// [B.StartTimer], [B.StopTimer], and [B.ResetTimer].</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>func (b *B) Elapsed() time.Duration {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	d := b.duration
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	if b.timerOn {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		d += time.Since(b.start)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	return d
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">// ReportMetric adds &#34;n unit&#34; to the reported benchmark results.</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">// If the metric is per-iteration, the caller should divide by b.N,</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">// and by convention units should end in &#34;/op&#34;.</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// ReportMetric overrides any previously reported value for the same unit.</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">// ReportMetric panics if unit is the empty string or if unit contains</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// any whitespace.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">// If unit is a unit normally reported by the benchmark framework itself</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// (such as &#34;allocs/op&#34;), ReportMetric will override that metric.</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">// Setting &#34;ns/op&#34; to 0 will suppress that built-in metric.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>func (b *B) ReportMetric(n float64, unit string) {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	if unit == &#34;&#34; {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		panic(&#34;metric unit must not be empty&#34;)
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	if strings.IndexFunc(unit, unicode.IsSpace) &gt;= 0 {
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		panic(&#34;metric unit must not contain whitespace&#34;)
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	}
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	b.extra[unit] = n
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span><span class="comment">// BenchmarkResult contains the results of a benchmark run.</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="selection">type BenchmarkResult struct {
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	N         int           </span><span class="selection-comment">// The number of iterations.</span><span class="selection">
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	T         time.Duration </span><span class="selection-comment">// The total time taken.</span><span class="selection">
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	Bytes     int64         </span><span class="selection-comment">// Bytes processed in one iteration.</span><span class="selection">
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	MemAllocs uint64        </span><span class="selection-comment">// The total number of memory allocations.</span><span class="selection">
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	MemBytes  uint64        </span><span class="selection-comment">// The total number of bytes allocated.</span><span class="selection">
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Extra records additional metrics reported by ReportMetric.</span><span class="selection">
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	Extra map[string]float64
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>}</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span><span class="comment">// NsPerOp returns the &#34;ns/op&#34; metric.</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>func (r BenchmarkResult) NsPerOp() int64 {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	if v, ok := r.Extra[&#34;ns/op&#34;]; ok {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>		return int64(v)
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	}
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	if r.N &lt;= 0 {
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		return 0
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	}
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	return r.T.Nanoseconds() / int64(r.N)
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>}
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span><span class="comment">// mbPerSec returns the &#34;MB/s&#34; metric.</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>func (r BenchmarkResult) mbPerSec() float64 {
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	if v, ok := r.Extra[&#34;MB/s&#34;]; ok {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		return v
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	if r.Bytes &lt;= 0 || r.T &lt;= 0 || r.N &lt;= 0 {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>		return 0
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	return (float64(r.Bytes) * float64(r.N) / 1e6) / r.T.Seconds()
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span><span class="comment">// AllocsPerOp returns the &#34;allocs/op&#34; metric,</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span><span class="comment">// which is calculated as r.MemAllocs / r.N.</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>func (r BenchmarkResult) AllocsPerOp() int64 {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	if v, ok := r.Extra[&#34;allocs/op&#34;]; ok {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		return int64(v)
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	if r.N &lt;= 0 {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		return 0
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	return int64(r.MemAllocs) / int64(r.N)
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// AllocedBytesPerOp returns the &#34;B/op&#34; metric,</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">// which is calculated as r.MemBytes / r.N.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>func (r BenchmarkResult) AllocedBytesPerOp() int64 {
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	if v, ok := r.Extra[&#34;B/op&#34;]; ok {
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		return int64(v)
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	if r.N &lt;= 0 {
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		return 0
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	return int64(r.MemBytes) / int64(r.N)
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>}
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span><span class="comment">// String returns a summary of the benchmark results.</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span><span class="comment">// It follows the benchmark result line format from</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span><span class="comment">// https://golang.org/design/14313-benchmark-format, not including the</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span><span class="comment">// benchmark name.</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span><span class="comment">// Extra metrics override built-in metrics of the same name.</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span><span class="comment">// String does not include allocs/op or B/op, since those are reported</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span><span class="comment">// by [BenchmarkResult.MemString].</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>func (r BenchmarkResult) String() string {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	buf := new(strings.Builder)
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	fmt.Fprintf(buf, &#34;%8d&#34;, r.N)
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	<span class="comment">// Get ns/op as a float.</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	ns, ok := r.Extra[&#34;ns/op&#34;]
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	if !ok {
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		ns = float64(r.T.Nanoseconds()) / float64(r.N)
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	if ns != 0 {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		buf.WriteByte(&#39;\t&#39;)
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		prettyPrint(buf, ns, &#34;ns/op&#34;)
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	}
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	if mbs := r.mbPerSec(); mbs != 0 {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		fmt.Fprintf(buf, &#34;\t%7.2f MB/s&#34;, mbs)
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	<span class="comment">// Print extra metrics that aren&#39;t represented in the standard</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	<span class="comment">// metrics.</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	var extraKeys []string
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	for k := range r.Extra {
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		switch k {
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		case &#34;ns/op&#34;, &#34;MB/s&#34;, &#34;B/op&#34;, &#34;allocs/op&#34;:
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>			<span class="comment">// Built-in metrics reported elsewhere.</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>			continue
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		}
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		extraKeys = append(extraKeys, k)
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	sort.Strings(extraKeys)
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	for _, k := range extraKeys {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		buf.WriteByte(&#39;\t&#39;)
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		prettyPrint(buf, r.Extra[k], k)
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	return buf.String()
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>}
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>func prettyPrint(w io.Writer, x float64, unit string) {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	<span class="comment">// Print all numbers with 10 places before the decimal point</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	<span class="comment">// and small numbers with four sig figs. Field widths are</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	<span class="comment">// chosen to fit the whole part in 10 places while aligning</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	<span class="comment">// the decimal point of all fractional formats.</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	var format string
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	switch y := math.Abs(x); {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	case y == 0 || y &gt;= 999.95:
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		format = &#34;%10.0f %s&#34;
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	case y &gt;= 99.995:
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		format = &#34;%12.1f %s&#34;
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	case y &gt;= 9.9995:
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		format = &#34;%13.2f %s&#34;
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	case y &gt;= 0.99995:
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		format = &#34;%14.3f %s&#34;
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	case y &gt;= 0.099995:
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		format = &#34;%15.4f %s&#34;
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	case y &gt;= 0.0099995:
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		format = &#34;%16.5f %s&#34;
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	case y &gt;= 0.00099995:
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		format = &#34;%17.6f %s&#34;
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	default:
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		format = &#34;%18.7f %s&#34;
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	fmt.Fprintf(w, format, x, unit)
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">// MemString returns r.AllocedBytesPerOp and r.AllocsPerOp in the same format as &#39;go test&#39;.</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>func (r BenchmarkResult) MemString() string {
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;%8d B/op\t%8d allocs/op&#34;,
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		r.AllocedBytesPerOp(), r.AllocsPerOp())
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span><span class="comment">// benchmarkName returns full name of benchmark including procs suffix.</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>func benchmarkName(name string, n int) string {
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	if n != 1 {
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		return fmt.Sprintf(&#34;%s-%d&#34;, name, n)
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	}
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	return name
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>type benchContext struct {
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	match *matcher
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	maxLen int <span class="comment">// The largest recorded benchmark name.</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	extLen int <span class="comment">// Maximum extension length.</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span><span class="comment">// RunBenchmarks is an internal function but exported because it is cross-package;</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span><span class="comment">// it is part of the implementation of the &#34;go test&#34; command.</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>func RunBenchmarks(matchString func(pat, str string) (bool, error), benchmarks []InternalBenchmark) {
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	runBenchmarks(&#34;&#34;, matchString, benchmarks)
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>}
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>func runBenchmarks(importPath string, matchString func(pat, str string) (bool, error), benchmarks []InternalBenchmark) bool {
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	<span class="comment">// If no flag was specified, don&#39;t run benchmarks.</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	if len(*matchBenchmarks) == 0 {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		return true
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	}
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	<span class="comment">// Collect matching benchmarks and determine longest name.</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	maxprocs := 1
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	for _, procs := range cpuList {
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		if procs &gt; maxprocs {
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>			maxprocs = procs
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>		}
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	}
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	ctx := &amp;benchContext{
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		match:  newMatcher(matchString, *matchBenchmarks, &#34;-test.bench&#34;, *skip),
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		extLen: len(benchmarkName(&#34;&#34;, maxprocs)),
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	var bs []InternalBenchmark
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	for _, Benchmark := range benchmarks {
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		if _, matched, _ := ctx.match.fullName(nil, Benchmark.Name); matched {
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>			bs = append(bs, Benchmark)
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>			benchName := benchmarkName(Benchmark.Name, maxprocs)
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>			if l := len(benchName) + ctx.extLen + 1; l &gt; ctx.maxLen {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>				ctx.maxLen = l
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>			}
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		}
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	main := &amp;B{
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		common: common{
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>			name:  &#34;Main&#34;,
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>			w:     os.Stdout,
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>			bench: true,
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		},
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		importPath: importPath,
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		benchFunc: func(b *B) {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>			for _, Benchmark := range bs {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>				b.Run(Benchmark.Name, Benchmark.F)
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>			}
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		},
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		benchTime: benchTime,
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		context:   ctx,
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	}
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	if Verbose() {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		main.chatty = newChattyPrinter(main.w)
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	main.runN(1)
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	return !main.failed
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>}
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span><span class="comment">// processBench runs bench b for the configured CPU counts and prints the results.</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>func (ctx *benchContext) processBench(b *B) {
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	for i, procs := range cpuList {
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		for j := uint(0); j &lt; *count; j++ {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>			runtime.GOMAXPROCS(procs)
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>			benchName := benchmarkName(b.name, procs)
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>			<span class="comment">// If it&#39;s chatty, we&#39;ve already printed this information.</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>			if b.chatty == nil {
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>				fmt.Fprintf(b.w, &#34;%-*s\t&#34;, ctx.maxLen, benchName)
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>			}
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>			<span class="comment">// Recompute the running time for all but the first iteration.</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>			if i &gt; 0 || j &gt; 0 {
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>				b = &amp;B{
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>					common: common{
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>						signal: make(chan bool),
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>						name:   b.name,
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>						w:      b.w,
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>						chatty: b.chatty,
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>						bench:  true,
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>					},
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>					benchFunc: b.benchFunc,
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>					benchTime: b.benchTime,
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>				}
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>				b.run1()
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>			}
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>			r := b.doBench()
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>			if b.failed {
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>				<span class="comment">// The output could be very long here, but probably isn&#39;t.</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>				<span class="comment">// We print it all, regardless, because we don&#39;t want to trim the reason</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>				<span class="comment">// the benchmark failed.</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>				fmt.Fprintf(b.w, &#34;%s--- FAIL: %s\n%s&#34;, b.chatty.prefix(), benchName, b.output)
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>				continue
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>			}
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>			results := r.String()
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>			if b.chatty != nil {
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>				fmt.Fprintf(b.w, &#34;%-*s\t&#34;, ctx.maxLen, benchName)
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>			}
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>			if *benchmarkMemory || b.showAllocResult {
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>				results += &#34;\t&#34; + r.MemString()
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>			}
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>			fmt.Fprintln(b.w, results)
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>			<span class="comment">// Unlike with tests, we ignore the -chatty flag and always print output for</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>			<span class="comment">// benchmarks since the output generation time will skew the results.</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>			if len(b.output) &gt; 0 {
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>				b.trimOutput()
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>				fmt.Fprintf(b.w, &#34;%s--- BENCH: %s\n%s&#34;, b.chatty.prefix(), benchName, b.output)
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>			}
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>			if p := runtime.GOMAXPROCS(-1); p != procs {
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>				fmt.Fprintf(os.Stderr, &#34;testing: %s left GOMAXPROCS set to %d\n&#34;, benchName, p)
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>			}
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>			if b.chatty != nil &amp;&amp; b.chatty.json {
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>				b.chatty.Updatef(&#34;&#34;, &#34;=== NAME  %s\n&#34;, &#34;&#34;)
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>			}
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>		}
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	}
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>}
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span><span class="comment">// If hideStdoutForTesting is true, Run does not print the benchName.</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span><span class="comment">// This avoids a spurious print during &#39;go test&#39; on package testing itself,</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span><span class="comment">// which invokes b.Run in its own tests (see sub_test.go).</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>var hideStdoutForTesting = false
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span><span class="comment">// Run benchmarks f as a subbenchmark with the given name. It reports</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span><span class="comment">// whether there were any failures.</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span><span class="comment">// A subbenchmark is like any other benchmark. A benchmark that calls Run at</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span><span class="comment">// least once will not be measured itself and will be called once with N=1.</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>func (b *B) Run(name string, f func(b *B)) bool {
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	<span class="comment">// Since b has subbenchmarks, we will no longer run it as a benchmark itself.</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	<span class="comment">// Release the lock and acquire it on exit to ensure locks stay paired.</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	b.hasSub.Store(true)
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	benchmarkLock.Unlock()
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	defer benchmarkLock.Lock()
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	benchName, ok, partial := b.name, true, false
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	if b.context != nil {
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		benchName, ok, partial = b.context.match.fullName(&amp;b.common, name)
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	}
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	if !ok {
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		return true
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	}
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	var pc [maxStackLen]uintptr
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	n := runtime.Callers(2, pc[:])
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>	sub := &amp;B{
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		common: common{
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			signal:  make(chan bool),
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>			name:    benchName,
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>			parent:  &amp;b.common,
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>			level:   b.level + 1,
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>			creator: pc[:n],
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>			w:       b.w,
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>			chatty:  b.chatty,
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>			bench:   true,
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		},
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>		importPath: b.importPath,
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		benchFunc:  f,
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>		benchTime:  b.benchTime,
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		context:    b.context,
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	}
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	if partial {
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		<span class="comment">// Partial name match, like -bench=X/Y matching BenchmarkX.</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		<span class="comment">// Only process sub-benchmarks, if any.</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>		sub.hasSub.Store(true)
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	}
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	if b.chatty != nil {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		labelsOnce.Do(func() {
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>			fmt.Printf(&#34;goos: %s\n&#34;, runtime.GOOS)
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>			fmt.Printf(&#34;goarch: %s\n&#34;, runtime.GOARCH)
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>			if b.importPath != &#34;&#34; {
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>				fmt.Printf(&#34;pkg: %s\n&#34;, b.importPath)
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>			}
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>			if cpu := sysinfo.CPUName(); cpu != &#34;&#34; {
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>				fmt.Printf(&#34;cpu: %s\n&#34;, cpu)
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>			}
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>		})
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		if !hideStdoutForTesting {
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>			if b.chatty.json {
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>				b.chatty.Updatef(benchName, &#34;=== RUN   %s\n&#34;, benchName)
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>			}
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>			fmt.Println(benchName)
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		}
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	}
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	if sub.run1() {
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		sub.run()
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	}
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	b.add(sub.result)
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	return !sub.failed
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>}
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span><span class="comment">// add simulates running benchmarks in sequence in a single iteration. It is</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span><span class="comment">// used to give some meaningful results in case func Benchmark is used in</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span><span class="comment">// combination with Run.</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>func (b *B) add(other BenchmarkResult) {
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	r := &amp;b.result
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>	<span class="comment">// The aggregated BenchmarkResults resemble running all subbenchmarks as</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	<span class="comment">// in sequence in a single benchmark.</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	r.N = 1
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	r.T += time.Duration(other.NsPerOp())
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	if other.Bytes == 0 {
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>		<span class="comment">// Summing Bytes is meaningless in aggregate if not all subbenchmarks</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		<span class="comment">// set it.</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		b.missingBytes = true
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>		r.Bytes = 0
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	}
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	if !b.missingBytes {
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>		r.Bytes += other.Bytes
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	}
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	r.MemAllocs += uint64(other.AllocsPerOp())
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	r.MemBytes += uint64(other.AllocedBytesPerOp())
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>}
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span><span class="comment">// trimOutput shortens the output from a benchmark, which can be very long.</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>func (b *B) trimOutput() {
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	<span class="comment">// The output is likely to appear multiple times because the benchmark</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	<span class="comment">// is run multiple times, but at least it will be seen. This is not a big deal</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	<span class="comment">// because benchmarks rarely print, but just in case, we trim it if it&#39;s too long.</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	const maxNewlines = 10
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	for nlCount, j := 0, 0; j &lt; len(b.output); j++ {
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>		if b.output[j] == &#39;\n&#39; {
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>			nlCount++
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>			if nlCount &gt;= maxNewlines {
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>				b.output = append(b.output[:j], &#34;\n\t... [output truncated]\n&#34;...)
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>				break
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>			}
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		}
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	}
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>}
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>
<span id="L728" class="ln">   728&nbsp;&nbsp;</span><span class="comment">// A PB is used by RunParallel for running parallel benchmarks.</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>type PB struct {
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	globalN *atomic.Uint64 <span class="comment">// shared between all worker goroutines iteration counter</span>
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>	grain   uint64         <span class="comment">// acquire that many iterations from globalN at once</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>	cache   uint64         <span class="comment">// local cache of acquired iterations</span>
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>	bN      uint64         <span class="comment">// total number of iterations to execute (b.N)</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>}
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span><span class="comment">// Next reports whether there are more iterations to execute.</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>func (pb *PB) Next() bool {
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>	if pb.cache == 0 {
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>		n := pb.globalN.Add(pb.grain)
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>		if n &lt;= pb.bN {
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>			pb.cache = pb.grain
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>		} else if n &lt; pb.bN+pb.grain {
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>			pb.cache = pb.bN + pb.grain - n
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>		} else {
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>			return false
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>		}
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	}
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>	pb.cache--
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>	return true
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>}
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>
<span id="L752" class="ln">   752&nbsp;&nbsp;</span><span class="comment">// RunParallel runs a benchmark in parallel.</span>
<span id="L753" class="ln">   753&nbsp;&nbsp;</span><span class="comment">// It creates multiple goroutines and distributes b.N iterations among them.</span>
<span id="L754" class="ln">   754&nbsp;&nbsp;</span><span class="comment">// The number of goroutines defaults to GOMAXPROCS. To increase parallelism for</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span><span class="comment">// non-CPU-bound benchmarks, call [B.SetParallelism] before RunParallel.</span>
<span id="L756" class="ln">   756&nbsp;&nbsp;</span><span class="comment">// RunParallel is usually used with the go test -cpu flag.</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span><span class="comment">// The body function will be run in each goroutine. It should set up any</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span><span class="comment">// goroutine-local state and then iterate until pb.Next returns false.</span>
<span id="L760" class="ln">   760&nbsp;&nbsp;</span><span class="comment">// It should not use the [B.StartTimer], [B.StopTimer], or [B.ResetTimer] functions,</span>
<span id="L761" class="ln">   761&nbsp;&nbsp;</span><span class="comment">// because they have global effect. It should also not call [B.Run].</span>
<span id="L762" class="ln">   762&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span><span class="comment">// RunParallel reports ns/op values as wall time for the benchmark as a whole,</span>
<span id="L764" class="ln">   764&nbsp;&nbsp;</span><span class="comment">// not the sum of wall time or CPU time over each parallel goroutine.</span>
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>func (b *B) RunParallel(body func(*PB)) {
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	if b.N == 0 {
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		return <span class="comment">// Nothing to do when probing.</span>
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	}
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>	<span class="comment">// Calculate grain size as number of iterations that take ~100µs.</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>	<span class="comment">// 100µs is enough to amortize the overhead and provide sufficient</span>
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>	<span class="comment">// dynamic load balancing.</span>
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	grain := uint64(0)
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>	if b.previousN &gt; 0 &amp;&amp; b.previousDuration &gt; 0 {
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>		grain = 1e5 * uint64(b.previousN) / uint64(b.previousDuration)
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>	}
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	if grain &lt; 1 {
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>		grain = 1
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>	}
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	<span class="comment">// We expect the inner loop and function call to take at least 10ns,</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	<span class="comment">// so do not do more than 100µs/10ns=1e4 iterations.</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>	if grain &gt; 1e4 {
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>		grain = 1e4
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>	}
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>	var n atomic.Uint64
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	numProcs := b.parallelism * runtime.GOMAXPROCS(0)
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	var wg sync.WaitGroup
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>	wg.Add(numProcs)
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>	for p := 0; p &lt; numProcs; p++ {
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>		go func() {
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>			defer wg.Done()
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>			pb := &amp;PB{
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>				globalN: &amp;n,
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>				grain:   grain,
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>				bN:      uint64(b.N),
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>			}
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>			body(pb)
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>		}()
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>	}
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	wg.Wait()
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>	if n.Load() &lt;= uint64(b.N) &amp;&amp; !b.Failed() {
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>		b.Fatal(&#34;RunParallel: body exited without pb.Next() == false&#34;)
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	}
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>}
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>
<span id="L806" class="ln">   806&nbsp;&nbsp;</span><span class="comment">// SetParallelism sets the number of goroutines used by [B.RunParallel] to p*GOMAXPROCS.</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span><span class="comment">// There is usually no need to call SetParallelism for CPU-bound benchmarks.</span>
<span id="L808" class="ln">   808&nbsp;&nbsp;</span><span class="comment">// If p is less than 1, this call will have no effect.</span>
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>func (b *B) SetParallelism(p int) {
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>	if p &gt;= 1 {
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>		b.parallelism = p
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>	}
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>
<span id="L815" class="ln">   815&nbsp;&nbsp;</span><span class="comment">// Benchmark benchmarks a single function. It is useful for creating</span>
<span id="L816" class="ln">   816&nbsp;&nbsp;</span><span class="comment">// custom benchmarks that do not use the &#34;go test&#34; command.</span>
<span id="L817" class="ln">   817&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L818" class="ln">   818&nbsp;&nbsp;</span><span class="comment">// If f depends on testing flags, then [Init] must be used to register</span>
<span id="L819" class="ln">   819&nbsp;&nbsp;</span><span class="comment">// those flags before calling Benchmark and before calling [flag.Parse].</span>
<span id="L820" class="ln">   820&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L821" class="ln">   821&nbsp;&nbsp;</span><span class="comment">// If f calls Run, the result will be an estimate of running all its</span>
<span id="L822" class="ln">   822&nbsp;&nbsp;</span><span class="comment">// subbenchmarks that don&#39;t call Run in sequence in a single benchmark.</span>
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>func Benchmark(f func(b *B)) BenchmarkResult {
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>	b := &amp;B{
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>		common: common{
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>			signal: make(chan bool),
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>			w:      discard{},
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>		},
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>		benchFunc: f,
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>		benchTime: benchTime,
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>	}
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>	if b.run1() {
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>		b.run()
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	}
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>	return b.result
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>}
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>type discard struct{}
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>func (discard) Write(b []byte) (n int, err error) { return len(b), nil }
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>
</pre><p><a href="benchmark.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
