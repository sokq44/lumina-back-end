<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/testing/fstest/mapfs.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./mapfs.go?s=4043:4099#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/testing">testing</a>/<a href="http://localhost:8080/src/testing/fstest">fstest</a>/<span class="text-muted">mapfs.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/testing/fstest">testing/fstest</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2020 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package fstest
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;io/fs&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;path&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>)
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// A MapFS is a simple in-memory file system for use in tests,</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// represented as a map from path names (arguments to Open)</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// to information about the files or directories they represent.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// The map need not include parent directories for files contained</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// in the map; those will be synthesized if needed.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// But a directory can still be included by setting the [MapFile.Mode]&#39;s [fs.ModeDir] bit;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// this may be necessary for detailed control over the directory&#39;s [fs.FileInfo]</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// or to create an empty directory.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// File system operations read directly from the map,</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// so that the file system can be changed by editing the map as needed.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// An implication is that file system operations must not run concurrently</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// with changes to the map, which would be a race.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// Another implication is that opening or reading a directory requires</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// iterating over the entire map, so a MapFS should typically be used with not more</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// than a few hundred entries or directory reads.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>type MapFS map[string]*MapFile
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// A MapFile describes a single file in a [MapFS].</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>type MapFile struct {
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	Data    []byte      <span class="comment">// file content</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	Mode    fs.FileMode <span class="comment">// fs.FileInfo.Mode</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	ModTime time.Time   <span class="comment">// fs.FileInfo.ModTime</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	Sys     any         <span class="comment">// fs.FileInfo.Sys</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>}
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>var _ fs.FS = MapFS(nil)
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>var _ fs.File = (*openMapFile)(nil)
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// Open opens the named file.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>func (fsys MapFS) Open(name string) (fs.File, error) {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	if !fs.ValidPath(name) {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		return nil, &amp;fs.PathError{Op: &#34;open&#34;, Path: name, Err: fs.ErrNotExist}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	file := fsys[name]
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	if file != nil &amp;&amp; file.Mode&amp;fs.ModeDir == 0 {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		<span class="comment">// Ordinary file</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		return &amp;openMapFile{name, mapFileInfo{path.Base(name), file}, 0}, nil
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	}
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// Directory, possibly synthesized.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// Note that file can be nil here: the map need not contain explicit parent directories for all its files.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// But file can also be non-nil, in case the user wants to set metadata for the directory explicitly.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// Either way, we need to construct the list of children of this directory.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	var list []mapFileInfo
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	var elem string
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	var need = make(map[string]bool)
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	if name == &#34;.&#34; {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		elem = &#34;.&#34;
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		for fname, f := range fsys {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>			i := strings.Index(fname, &#34;/&#34;)
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>			if i &lt; 0 {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>				if fname != &#34;.&#34; {
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>					list = append(list, mapFileInfo{fname, f})
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>				}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>			} else {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>				need[fname[:i]] = true
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>			}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	} else {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		elem = name[strings.LastIndex(name, &#34;/&#34;)+1:]
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		prefix := name + &#34;/&#34;
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		for fname, f := range fsys {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>			if strings.HasPrefix(fname, prefix) {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>				felem := fname[len(prefix):]
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>				i := strings.Index(felem, &#34;/&#34;)
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>				if i &lt; 0 {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>					list = append(list, mapFileInfo{felem, f})
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>				} else {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>					need[fname[len(prefix):len(prefix)+i]] = true
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>				}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>			}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		<span class="comment">// If the directory name is not in the map,</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		<span class="comment">// and there are no children of the name in the map,</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		<span class="comment">// then the directory is treated as not existing.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		if file == nil &amp;&amp; list == nil &amp;&amp; len(need) == 0 {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>			return nil, &amp;fs.PathError{Op: &#34;open&#34;, Path: name, Err: fs.ErrNotExist}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	for _, fi := range list {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		delete(need, fi.name)
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	for name := range need {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		list = append(list, mapFileInfo{name, &amp;MapFile{Mode: fs.ModeDir | 0555}})
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	sort.Slice(list, func(i, j int) bool {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		return list[i].name &lt; list[j].name
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	})
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	if file == nil {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		file = &amp;MapFile{Mode: fs.ModeDir | 0555}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	return &amp;mapDir{name, mapFileInfo{elem, file}, list, 0}, nil
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// fsOnly is a wrapper that hides all but the fs.FS methods,</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// to avoid an infinite recursion when implementing special</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// methods in terms of helpers that would use them.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// (In general, implementing these methods using the package fs helpers</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// is redundant and unnecessary, but having the methods may make</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// MapFS exercise more code paths when used in tests.)</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>type fsOnly struct{ fs.FS }
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>func (fsys MapFS) ReadFile(name string) ([]byte, error) {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	return fs.ReadFile(fsOnly{fsys}, name)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="selection">func (fsys MapFS) Stat(name string) (fs.FileInfo, error)</span> {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	return fs.Stat(fsOnly{fsys}, name)
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>func (fsys MapFS) ReadDir(name string) ([]fs.DirEntry, error) {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	return fs.ReadDir(fsOnly{fsys}, name)
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>func (fsys MapFS) Glob(pattern string) ([]string, error) {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	return fs.Glob(fsOnly{fsys}, pattern)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>type noSub struct {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	MapFS
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>func (noSub) Sub() {} <span class="comment">// not the fs.SubFS signature</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>func (fsys MapFS) Sub(dir string) (fs.FS, error) {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	return fs.Sub(noSub{fsys}, dir)
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// A mapFileInfo implements fs.FileInfo and fs.DirEntry for a given map file.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>type mapFileInfo struct {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	name string
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	f    *MapFile
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>func (i *mapFileInfo) Name() string               { return i.name }
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>func (i *mapFileInfo) Size() int64                { return int64(len(i.f.Data)) }
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>func (i *mapFileInfo) Mode() fs.FileMode          { return i.f.Mode }
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>func (i *mapFileInfo) Type() fs.FileMode          { return i.f.Mode.Type() }
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>func (i *mapFileInfo) ModTime() time.Time         { return i.f.ModTime }
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>func (i *mapFileInfo) IsDir() bool                { return i.f.Mode&amp;fs.ModeDir != 0 }
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>func (i *mapFileInfo) Sys() any                   { return i.f.Sys }
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>func (i *mapFileInfo) Info() (fs.FileInfo, error) { return i, nil }
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>func (i *mapFileInfo) String() string {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	return fs.FormatFileInfo(i)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// An openMapFile is a regular (non-directory) fs.File open for reading.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>type openMapFile struct {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	path string
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	mapFileInfo
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	offset int64
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>func (f *openMapFile) Stat() (fs.FileInfo, error) { return &amp;f.mapFileInfo, nil }
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>func (f *openMapFile) Close() error { return nil }
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>func (f *openMapFile) Read(b []byte) (int, error) {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	if f.offset &gt;= int64(len(f.f.Data)) {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		return 0, io.EOF
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	if f.offset &lt; 0 {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		return 0, &amp;fs.PathError{Op: &#34;read&#34;, Path: f.path, Err: fs.ErrInvalid}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	n := copy(b, f.f.Data[f.offset:])
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	f.offset += int64(n)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	return n, nil
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>func (f *openMapFile) Seek(offset int64, whence int) (int64, error) {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	switch whence {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	case 0:
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		<span class="comment">// offset += 0</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	case 1:
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		offset += f.offset
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	case 2:
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		offset += int64(len(f.f.Data))
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	if offset &lt; 0 || offset &gt; int64(len(f.f.Data)) {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		return 0, &amp;fs.PathError{Op: &#34;seek&#34;, Path: f.path, Err: fs.ErrInvalid}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	f.offset = offset
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	return offset, nil
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>func (f *openMapFile) ReadAt(b []byte, offset int64) (int, error) {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	if offset &lt; 0 || offset &gt; int64(len(f.f.Data)) {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		return 0, &amp;fs.PathError{Op: &#34;read&#34;, Path: f.path, Err: fs.ErrInvalid}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	n := copy(b, f.f.Data[offset:])
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	if n &lt; len(b) {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		return n, io.EOF
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	return n, nil
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// A mapDir is a directory fs.File (so also an fs.ReadDirFile) open for reading.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>type mapDir struct {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	path string
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	mapFileInfo
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	entry  []mapFileInfo
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	offset int
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>func (d *mapDir) Stat() (fs.FileInfo, error) { return &amp;d.mapFileInfo, nil }
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>func (d *mapDir) Close() error               { return nil }
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>func (d *mapDir) Read(b []byte) (int, error) {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	return 0, &amp;fs.PathError{Op: &#34;read&#34;, Path: d.path, Err: fs.ErrInvalid}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>func (d *mapDir) ReadDir(count int) ([]fs.DirEntry, error) {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	n := len(d.entry) - d.offset
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	if n == 0 &amp;&amp; count &gt; 0 {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		return nil, io.EOF
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	if count &gt; 0 &amp;&amp; n &gt; count {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		n = count
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	list := make([]fs.DirEntry, n)
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	for i := range list {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		list[i] = &amp;d.entry[d.offset+i]
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	d.offset += n
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	return list, nil
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>
</pre><p><a href="mapfs.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
