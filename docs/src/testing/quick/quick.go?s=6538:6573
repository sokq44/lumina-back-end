<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/testing/quick/quick.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./quick.go?s=6538:6573#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/testing">testing</a>/<a href="http://localhost:8080/src/testing/quick">quick</a>/<span class="text-muted">quick.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/testing/quick">testing/quick</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package quick implements utility functions to help with black box testing.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// The testing/quick package is frozen and is not accepting new features.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>package quick
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>import (
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;flag&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;math/rand&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>)
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>var defaultMaxCount *int = flag.Int(&#34;quickchecks&#34;, 100, &#34;The default number of iterations for each check&#34;)
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// A Generator can generate random values of its own type.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>type Generator interface {
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	<span class="comment">// Generate returns a random instance of the type on which it is a</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	<span class="comment">// method using the size as a size hint.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	Generate(rand *rand.Rand, size int) reflect.Value
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>}
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// randFloat32 generates a random float taking the full range of a float32.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>func randFloat32(rand *rand.Rand) float32 {
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	f := rand.Float64() * math.MaxFloat32
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	if rand.Int()&amp;1 == 1 {
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>		f = -f
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	return float32(f)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>}
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// randFloat64 generates a random float taking the full range of a float64.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>func randFloat64(rand *rand.Rand) float64 {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	f := rand.Float64() * math.MaxFloat64
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	if rand.Int()&amp;1 == 1 {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>		f = -f
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	}
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	return f
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// randInt64 returns a random int64.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>func randInt64(rand *rand.Rand) int64 {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	return int64(rand.Uint64())
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// complexSize is the maximum length of arbitrary values that contain other</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// values.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>const complexSize = 50
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// Value returns an arbitrary value of the given type.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// If the type implements the [Generator] interface, that will be used.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// Note: To create arbitrary values for structs, all the fields must be exported.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>func Value(t reflect.Type, rand *rand.Rand) (value reflect.Value, ok bool) {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	return sizedValue(t, rand, complexSize)
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// sizedValue returns an arbitrary value of the given type. The size</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// hint is used for shrinking as a function of indirection level so</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// that recursive data structures will terminate.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>func sizedValue(t reflect.Type, rand *rand.Rand, size int) (value reflect.Value, ok bool) {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	if m, ok := reflect.Zero(t).Interface().(Generator); ok {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		return m.Generate(rand, size), true
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	v := reflect.New(t).Elem()
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	switch concrete := t; concrete.Kind() {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	case reflect.Bool:
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		v.SetBool(rand.Int()&amp;1 == 0)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	case reflect.Float32:
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		v.SetFloat(float64(randFloat32(rand)))
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	case reflect.Float64:
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		v.SetFloat(randFloat64(rand))
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	case reflect.Complex64:
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		v.SetComplex(complex(float64(randFloat32(rand)), float64(randFloat32(rand))))
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	case reflect.Complex128:
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		v.SetComplex(complex(randFloat64(rand), randFloat64(rand)))
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	case reflect.Int16:
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		v.SetInt(randInt64(rand))
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	case reflect.Int32:
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		v.SetInt(randInt64(rand))
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	case reflect.Int64:
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		v.SetInt(randInt64(rand))
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	case reflect.Int8:
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		v.SetInt(randInt64(rand))
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	case reflect.Int:
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		v.SetInt(randInt64(rand))
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	case reflect.Uint16:
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		v.SetUint(uint64(randInt64(rand)))
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	case reflect.Uint32:
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		v.SetUint(uint64(randInt64(rand)))
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	case reflect.Uint64:
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		v.SetUint(uint64(randInt64(rand)))
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	case reflect.Uint8:
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		v.SetUint(uint64(randInt64(rand)))
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	case reflect.Uint:
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		v.SetUint(uint64(randInt64(rand)))
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	case reflect.Uintptr:
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		v.SetUint(uint64(randInt64(rand)))
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	case reflect.Map:
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		numElems := rand.Intn(size)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		v.Set(reflect.MakeMap(concrete))
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		for i := 0; i &lt; numElems; i++ {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>			key, ok1 := sizedValue(concrete.Key(), rand, size)
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>			value, ok2 := sizedValue(concrete.Elem(), rand, size)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>			if !ok1 || !ok2 {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>				return reflect.Value{}, false
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>			}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>			v.SetMapIndex(key, value)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	case reflect.Pointer:
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		if rand.Intn(size) == 0 {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>			v.SetZero() <span class="comment">// Generate nil pointer.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		} else {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			elem, ok := sizedValue(concrete.Elem(), rand, size)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			if !ok {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>				return reflect.Value{}, false
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			v.Set(reflect.New(concrete.Elem()))
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			v.Elem().Set(elem)
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	case reflect.Slice:
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		numElems := rand.Intn(size)
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		sizeLeft := size - numElems
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		v.Set(reflect.MakeSlice(concrete, numElems, numElems))
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		for i := 0; i &lt; numElems; i++ {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			elem, ok := sizedValue(concrete.Elem(), rand, sizeLeft)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>			if !ok {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>				return reflect.Value{}, false
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>			}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			v.Index(i).Set(elem)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	case reflect.Array:
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		for i := 0; i &lt; v.Len(); i++ {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>			elem, ok := sizedValue(concrete.Elem(), rand, size)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>			if !ok {
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>				return reflect.Value{}, false
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>			}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>			v.Index(i).Set(elem)
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	case reflect.String:
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		numChars := rand.Intn(complexSize)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		codePoints := make([]rune, numChars)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		for i := 0; i &lt; numChars; i++ {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>			codePoints[i] = rune(rand.Intn(0x10ffff))
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		v.SetString(string(codePoints))
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	case reflect.Struct:
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		n := v.NumField()
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		<span class="comment">// Divide sizeLeft evenly among the struct fields.</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		sizeLeft := size
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		if n &gt; sizeLeft {
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>			sizeLeft = 1
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		} else if n &gt; 0 {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>			sizeLeft /= n
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		for i := 0; i &lt; n; i++ {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>			elem, ok := sizedValue(concrete.Field(i).Type, rand, sizeLeft)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>			if !ok {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>				return reflect.Value{}, false
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>			}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>			v.Field(i).Set(elem)
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	default:
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		return reflect.Value{}, false
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	return v, true
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// A Config structure contains options for running a test.</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>type Config struct {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	<span class="comment">// MaxCount sets the maximum number of iterations.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	<span class="comment">// If zero, MaxCountScale is used.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	MaxCount int
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	<span class="comment">// MaxCountScale is a non-negative scale factor applied to the</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	<span class="comment">// default maximum.</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	<span class="comment">// A count of zero implies the default, which is usually 100</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	<span class="comment">// but can be set by the -quickchecks flag.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	MaxCountScale float64
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	<span class="comment">// Rand specifies a source of random numbers.</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	<span class="comment">// If nil, a default pseudo-random source will be used.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	Rand *rand.Rand
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	<span class="comment">// Values specifies a function to generate a slice of</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	<span class="comment">// arbitrary reflect.Values that are congruent with the</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	<span class="comment">// arguments to the function being tested.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	<span class="comment">// If nil, the top-level Value function is used to generate them.</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	Values func([]reflect.Value, *rand.Rand)
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>var defaultConfig Config
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">// getRand returns the *rand.Rand to use for a given Config.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>func (c *Config) getRand() *rand.Rand {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	if c.Rand == nil {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		return rand.New(rand.NewSource(time.Now().UnixNano()))
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	return c.Rand
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// getMaxCount returns the maximum number of iterations to run for a given</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">// Config.</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>func (c *Config) getMaxCount() (maxCount int) {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	maxCount = c.MaxCount
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	if maxCount == 0 {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		if c.MaxCountScale != 0 {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>			maxCount = int(c.MaxCountScale * float64(*defaultMaxCount))
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		} else {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			maxCount = *defaultMaxCount
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	return
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// A SetupError is the result of an error in the way that check is being</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// used, independent of the functions being tested.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>type SetupError string
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>func (s SetupError) Error() string { return string(s) }
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// A CheckError is the result of Check finding an error.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>type CheckError struct {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	Count int
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	In    []any
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="selection">func (s *CheckError) Error() string</span> {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;#%d: failed on input %s&#34;, s.Count, toString(s.In))
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// A CheckEqualError is the result [CheckEqual] finding an error.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>type CheckEqualError struct {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	CheckError
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	Out1 []any
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	Out2 []any
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>func (s *CheckEqualError) Error() string {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;#%d: failed on input %s. Output 1: %s. Output 2: %s&#34;, s.Count, toString(s.In), toString(s.Out1), toString(s.Out2))
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// Check looks for an input to f, any function that returns bool,</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span><span class="comment">// such that f returns false. It calls f repeatedly, with arbitrary</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">// values for each argument. If f returns false on a given input,</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// Check returns that input as a *[CheckError].</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// For example:</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">//	func TestOddMultipleOfThree(t *testing.T) {</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">//		f := func(x int) bool {</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">//			y := OddMultipleOfThree(x)</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">//			return y%2 == 1 &amp;&amp; y%3 == 0</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">//		}</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">//		if err := quick.Check(f, nil); err != nil {</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">//			t.Error(err)</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">//		}</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>func Check(f any, config *Config) error {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	if config == nil {
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		config = &amp;defaultConfig
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	fVal, fType, ok := functionAndType(f)
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	if !ok {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		return SetupError(&#34;argument is not a function&#34;)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	if fType.NumOut() != 1 {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		return SetupError(&#34;function does not return one value&#34;)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	if fType.Out(0).Kind() != reflect.Bool {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		return SetupError(&#34;function does not return a bool&#34;)
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	arguments := make([]reflect.Value, fType.NumIn())
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	rand := config.getRand()
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	maxCount := config.getMaxCount()
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	for i := 0; i &lt; maxCount; i++ {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		err := arbitraryValues(arguments, fType, config, rand)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		if err != nil {
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>			return err
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		if !fVal.Call(arguments)[0].Bool() {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>			return &amp;CheckError{i + 1, toInterfaces(arguments)}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	return nil
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span><span class="comment">// CheckEqual looks for an input on which f and g return different results.</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">// It calls f and g repeatedly with arbitrary values for each argument.</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">// If f and g return different answers, CheckEqual returns a *[CheckEqualError]</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// describing the input and the outputs.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>func CheckEqual(f, g any, config *Config) error {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	if config == nil {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		config = &amp;defaultConfig
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	x, xType, ok := functionAndType(f)
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	if !ok {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		return SetupError(&#34;f is not a function&#34;)
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	y, yType, ok := functionAndType(g)
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	if !ok {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		return SetupError(&#34;g is not a function&#34;)
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	if xType != yType {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		return SetupError(&#34;functions have different types&#34;)
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	arguments := make([]reflect.Value, xType.NumIn())
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	rand := config.getRand()
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	maxCount := config.getMaxCount()
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	for i := 0; i &lt; maxCount; i++ {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		err := arbitraryValues(arguments, xType, config, rand)
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		if err != nil {
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>			return err
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		xOut := toInterfaces(x.Call(arguments))
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		yOut := toInterfaces(y.Call(arguments))
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		if !reflect.DeepEqual(xOut, yOut) {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>			return &amp;CheckEqualError{CheckError{i + 1, toInterfaces(arguments)}, xOut, yOut}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	return nil
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">// arbitraryValues writes Values to args such that args contains Values</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span><span class="comment">// suitable for calling f.</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>func arbitraryValues(args []reflect.Value, f reflect.Type, config *Config, rand *rand.Rand) (err error) {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	if config.Values != nil {
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		config.Values(args, rand)
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		return
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	for j := 0; j &lt; len(args); j++ {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		var ok bool
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		args[j], ok = Value(f.In(j), rand)
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		if !ok {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>			err = SetupError(fmt.Sprintf(&#34;cannot create arbitrary value of type %s for argument %d&#34;, f.In(j), j))
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>			return
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	}
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	return
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>}
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>func functionAndType(f any) (v reflect.Value, t reflect.Type, ok bool) {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	v = reflect.ValueOf(f)
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	ok = v.Kind() == reflect.Func
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	if !ok {
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		return
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	t = v.Type()
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	return
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>func toInterfaces(values []reflect.Value) []any {
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	ret := make([]any, len(values))
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	for i, v := range values {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		ret[i] = v.Interface()
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	}
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	return ret
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>func toString(interfaces []any) string {
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	s := make([]string, len(interfaces))
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	for i, v := range interfaces {
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		s[i] = fmt.Sprintf(&#34;%#v&#34;, v)
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	}
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	return strings.Join(s, &#34;, &#34;)
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>
</pre><p><a href="quick.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
