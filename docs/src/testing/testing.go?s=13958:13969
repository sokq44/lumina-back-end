<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/testing/testing.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./testing.go?s=13958:13969#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/testing">testing</a>/<span class="text-muted">testing.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/testing">testing</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package testing provides support for automated testing of Go packages.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// It is intended to be used in concert with the &#34;go test&#34; command, which automates</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// execution of any function of the form</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">//	func TestXxx(*testing.T)</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// where Xxx does not start with a lowercase letter. The function name</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// serves to identify the test routine.</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// Within these functions, use the Error, Fail or related methods to signal failure.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// To write a new test suite, create a file that</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// contains the TestXxx functions as described here,</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// and give that file a name ending in &#34;_test.go&#34;.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// The file will be excluded from regular</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// package builds but will be included when the &#34;go test&#34; command is run.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// The test file can be in the same package as the one being tested,</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// or in a corresponding package with the suffix &#34;_test&#34;.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// If the test file is in the same package, it may refer to unexported</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// identifiers within the package, as in this example:</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">//	package abs</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">//	import &#34;testing&#34;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//	func TestAbs(t *testing.T) {</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">//	    got := Abs(-1)</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">//	    if got != 1 {</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//	        t.Errorf(&#34;Abs(-1) = %d; want 1&#34;, got)</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">//	    }</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// If the file is in a separate &#34;_test&#34; package, the package being tested</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// must be imported explicitly and only its exported identifiers may be used.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// This is known as &#34;black box&#34; testing.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//	package abs_test</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//	import (</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//		&#34;testing&#34;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//		&#34;path_to_pkg/abs&#34;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//	)</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//	func TestAbs(t *testing.T) {</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//	    got := abs.Abs(-1)</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//	    if got != 1 {</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//	        t.Errorf(&#34;Abs(-1) = %d; want 1&#34;, got)</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">//	    }</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// For more detail, run &#34;go help test&#34; and &#34;go help testflag&#34;.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// # Benchmarks</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// Functions of the form</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//	func BenchmarkXxx(*testing.B)</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// are considered benchmarks, and are executed by the &#34;go test&#34; command when</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// its -bench flag is provided. Benchmarks are run sequentially.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// For a description of the testing flags, see</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// https://golang.org/cmd/go/#hdr-Testing_flags.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// A sample benchmark function looks like this:</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">//	func BenchmarkRandInt(b *testing.B) {</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">//	    for i := 0; i &lt; b.N; i++ {</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">//	        rand.Int()</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">//	    }</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// The benchmark function must run the target code b.N times.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// During benchmark execution, b.N is adjusted until the benchmark function lasts</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// long enough to be timed reliably. The output</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">//	BenchmarkRandInt-8   	68453040	        17.8 ns/op</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// means that the loop ran 68453040 times at a speed of 17.8 ns per loop.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// If a benchmark needs some expensive setup before running, the timer</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// may be reset:</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">//	func BenchmarkBigLen(b *testing.B) {</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">//	    big := NewBig()</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">//	    b.ResetTimer()</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">//	    for i := 0; i &lt; b.N; i++ {</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">//	        big.Len()</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">//	    }</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// If a benchmark needs to test performance in a parallel setting, it may use</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// the RunParallel helper function; such benchmarks are intended to be used with</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// the go test -cpu flag:</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">//	func BenchmarkTemplateParallel(b *testing.B) {</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">//	    templ := template.Must(template.New(&#34;test&#34;).Parse(&#34;Hello, {{.}}!&#34;))</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">//	    b.RunParallel(func(pb *testing.PB) {</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">//	        var buf bytes.Buffer</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">//	        for pb.Next() {</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">//	            buf.Reset()</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">//	            templ.Execute(&amp;buf, &#34;World&#34;)</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">//	        }</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">//	    })</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// A detailed specification of the benchmark results format is given</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// in https://golang.org/design/14313-benchmark-format.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// There are standard tools for working with benchmark results at</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// https://golang.org/x/perf/cmd.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// In particular, https://golang.org/x/perf/cmd/benchstat performs</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// statistically robust A/B comparisons.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// # Examples</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// The package also runs and verifies example code. Example functions may</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// include a concluding line comment that begins with &#34;Output:&#34; and is compared with</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// the standard output of the function when the tests are run. (The comparison</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// ignores leading and trailing space.) These are examples of an example:</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">//	func ExampleHello() {</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">//	    fmt.Println(&#34;hello&#34;)</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">//	    // Output: hello</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">//	func ExampleSalutations() {</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">//	    fmt.Println(&#34;hello, and&#34;)</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">//	    fmt.Println(&#34;goodbye&#34;)</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">//	    // Output:</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">//	    // hello, and</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">//	    // goodbye</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// The comment prefix &#34;Unordered output:&#34; is like &#34;Output:&#34;, but matches any</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// line order:</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">//	func ExamplePerm() {</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">//	    for _, value := range Perm(5) {</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">//	        fmt.Println(value)</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">//	    }</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">//	    // Unordered output: 4</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">//	    // 2</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">//	    // 1</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">//	    // 3</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">//	    // 0</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// Example functions without output comments are compiled but not executed.</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// The naming convention to declare examples for the package, a function F, a type T and</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// method M on type T are:</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">//	func Example() { ... }</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">//	func ExampleF() { ... }</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">//	func ExampleT() { ... }</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">//	func ExampleT_M() { ... }</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// Multiple example functions for a package/type/function/method may be provided by</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// appending a distinct suffix to the name. The suffix must start with a</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// lower-case letter.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">//	func Example_suffix() { ... }</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">//	func ExampleF_suffix() { ... }</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">//	func ExampleT_suffix() { ... }</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">//	func ExampleT_M_suffix() { ... }</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// The entire test file is presented as the example when it contains a single</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// example function, at least one other function, type, variable, or constant</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// declaration, and no test or benchmark functions.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// # Fuzzing</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">// &#39;go test&#39; and the testing package support fuzzing, a testing technique where</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// a function is called with randomly generated inputs to find bugs not</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// anticipated by unit tests.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// Functions of the form</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">//	func FuzzXxx(*testing.F)</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// are considered fuzz tests.</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// For example:</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">//	func FuzzHex(f *testing.F) {</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">//	  for _, seed := range [][]byte{{}, {0}, {9}, {0xa}, {0xf}, {1, 2, 3, 4}} {</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">//	    f.Add(seed)</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">//	  }</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">//	  f.Fuzz(func(t *testing.T, in []byte) {</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">//	    enc := hex.EncodeToString(in)</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">//	    out, err := hex.DecodeString(enc)</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">//	    if err != nil {</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">//	      t.Fatalf(&#34;%v: decode: %v&#34;, in, err)</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">//	    }</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">//	    if !bytes.Equal(in, out) {</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">//	      t.Fatalf(&#34;%v: not equal after round trip: %v&#34;, in, out)</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">//	    }</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">//	  })</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// A fuzz test maintains a seed corpus, or a set of inputs which are run by</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// default, and can seed input generation. Seed inputs may be registered by</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// calling (*F).Add or by storing files in the directory testdata/fuzz/&lt;Name&gt;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">// (where &lt;Name&gt; is the name of the fuzz test) within the package containing</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">// the fuzz test. Seed inputs are optional, but the fuzzing engine may find</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// bugs more efficiently when provided with a set of small seed inputs with good</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// code coverage. These seed inputs can also serve as regression tests for bugs</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// identified through fuzzing.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// The function passed to (*F).Fuzz within the fuzz test is considered the fuzz</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span><span class="comment">// target. A fuzz target must accept a *T parameter, followed by one or more</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// parameters for random inputs. The types of arguments passed to (*F).Add must</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// be identical to the types of these parameters. The fuzz target may signal</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// that it&#39;s found a problem the same way tests do: by calling T.Fail (or any</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// method that calls it like T.Error or T.Fatal) or by panicking.</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">// When fuzzing is enabled (by setting the -fuzz flag to a regular expression</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">// that matches a specific fuzz test), the fuzz target is called with arguments</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// generated by repeatedly making random changes to the seed inputs. On</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// supported platforms, &#39;go test&#39; compiles the test executable with fuzzing</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// coverage instrumentation. The fuzzing engine uses that instrumentation to</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">// find and cache inputs that expand coverage, increasing the likelihood of</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// finding bugs. If the fuzz target fails for a given input, the fuzzing engine</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">// writes the inputs that caused the failure to a file in the directory</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">// testdata/fuzz/&lt;Name&gt; within the package directory. This file later serves as</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">// a seed input. If the file can&#39;t be written at that location (for example,</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// because the directory is read-only), the fuzzing engine writes the file to</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// the fuzz cache directory within the build cache instead.</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// When fuzzing is disabled, the fuzz target is called with the seed inputs</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span><span class="comment">// registered with F.Add and seed inputs from testdata/fuzz/&lt;Name&gt;. In this</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">// mode, the fuzz test acts much like a regular test, with subtests started</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">// with F.Fuzz instead of T.Run.</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// See https://go.dev/doc/fuzz for documentation about fuzzing.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// # Skipping</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">// Tests or benchmarks may be skipped at run time with a call to</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// the Skip method of *T or *B:</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">//	func TestTimeConsuming(t *testing.T) {</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">//	    if testing.Short() {</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">//	        t.Skip(&#34;skipping test in short mode.&#34;)</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">//	    }</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">//	    ...</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// The Skip method of *T can be used in a fuzz target if the input is invalid,</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// but should not be considered a failing input. For example:</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">//	func FuzzJSONMarshaling(f *testing.F) {</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">//	    f.Fuzz(func(t *testing.T, b []byte) {</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">//	        var v interface{}</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span><span class="comment">//	        if err := json.Unmarshal(b, &amp;v); err != nil {</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span><span class="comment">//	            t.Skip()</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">//	        }</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">//	        if _, err := json.Marshal(v); err != nil {</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">//	            t.Errorf(&#34;Marshal: %v&#34;, err)</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">//	        }</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">//	    })</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// # Subtests and Sub-benchmarks</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">// The Run methods of T and B allow defining subtests and sub-benchmarks,</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// without having to define separate functions for each. This enables uses</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// like table-driven benchmarks and creating hierarchical tests.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">// It also provides a way to share common setup and tear-down code:</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">//	func TestFoo(t *testing.T) {</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">//	    // &lt;setup code&gt;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">//	    t.Run(&#34;A=1&#34;, func(t *testing.T) { ... })</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">//	    t.Run(&#34;A=2&#34;, func(t *testing.T) { ... })</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">//	    t.Run(&#34;B=1&#34;, func(t *testing.T) { ... })</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">//	    // &lt;tear-down code&gt;</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="comment">// Each subtest and sub-benchmark has a unique name: the combination of the name</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span><span class="comment">// of the top-level test and the sequence of names passed to Run, separated by</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// slashes, with an optional trailing sequence number for disambiguation.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// The argument to the -run, -bench, and -fuzz command-line flags is an unanchored regular</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">// expression that matches the test&#39;s name. For tests with multiple slash-separated</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// elements, such as subtests, the argument is itself slash-separated, with</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// expressions matching each name element in turn. Because it is unanchored, an</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">// empty expression matches any string.</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">// For example, using &#34;matching&#34; to mean &#34;whose name contains&#34;:</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span><span class="comment">//	go test -run &#39;&#39;        # Run all tests.</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">//	go test -run Foo       # Run top-level tests matching &#34;Foo&#34;, such as &#34;TestFooBar&#34;.</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">//	go test -run Foo/A=    # For top-level tests matching &#34;Foo&#34;, run subtests matching &#34;A=&#34;.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">//	go test -run /A=1      # For all top-level tests, run subtests matching &#34;A=1&#34;.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span><span class="comment">//	go test -fuzz FuzzFoo  # Fuzz the target matching &#34;FuzzFoo&#34;</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span><span class="comment">// The -run argument can also be used to run a specific value in the seed</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span><span class="comment">// corpus, for debugging. For example:</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span><span class="comment">//	go test -run=FuzzFoo/9ddb952d9814</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span><span class="comment">// The -fuzz and -run flags can both be set, in order to fuzz a target but</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span><span class="comment">// skip the execution of all other tests.</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">// Subtests can also be used to control parallelism. A parent test will only</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span><span class="comment">// complete once all of its subtests complete. In this example, all tests are</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">// run in parallel with each other, and only with each other, regardless of</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span><span class="comment">// other top-level tests that may be defined:</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span><span class="comment">//	func TestGroupedParallel(t *testing.T) {</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span><span class="comment">//	    for _, tc := range tests {</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span><span class="comment">//	        tc := tc // capture range variable</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span><span class="comment">//	        t.Run(tc.Name, func(t *testing.T) {</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span><span class="comment">//	            t.Parallel()</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span><span class="comment">//	            ...</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">//	        })</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span><span class="comment">//	    }</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span><span class="comment">// Run does not return until parallel subtests have completed, providing a way</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">// to clean up after a group of parallel tests:</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="comment">//	func TestTeardownParallel(t *testing.T) {</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span><span class="comment">//	    // This Run will not return until the parallel tests finish.</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span><span class="comment">//	    t.Run(&#34;group&#34;, func(t *testing.T) {</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">//	        t.Run(&#34;Test1&#34;, parallelTest1)</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">//	        t.Run(&#34;Test2&#34;, parallelTest2)</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">//	        t.Run(&#34;Test3&#34;, parallelTest3)</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">//	    })</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">//	    // &lt;tear-down code&gt;</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// # Main</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span><span class="comment">// It is sometimes necessary for a test or benchmark program to do extra setup or teardown</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span><span class="comment">// before or after it executes. It is also sometimes necessary to control</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span><span class="comment">// which code runs on the main thread. To support these and other cases,</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span><span class="comment">// if a test file contains a function:</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">//	func TestMain(m *testing.M)</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">// then the generated test will call TestMain(m) instead of running the tests or benchmarks</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span><span class="comment">// directly. TestMain runs in the main goroutine and can do whatever setup</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span><span class="comment">// and teardown is necessary around a call to m.Run. m.Run will return an exit</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span><span class="comment">// code that may be passed to os.Exit. If TestMain returns, the test wrapper</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// will pass the result of m.Run to os.Exit itself.</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">// When TestMain is called, flag.Parse has not been run. If TestMain depends on</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// command-line flags, including those of the testing package, it should call</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span><span class="comment">// flag.Parse explicitly. Command line flags are always parsed by the time test</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span><span class="comment">// or benchmark functions run.</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span><span class="comment">// A simple implementation of TestMain is:</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">//	func TestMain(m *testing.M) {</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span><span class="comment">//		// call flag.Parse() here if TestMain uses flags</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span><span class="comment">//		os.Exit(m.Run())</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span><span class="comment">// TestMain is a low-level primitive and should not be necessary for casual</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// testing needs, where ordinary test functions suffice.</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>package testing
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>import (
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	&#34;flag&#34;
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	&#34;internal/goexperiment&#34;
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	&#34;internal/race&#34;
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	&#34;math/rand&#34;
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	&#34;runtime&#34;
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	&#34;runtime/debug&#34;
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	&#34;runtime/trace&#34;
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	&#34;unicode&#34;
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>)
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>var initRan bool
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span><span class="comment">// Init registers testing flags. These flags are automatically registered by</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// the &#34;go test&#34; command before running test functions, so Init is only needed</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">// when calling functions such as Benchmark without using &#34;go test&#34;.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span><span class="comment">// Init is not safe to call concurrently. It has no effect if it was already called.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span><span class="selection">func Init()</span> {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	if initRan {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		return
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	}
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	initRan = true
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	<span class="comment">// The short flag requests that tests run more quickly, but its functionality</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	<span class="comment">// is provided by test writers themselves. The testing package is just its</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	<span class="comment">// home. The all.bash installation script sets it to make installation more</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	<span class="comment">// efficient, but by default the flag is off so a plain &#34;go test&#34; will do a</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	<span class="comment">// full test of the package.</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	short = flag.Bool(&#34;test.short&#34;, false, &#34;run smaller test suite to save time&#34;)
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	<span class="comment">// The failfast flag requests that test execution stop after the first test failure.</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	failFast = flag.Bool(&#34;test.failfast&#34;, false, &#34;do not start new tests after the first test failure&#34;)
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	<span class="comment">// The directory in which to create profile files and the like. When run from</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	<span class="comment">// &#34;go test&#34;, the binary always runs in the source directory for the package;</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	<span class="comment">// this flag lets &#34;go test&#34; tell the binary to write the files in the directory where</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	<span class="comment">// the &#34;go test&#34; command is run.</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	outputDir = flag.String(&#34;test.outputdir&#34;, &#34;&#34;, &#34;write profiles to `dir`&#34;)
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	<span class="comment">// Report as tests are run; default is silent for success.</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	flag.Var(&amp;chatty, &#34;test.v&#34;, &#34;verbose: print additional output&#34;)
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	count = flag.Uint(&#34;test.count&#34;, 1, &#34;run tests and benchmarks `n` times&#34;)
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	coverProfile = flag.String(&#34;test.coverprofile&#34;, &#34;&#34;, &#34;write a coverage profile to `file`&#34;)
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	gocoverdir = flag.String(&#34;test.gocoverdir&#34;, &#34;&#34;, &#34;write coverage intermediate files to this directory&#34;)
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	matchList = flag.String(&#34;test.list&#34;, &#34;&#34;, &#34;list tests, examples, and benchmarks matching `regexp` then exit&#34;)
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	match = flag.String(&#34;test.run&#34;, &#34;&#34;, &#34;run only tests and examples matching `regexp`&#34;)
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	skip = flag.String(&#34;test.skip&#34;, &#34;&#34;, &#34;do not list or run tests matching `regexp`&#34;)
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	memProfile = flag.String(&#34;test.memprofile&#34;, &#34;&#34;, &#34;write an allocation profile to `file`&#34;)
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	memProfileRate = flag.Int(&#34;test.memprofilerate&#34;, 0, &#34;set memory allocation profiling `rate` (see runtime.MemProfileRate)&#34;)
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	cpuProfile = flag.String(&#34;test.cpuprofile&#34;, &#34;&#34;, &#34;write a cpu profile to `file`&#34;)
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	blockProfile = flag.String(&#34;test.blockprofile&#34;, &#34;&#34;, &#34;write a goroutine blocking profile to `file`&#34;)
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	blockProfileRate = flag.Int(&#34;test.blockprofilerate&#34;, 1, &#34;set blocking profile `rate` (see runtime.SetBlockProfileRate)&#34;)
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	mutexProfile = flag.String(&#34;test.mutexprofile&#34;, &#34;&#34;, &#34;write a mutex contention profile to the named file after execution&#34;)
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	mutexProfileFraction = flag.Int(&#34;test.mutexprofilefraction&#34;, 1, &#34;if &gt;= 0, calls runtime.SetMutexProfileFraction()&#34;)
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	panicOnExit0 = flag.Bool(&#34;test.paniconexit0&#34;, false, &#34;panic on call to os.Exit(0)&#34;)
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	traceFile = flag.String(&#34;test.trace&#34;, &#34;&#34;, &#34;write an execution trace to `file`&#34;)
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	timeout = flag.Duration(&#34;test.timeout&#34;, 0, &#34;panic test binary after duration `d` (default 0, timeout disabled)&#34;)
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	cpuListStr = flag.String(&#34;test.cpu&#34;, &#34;&#34;, &#34;comma-separated `list` of cpu counts to run each test with&#34;)
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	parallel = flag.Int(&#34;test.parallel&#34;, runtime.GOMAXPROCS(0), &#34;run at most `n` tests in parallel&#34;)
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	testlog = flag.String(&#34;test.testlogfile&#34;, &#34;&#34;, &#34;write test action log to `file` (for use only by cmd/go)&#34;)
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	shuffle = flag.String(&#34;test.shuffle&#34;, &#34;off&#34;, &#34;randomize the execution order of tests and benchmarks&#34;)
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	fullPath = flag.Bool(&#34;test.fullpath&#34;, false, &#34;show full file names in error messages&#34;)
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	initBenchmarkFlags()
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	initFuzzFlags()
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>var (
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	<span class="comment">// Flags, registered during Init.</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	short                *bool
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	failFast             *bool
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	outputDir            *string
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	chatty               chattyFlag
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	count                *uint
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	coverProfile         *string
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	gocoverdir           *string
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	matchList            *string
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	match                *string
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	skip                 *string
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	memProfile           *string
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	memProfileRate       *int
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	cpuProfile           *string
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	blockProfile         *string
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	blockProfileRate     *int
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	mutexProfile         *string
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	mutexProfileFraction *int
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	panicOnExit0         *bool
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	traceFile            *string
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	timeout              *time.Duration
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	cpuListStr           *string
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	parallel             *int
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	shuffle              *string
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	testlog              *string
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	fullPath             *bool
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	haveExamples bool <span class="comment">// are there examples?</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	cpuList     []int
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	testlogFile *os.File
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	numFailed atomic.Uint32 <span class="comment">// number of test failures</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	running sync.Map <span class="comment">// map[string]time.Time of running, unpaused tests</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>)
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>type chattyFlag struct {
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	on   bool <span class="comment">// -v is set in some form</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	json bool <span class="comment">// -v=test2json is set, to make output better for test2json</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>}
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>func (*chattyFlag) IsBoolFlag() bool { return true }
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>func (f *chattyFlag) Set(arg string) error {
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	switch arg {
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	default:
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;invalid flag -test.v=%s&#34;, arg)
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	case &#34;true&#34;, &#34;test2json&#34;:
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		f.on = true
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		f.json = arg == &#34;test2json&#34;
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	case &#34;false&#34;:
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		f.on = false
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		f.json = false
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	return nil
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>func (f *chattyFlag) String() string {
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	if f.json {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		return &#34;test2json&#34;
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	}
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	if f.on {
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		return &#34;true&#34;
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	}
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	return &#34;false&#34;
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>func (f *chattyFlag) Get() any {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	if f.json {
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		return &#34;test2json&#34;
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	}
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	return f.on
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>const marker = byte(0x16) <span class="comment">// ^V for framing</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>func (f *chattyFlag) prefix() string {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	if f.json {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		return string(marker)
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	}
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	return &#34;&#34;
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>type chattyPrinter struct {
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	w          io.Writer
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	lastNameMu sync.Mutex <span class="comment">// guards lastName</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	lastName   string     <span class="comment">// last printed test name in chatty mode</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	json       bool       <span class="comment">// -v=json output mode</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>}
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>func newChattyPrinter(w io.Writer) *chattyPrinter {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	return &amp;chattyPrinter{w: w, json: chatty.json}
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>}
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span><span class="comment">// prefix is like chatty.prefix but using p.json instead of chatty.json.</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span><span class="comment">// Using p.json allows tests to check the json behavior without modifying</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span><span class="comment">// the global variable. For convenience, we allow p == nil and treat</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span><span class="comment">// that as not in json mode (because it&#39;s not chatty at all).</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>func (p *chattyPrinter) prefix() string {
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	if p != nil &amp;&amp; p.json {
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		return string(marker)
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	return &#34;&#34;
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>}
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span><span class="comment">// Updatef prints a message about the status of the named test to w.</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span><span class="comment">// The formatted message must include the test name itself.</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>func (p *chattyPrinter) Updatef(testName, format string, args ...any) {
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	p.lastNameMu.Lock()
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	defer p.lastNameMu.Unlock()
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	<span class="comment">// Since the message already implies an association with a specific new test,</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	<span class="comment">// we don&#39;t need to check what the old test name was or log an extra NAME line</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	<span class="comment">// for it. (We&#39;re updating it anyway, and the current message already includes</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	<span class="comment">// the test name.)</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	p.lastName = testName
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	fmt.Fprintf(p.w, p.prefix()+format, args...)
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>}
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span><span class="comment">// Printf prints a message, generated by the named test, that does not</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span><span class="comment">// necessarily mention that tests&#39;s name itself.</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>func (p *chattyPrinter) Printf(testName, format string, args ...any) {
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	p.lastNameMu.Lock()
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	defer p.lastNameMu.Unlock()
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	if p.lastName == &#34;&#34; {
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		p.lastName = testName
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	} else if p.lastName != testName {
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		fmt.Fprintf(p.w, &#34;%s=== NAME  %s\n&#34;, p.prefix(), testName)
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		p.lastName = testName
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	}
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	fmt.Fprintf(p.w, format, args...)
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>}
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span><span class="comment">// The maximum number of stack frames to go through when skipping helper functions for</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span><span class="comment">// the purpose of decorating log messages.</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>const maxStackLen = 50
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span><span class="comment">// common holds the elements common between T and B and</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span><span class="comment">// captures common methods such as Errorf.</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>type common struct {
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	mu          sync.RWMutex         <span class="comment">// guards this group of fields</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	output      []byte               <span class="comment">// Output generated by test or benchmark.</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	w           io.Writer            <span class="comment">// For flushToParent.</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	ran         bool                 <span class="comment">// Test or benchmark (or one of its subtests) was executed.</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	failed      bool                 <span class="comment">// Test or benchmark has failed.</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	skipped     bool                 <span class="comment">// Test or benchmark has been skipped.</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	done        bool                 <span class="comment">// Test is finished and all subtests have completed.</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	helperPCs   map[uintptr]struct{} <span class="comment">// functions to be skipped when writing file/line info</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	helperNames map[string]struct{}  <span class="comment">// helperPCs converted to function names</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	cleanups    []func()             <span class="comment">// optional functions to be called at the end of the test</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	cleanupName string               <span class="comment">// Name of the cleanup function.</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	cleanupPc   []uintptr            <span class="comment">// The stack trace at the point where Cleanup was called.</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	finished    bool                 <span class="comment">// Test function has completed.</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	inFuzzFn    bool                 <span class="comment">// Whether the fuzz target, if this is one, is running.</span>
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	chatty         *chattyPrinter <span class="comment">// A copy of chattyPrinter, if the chatty flag is set.</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	bench          bool           <span class="comment">// Whether the current test is a benchmark.</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	hasSub         atomic.Bool    <span class="comment">// whether there are sub-benchmarks.</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	cleanupStarted atomic.Bool    <span class="comment">// Registered cleanup callbacks have started to execute</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	runner         string         <span class="comment">// Function name of tRunner running the test.</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	isParallel     bool           <span class="comment">// Whether the test is parallel.</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	parent   *common
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	level    int       <span class="comment">// Nesting depth of test or benchmark.</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	creator  []uintptr <span class="comment">// If level &gt; 0, the stack trace at the point where the parent called t.Run.</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	name     string    <span class="comment">// Name of test or benchmark.</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	start    time.Time <span class="comment">// Time test or benchmark started</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	duration time.Duration
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	barrier  chan bool <span class="comment">// To signal parallel subtests they may start. Nil when T.Parallel is not present (B) or not usable (when fuzzing).</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	signal   chan bool <span class="comment">// To signal a test is done.</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	sub      []*T      <span class="comment">// Queue of subtests to be run in parallel.</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	lastRaceErrors  atomic.Int64 <span class="comment">// Max value of race.Errors seen during the test or its subtests.</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	raceErrorLogged atomic.Bool
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	tempDirMu  sync.Mutex
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	tempDir    string
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	tempDirErr error
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	tempDirSeq int32
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>}
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>
<span id="L636" class="ln">   636&nbsp;&nbsp;</span><span class="comment">// Short reports whether the -test.short flag is set.</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>func Short() bool {
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	if short == nil {
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		panic(&#34;testing: Short called before Init&#34;)
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>	}
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>	<span class="comment">// Catch code that calls this from TestMain without first calling flag.Parse.</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	if !flag.Parsed() {
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		panic(&#34;testing: Short called before Parse&#34;)
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	}
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	return *short
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>}
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span><span class="comment">// testBinary is set by cmd/go to &#34;1&#34; if this is a binary built by &#34;go test&#34;.</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span><span class="comment">// The value is set to &#34;1&#34; by a -X option to cmd/link. We assume that</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span><span class="comment">// because this is possible, the compiler will not optimize testBinary</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span><span class="comment">// into a constant on the basis that it is an unexported package-scope</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span><span class="comment">// variable that is never changed. If the compiler ever starts implementing</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span><span class="comment">// such an optimization, we will need some technique to mark this variable</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span><span class="comment">// as &#34;changed by a cmd/link -X option&#34;.</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>var testBinary = &#34;0&#34;
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span><span class="comment">// Testing reports whether the current code is being run in a test.</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span><span class="comment">// This will report true in programs created by &#34;go test&#34;,</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span><span class="comment">// false in programs created by &#34;go build&#34;.</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>func Testing() bool {
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	return testBinary == &#34;1&#34;
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>}
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span><span class="comment">// CoverMode reports what the test coverage mode is set to. The</span>
<span id="L666" class="ln">   666&nbsp;&nbsp;</span><span class="comment">// values are &#34;set&#34;, &#34;count&#34;, or &#34;atomic&#34;. The return value will be</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span><span class="comment">// empty if test coverage is not enabled.</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>func CoverMode() string {
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	if goexperiment.CoverageRedesign {
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>		return cover2.mode
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	}
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	return cover.Mode
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>}
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>
<span id="L675" class="ln">   675&nbsp;&nbsp;</span><span class="comment">// Verbose reports whether the -test.v flag is set.</span>
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>func Verbose() bool {
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	<span class="comment">// Same as in Short.</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	if !flag.Parsed() {
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		panic(&#34;testing: Verbose called before Parse&#34;)
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	}
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	return chatty.on
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>}
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>func (c *common) checkFuzzFn(name string) {
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	if c.inFuzzFn {
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;testing: f.%s was called inside the fuzz target, use t.%s instead&#34;, name, name))
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	}
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>}
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span><span class="comment">// frameSkip searches, starting after skip frames, for the first caller frame</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span><span class="comment">// in a function not marked as a helper and returns that frame.</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span><span class="comment">// The search stops if it finds a tRunner function that</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span><span class="comment">// was the entry point into the test and the test is not a subtest.</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span><span class="comment">// This function must be called with c.mu held.</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>func (c *common) frameSkip(skip int) runtime.Frame {
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	<span class="comment">// If the search continues into the parent test, we&#39;ll have to hold</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	<span class="comment">// its mu temporarily. If we then return, we need to unlock it.</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	shouldUnlock := false
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>	defer func() {
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		if shouldUnlock {
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>			c.mu.Unlock()
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>		}
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	}()
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	var pc [maxStackLen]uintptr
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	<span class="comment">// Skip two extra frames to account for this function</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	<span class="comment">// and runtime.Callers itself.</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	n := runtime.Callers(skip+2, pc[:])
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	if n == 0 {
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>		panic(&#34;testing: zero callers found&#34;)
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	}
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	frames := runtime.CallersFrames(pc[:n])
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	var firstFrame, prevFrame, frame runtime.Frame
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	for more := true; more; prevFrame = frame {
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>		frame, more = frames.Next()
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>		if frame.Function == &#34;runtime.gopanic&#34; {
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>			continue
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>		}
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>		if frame.Function == c.cleanupName {
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>			frames = runtime.CallersFrames(c.cleanupPc)
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>			continue
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		}
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		if firstFrame.PC == 0 {
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>			firstFrame = frame
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		}
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		if frame.Function == c.runner {
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>			<span class="comment">// We&#39;ve gone up all the way to the tRunner calling</span>
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>			<span class="comment">// the test function (so the user must have</span>
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>			<span class="comment">// called tb.Helper from inside that test function).</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>			<span class="comment">// If this is a top-level test, only skip up to the test function itself.</span>
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>			<span class="comment">// If we&#39;re in a subtest, continue searching in the parent test,</span>
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>			<span class="comment">// starting from the point of the call to Run which created this subtest.</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>			if c.level &gt; 1 {
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>				frames = runtime.CallersFrames(c.creator)
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>				parent := c.parent
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>				<span class="comment">// We&#39;re no longer looking at the current c after this point,</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>				<span class="comment">// so we should unlock its mu, unless it&#39;s the original receiver,</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>				<span class="comment">// in which case our caller doesn&#39;t expect us to do that.</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>				if shouldUnlock {
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>					c.mu.Unlock()
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>				}
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>				c = parent
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>				<span class="comment">// Remember to unlock c.mu when we no longer need it, either</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>				<span class="comment">// because we went up another nesting level, or because we</span>
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>				<span class="comment">// returned.</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>				shouldUnlock = true
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>				c.mu.Lock()
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>				continue
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>			}
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>			return prevFrame
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>		}
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>		<span class="comment">// If more helper PCs have been added since we last did the conversion</span>
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>		if c.helperNames == nil {
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>			c.helperNames = make(map[string]struct{})
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>			for pc := range c.helperPCs {
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>				c.helperNames[pcToName(pc)] = struct{}{}
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>			}
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>		}
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		if _, ok := c.helperNames[frame.Function]; !ok {
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>			<span class="comment">// Found a frame that wasn&#39;t inside a helper function.</span>
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>			return frame
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>		}
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	}
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	return firstFrame
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>}
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>
<span id="L766" class="ln">   766&nbsp;&nbsp;</span><span class="comment">// decorate prefixes the string with the file and line of the call site</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span><span class="comment">// and inserts the final newline if needed and indentation spaces for formatting.</span>
<span id="L768" class="ln">   768&nbsp;&nbsp;</span><span class="comment">// This function must be called with c.mu held.</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>func (c *common) decorate(s string, skip int) string {
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>	frame := c.frameSkip(skip)
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>	file := frame.File
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	line := frame.Line
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>	if file != &#34;&#34; {
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>		if *fullPath {
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>			<span class="comment">// If relative path, truncate file name at last file name separator.</span>
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>		} else if index := strings.LastIndexAny(file, `/\`); index &gt;= 0 {
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>			file = file[index+1:]
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>		}
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	} else {
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>		file = &#34;???&#34;
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>	}
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	if line == 0 {
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>		line = 1
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>	}
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>	buf := new(strings.Builder)
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	<span class="comment">// Every line is indented at least 4 spaces.</span>
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	buf.WriteString(&#34;    &#34;)
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>	fmt.Fprintf(buf, &#34;%s:%d: &#34;, file, line)
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>	lines := strings.Split(s, &#34;\n&#34;)
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	if l := len(lines); l &gt; 1 &amp;&amp; lines[l-1] == &#34;&#34; {
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>		lines = lines[:l-1]
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>	}
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>	for i, line := range lines {
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>			<span class="comment">// Second and subsequent lines are indented an additional 4 spaces.</span>
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>			buf.WriteString(&#34;\n        &#34;)
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>		}
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>		buf.WriteString(line)
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>	}
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	buf.WriteByte(&#39;\n&#39;)
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>	return buf.String()
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>}
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>
<span id="L804" class="ln">   804&nbsp;&nbsp;</span><span class="comment">// flushToParent writes c.output to the parent after first writing the header</span>
<span id="L805" class="ln">   805&nbsp;&nbsp;</span><span class="comment">// with the given format and arguments.</span>
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>func (c *common) flushToParent(testName, format string, args ...any) {
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>	p := c.parent
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>	p.mu.Lock()
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>	defer p.mu.Unlock()
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	c.mu.Lock()
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>	defer c.mu.Unlock()
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	if len(c.output) &gt; 0 {
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>		<span class="comment">// Add the current c.output to the print,</span>
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>		<span class="comment">// and then arrange for the print to replace c.output.</span>
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>		<span class="comment">// (This displays the logged output after the --- FAIL line.)</span>
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>		format += &#34;%s&#34;
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>		args = append(args[:len(args):len(args)], c.output)
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>		c.output = c.output[:0]
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>	}
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>	if c.chatty != nil &amp;&amp; (p.w == c.chatty.w || c.chatty.json) {
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>		<span class="comment">// We&#39;re flushing to the actual output, so track that this output is</span>
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>		<span class="comment">// associated with a specific test (and, specifically, that the next output</span>
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>		<span class="comment">// is *not* associated with that test).</span>
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>		<span class="comment">// Moreover, if c.output is non-empty it is important that this write be</span>
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>		<span class="comment">// atomic with respect to the output of other tests, so that we don&#39;t end up</span>
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>		<span class="comment">// with confusing &#39;=== NAME&#39; lines in the middle of our &#39;--- PASS&#39; block.</span>
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>		<span class="comment">// Neither humans nor cmd/test2json can parse those easily.</span>
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>		<span class="comment">// (See https://go.dev/issue/40771.)</span>
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>		<span class="comment">// If test2json is used, we never flush to parent tests,</span>
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>		<span class="comment">// so that the json stream shows subtests as they finish.</span>
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>		<span class="comment">// (See https://go.dev/issue/29811.)</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>		c.chatty.Updatef(testName, format, args...)
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>	} else {
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>		<span class="comment">// We&#39;re flushing to the output buffer of the parent test, which will</span>
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>		<span class="comment">// itself follow a test-name header when it is finally flushed to stdout.</span>
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>		fmt.Fprintf(p.w, c.chatty.prefix()+format, args...)
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>	}
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>}
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>type indenter struct {
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>	c *common
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>}
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>func (w indenter) Write(b []byte) (n int, err error) {
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>	n = len(b)
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>	for len(b) &gt; 0 {
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>		end := bytes.IndexByte(b, &#39;\n&#39;)
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>		if end == -1 {
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>			end = len(b)
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>		} else {
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>			end++
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>		}
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>		<span class="comment">// An indent of 4 spaces will neatly align the dashes with the status</span>
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>		<span class="comment">// indicator of the parent.</span>
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>		line := b[:end]
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>		if line[0] == marker {
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>			w.c.output = append(w.c.output, marker)
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>			line = line[1:]
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>		}
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>		const indent = &#34;    &#34;
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>		w.c.output = append(w.c.output, indent...)
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>		w.c.output = append(w.c.output, line...)
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>		b = b[end:]
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>	}
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>	return
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>}
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>
<span id="L873" class="ln">   873&nbsp;&nbsp;</span><span class="comment">// fmtDuration returns a string representing d in the form &#34;87.00s&#34;.</span>
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>func fmtDuration(d time.Duration) string {
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;%.2fs&#34;, d.Seconds())
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>}
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>
<span id="L878" class="ln">   878&nbsp;&nbsp;</span><span class="comment">// TB is the interface common to T, B, and F.</span>
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>type TB interface {
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>	Cleanup(func())
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>	Error(args ...any)
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>	Errorf(format string, args ...any)
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>	Fail()
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>	FailNow()
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>	Failed() bool
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>	Fatal(args ...any)
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>	Fatalf(format string, args ...any)
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>	Helper()
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>	Log(args ...any)
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>	Logf(format string, args ...any)
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>	Name() string
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>	Setenv(key, value string)
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>	Skip(args ...any)
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>	SkipNow()
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	Skipf(format string, args ...any)
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>	Skipped() bool
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>	TempDir() string
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>	<span class="comment">// A private method to prevent users implementing the</span>
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>	<span class="comment">// interface and so future additions to it will not</span>
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>	<span class="comment">// violate Go 1 compatibility.</span>
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>	private()
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>}
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>var _ TB = (*T)(nil)
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>var _ TB = (*B)(nil)
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>
<span id="L908" class="ln">   908&nbsp;&nbsp;</span><span class="comment">// T is a type passed to Test functions to manage test state and support formatted test logs.</span>
<span id="L909" class="ln">   909&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L910" class="ln">   910&nbsp;&nbsp;</span><span class="comment">// A test ends when its Test function returns or calls any of the methods</span>
<span id="L911" class="ln">   911&nbsp;&nbsp;</span><span class="comment">// FailNow, Fatal, Fatalf, SkipNow, Skip, or Skipf. Those methods, as well as</span>
<span id="L912" class="ln">   912&nbsp;&nbsp;</span><span class="comment">// the Parallel method, must be called only from the goroutine running the</span>
<span id="L913" class="ln">   913&nbsp;&nbsp;</span><span class="comment">// Test function.</span>
<span id="L914" class="ln">   914&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L915" class="ln">   915&nbsp;&nbsp;</span><span class="comment">// The other reporting methods, such as the variations of Log and Error,</span>
<span id="L916" class="ln">   916&nbsp;&nbsp;</span><span class="comment">// may be called simultaneously from multiple goroutines.</span>
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>type T struct {
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>	common
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>	isEnvSet bool
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>	context  *testContext <span class="comment">// For running tests and subtests.</span>
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>}
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>func (c *common) private() {}
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>
<span id="L925" class="ln">   925&nbsp;&nbsp;</span><span class="comment">// Name returns the name of the running (sub-) test or benchmark.</span>
<span id="L926" class="ln">   926&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L927" class="ln">   927&nbsp;&nbsp;</span><span class="comment">// The name will include the name of the test along with the names of</span>
<span id="L928" class="ln">   928&nbsp;&nbsp;</span><span class="comment">// any nested sub-tests. If two sibling sub-tests have the same name,</span>
<span id="L929" class="ln">   929&nbsp;&nbsp;</span><span class="comment">// Name will append a suffix to guarantee the returned name is unique.</span>
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>func (c *common) Name() string {
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>	return c.name
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>}
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>func (c *common) setRan() {
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>	if c.parent != nil {
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>		c.parent.setRan()
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>	}
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>	c.mu.Lock()
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>	defer c.mu.Unlock()
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>	c.ran = true
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>}
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>
<span id="L943" class="ln">   943&nbsp;&nbsp;</span><span class="comment">// Fail marks the function as having failed but continues execution.</span>
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>func (c *common) Fail() {
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>	if c.parent != nil {
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>		c.parent.Fail()
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>	}
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>	c.mu.Lock()
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>	defer c.mu.Unlock()
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>	<span class="comment">// c.done needs to be locked to synchronize checks to c.done in parent tests.</span>
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>	if c.done {
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>		panic(&#34;Fail in goroutine after &#34; + c.name + &#34; has completed&#34;)
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>	}
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>	c.failed = true
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>}
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>
<span id="L957" class="ln">   957&nbsp;&nbsp;</span><span class="comment">// Failed reports whether the function has failed.</span>
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>func (c *common) Failed() bool {
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>	c.mu.RLock()
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>	defer c.mu.RUnlock()
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>	if !c.done &amp;&amp; int64(race.Errors()) &gt; c.lastRaceErrors.Load() {
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>		c.mu.RUnlock()
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>		c.checkRaces()
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>		c.mu.RLock()
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>	}
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>	return c.failed
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>}
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>
<span id="L971" class="ln">   971&nbsp;&nbsp;</span><span class="comment">// FailNow marks the function as having failed and stops its execution</span>
<span id="L972" class="ln">   972&nbsp;&nbsp;</span><span class="comment">// by calling runtime.Goexit (which then runs all deferred calls in the</span>
<span id="L973" class="ln">   973&nbsp;&nbsp;</span><span class="comment">// current goroutine).</span>
<span id="L974" class="ln">   974&nbsp;&nbsp;</span><span class="comment">// Execution will continue at the next test or benchmark.</span>
<span id="L975" class="ln">   975&nbsp;&nbsp;</span><span class="comment">// FailNow must be called from the goroutine running the</span>
<span id="L976" class="ln">   976&nbsp;&nbsp;</span><span class="comment">// test or benchmark function, not from other goroutines</span>
<span id="L977" class="ln">   977&nbsp;&nbsp;</span><span class="comment">// created during the test. Calling FailNow does not stop</span>
<span id="L978" class="ln">   978&nbsp;&nbsp;</span><span class="comment">// those other goroutines.</span>
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>func (c *common) FailNow() {
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>	c.checkFuzzFn(&#34;FailNow&#34;)
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>	c.Fail()
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>	<span class="comment">// Calling runtime.Goexit will exit the goroutine, which</span>
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>	<span class="comment">// will run the deferred functions in this goroutine,</span>
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>	<span class="comment">// which will eventually run the deferred lines in tRunner,</span>
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>	<span class="comment">// which will signal to the test loop that this test is done.</span>
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>	<span class="comment">// A previous version of this code said:</span>
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>	<span class="comment">//	c.duration = ...</span>
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>	<span class="comment">//	c.signal &lt;- c.self</span>
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>	<span class="comment">//	runtime.Goexit()</span>
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>	<span class="comment">// This previous version duplicated code (those lines are in</span>
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>	<span class="comment">// tRunner no matter what), but worse the goroutine teardown</span>
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>	<span class="comment">// implicit in runtime.Goexit was not guaranteed to complete</span>
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>	<span class="comment">// before the test exited. If a test deferred an important cleanup</span>
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>	<span class="comment">// function (like removing temporary files), there was no guarantee</span>
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>	<span class="comment">// it would run on a test failure. Because we send on c.signal during</span>
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>	<span class="comment">// a top-of-stack deferred function now, we know that the send</span>
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>	<span class="comment">// only happens after any other stacked defers have completed.</span>
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>	c.mu.Lock()
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>	c.finished = true
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>	c.mu.Unlock()
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>	runtime.Goexit()
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>}
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span><span class="comment">// log generates the output. It&#39;s always at the same stack depth.</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>func (c *common) log(s string) {
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>	c.logDepth(s, 3) <span class="comment">// logDepth + log + public function</span>
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>}
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span><span class="comment">// logDepth generates the output at an arbitrary stack depth.</span>
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>func (c *common) logDepth(s string, depth int) {
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>	c.mu.Lock()
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>	defer c.mu.Unlock()
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>	if c.done {
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>		<span class="comment">// This test has already finished. Try and log this message</span>
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>		<span class="comment">// with our parent. If we don&#39;t have a parent, panic.</span>
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>		for parent := c.parent; parent != nil; parent = parent.parent {
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>			parent.mu.Lock()
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>			defer parent.mu.Unlock()
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>			if !parent.done {
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>				parent.output = append(parent.output, parent.decorate(s, depth+1)...)
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>				return
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>			}
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>		}
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>		panic(&#34;Log in goroutine after &#34; + c.name + &#34; has completed: &#34; + s)
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>	} else {
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>		if c.chatty != nil {
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>			if c.bench {
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>				<span class="comment">// Benchmarks don&#39;t print === CONT, so we should skip the test</span>
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>				<span class="comment">// printer and just print straight to stdout.</span>
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>				fmt.Print(c.decorate(s, depth+1))
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>			} else {
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>				c.chatty.Printf(c.name, &#34;%s&#34;, c.decorate(s, depth+1))
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>			}
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>			return
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>		}
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>		c.output = append(c.output, c.decorate(s, depth+1)...)
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>	}
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>}
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span><span class="comment">// Log formats its arguments using default formatting, analogous to Println,</span>
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span><span class="comment">// and records the text in the error log. For tests, the text will be printed only if</span>
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span><span class="comment">// the test fails or the -test.v flag is set. For benchmarks, the text is always</span>
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span><span class="comment">// printed to avoid having performance depend on the value of the -test.v flag.</span>
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>func (c *common) Log(args ...any) {
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>	c.checkFuzzFn(&#34;Log&#34;)
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>	c.log(fmt.Sprintln(args...))
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>}
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span><span class="comment">// Logf formats its arguments according to the format, analogous to Printf, and</span>
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span><span class="comment">// records the text in the error log. A final newline is added if not provided. For</span>
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span><span class="comment">// tests, the text will be printed only if the test fails or the -test.v flag is</span>
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span><span class="comment">// set. For benchmarks, the text is always printed to avoid having performance</span>
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span><span class="comment">// depend on the value of the -test.v flag.</span>
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>func (c *common) Logf(format string, args ...any) {
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>	c.checkFuzzFn(&#34;Logf&#34;)
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>	c.log(fmt.Sprintf(format, args...))
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>}
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span><span class="comment">// Error is equivalent to Log followed by Fail.</span>
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>func (c *common) Error(args ...any) {
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>	c.checkFuzzFn(&#34;Error&#34;)
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>	c.log(fmt.Sprintln(args...))
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>	c.Fail()
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>}
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span><span class="comment">// Errorf is equivalent to Logf followed by Fail.</span>
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>func (c *common) Errorf(format string, args ...any) {
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>	c.checkFuzzFn(&#34;Errorf&#34;)
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>	c.log(fmt.Sprintf(format, args...))
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>	c.Fail()
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>}
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span><span class="comment">// Fatal is equivalent to Log followed by FailNow.</span>
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>func (c *common) Fatal(args ...any) {
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>	c.checkFuzzFn(&#34;Fatal&#34;)
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>	c.log(fmt.Sprintln(args...))
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>	c.FailNow()
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>}
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span><span class="comment">// Fatalf is equivalent to Logf followed by FailNow.</span>
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>func (c *common) Fatalf(format string, args ...any) {
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>	c.checkFuzzFn(&#34;Fatalf&#34;)
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>	c.log(fmt.Sprintf(format, args...))
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>	c.FailNow()
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>}
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span><span class="comment">// Skip is equivalent to Log followed by SkipNow.</span>
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>func (c *common) Skip(args ...any) {
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>	c.checkFuzzFn(&#34;Skip&#34;)
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>	c.log(fmt.Sprintln(args...))
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>	c.SkipNow()
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>}
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span><span class="comment">// Skipf is equivalent to Logf followed by SkipNow.</span>
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>func (c *common) Skipf(format string, args ...any) {
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>	c.checkFuzzFn(&#34;Skipf&#34;)
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>	c.log(fmt.Sprintf(format, args...))
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>	c.SkipNow()
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>}
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span><span class="comment">// SkipNow marks the test as having been skipped and stops its execution</span>
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span><span class="comment">// by calling [runtime.Goexit].</span>
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span><span class="comment">// If a test fails (see Error, Errorf, Fail) and is then skipped,</span>
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span><span class="comment">// it is still considered to have failed.</span>
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span><span class="comment">// Execution will continue at the next test or benchmark. See also FailNow.</span>
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span><span class="comment">// SkipNow must be called from the goroutine running the test, not from</span>
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span><span class="comment">// other goroutines created during the test. Calling SkipNow does not stop</span>
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span><span class="comment">// those other goroutines.</span>
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>func (c *common) SkipNow() {
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>	c.checkFuzzFn(&#34;SkipNow&#34;)
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>	c.mu.Lock()
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>	c.skipped = true
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>	c.finished = true
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>	c.mu.Unlock()
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>	runtime.Goexit()
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>}
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span><span class="comment">// Skipped reports whether the test was skipped.</span>
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>func (c *common) Skipped() bool {
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>	c.mu.RLock()
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>	defer c.mu.RUnlock()
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>	return c.skipped
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>}
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span><span class="comment">// Helper marks the calling function as a test helper function.</span>
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span><span class="comment">// When printing file and line information, that function will be skipped.</span>
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span><span class="comment">// Helper may be called simultaneously from multiple goroutines.</span>
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>func (c *common) Helper() {
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>	c.mu.Lock()
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>	defer c.mu.Unlock()
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>	if c.helperPCs == nil {
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>		c.helperPCs = make(map[uintptr]struct{})
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>	}
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>	<span class="comment">// repeating code from callerName here to save walking a stack frame</span>
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>	var pc [1]uintptr
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>	n := runtime.Callers(2, pc[:]) <span class="comment">// skip runtime.Callers + Helper</span>
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>	if n == 0 {
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>		panic(&#34;testing: zero callers found&#34;)
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>	}
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>	if _, found := c.helperPCs[pc[0]]; !found {
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>		c.helperPCs[pc[0]] = struct{}{}
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>		c.helperNames = nil <span class="comment">// map will be recreated next time it is needed</span>
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>	}
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>}
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span><span class="comment">// Cleanup registers a function to be called when the test (or subtest) and all its</span>
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span><span class="comment">// subtests complete. Cleanup functions will be called in last added,</span>
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span><span class="comment">// first called order.</span>
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>func (c *common) Cleanup(f func()) {
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>	c.checkFuzzFn(&#34;Cleanup&#34;)
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>	var pc [maxStackLen]uintptr
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>	<span class="comment">// Skip two extra frames to account for this function and runtime.Callers itself.</span>
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>	n := runtime.Callers(2, pc[:])
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>	cleanupPc := pc[:n]
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>	fn := func() {
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>		defer func() {
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>			c.mu.Lock()
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>			defer c.mu.Unlock()
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>			c.cleanupName = &#34;&#34;
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>			c.cleanupPc = nil
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>		}()
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>		name := callerName(0)
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>		c.mu.Lock()
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>		c.cleanupName = name
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>		c.cleanupPc = cleanupPc
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>		c.mu.Unlock()
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>		f()
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>	}
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>	c.mu.Lock()
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>	defer c.mu.Unlock()
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>	c.cleanups = append(c.cleanups, fn)
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>}
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span><span class="comment">// TempDir returns a temporary directory for the test to use.</span>
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span><span class="comment">// The directory is automatically removed when the test and</span>
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span><span class="comment">// all its subtests complete.</span>
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span><span class="comment">// Each subsequent call to t.TempDir returns a unique directory;</span>
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span><span class="comment">// if the directory creation fails, TempDir terminates the test by calling Fatal.</span>
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>func (c *common) TempDir() string {
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>	c.checkFuzzFn(&#34;TempDir&#34;)
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>	<span class="comment">// Use a single parent directory for all the temporary directories</span>
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>	<span class="comment">// created by a test, each numbered sequentially.</span>
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>	c.tempDirMu.Lock()
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>	var nonExistent bool
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>	if c.tempDir == &#34;&#34; { <span class="comment">// Usually the case with js/wasm</span>
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>		nonExistent = true
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>	} else {
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>		_, err := os.Stat(c.tempDir)
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>		nonExistent = os.IsNotExist(err)
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>		if err != nil &amp;&amp; !nonExistent {
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>			c.Fatalf(&#34;TempDir: %v&#34;, err)
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>		}
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>	}
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>	if nonExistent {
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>		c.Helper()
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>		<span class="comment">// Drop unusual characters (such as path separators or</span>
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>		<span class="comment">// characters interacting with globs) from the directory name to</span>
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>		<span class="comment">// avoid surprising os.MkdirTemp behavior.</span>
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>		mapper := func(r rune) rune {
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>			if r &lt; utf8.RuneSelf {
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>				const allowed = &#34;!#$%&amp;()+,-.=@^_{}~ &#34;
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>				if &#39;0&#39; &lt;= r &amp;&amp; r &lt;= &#39;9&#39; ||
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>					&#39;a&#39; &lt;= r &amp;&amp; r &lt;= &#39;z&#39; ||
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>					&#39;A&#39; &lt;= r &amp;&amp; r &lt;= &#39;Z&#39; {
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>					return r
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>				}
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>				if strings.ContainsRune(allowed, r) {
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>					return r
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>				}
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>			} else if unicode.IsLetter(r) || unicode.IsNumber(r) {
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>				return r
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>			}
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>			return -1
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>		}
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>		pattern := strings.Map(mapper, c.Name())
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>		c.tempDir, c.tempDirErr = os.MkdirTemp(&#34;&#34;, pattern)
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>		if c.tempDirErr == nil {
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>			c.Cleanup(func() {
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>				if err := removeAll(c.tempDir); err != nil {
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>					c.Errorf(&#34;TempDir RemoveAll cleanup: %v&#34;, err)
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>				}
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>			})
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>		}
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>	}
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>	if c.tempDirErr == nil {
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>		c.tempDirSeq++
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>	}
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>	seq := c.tempDirSeq
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>	c.tempDirMu.Unlock()
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>	if c.tempDirErr != nil {
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>		c.Fatalf(&#34;TempDir: %v&#34;, c.tempDirErr)
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>	}
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>	dir := fmt.Sprintf(&#34;%s%c%03d&#34;, c.tempDir, os.PathSeparator, seq)
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>	if err := os.Mkdir(dir, 0777); err != nil {
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>		c.Fatalf(&#34;TempDir: %v&#34;, err)
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>	}
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>	return dir
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>}
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span>
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span><span class="comment">// removeAll is like os.RemoveAll, but retries Windows &#34;Access is denied.&#34;</span>
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span><span class="comment">// errors up to an arbitrary timeout.</span>
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span><span class="comment">// Those errors have been known to occur spuriously on at least the</span>
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span><span class="comment">// windows-amd64-2012 builder (https://go.dev/issue/50051), and can only occur</span>
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span><span class="comment">// legitimately if the test leaves behind a temp file that either is still open</span>
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span><span class="comment">// or the test otherwise lacks permission to delete. In the case of legitimate</span>
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span><span class="comment">// failures, a failing test may take a bit longer to fail, but once the test is</span>
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span><span class="comment">// fixed the extra latency will go away.</span>
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>func removeAll(path string) error {
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>	const arbitraryTimeout = 2 * time.Second
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>	var (
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>		start     time.Time
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>		nextSleep = 1 * time.Millisecond
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>	)
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>	for {
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>		err := os.RemoveAll(path)
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>		if !isWindowsRetryable(err) {
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>			return err
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>		}
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>		if start.IsZero() {
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>			start = time.Now()
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>		} else if d := time.Since(start) + nextSleep; d &gt;= arbitraryTimeout {
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>			return err
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>		}
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>		time.Sleep(nextSleep)
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>		nextSleep += time.Duration(rand.Int63n(int64(nextSleep)))
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>	}
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>}
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span><span class="comment">// Setenv calls os.Setenv(key, value) and uses Cleanup to</span>
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span><span class="comment">// restore the environment variable to its original value</span>
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span><span class="comment">// after the test.</span>
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span><span class="comment">// Because Setenv affects the whole process, it cannot be used</span>
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span><span class="comment">// in parallel tests or tests with parallel ancestors.</span>
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span>func (c *common) Setenv(key, value string) {
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span>	c.checkFuzzFn(&#34;Setenv&#34;)
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span>	prevValue, ok := os.LookupEnv(key)
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span>	if err := os.Setenv(key, value); err != nil {
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span>		c.Fatalf(&#34;cannot set environment variable: %v&#34;, err)
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span>	}
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span>
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span>	if ok {
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>		c.Cleanup(func() {
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span>			os.Setenv(key, prevValue)
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span>		})
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span>	} else {
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span>		c.Cleanup(func() {
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span>			os.Unsetenv(key)
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>		})
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span>	}
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span>}
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span>
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span><span class="comment">// panicHanding controls the panic handling used by runCleanup.</span>
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span>type panicHandling int
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span>
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span>const (
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span>	normalPanic panicHandling = iota
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span>	recoverAndReturnPanic
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span>)
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span>
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span><span class="comment">// runCleanup is called at the end of the test.</span>
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span><span class="comment">// If ph is recoverAndReturnPanic, it will catch panics, and return the</span>
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span><span class="comment">// recovered value if any.</span>
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>func (c *common) runCleanup(ph panicHandling) (panicVal any) {
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span>	c.cleanupStarted.Store(true)
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span>	defer c.cleanupStarted.Store(false)
<span id="L1323" class="ln">  1323&nbsp;&nbsp;</span>
<span id="L1324" class="ln">  1324&nbsp;&nbsp;</span>	if ph == recoverAndReturnPanic {
<span id="L1325" class="ln">  1325&nbsp;&nbsp;</span>		defer func() {
<span id="L1326" class="ln">  1326&nbsp;&nbsp;</span>			panicVal = recover()
<span id="L1327" class="ln">  1327&nbsp;&nbsp;</span>		}()
<span id="L1328" class="ln">  1328&nbsp;&nbsp;</span>	}
<span id="L1329" class="ln">  1329&nbsp;&nbsp;</span>
<span id="L1330" class="ln">  1330&nbsp;&nbsp;</span>	<span class="comment">// Make sure that if a cleanup function panics,</span>
<span id="L1331" class="ln">  1331&nbsp;&nbsp;</span>	<span class="comment">// we still run the remaining cleanup functions.</span>
<span id="L1332" class="ln">  1332&nbsp;&nbsp;</span>	defer func() {
<span id="L1333" class="ln">  1333&nbsp;&nbsp;</span>		c.mu.Lock()
<span id="L1334" class="ln">  1334&nbsp;&nbsp;</span>		recur := len(c.cleanups) &gt; 0
<span id="L1335" class="ln">  1335&nbsp;&nbsp;</span>		c.mu.Unlock()
<span id="L1336" class="ln">  1336&nbsp;&nbsp;</span>		if recur {
<span id="L1337" class="ln">  1337&nbsp;&nbsp;</span>			c.runCleanup(normalPanic)
<span id="L1338" class="ln">  1338&nbsp;&nbsp;</span>		}
<span id="L1339" class="ln">  1339&nbsp;&nbsp;</span>	}()
<span id="L1340" class="ln">  1340&nbsp;&nbsp;</span>
<span id="L1341" class="ln">  1341&nbsp;&nbsp;</span>	for {
<span id="L1342" class="ln">  1342&nbsp;&nbsp;</span>		var cleanup func()
<span id="L1343" class="ln">  1343&nbsp;&nbsp;</span>		c.mu.Lock()
<span id="L1344" class="ln">  1344&nbsp;&nbsp;</span>		if len(c.cleanups) &gt; 0 {
<span id="L1345" class="ln">  1345&nbsp;&nbsp;</span>			last := len(c.cleanups) - 1
<span id="L1346" class="ln">  1346&nbsp;&nbsp;</span>			cleanup = c.cleanups[last]
<span id="L1347" class="ln">  1347&nbsp;&nbsp;</span>			c.cleanups = c.cleanups[:last]
<span id="L1348" class="ln">  1348&nbsp;&nbsp;</span>		}
<span id="L1349" class="ln">  1349&nbsp;&nbsp;</span>		c.mu.Unlock()
<span id="L1350" class="ln">  1350&nbsp;&nbsp;</span>		if cleanup == nil {
<span id="L1351" class="ln">  1351&nbsp;&nbsp;</span>			return nil
<span id="L1352" class="ln">  1352&nbsp;&nbsp;</span>		}
<span id="L1353" class="ln">  1353&nbsp;&nbsp;</span>		cleanup()
<span id="L1354" class="ln">  1354&nbsp;&nbsp;</span>	}
<span id="L1355" class="ln">  1355&nbsp;&nbsp;</span>}
<span id="L1356" class="ln">  1356&nbsp;&nbsp;</span>
<span id="L1357" class="ln">  1357&nbsp;&nbsp;</span><span class="comment">// resetRaces updates c.parent&#39;s count of data race errors (or the global count,</span>
<span id="L1358" class="ln">  1358&nbsp;&nbsp;</span><span class="comment">// if c has no parent), and updates c.lastRaceErrors to match.</span>
<span id="L1359" class="ln">  1359&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1360" class="ln">  1360&nbsp;&nbsp;</span><span class="comment">// Any races that occurred prior to this call to resetRaces will</span>
<span id="L1361" class="ln">  1361&nbsp;&nbsp;</span><span class="comment">// not be attributed to c.</span>
<span id="L1362" class="ln">  1362&nbsp;&nbsp;</span>func (c *common) resetRaces() {
<span id="L1363" class="ln">  1363&nbsp;&nbsp;</span>	if c.parent == nil {
<span id="L1364" class="ln">  1364&nbsp;&nbsp;</span>		c.lastRaceErrors.Store(int64(race.Errors()))
<span id="L1365" class="ln">  1365&nbsp;&nbsp;</span>	} else {
<span id="L1366" class="ln">  1366&nbsp;&nbsp;</span>		c.lastRaceErrors.Store(c.parent.checkRaces())
<span id="L1367" class="ln">  1367&nbsp;&nbsp;</span>	}
<span id="L1368" class="ln">  1368&nbsp;&nbsp;</span>}
<span id="L1369" class="ln">  1369&nbsp;&nbsp;</span>
<span id="L1370" class="ln">  1370&nbsp;&nbsp;</span><span class="comment">// checkRaces checks whether the global count of data race errors has increased</span>
<span id="L1371" class="ln">  1371&nbsp;&nbsp;</span><span class="comment">// since c&#39;s count was last reset.</span>
<span id="L1372" class="ln">  1372&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1373" class="ln">  1373&nbsp;&nbsp;</span><span class="comment">// If so, it marks c as having failed due to those races (logging an error for</span>
<span id="L1374" class="ln">  1374&nbsp;&nbsp;</span><span class="comment">// the first such race), and updates the race counts for the parents of c so</span>
<span id="L1375" class="ln">  1375&nbsp;&nbsp;</span><span class="comment">// that if they are currently suspended (such as in a call to T.Run) they will</span>
<span id="L1376" class="ln">  1376&nbsp;&nbsp;</span><span class="comment">// not log separate errors for the race(s).</span>
<span id="L1377" class="ln">  1377&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1378" class="ln">  1378&nbsp;&nbsp;</span><span class="comment">// Note that multiple tests may be marked as failed due to the same race if they</span>
<span id="L1379" class="ln">  1379&nbsp;&nbsp;</span><span class="comment">// are executing in parallel.</span>
<span id="L1380" class="ln">  1380&nbsp;&nbsp;</span>func (c *common) checkRaces() (raceErrors int64) {
<span id="L1381" class="ln">  1381&nbsp;&nbsp;</span>	raceErrors = int64(race.Errors())
<span id="L1382" class="ln">  1382&nbsp;&nbsp;</span>	for {
<span id="L1383" class="ln">  1383&nbsp;&nbsp;</span>		last := c.lastRaceErrors.Load()
<span id="L1384" class="ln">  1384&nbsp;&nbsp;</span>		if raceErrors &lt;= last {
<span id="L1385" class="ln">  1385&nbsp;&nbsp;</span>			<span class="comment">// All races have already been reported.</span>
<span id="L1386" class="ln">  1386&nbsp;&nbsp;</span>			return raceErrors
<span id="L1387" class="ln">  1387&nbsp;&nbsp;</span>		}
<span id="L1388" class="ln">  1388&nbsp;&nbsp;</span>		if c.lastRaceErrors.CompareAndSwap(last, raceErrors) {
<span id="L1389" class="ln">  1389&nbsp;&nbsp;</span>			break
<span id="L1390" class="ln">  1390&nbsp;&nbsp;</span>		}
<span id="L1391" class="ln">  1391&nbsp;&nbsp;</span>	}
<span id="L1392" class="ln">  1392&nbsp;&nbsp;</span>
<span id="L1393" class="ln">  1393&nbsp;&nbsp;</span>	if c.raceErrorLogged.CompareAndSwap(false, true) {
<span id="L1394" class="ln">  1394&nbsp;&nbsp;</span>		<span class="comment">// This is the first race we&#39;ve encountered for this test.</span>
<span id="L1395" class="ln">  1395&nbsp;&nbsp;</span>		<span class="comment">// Mark the test as failed, and log the reason why only once.</span>
<span id="L1396" class="ln">  1396&nbsp;&nbsp;</span>		<span class="comment">// (Note that the race detector itself will still write a goroutine</span>
<span id="L1397" class="ln">  1397&nbsp;&nbsp;</span>		<span class="comment">// dump for any further races it detects.)</span>
<span id="L1398" class="ln">  1398&nbsp;&nbsp;</span>		c.Errorf(&#34;race detected during execution of test&#34;)
<span id="L1399" class="ln">  1399&nbsp;&nbsp;</span>	}
<span id="L1400" class="ln">  1400&nbsp;&nbsp;</span>
<span id="L1401" class="ln">  1401&nbsp;&nbsp;</span>	<span class="comment">// Update the parent(s) of this test so that they don&#39;t re-report the race.</span>
<span id="L1402" class="ln">  1402&nbsp;&nbsp;</span>	parent := c.parent
<span id="L1403" class="ln">  1403&nbsp;&nbsp;</span>	for parent != nil {
<span id="L1404" class="ln">  1404&nbsp;&nbsp;</span>		for {
<span id="L1405" class="ln">  1405&nbsp;&nbsp;</span>			last := parent.lastRaceErrors.Load()
<span id="L1406" class="ln">  1406&nbsp;&nbsp;</span>			if raceErrors &lt;= last {
<span id="L1407" class="ln">  1407&nbsp;&nbsp;</span>				<span class="comment">// This race was already reported by another (likely parallel) subtest.</span>
<span id="L1408" class="ln">  1408&nbsp;&nbsp;</span>				return raceErrors
<span id="L1409" class="ln">  1409&nbsp;&nbsp;</span>			}
<span id="L1410" class="ln">  1410&nbsp;&nbsp;</span>			if parent.lastRaceErrors.CompareAndSwap(last, raceErrors) {
<span id="L1411" class="ln">  1411&nbsp;&nbsp;</span>				break
<span id="L1412" class="ln">  1412&nbsp;&nbsp;</span>			}
<span id="L1413" class="ln">  1413&nbsp;&nbsp;</span>		}
<span id="L1414" class="ln">  1414&nbsp;&nbsp;</span>		parent = parent.parent
<span id="L1415" class="ln">  1415&nbsp;&nbsp;</span>	}
<span id="L1416" class="ln">  1416&nbsp;&nbsp;</span>
<span id="L1417" class="ln">  1417&nbsp;&nbsp;</span>	return raceErrors
<span id="L1418" class="ln">  1418&nbsp;&nbsp;</span>}
<span id="L1419" class="ln">  1419&nbsp;&nbsp;</span>
<span id="L1420" class="ln">  1420&nbsp;&nbsp;</span><span class="comment">// callerName gives the function name (qualified with a package path)</span>
<span id="L1421" class="ln">  1421&nbsp;&nbsp;</span><span class="comment">// for the caller after skip frames (where 0 means the current function).</span>
<span id="L1422" class="ln">  1422&nbsp;&nbsp;</span>func callerName(skip int) string {
<span id="L1423" class="ln">  1423&nbsp;&nbsp;</span>	var pc [1]uintptr
<span id="L1424" class="ln">  1424&nbsp;&nbsp;</span>	n := runtime.Callers(skip+2, pc[:]) <span class="comment">// skip + runtime.Callers + callerName</span>
<span id="L1425" class="ln">  1425&nbsp;&nbsp;</span>	if n == 0 {
<span id="L1426" class="ln">  1426&nbsp;&nbsp;</span>		panic(&#34;testing: zero callers found&#34;)
<span id="L1427" class="ln">  1427&nbsp;&nbsp;</span>	}
<span id="L1428" class="ln">  1428&nbsp;&nbsp;</span>	return pcToName(pc[0])
<span id="L1429" class="ln">  1429&nbsp;&nbsp;</span>}
<span id="L1430" class="ln">  1430&nbsp;&nbsp;</span>
<span id="L1431" class="ln">  1431&nbsp;&nbsp;</span>func pcToName(pc uintptr) string {
<span id="L1432" class="ln">  1432&nbsp;&nbsp;</span>	pcs := []uintptr{pc}
<span id="L1433" class="ln">  1433&nbsp;&nbsp;</span>	frames := runtime.CallersFrames(pcs)
<span id="L1434" class="ln">  1434&nbsp;&nbsp;</span>	frame, _ := frames.Next()
<span id="L1435" class="ln">  1435&nbsp;&nbsp;</span>	return frame.Function
<span id="L1436" class="ln">  1436&nbsp;&nbsp;</span>}
<span id="L1437" class="ln">  1437&nbsp;&nbsp;</span>
<span id="L1438" class="ln">  1438&nbsp;&nbsp;</span><span class="comment">// Parallel signals that this test is to be run in parallel with (and only with)</span>
<span id="L1439" class="ln">  1439&nbsp;&nbsp;</span><span class="comment">// other parallel tests. When a test is run multiple times due to use of</span>
<span id="L1440" class="ln">  1440&nbsp;&nbsp;</span><span class="comment">// -test.count or -test.cpu, multiple instances of a single test never run in</span>
<span id="L1441" class="ln">  1441&nbsp;&nbsp;</span><span class="comment">// parallel with each other.</span>
<span id="L1442" class="ln">  1442&nbsp;&nbsp;</span>func (t *T) Parallel() {
<span id="L1443" class="ln">  1443&nbsp;&nbsp;</span>	if t.isParallel {
<span id="L1444" class="ln">  1444&nbsp;&nbsp;</span>		panic(&#34;testing: t.Parallel called multiple times&#34;)
<span id="L1445" class="ln">  1445&nbsp;&nbsp;</span>	}
<span id="L1446" class="ln">  1446&nbsp;&nbsp;</span>	if t.isEnvSet {
<span id="L1447" class="ln">  1447&nbsp;&nbsp;</span>		panic(&#34;testing: t.Parallel called after t.Setenv; cannot set environment variables in parallel tests&#34;)
<span id="L1448" class="ln">  1448&nbsp;&nbsp;</span>	}
<span id="L1449" class="ln">  1449&nbsp;&nbsp;</span>	t.isParallel = true
<span id="L1450" class="ln">  1450&nbsp;&nbsp;</span>	if t.parent.barrier == nil {
<span id="L1451" class="ln">  1451&nbsp;&nbsp;</span>		<span class="comment">// T.Parallel has no effect when fuzzing.</span>
<span id="L1452" class="ln">  1452&nbsp;&nbsp;</span>		<span class="comment">// Multiple processes may run in parallel, but only one input can run at a</span>
<span id="L1453" class="ln">  1453&nbsp;&nbsp;</span>		<span class="comment">// time per process so we can attribute crashes to specific inputs.</span>
<span id="L1454" class="ln">  1454&nbsp;&nbsp;</span>		return
<span id="L1455" class="ln">  1455&nbsp;&nbsp;</span>	}
<span id="L1456" class="ln">  1456&nbsp;&nbsp;</span>
<span id="L1457" class="ln">  1457&nbsp;&nbsp;</span>	<span class="comment">// We don&#39;t want to include the time we spend waiting for serial tests</span>
<span id="L1458" class="ln">  1458&nbsp;&nbsp;</span>	<span class="comment">// in the test duration. Record the elapsed time thus far and reset the</span>
<span id="L1459" class="ln">  1459&nbsp;&nbsp;</span>	<span class="comment">// timer afterwards.</span>
<span id="L1460" class="ln">  1460&nbsp;&nbsp;</span>	t.duration += time.Since(t.start)
<span id="L1461" class="ln">  1461&nbsp;&nbsp;</span>
<span id="L1462" class="ln">  1462&nbsp;&nbsp;</span>	<span class="comment">// Add to the list of tests to be released by the parent.</span>
<span id="L1463" class="ln">  1463&nbsp;&nbsp;</span>	t.parent.sub = append(t.parent.sub, t)
<span id="L1464" class="ln">  1464&nbsp;&nbsp;</span>
<span id="L1465" class="ln">  1465&nbsp;&nbsp;</span>	<span class="comment">// Report any races during execution of this test up to this point.</span>
<span id="L1466" class="ln">  1466&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1467" class="ln">  1467&nbsp;&nbsp;</span>	<span class="comment">// We will assume that any races that occur between here and the point where</span>
<span id="L1468" class="ln">  1468&nbsp;&nbsp;</span>	<span class="comment">// we unblock are not caused by this subtest. That assumption usually holds,</span>
<span id="L1469" class="ln">  1469&nbsp;&nbsp;</span>	<span class="comment">// although it can be wrong if the test spawns a goroutine that races in the</span>
<span id="L1470" class="ln">  1470&nbsp;&nbsp;</span>	<span class="comment">// background while the rest of the test is blocked on the call to Parallel.</span>
<span id="L1471" class="ln">  1471&nbsp;&nbsp;</span>	<span class="comment">// If that happens, we will misattribute the background race to some other</span>
<span id="L1472" class="ln">  1472&nbsp;&nbsp;</span>	<span class="comment">// test, or to no test at all — but that false-negative is so unlikely that it</span>
<span id="L1473" class="ln">  1473&nbsp;&nbsp;</span>	<span class="comment">// is not worth adding race-report noise for the common case where the test is</span>
<span id="L1474" class="ln">  1474&nbsp;&nbsp;</span>	<span class="comment">// completely suspended during the call to Parallel.</span>
<span id="L1475" class="ln">  1475&nbsp;&nbsp;</span>	t.checkRaces()
<span id="L1476" class="ln">  1476&nbsp;&nbsp;</span>
<span id="L1477" class="ln">  1477&nbsp;&nbsp;</span>	if t.chatty != nil {
<span id="L1478" class="ln">  1478&nbsp;&nbsp;</span>		t.chatty.Updatef(t.name, &#34;=== PAUSE %s\n&#34;, t.name)
<span id="L1479" class="ln">  1479&nbsp;&nbsp;</span>	}
<span id="L1480" class="ln">  1480&nbsp;&nbsp;</span>	running.Delete(t.name)
<span id="L1481" class="ln">  1481&nbsp;&nbsp;</span>
<span id="L1482" class="ln">  1482&nbsp;&nbsp;</span>	t.signal &lt;- true   <span class="comment">// Release calling test.</span>
<span id="L1483" class="ln">  1483&nbsp;&nbsp;</span>	&lt;-t.parent.barrier <span class="comment">// Wait for the parent test to complete.</span>
<span id="L1484" class="ln">  1484&nbsp;&nbsp;</span>	t.context.waitParallel()
<span id="L1485" class="ln">  1485&nbsp;&nbsp;</span>
<span id="L1486" class="ln">  1486&nbsp;&nbsp;</span>	if t.chatty != nil {
<span id="L1487" class="ln">  1487&nbsp;&nbsp;</span>		t.chatty.Updatef(t.name, &#34;=== CONT  %s\n&#34;, t.name)
<span id="L1488" class="ln">  1488&nbsp;&nbsp;</span>	}
<span id="L1489" class="ln">  1489&nbsp;&nbsp;</span>	running.Store(t.name, time.Now())
<span id="L1490" class="ln">  1490&nbsp;&nbsp;</span>	t.start = time.Now()
<span id="L1491" class="ln">  1491&nbsp;&nbsp;</span>
<span id="L1492" class="ln">  1492&nbsp;&nbsp;</span>	<span class="comment">// Reset the local race counter to ignore any races that happened while this</span>
<span id="L1493" class="ln">  1493&nbsp;&nbsp;</span>	<span class="comment">// goroutine was blocked, such as in the parent test or in other parallel</span>
<span id="L1494" class="ln">  1494&nbsp;&nbsp;</span>	<span class="comment">// subtests.</span>
<span id="L1495" class="ln">  1495&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1496" class="ln">  1496&nbsp;&nbsp;</span>	<span class="comment">// (Note that we don&#39;t call parent.checkRaces here:</span>
<span id="L1497" class="ln">  1497&nbsp;&nbsp;</span>	<span class="comment">// if other parallel subtests have already introduced races, we want to</span>
<span id="L1498" class="ln">  1498&nbsp;&nbsp;</span>	<span class="comment">// let them report those races instead of attributing them to the parent.)</span>
<span id="L1499" class="ln">  1499&nbsp;&nbsp;</span>	t.lastRaceErrors.Store(int64(race.Errors()))
<span id="L1500" class="ln">  1500&nbsp;&nbsp;</span>}
<span id="L1501" class="ln">  1501&nbsp;&nbsp;</span>
<span id="L1502" class="ln">  1502&nbsp;&nbsp;</span><span class="comment">// Setenv calls os.Setenv(key, value) and uses Cleanup to</span>
<span id="L1503" class="ln">  1503&nbsp;&nbsp;</span><span class="comment">// restore the environment variable to its original value</span>
<span id="L1504" class="ln">  1504&nbsp;&nbsp;</span><span class="comment">// after the test.</span>
<span id="L1505" class="ln">  1505&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1506" class="ln">  1506&nbsp;&nbsp;</span><span class="comment">// Because Setenv affects the whole process, it cannot be used</span>
<span id="L1507" class="ln">  1507&nbsp;&nbsp;</span><span class="comment">// in parallel tests or tests with parallel ancestors.</span>
<span id="L1508" class="ln">  1508&nbsp;&nbsp;</span>func (t *T) Setenv(key, value string) {
<span id="L1509" class="ln">  1509&nbsp;&nbsp;</span>	<span class="comment">// Non-parallel subtests that have parallel ancestors may still</span>
<span id="L1510" class="ln">  1510&nbsp;&nbsp;</span>	<span class="comment">// run in parallel with other tests: they are only non-parallel</span>
<span id="L1511" class="ln">  1511&nbsp;&nbsp;</span>	<span class="comment">// with respect to the other subtests of the same parent.</span>
<span id="L1512" class="ln">  1512&nbsp;&nbsp;</span>	<span class="comment">// Since SetEnv affects the whole process, we need to disallow it</span>
<span id="L1513" class="ln">  1513&nbsp;&nbsp;</span>	<span class="comment">// if the current test or any parent is parallel.</span>
<span id="L1514" class="ln">  1514&nbsp;&nbsp;</span>	isParallel := false
<span id="L1515" class="ln">  1515&nbsp;&nbsp;</span>	for c := &amp;t.common; c != nil; c = c.parent {
<span id="L1516" class="ln">  1516&nbsp;&nbsp;</span>		if c.isParallel {
<span id="L1517" class="ln">  1517&nbsp;&nbsp;</span>			isParallel = true
<span id="L1518" class="ln">  1518&nbsp;&nbsp;</span>			break
<span id="L1519" class="ln">  1519&nbsp;&nbsp;</span>		}
<span id="L1520" class="ln">  1520&nbsp;&nbsp;</span>	}
<span id="L1521" class="ln">  1521&nbsp;&nbsp;</span>	if isParallel {
<span id="L1522" class="ln">  1522&nbsp;&nbsp;</span>		panic(&#34;testing: t.Setenv called after t.Parallel; cannot set environment variables in parallel tests&#34;)
<span id="L1523" class="ln">  1523&nbsp;&nbsp;</span>	}
<span id="L1524" class="ln">  1524&nbsp;&nbsp;</span>
<span id="L1525" class="ln">  1525&nbsp;&nbsp;</span>	t.isEnvSet = true
<span id="L1526" class="ln">  1526&nbsp;&nbsp;</span>
<span id="L1527" class="ln">  1527&nbsp;&nbsp;</span>	t.common.Setenv(key, value)
<span id="L1528" class="ln">  1528&nbsp;&nbsp;</span>}
<span id="L1529" class="ln">  1529&nbsp;&nbsp;</span>
<span id="L1530" class="ln">  1530&nbsp;&nbsp;</span><span class="comment">// InternalTest is an internal type but exported because it is cross-package;</span>
<span id="L1531" class="ln">  1531&nbsp;&nbsp;</span><span class="comment">// it is part of the implementation of the &#34;go test&#34; command.</span>
<span id="L1532" class="ln">  1532&nbsp;&nbsp;</span>type InternalTest struct {
<span id="L1533" class="ln">  1533&nbsp;&nbsp;</span>	Name string
<span id="L1534" class="ln">  1534&nbsp;&nbsp;</span>	F    func(*T)
<span id="L1535" class="ln">  1535&nbsp;&nbsp;</span>}
<span id="L1536" class="ln">  1536&nbsp;&nbsp;</span>
<span id="L1537" class="ln">  1537&nbsp;&nbsp;</span>var errNilPanicOrGoexit = errors.New(&#34;test executed panic(nil) or runtime.Goexit&#34;)
<span id="L1538" class="ln">  1538&nbsp;&nbsp;</span>
<span id="L1539" class="ln">  1539&nbsp;&nbsp;</span>func tRunner(t *T, fn func(t *T)) {
<span id="L1540" class="ln">  1540&nbsp;&nbsp;</span>	t.runner = callerName(0)
<span id="L1541" class="ln">  1541&nbsp;&nbsp;</span>
<span id="L1542" class="ln">  1542&nbsp;&nbsp;</span>	<span class="comment">// When this goroutine is done, either because fn(t)</span>
<span id="L1543" class="ln">  1543&nbsp;&nbsp;</span>	<span class="comment">// returned normally or because a test failure triggered</span>
<span id="L1544" class="ln">  1544&nbsp;&nbsp;</span>	<span class="comment">// a call to runtime.Goexit, record the duration and send</span>
<span id="L1545" class="ln">  1545&nbsp;&nbsp;</span>	<span class="comment">// a signal saying that the test is done.</span>
<span id="L1546" class="ln">  1546&nbsp;&nbsp;</span>	defer func() {
<span id="L1547" class="ln">  1547&nbsp;&nbsp;</span>		t.checkRaces()
<span id="L1548" class="ln">  1548&nbsp;&nbsp;</span>
<span id="L1549" class="ln">  1549&nbsp;&nbsp;</span>		<span class="comment">// TODO(#61034): This is the wrong place for this check.</span>
<span id="L1550" class="ln">  1550&nbsp;&nbsp;</span>		if t.Failed() {
<span id="L1551" class="ln">  1551&nbsp;&nbsp;</span>			numFailed.Add(1)
<span id="L1552" class="ln">  1552&nbsp;&nbsp;</span>		}
<span id="L1553" class="ln">  1553&nbsp;&nbsp;</span>
<span id="L1554" class="ln">  1554&nbsp;&nbsp;</span>		<span class="comment">// Check if the test panicked or Goexited inappropriately.</span>
<span id="L1555" class="ln">  1555&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L1556" class="ln">  1556&nbsp;&nbsp;</span>		<span class="comment">// If this happens in a normal test, print output but continue panicking.</span>
<span id="L1557" class="ln">  1557&nbsp;&nbsp;</span>		<span class="comment">// tRunner is called in its own goroutine, so this terminates the process.</span>
<span id="L1558" class="ln">  1558&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L1559" class="ln">  1559&nbsp;&nbsp;</span>		<span class="comment">// If this happens while fuzzing, recover from the panic and treat it like a</span>
<span id="L1560" class="ln">  1560&nbsp;&nbsp;</span>		<span class="comment">// normal failure. It&#39;s important that the process keeps running in order to</span>
<span id="L1561" class="ln">  1561&nbsp;&nbsp;</span>		<span class="comment">// find short inputs that cause panics.</span>
<span id="L1562" class="ln">  1562&nbsp;&nbsp;</span>		err := recover()
<span id="L1563" class="ln">  1563&nbsp;&nbsp;</span>		signal := true
<span id="L1564" class="ln">  1564&nbsp;&nbsp;</span>
<span id="L1565" class="ln">  1565&nbsp;&nbsp;</span>		t.mu.RLock()
<span id="L1566" class="ln">  1566&nbsp;&nbsp;</span>		finished := t.finished
<span id="L1567" class="ln">  1567&nbsp;&nbsp;</span>		t.mu.RUnlock()
<span id="L1568" class="ln">  1568&nbsp;&nbsp;</span>		if !finished &amp;&amp; err == nil {
<span id="L1569" class="ln">  1569&nbsp;&nbsp;</span>			err = errNilPanicOrGoexit
<span id="L1570" class="ln">  1570&nbsp;&nbsp;</span>			for p := t.parent; p != nil; p = p.parent {
<span id="L1571" class="ln">  1571&nbsp;&nbsp;</span>				p.mu.RLock()
<span id="L1572" class="ln">  1572&nbsp;&nbsp;</span>				finished = p.finished
<span id="L1573" class="ln">  1573&nbsp;&nbsp;</span>				p.mu.RUnlock()
<span id="L1574" class="ln">  1574&nbsp;&nbsp;</span>				if finished {
<span id="L1575" class="ln">  1575&nbsp;&nbsp;</span>					if !t.isParallel {
<span id="L1576" class="ln">  1576&nbsp;&nbsp;</span>						t.Errorf(&#34;%v: subtest may have called FailNow on a parent test&#34;, err)
<span id="L1577" class="ln">  1577&nbsp;&nbsp;</span>						err = nil
<span id="L1578" class="ln">  1578&nbsp;&nbsp;</span>					}
<span id="L1579" class="ln">  1579&nbsp;&nbsp;</span>					signal = false
<span id="L1580" class="ln">  1580&nbsp;&nbsp;</span>					break
<span id="L1581" class="ln">  1581&nbsp;&nbsp;</span>				}
<span id="L1582" class="ln">  1582&nbsp;&nbsp;</span>			}
<span id="L1583" class="ln">  1583&nbsp;&nbsp;</span>		}
<span id="L1584" class="ln">  1584&nbsp;&nbsp;</span>
<span id="L1585" class="ln">  1585&nbsp;&nbsp;</span>		if err != nil &amp;&amp; t.context.isFuzzing {
<span id="L1586" class="ln">  1586&nbsp;&nbsp;</span>			prefix := &#34;panic: &#34;
<span id="L1587" class="ln">  1587&nbsp;&nbsp;</span>			if err == errNilPanicOrGoexit {
<span id="L1588" class="ln">  1588&nbsp;&nbsp;</span>				prefix = &#34;&#34;
<span id="L1589" class="ln">  1589&nbsp;&nbsp;</span>			}
<span id="L1590" class="ln">  1590&nbsp;&nbsp;</span>			t.Errorf(&#34;%s%s\n%s\n&#34;, prefix, err, string(debug.Stack()))
<span id="L1591" class="ln">  1591&nbsp;&nbsp;</span>			t.mu.Lock()
<span id="L1592" class="ln">  1592&nbsp;&nbsp;</span>			t.finished = true
<span id="L1593" class="ln">  1593&nbsp;&nbsp;</span>			t.mu.Unlock()
<span id="L1594" class="ln">  1594&nbsp;&nbsp;</span>			err = nil
<span id="L1595" class="ln">  1595&nbsp;&nbsp;</span>		}
<span id="L1596" class="ln">  1596&nbsp;&nbsp;</span>
<span id="L1597" class="ln">  1597&nbsp;&nbsp;</span>		<span class="comment">// Use a deferred call to ensure that we report that the test is</span>
<span id="L1598" class="ln">  1598&nbsp;&nbsp;</span>		<span class="comment">// complete even if a cleanup function calls t.FailNow. See issue 41355.</span>
<span id="L1599" class="ln">  1599&nbsp;&nbsp;</span>		didPanic := false
<span id="L1600" class="ln">  1600&nbsp;&nbsp;</span>		defer func() {
<span id="L1601" class="ln">  1601&nbsp;&nbsp;</span>			<span class="comment">// Only report that the test is complete if it doesn&#39;t panic,</span>
<span id="L1602" class="ln">  1602&nbsp;&nbsp;</span>			<span class="comment">// as otherwise the test binary can exit before the panic is</span>
<span id="L1603" class="ln">  1603&nbsp;&nbsp;</span>			<span class="comment">// reported to the user. See issue 41479.</span>
<span id="L1604" class="ln">  1604&nbsp;&nbsp;</span>			if didPanic {
<span id="L1605" class="ln">  1605&nbsp;&nbsp;</span>				return
<span id="L1606" class="ln">  1606&nbsp;&nbsp;</span>			}
<span id="L1607" class="ln">  1607&nbsp;&nbsp;</span>			if err != nil {
<span id="L1608" class="ln">  1608&nbsp;&nbsp;</span>				panic(err)
<span id="L1609" class="ln">  1609&nbsp;&nbsp;</span>			}
<span id="L1610" class="ln">  1610&nbsp;&nbsp;</span>			running.Delete(t.name)
<span id="L1611" class="ln">  1611&nbsp;&nbsp;</span>			t.signal &lt;- signal
<span id="L1612" class="ln">  1612&nbsp;&nbsp;</span>		}()
<span id="L1613" class="ln">  1613&nbsp;&nbsp;</span>
<span id="L1614" class="ln">  1614&nbsp;&nbsp;</span>		doPanic := func(err any) {
<span id="L1615" class="ln">  1615&nbsp;&nbsp;</span>			t.Fail()
<span id="L1616" class="ln">  1616&nbsp;&nbsp;</span>			if r := t.runCleanup(recoverAndReturnPanic); r != nil {
<span id="L1617" class="ln">  1617&nbsp;&nbsp;</span>				t.Logf(&#34;cleanup panicked with %v&#34;, r)
<span id="L1618" class="ln">  1618&nbsp;&nbsp;</span>			}
<span id="L1619" class="ln">  1619&nbsp;&nbsp;</span>			<span class="comment">// Flush the output log up to the root before dying.</span>
<span id="L1620" class="ln">  1620&nbsp;&nbsp;</span>			for root := &amp;t.common; root.parent != nil; root = root.parent {
<span id="L1621" class="ln">  1621&nbsp;&nbsp;</span>				root.mu.Lock()
<span id="L1622" class="ln">  1622&nbsp;&nbsp;</span>				root.duration += time.Since(root.start)
<span id="L1623" class="ln">  1623&nbsp;&nbsp;</span>				d := root.duration
<span id="L1624" class="ln">  1624&nbsp;&nbsp;</span>				root.mu.Unlock()
<span id="L1625" class="ln">  1625&nbsp;&nbsp;</span>				root.flushToParent(root.name, &#34;--- FAIL: %s (%s)\n&#34;, root.name, fmtDuration(d))
<span id="L1626" class="ln">  1626&nbsp;&nbsp;</span>				if r := root.parent.runCleanup(recoverAndReturnPanic); r != nil {
<span id="L1627" class="ln">  1627&nbsp;&nbsp;</span>					fmt.Fprintf(root.parent.w, &#34;cleanup panicked with %v&#34;, r)
<span id="L1628" class="ln">  1628&nbsp;&nbsp;</span>				}
<span id="L1629" class="ln">  1629&nbsp;&nbsp;</span>			}
<span id="L1630" class="ln">  1630&nbsp;&nbsp;</span>			didPanic = true
<span id="L1631" class="ln">  1631&nbsp;&nbsp;</span>			panic(err)
<span id="L1632" class="ln">  1632&nbsp;&nbsp;</span>		}
<span id="L1633" class="ln">  1633&nbsp;&nbsp;</span>		if err != nil {
<span id="L1634" class="ln">  1634&nbsp;&nbsp;</span>			doPanic(err)
<span id="L1635" class="ln">  1635&nbsp;&nbsp;</span>		}
<span id="L1636" class="ln">  1636&nbsp;&nbsp;</span>
<span id="L1637" class="ln">  1637&nbsp;&nbsp;</span>		t.duration += time.Since(t.start)
<span id="L1638" class="ln">  1638&nbsp;&nbsp;</span>
<span id="L1639" class="ln">  1639&nbsp;&nbsp;</span>		if len(t.sub) &gt; 0 {
<span id="L1640" class="ln">  1640&nbsp;&nbsp;</span>			<span class="comment">// Run parallel subtests.</span>
<span id="L1641" class="ln">  1641&nbsp;&nbsp;</span>
<span id="L1642" class="ln">  1642&nbsp;&nbsp;</span>			<span class="comment">// Decrease the running count for this test and mark it as no longer running.</span>
<span id="L1643" class="ln">  1643&nbsp;&nbsp;</span>			t.context.release()
<span id="L1644" class="ln">  1644&nbsp;&nbsp;</span>			running.Delete(t.name)
<span id="L1645" class="ln">  1645&nbsp;&nbsp;</span>
<span id="L1646" class="ln">  1646&nbsp;&nbsp;</span>			<span class="comment">// Release the parallel subtests.</span>
<span id="L1647" class="ln">  1647&nbsp;&nbsp;</span>			close(t.barrier)
<span id="L1648" class="ln">  1648&nbsp;&nbsp;</span>			<span class="comment">// Wait for subtests to complete.</span>
<span id="L1649" class="ln">  1649&nbsp;&nbsp;</span>			for _, sub := range t.sub {
<span id="L1650" class="ln">  1650&nbsp;&nbsp;</span>				&lt;-sub.signal
<span id="L1651" class="ln">  1651&nbsp;&nbsp;</span>			}
<span id="L1652" class="ln">  1652&nbsp;&nbsp;</span>
<span id="L1653" class="ln">  1653&nbsp;&nbsp;</span>			<span class="comment">// Run any cleanup callbacks, marking the test as running</span>
<span id="L1654" class="ln">  1654&nbsp;&nbsp;</span>			<span class="comment">// in case the cleanup hangs.</span>
<span id="L1655" class="ln">  1655&nbsp;&nbsp;</span>			cleanupStart := time.Now()
<span id="L1656" class="ln">  1656&nbsp;&nbsp;</span>			running.Store(t.name, cleanupStart)
<span id="L1657" class="ln">  1657&nbsp;&nbsp;</span>			err := t.runCleanup(recoverAndReturnPanic)
<span id="L1658" class="ln">  1658&nbsp;&nbsp;</span>			t.duration += time.Since(cleanupStart)
<span id="L1659" class="ln">  1659&nbsp;&nbsp;</span>			if err != nil {
<span id="L1660" class="ln">  1660&nbsp;&nbsp;</span>				doPanic(err)
<span id="L1661" class="ln">  1661&nbsp;&nbsp;</span>			}
<span id="L1662" class="ln">  1662&nbsp;&nbsp;</span>			t.checkRaces()
<span id="L1663" class="ln">  1663&nbsp;&nbsp;</span>			if !t.isParallel {
<span id="L1664" class="ln">  1664&nbsp;&nbsp;</span>				<span class="comment">// Reacquire the count for sequential tests. See comment in Run.</span>
<span id="L1665" class="ln">  1665&nbsp;&nbsp;</span>				t.context.waitParallel()
<span id="L1666" class="ln">  1666&nbsp;&nbsp;</span>			}
<span id="L1667" class="ln">  1667&nbsp;&nbsp;</span>		} else if t.isParallel {
<span id="L1668" class="ln">  1668&nbsp;&nbsp;</span>			<span class="comment">// Only release the count for this test if it was run as a parallel</span>
<span id="L1669" class="ln">  1669&nbsp;&nbsp;</span>			<span class="comment">// test. See comment in Run method.</span>
<span id="L1670" class="ln">  1670&nbsp;&nbsp;</span>			t.context.release()
<span id="L1671" class="ln">  1671&nbsp;&nbsp;</span>		}
<span id="L1672" class="ln">  1672&nbsp;&nbsp;</span>		t.report() <span class="comment">// Report after all subtests have finished.</span>
<span id="L1673" class="ln">  1673&nbsp;&nbsp;</span>
<span id="L1674" class="ln">  1674&nbsp;&nbsp;</span>		<span class="comment">// Do not lock t.done to allow race detector to detect race in case</span>
<span id="L1675" class="ln">  1675&nbsp;&nbsp;</span>		<span class="comment">// the user does not appropriately synchronize a goroutine.</span>
<span id="L1676" class="ln">  1676&nbsp;&nbsp;</span>		t.done = true
<span id="L1677" class="ln">  1677&nbsp;&nbsp;</span>		if t.parent != nil &amp;&amp; !t.hasSub.Load() {
<span id="L1678" class="ln">  1678&nbsp;&nbsp;</span>			t.setRan()
<span id="L1679" class="ln">  1679&nbsp;&nbsp;</span>		}
<span id="L1680" class="ln">  1680&nbsp;&nbsp;</span>	}()
<span id="L1681" class="ln">  1681&nbsp;&nbsp;</span>	defer func() {
<span id="L1682" class="ln">  1682&nbsp;&nbsp;</span>		if len(t.sub) == 0 {
<span id="L1683" class="ln">  1683&nbsp;&nbsp;</span>			t.runCleanup(normalPanic)
<span id="L1684" class="ln">  1684&nbsp;&nbsp;</span>		}
<span id="L1685" class="ln">  1685&nbsp;&nbsp;</span>	}()
<span id="L1686" class="ln">  1686&nbsp;&nbsp;</span>
<span id="L1687" class="ln">  1687&nbsp;&nbsp;</span>	t.start = time.Now()
<span id="L1688" class="ln">  1688&nbsp;&nbsp;</span>	t.resetRaces()
<span id="L1689" class="ln">  1689&nbsp;&nbsp;</span>	fn(t)
<span id="L1690" class="ln">  1690&nbsp;&nbsp;</span>
<span id="L1691" class="ln">  1691&nbsp;&nbsp;</span>	<span class="comment">// code beyond here will not be executed when FailNow is invoked</span>
<span id="L1692" class="ln">  1692&nbsp;&nbsp;</span>	t.mu.Lock()
<span id="L1693" class="ln">  1693&nbsp;&nbsp;</span>	t.finished = true
<span id="L1694" class="ln">  1694&nbsp;&nbsp;</span>	t.mu.Unlock()
<span id="L1695" class="ln">  1695&nbsp;&nbsp;</span>}
<span id="L1696" class="ln">  1696&nbsp;&nbsp;</span>
<span id="L1697" class="ln">  1697&nbsp;&nbsp;</span><span class="comment">// Run runs f as a subtest of t called name. It runs f in a separate goroutine</span>
<span id="L1698" class="ln">  1698&nbsp;&nbsp;</span><span class="comment">// and blocks until f returns or calls t.Parallel to become a parallel test.</span>
<span id="L1699" class="ln">  1699&nbsp;&nbsp;</span><span class="comment">// Run reports whether f succeeded (or at least did not fail before calling t.Parallel).</span>
<span id="L1700" class="ln">  1700&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1701" class="ln">  1701&nbsp;&nbsp;</span><span class="comment">// Run may be called simultaneously from multiple goroutines, but all such calls</span>
<span id="L1702" class="ln">  1702&nbsp;&nbsp;</span><span class="comment">// must return before the outer test function for t returns.</span>
<span id="L1703" class="ln">  1703&nbsp;&nbsp;</span>func (t *T) Run(name string, f func(t *T)) bool {
<span id="L1704" class="ln">  1704&nbsp;&nbsp;</span>	if t.cleanupStarted.Load() {
<span id="L1705" class="ln">  1705&nbsp;&nbsp;</span>		panic(&#34;testing: t.Run called during t.Cleanup&#34;)
<span id="L1706" class="ln">  1706&nbsp;&nbsp;</span>	}
<span id="L1707" class="ln">  1707&nbsp;&nbsp;</span>
<span id="L1708" class="ln">  1708&nbsp;&nbsp;</span>	t.hasSub.Store(true)
<span id="L1709" class="ln">  1709&nbsp;&nbsp;</span>	testName, ok, _ := t.context.match.fullName(&amp;t.common, name)
<span id="L1710" class="ln">  1710&nbsp;&nbsp;</span>	if !ok || shouldFailFast() {
<span id="L1711" class="ln">  1711&nbsp;&nbsp;</span>		return true
<span id="L1712" class="ln">  1712&nbsp;&nbsp;</span>	}
<span id="L1713" class="ln">  1713&nbsp;&nbsp;</span>	<span class="comment">// Record the stack trace at the point of this call so that if the subtest</span>
<span id="L1714" class="ln">  1714&nbsp;&nbsp;</span>	<span class="comment">// function - which runs in a separate stack - is marked as a helper, we can</span>
<span id="L1715" class="ln">  1715&nbsp;&nbsp;</span>	<span class="comment">// continue walking the stack into the parent test.</span>
<span id="L1716" class="ln">  1716&nbsp;&nbsp;</span>	var pc [maxStackLen]uintptr
<span id="L1717" class="ln">  1717&nbsp;&nbsp;</span>	n := runtime.Callers(2, pc[:])
<span id="L1718" class="ln">  1718&nbsp;&nbsp;</span>	t = &amp;T{
<span id="L1719" class="ln">  1719&nbsp;&nbsp;</span>		common: common{
<span id="L1720" class="ln">  1720&nbsp;&nbsp;</span>			barrier: make(chan bool),
<span id="L1721" class="ln">  1721&nbsp;&nbsp;</span>			signal:  make(chan bool, 1),
<span id="L1722" class="ln">  1722&nbsp;&nbsp;</span>			name:    testName,
<span id="L1723" class="ln">  1723&nbsp;&nbsp;</span>			parent:  &amp;t.common,
<span id="L1724" class="ln">  1724&nbsp;&nbsp;</span>			level:   t.level + 1,
<span id="L1725" class="ln">  1725&nbsp;&nbsp;</span>			creator: pc[:n],
<span id="L1726" class="ln">  1726&nbsp;&nbsp;</span>			chatty:  t.chatty,
<span id="L1727" class="ln">  1727&nbsp;&nbsp;</span>		},
<span id="L1728" class="ln">  1728&nbsp;&nbsp;</span>		context: t.context,
<span id="L1729" class="ln">  1729&nbsp;&nbsp;</span>	}
<span id="L1730" class="ln">  1730&nbsp;&nbsp;</span>	t.w = indenter{&amp;t.common}
<span id="L1731" class="ln">  1731&nbsp;&nbsp;</span>
<span id="L1732" class="ln">  1732&nbsp;&nbsp;</span>	if t.chatty != nil {
<span id="L1733" class="ln">  1733&nbsp;&nbsp;</span>		t.chatty.Updatef(t.name, &#34;=== RUN   %s\n&#34;, t.name)
<span id="L1734" class="ln">  1734&nbsp;&nbsp;</span>	}
<span id="L1735" class="ln">  1735&nbsp;&nbsp;</span>	running.Store(t.name, time.Now())
<span id="L1736" class="ln">  1736&nbsp;&nbsp;</span>
<span id="L1737" class="ln">  1737&nbsp;&nbsp;</span>	<span class="comment">// Instead of reducing the running count of this test before calling the</span>
<span id="L1738" class="ln">  1738&nbsp;&nbsp;</span>	<span class="comment">// tRunner and increasing it afterwards, we rely on tRunner keeping the</span>
<span id="L1739" class="ln">  1739&nbsp;&nbsp;</span>	<span class="comment">// count correct. This ensures that a sequence of sequential tests runs</span>
<span id="L1740" class="ln">  1740&nbsp;&nbsp;</span>	<span class="comment">// without being preempted, even when their parent is a parallel test. This</span>
<span id="L1741" class="ln">  1741&nbsp;&nbsp;</span>	<span class="comment">// may especially reduce surprises if *parallel == 1.</span>
<span id="L1742" class="ln">  1742&nbsp;&nbsp;</span>	go tRunner(t, f)
<span id="L1743" class="ln">  1743&nbsp;&nbsp;</span>
<span id="L1744" class="ln">  1744&nbsp;&nbsp;</span>	<span class="comment">// The parent goroutine will block until the subtest either finishes or calls</span>
<span id="L1745" class="ln">  1745&nbsp;&nbsp;</span>	<span class="comment">// Parallel, but in general we don&#39;t know whether the parent goroutine is the</span>
<span id="L1746" class="ln">  1746&nbsp;&nbsp;</span>	<span class="comment">// top-level test function or some other goroutine it has spawned.</span>
<span id="L1747" class="ln">  1747&nbsp;&nbsp;</span>	<span class="comment">// To avoid confusing false-negatives, we leave the parent in the running map</span>
<span id="L1748" class="ln">  1748&nbsp;&nbsp;</span>	<span class="comment">// even though in the typical case it is blocked.</span>
<span id="L1749" class="ln">  1749&nbsp;&nbsp;</span>
<span id="L1750" class="ln">  1750&nbsp;&nbsp;</span>	if !&lt;-t.signal {
<span id="L1751" class="ln">  1751&nbsp;&nbsp;</span>		<span class="comment">// At this point, it is likely that FailNow was called on one of the</span>
<span id="L1752" class="ln">  1752&nbsp;&nbsp;</span>		<span class="comment">// parent tests by one of the subtests. Continue aborting up the chain.</span>
<span id="L1753" class="ln">  1753&nbsp;&nbsp;</span>		runtime.Goexit()
<span id="L1754" class="ln">  1754&nbsp;&nbsp;</span>	}
<span id="L1755" class="ln">  1755&nbsp;&nbsp;</span>
<span id="L1756" class="ln">  1756&nbsp;&nbsp;</span>	if t.chatty != nil &amp;&amp; t.chatty.json {
<span id="L1757" class="ln">  1757&nbsp;&nbsp;</span>		t.chatty.Updatef(t.parent.name, &#34;=== NAME  %s\n&#34;, t.parent.name)
<span id="L1758" class="ln">  1758&nbsp;&nbsp;</span>	}
<span id="L1759" class="ln">  1759&nbsp;&nbsp;</span>	return !t.failed
<span id="L1760" class="ln">  1760&nbsp;&nbsp;</span>}
<span id="L1761" class="ln">  1761&nbsp;&nbsp;</span>
<span id="L1762" class="ln">  1762&nbsp;&nbsp;</span><span class="comment">// Deadline reports the time at which the test binary will have</span>
<span id="L1763" class="ln">  1763&nbsp;&nbsp;</span><span class="comment">// exceeded the timeout specified by the -timeout flag.</span>
<span id="L1764" class="ln">  1764&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1765" class="ln">  1765&nbsp;&nbsp;</span><span class="comment">// The ok result is false if the -timeout flag indicates “no timeout” (0).</span>
<span id="L1766" class="ln">  1766&nbsp;&nbsp;</span>func (t *T) Deadline() (deadline time.Time, ok bool) {
<span id="L1767" class="ln">  1767&nbsp;&nbsp;</span>	deadline = t.context.deadline
<span id="L1768" class="ln">  1768&nbsp;&nbsp;</span>	return deadline, !deadline.IsZero()
<span id="L1769" class="ln">  1769&nbsp;&nbsp;</span>}
<span id="L1770" class="ln">  1770&nbsp;&nbsp;</span>
<span id="L1771" class="ln">  1771&nbsp;&nbsp;</span><span class="comment">// testContext holds all fields that are common to all tests. This includes</span>
<span id="L1772" class="ln">  1772&nbsp;&nbsp;</span><span class="comment">// synchronization primitives to run at most *parallel tests.</span>
<span id="L1773" class="ln">  1773&nbsp;&nbsp;</span>type testContext struct {
<span id="L1774" class="ln">  1774&nbsp;&nbsp;</span>	match    *matcher
<span id="L1775" class="ln">  1775&nbsp;&nbsp;</span>	deadline time.Time
<span id="L1776" class="ln">  1776&nbsp;&nbsp;</span>
<span id="L1777" class="ln">  1777&nbsp;&nbsp;</span>	<span class="comment">// isFuzzing is true in the context used when generating random inputs</span>
<span id="L1778" class="ln">  1778&nbsp;&nbsp;</span>	<span class="comment">// for fuzz targets. isFuzzing is false when running normal tests and</span>
<span id="L1779" class="ln">  1779&nbsp;&nbsp;</span>	<span class="comment">// when running fuzz tests as unit tests (without -fuzz or when -fuzz</span>
<span id="L1780" class="ln">  1780&nbsp;&nbsp;</span>	<span class="comment">// does not match).</span>
<span id="L1781" class="ln">  1781&nbsp;&nbsp;</span>	isFuzzing bool
<span id="L1782" class="ln">  1782&nbsp;&nbsp;</span>
<span id="L1783" class="ln">  1783&nbsp;&nbsp;</span>	mu sync.Mutex
<span id="L1784" class="ln">  1784&nbsp;&nbsp;</span>
<span id="L1785" class="ln">  1785&nbsp;&nbsp;</span>	<span class="comment">// Channel used to signal tests that are ready to be run in parallel.</span>
<span id="L1786" class="ln">  1786&nbsp;&nbsp;</span>	startParallel chan bool
<span id="L1787" class="ln">  1787&nbsp;&nbsp;</span>
<span id="L1788" class="ln">  1788&nbsp;&nbsp;</span>	<span class="comment">// running is the number of tests currently running in parallel.</span>
<span id="L1789" class="ln">  1789&nbsp;&nbsp;</span>	<span class="comment">// This does not include tests that are waiting for subtests to complete.</span>
<span id="L1790" class="ln">  1790&nbsp;&nbsp;</span>	running int
<span id="L1791" class="ln">  1791&nbsp;&nbsp;</span>
<span id="L1792" class="ln">  1792&nbsp;&nbsp;</span>	<span class="comment">// numWaiting is the number tests waiting to be run in parallel.</span>
<span id="L1793" class="ln">  1793&nbsp;&nbsp;</span>	numWaiting int
<span id="L1794" class="ln">  1794&nbsp;&nbsp;</span>
<span id="L1795" class="ln">  1795&nbsp;&nbsp;</span>	<span class="comment">// maxParallel is a copy of the parallel flag.</span>
<span id="L1796" class="ln">  1796&nbsp;&nbsp;</span>	maxParallel int
<span id="L1797" class="ln">  1797&nbsp;&nbsp;</span>}
<span id="L1798" class="ln">  1798&nbsp;&nbsp;</span>
<span id="L1799" class="ln">  1799&nbsp;&nbsp;</span>func newTestContext(maxParallel int, m *matcher) *testContext {
<span id="L1800" class="ln">  1800&nbsp;&nbsp;</span>	return &amp;testContext{
<span id="L1801" class="ln">  1801&nbsp;&nbsp;</span>		match:         m,
<span id="L1802" class="ln">  1802&nbsp;&nbsp;</span>		startParallel: make(chan bool),
<span id="L1803" class="ln">  1803&nbsp;&nbsp;</span>		maxParallel:   maxParallel,
<span id="L1804" class="ln">  1804&nbsp;&nbsp;</span>		running:       1, <span class="comment">// Set the count to 1 for the main (sequential) test.</span>
<span id="L1805" class="ln">  1805&nbsp;&nbsp;</span>	}
<span id="L1806" class="ln">  1806&nbsp;&nbsp;</span>}
<span id="L1807" class="ln">  1807&nbsp;&nbsp;</span>
<span id="L1808" class="ln">  1808&nbsp;&nbsp;</span>func (c *testContext) waitParallel() {
<span id="L1809" class="ln">  1809&nbsp;&nbsp;</span>	c.mu.Lock()
<span id="L1810" class="ln">  1810&nbsp;&nbsp;</span>	if c.running &lt; c.maxParallel {
<span id="L1811" class="ln">  1811&nbsp;&nbsp;</span>		c.running++
<span id="L1812" class="ln">  1812&nbsp;&nbsp;</span>		c.mu.Unlock()
<span id="L1813" class="ln">  1813&nbsp;&nbsp;</span>		return
<span id="L1814" class="ln">  1814&nbsp;&nbsp;</span>	}
<span id="L1815" class="ln">  1815&nbsp;&nbsp;</span>	c.numWaiting++
<span id="L1816" class="ln">  1816&nbsp;&nbsp;</span>	c.mu.Unlock()
<span id="L1817" class="ln">  1817&nbsp;&nbsp;</span>	&lt;-c.startParallel
<span id="L1818" class="ln">  1818&nbsp;&nbsp;</span>}
<span id="L1819" class="ln">  1819&nbsp;&nbsp;</span>
<span id="L1820" class="ln">  1820&nbsp;&nbsp;</span>func (c *testContext) release() {
<span id="L1821" class="ln">  1821&nbsp;&nbsp;</span>	c.mu.Lock()
<span id="L1822" class="ln">  1822&nbsp;&nbsp;</span>	if c.numWaiting == 0 {
<span id="L1823" class="ln">  1823&nbsp;&nbsp;</span>		c.running--
<span id="L1824" class="ln">  1824&nbsp;&nbsp;</span>		c.mu.Unlock()
<span id="L1825" class="ln">  1825&nbsp;&nbsp;</span>		return
<span id="L1826" class="ln">  1826&nbsp;&nbsp;</span>	}
<span id="L1827" class="ln">  1827&nbsp;&nbsp;</span>	c.numWaiting--
<span id="L1828" class="ln">  1828&nbsp;&nbsp;</span>	c.mu.Unlock()
<span id="L1829" class="ln">  1829&nbsp;&nbsp;</span>	c.startParallel &lt;- true <span class="comment">// Pick a waiting test to be run.</span>
<span id="L1830" class="ln">  1830&nbsp;&nbsp;</span>}
<span id="L1831" class="ln">  1831&nbsp;&nbsp;</span>
<span id="L1832" class="ln">  1832&nbsp;&nbsp;</span><span class="comment">// No one should be using func Main anymore.</span>
<span id="L1833" class="ln">  1833&nbsp;&nbsp;</span><span class="comment">// See the doc comment on func Main and use MainStart instead.</span>
<span id="L1834" class="ln">  1834&nbsp;&nbsp;</span>var errMain = errors.New(&#34;testing: unexpected use of func Main&#34;)
<span id="L1835" class="ln">  1835&nbsp;&nbsp;</span>
<span id="L1836" class="ln">  1836&nbsp;&nbsp;</span>type matchStringOnly func(pat, str string) (bool, error)
<span id="L1837" class="ln">  1837&nbsp;&nbsp;</span>
<span id="L1838" class="ln">  1838&nbsp;&nbsp;</span>func (f matchStringOnly) MatchString(pat, str string) (bool, error)   { return f(pat, str) }
<span id="L1839" class="ln">  1839&nbsp;&nbsp;</span>func (f matchStringOnly) StartCPUProfile(w io.Writer) error           { return errMain }
<span id="L1840" class="ln">  1840&nbsp;&nbsp;</span>func (f matchStringOnly) StopCPUProfile()                             {}
<span id="L1841" class="ln">  1841&nbsp;&nbsp;</span>func (f matchStringOnly) WriteProfileTo(string, io.Writer, int) error { return errMain }
<span id="L1842" class="ln">  1842&nbsp;&nbsp;</span>func (f matchStringOnly) ImportPath() string                          { return &#34;&#34; }
<span id="L1843" class="ln">  1843&nbsp;&nbsp;</span>func (f matchStringOnly) StartTestLog(io.Writer)                      {}
<span id="L1844" class="ln">  1844&nbsp;&nbsp;</span>func (f matchStringOnly) StopTestLog() error                          { return errMain }
<span id="L1845" class="ln">  1845&nbsp;&nbsp;</span>func (f matchStringOnly) SetPanicOnExit0(bool)                        {}
<span id="L1846" class="ln">  1846&nbsp;&nbsp;</span>func (f matchStringOnly) CoordinateFuzzing(time.Duration, int64, time.Duration, int64, int, []corpusEntry, []reflect.Type, string, string) error {
<span id="L1847" class="ln">  1847&nbsp;&nbsp;</span>	return errMain
<span id="L1848" class="ln">  1848&nbsp;&nbsp;</span>}
<span id="L1849" class="ln">  1849&nbsp;&nbsp;</span>func (f matchStringOnly) RunFuzzWorker(func(corpusEntry) error) error { return errMain }
<span id="L1850" class="ln">  1850&nbsp;&nbsp;</span>func (f matchStringOnly) ReadCorpus(string, []reflect.Type) ([]corpusEntry, error) {
<span id="L1851" class="ln">  1851&nbsp;&nbsp;</span>	return nil, errMain
<span id="L1852" class="ln">  1852&nbsp;&nbsp;</span>}
<span id="L1853" class="ln">  1853&nbsp;&nbsp;</span>func (f matchStringOnly) CheckCorpus([]any, []reflect.Type) error { return nil }
<span id="L1854" class="ln">  1854&nbsp;&nbsp;</span>func (f matchStringOnly) ResetCoverage()                          {}
<span id="L1855" class="ln">  1855&nbsp;&nbsp;</span>func (f matchStringOnly) SnapshotCoverage()                       {}
<span id="L1856" class="ln">  1856&nbsp;&nbsp;</span>
<span id="L1857" class="ln">  1857&nbsp;&nbsp;</span><span class="comment">// Main is an internal function, part of the implementation of the &#34;go test&#34; command.</span>
<span id="L1858" class="ln">  1858&nbsp;&nbsp;</span><span class="comment">// It was exported because it is cross-package and predates &#34;internal&#34; packages.</span>
<span id="L1859" class="ln">  1859&nbsp;&nbsp;</span><span class="comment">// It is no longer used by &#34;go test&#34; but preserved, as much as possible, for other</span>
<span id="L1860" class="ln">  1860&nbsp;&nbsp;</span><span class="comment">// systems that simulate &#34;go test&#34; using Main, but Main sometimes cannot be updated as</span>
<span id="L1861" class="ln">  1861&nbsp;&nbsp;</span><span class="comment">// new functionality is added to the testing package.</span>
<span id="L1862" class="ln">  1862&nbsp;&nbsp;</span><span class="comment">// Systems simulating &#34;go test&#34; should be updated to use MainStart.</span>
<span id="L1863" class="ln">  1863&nbsp;&nbsp;</span>func Main(matchString func(pat, str string) (bool, error), tests []InternalTest, benchmarks []InternalBenchmark, examples []InternalExample) {
<span id="L1864" class="ln">  1864&nbsp;&nbsp;</span>	os.Exit(MainStart(matchStringOnly(matchString), tests, benchmarks, nil, examples).Run())
<span id="L1865" class="ln">  1865&nbsp;&nbsp;</span>}
<span id="L1866" class="ln">  1866&nbsp;&nbsp;</span>
<span id="L1867" class="ln">  1867&nbsp;&nbsp;</span><span class="comment">// M is a type passed to a TestMain function to run the actual tests.</span>
<span id="L1868" class="ln">  1868&nbsp;&nbsp;</span>type M struct {
<span id="L1869" class="ln">  1869&nbsp;&nbsp;</span>	deps        testDeps
<span id="L1870" class="ln">  1870&nbsp;&nbsp;</span>	tests       []InternalTest
<span id="L1871" class="ln">  1871&nbsp;&nbsp;</span>	benchmarks  []InternalBenchmark
<span id="L1872" class="ln">  1872&nbsp;&nbsp;</span>	fuzzTargets []InternalFuzzTarget
<span id="L1873" class="ln">  1873&nbsp;&nbsp;</span>	examples    []InternalExample
<span id="L1874" class="ln">  1874&nbsp;&nbsp;</span>
<span id="L1875" class="ln">  1875&nbsp;&nbsp;</span>	timer     *time.Timer
<span id="L1876" class="ln">  1876&nbsp;&nbsp;</span>	afterOnce sync.Once
<span id="L1877" class="ln">  1877&nbsp;&nbsp;</span>
<span id="L1878" class="ln">  1878&nbsp;&nbsp;</span>	numRun int
<span id="L1879" class="ln">  1879&nbsp;&nbsp;</span>
<span id="L1880" class="ln">  1880&nbsp;&nbsp;</span>	<span class="comment">// value to pass to os.Exit, the outer test func main</span>
<span id="L1881" class="ln">  1881&nbsp;&nbsp;</span>	<span class="comment">// harness calls os.Exit with this code. See #34129.</span>
<span id="L1882" class="ln">  1882&nbsp;&nbsp;</span>	exitCode int
<span id="L1883" class="ln">  1883&nbsp;&nbsp;</span>}
<span id="L1884" class="ln">  1884&nbsp;&nbsp;</span>
<span id="L1885" class="ln">  1885&nbsp;&nbsp;</span><span class="comment">// testDeps is an internal interface of functionality that is</span>
<span id="L1886" class="ln">  1886&nbsp;&nbsp;</span><span class="comment">// passed into this package by a test&#39;s generated main package.</span>
<span id="L1887" class="ln">  1887&nbsp;&nbsp;</span><span class="comment">// The canonical implementation of this interface is</span>
<span id="L1888" class="ln">  1888&nbsp;&nbsp;</span><span class="comment">// testing/internal/testdeps&#39;s TestDeps.</span>
<span id="L1889" class="ln">  1889&nbsp;&nbsp;</span>type testDeps interface {
<span id="L1890" class="ln">  1890&nbsp;&nbsp;</span>	ImportPath() string
<span id="L1891" class="ln">  1891&nbsp;&nbsp;</span>	MatchString(pat, str string) (bool, error)
<span id="L1892" class="ln">  1892&nbsp;&nbsp;</span>	SetPanicOnExit0(bool)
<span id="L1893" class="ln">  1893&nbsp;&nbsp;</span>	StartCPUProfile(io.Writer) error
<span id="L1894" class="ln">  1894&nbsp;&nbsp;</span>	StopCPUProfile()
<span id="L1895" class="ln">  1895&nbsp;&nbsp;</span>	StartTestLog(io.Writer)
<span id="L1896" class="ln">  1896&nbsp;&nbsp;</span>	StopTestLog() error
<span id="L1897" class="ln">  1897&nbsp;&nbsp;</span>	WriteProfileTo(string, io.Writer, int) error
<span id="L1898" class="ln">  1898&nbsp;&nbsp;</span>	CoordinateFuzzing(time.Duration, int64, time.Duration, int64, int, []corpusEntry, []reflect.Type, string, string) error
<span id="L1899" class="ln">  1899&nbsp;&nbsp;</span>	RunFuzzWorker(func(corpusEntry) error) error
<span id="L1900" class="ln">  1900&nbsp;&nbsp;</span>	ReadCorpus(string, []reflect.Type) ([]corpusEntry, error)
<span id="L1901" class="ln">  1901&nbsp;&nbsp;</span>	CheckCorpus([]any, []reflect.Type) error
<span id="L1902" class="ln">  1902&nbsp;&nbsp;</span>	ResetCoverage()
<span id="L1903" class="ln">  1903&nbsp;&nbsp;</span>	SnapshotCoverage()
<span id="L1904" class="ln">  1904&nbsp;&nbsp;</span>}
<span id="L1905" class="ln">  1905&nbsp;&nbsp;</span>
<span id="L1906" class="ln">  1906&nbsp;&nbsp;</span><span class="comment">// MainStart is meant for use by tests generated by &#39;go test&#39;.</span>
<span id="L1907" class="ln">  1907&nbsp;&nbsp;</span><span class="comment">// It is not meant to be called directly and is not subject to the Go 1 compatibility document.</span>
<span id="L1908" class="ln">  1908&nbsp;&nbsp;</span><span class="comment">// It may change signature from release to release.</span>
<span id="L1909" class="ln">  1909&nbsp;&nbsp;</span>func MainStart(deps testDeps, tests []InternalTest, benchmarks []InternalBenchmark, fuzzTargets []InternalFuzzTarget, examples []InternalExample) *M {
<span id="L1910" class="ln">  1910&nbsp;&nbsp;</span>	Init()
<span id="L1911" class="ln">  1911&nbsp;&nbsp;</span>	return &amp;M{
<span id="L1912" class="ln">  1912&nbsp;&nbsp;</span>		deps:        deps,
<span id="L1913" class="ln">  1913&nbsp;&nbsp;</span>		tests:       tests,
<span id="L1914" class="ln">  1914&nbsp;&nbsp;</span>		benchmarks:  benchmarks,
<span id="L1915" class="ln">  1915&nbsp;&nbsp;</span>		fuzzTargets: fuzzTargets,
<span id="L1916" class="ln">  1916&nbsp;&nbsp;</span>		examples:    examples,
<span id="L1917" class="ln">  1917&nbsp;&nbsp;</span>	}
<span id="L1918" class="ln">  1918&nbsp;&nbsp;</span>}
<span id="L1919" class="ln">  1919&nbsp;&nbsp;</span>
<span id="L1920" class="ln">  1920&nbsp;&nbsp;</span>var testingTesting bool
<span id="L1921" class="ln">  1921&nbsp;&nbsp;</span>var realStderr *os.File
<span id="L1922" class="ln">  1922&nbsp;&nbsp;</span>
<span id="L1923" class="ln">  1923&nbsp;&nbsp;</span><span class="comment">// Run runs the tests. It returns an exit code to pass to os.Exit.</span>
<span id="L1924" class="ln">  1924&nbsp;&nbsp;</span>func (m *M) Run() (code int) {
<span id="L1925" class="ln">  1925&nbsp;&nbsp;</span>	defer func() {
<span id="L1926" class="ln">  1926&nbsp;&nbsp;</span>		code = m.exitCode
<span id="L1927" class="ln">  1927&nbsp;&nbsp;</span>	}()
<span id="L1928" class="ln">  1928&nbsp;&nbsp;</span>
<span id="L1929" class="ln">  1929&nbsp;&nbsp;</span>	<span class="comment">// Count the number of calls to m.Run.</span>
<span id="L1930" class="ln">  1930&nbsp;&nbsp;</span>	<span class="comment">// We only ever expected 1, but we didn&#39;t enforce that,</span>
<span id="L1931" class="ln">  1931&nbsp;&nbsp;</span>	<span class="comment">// and now there are tests in the wild that call m.Run multiple times.</span>
<span id="L1932" class="ln">  1932&nbsp;&nbsp;</span>	<span class="comment">// Sigh. go.dev/issue/23129.</span>
<span id="L1933" class="ln">  1933&nbsp;&nbsp;</span>	m.numRun++
<span id="L1934" class="ln">  1934&nbsp;&nbsp;</span>
<span id="L1935" class="ln">  1935&nbsp;&nbsp;</span>	<span class="comment">// TestMain may have already called flag.Parse.</span>
<span id="L1936" class="ln">  1936&nbsp;&nbsp;</span>	if !flag.Parsed() {
<span id="L1937" class="ln">  1937&nbsp;&nbsp;</span>		flag.Parse()
<span id="L1938" class="ln">  1938&nbsp;&nbsp;</span>	}
<span id="L1939" class="ln">  1939&nbsp;&nbsp;</span>
<span id="L1940" class="ln">  1940&nbsp;&nbsp;</span>	if chatty.json {
<span id="L1941" class="ln">  1941&nbsp;&nbsp;</span>		<span class="comment">// With -v=json, stdout and stderr are pointing to the same pipe,</span>
<span id="L1942" class="ln">  1942&nbsp;&nbsp;</span>		<span class="comment">// which is leading into test2json. In general, operating systems</span>
<span id="L1943" class="ln">  1943&nbsp;&nbsp;</span>		<span class="comment">// do a good job of ensuring that writes to the same pipe through</span>
<span id="L1944" class="ln">  1944&nbsp;&nbsp;</span>		<span class="comment">// different file descriptors are delivered whole, so that writing</span>
<span id="L1945" class="ln">  1945&nbsp;&nbsp;</span>		<span class="comment">// AAA to stdout and BBB to stderr simultaneously produces</span>
<span id="L1946" class="ln">  1946&nbsp;&nbsp;</span>		<span class="comment">// AAABBB or BBBAAA on the pipe, not something like AABBBA.</span>
<span id="L1947" class="ln">  1947&nbsp;&nbsp;</span>		<span class="comment">// However, the exception to this is when the pipe fills: in that</span>
<span id="L1948" class="ln">  1948&nbsp;&nbsp;</span>		<span class="comment">// case, Go&#39;s use of non-blocking I/O means that writing AAA</span>
<span id="L1949" class="ln">  1949&nbsp;&nbsp;</span>		<span class="comment">// or BBB might be split across multiple system calls, making it</span>
<span id="L1950" class="ln">  1950&nbsp;&nbsp;</span>		<span class="comment">// entirely possible to get output like AABBBA. The same problem</span>
<span id="L1951" class="ln">  1951&nbsp;&nbsp;</span>		<span class="comment">// happens inside the operating system kernel if we switch to</span>
<span id="L1952" class="ln">  1952&nbsp;&nbsp;</span>		<span class="comment">// blocking I/O on the pipe. This interleaved output can do things</span>
<span id="L1953" class="ln">  1953&nbsp;&nbsp;</span>		<span class="comment">// like print unrelated messages in the middle of a TestFoo line,</span>
<span id="L1954" class="ln">  1954&nbsp;&nbsp;</span>		<span class="comment">// which confuses test2json. Setting os.Stderr = os.Stdout will make</span>
<span id="L1955" class="ln">  1955&nbsp;&nbsp;</span>		<span class="comment">// them share a single pfd, which will hold a lock for each program</span>
<span id="L1956" class="ln">  1956&nbsp;&nbsp;</span>		<span class="comment">// write, preventing any interleaving.</span>
<span id="L1957" class="ln">  1957&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L1958" class="ln">  1958&nbsp;&nbsp;</span>		<span class="comment">// It might be nice to set Stderr = Stdout always, or perhaps if</span>
<span id="L1959" class="ln">  1959&nbsp;&nbsp;</span>		<span class="comment">// we can tell they are the same file, but for now -v=json is</span>
<span id="L1960" class="ln">  1960&nbsp;&nbsp;</span>		<span class="comment">// a very clear signal. Making the two files the same may cause</span>
<span id="L1961" class="ln">  1961&nbsp;&nbsp;</span>		<span class="comment">// surprises if programs close os.Stdout but expect to be able</span>
<span id="L1962" class="ln">  1962&nbsp;&nbsp;</span>		<span class="comment">// to continue to write to os.Stderr, but it&#39;s hard to see why a</span>
<span id="L1963" class="ln">  1963&nbsp;&nbsp;</span>		<span class="comment">// test would think it could take over global state that way.</span>
<span id="L1964" class="ln">  1964&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L1965" class="ln">  1965&nbsp;&nbsp;</span>		<span class="comment">// This fix only helps programs where the output is coming directly</span>
<span id="L1966" class="ln">  1966&nbsp;&nbsp;</span>		<span class="comment">// from Go code. It does not help programs in which a subprocess is</span>
<span id="L1967" class="ln">  1967&nbsp;&nbsp;</span>		<span class="comment">// writing to stderr or stdout at the same time that a Go test is writing output.</span>
<span id="L1968" class="ln">  1968&nbsp;&nbsp;</span>		<span class="comment">// It also does not help when the output is coming from the runtime,</span>
<span id="L1969" class="ln">  1969&nbsp;&nbsp;</span>		<span class="comment">// such as when using the print/println functions, since that code writes</span>
<span id="L1970" class="ln">  1970&nbsp;&nbsp;</span>		<span class="comment">// directly to fd 2 without any locking.</span>
<span id="L1971" class="ln">  1971&nbsp;&nbsp;</span>		<span class="comment">// We keep realStderr around to prevent fd 2 from being closed.</span>
<span id="L1972" class="ln">  1972&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L1973" class="ln">  1973&nbsp;&nbsp;</span>		<span class="comment">// See go.dev/issue/33419.</span>
<span id="L1974" class="ln">  1974&nbsp;&nbsp;</span>		realStderr = os.Stderr
<span id="L1975" class="ln">  1975&nbsp;&nbsp;</span>		os.Stderr = os.Stdout
<span id="L1976" class="ln">  1976&nbsp;&nbsp;</span>	}
<span id="L1977" class="ln">  1977&nbsp;&nbsp;</span>
<span id="L1978" class="ln">  1978&nbsp;&nbsp;</span>	if *parallel &lt; 1 {
<span id="L1979" class="ln">  1979&nbsp;&nbsp;</span>		fmt.Fprintln(os.Stderr, &#34;testing: -parallel can only be given a positive integer&#34;)
<span id="L1980" class="ln">  1980&nbsp;&nbsp;</span>		flag.Usage()
<span id="L1981" class="ln">  1981&nbsp;&nbsp;</span>		m.exitCode = 2
<span id="L1982" class="ln">  1982&nbsp;&nbsp;</span>		return
<span id="L1983" class="ln">  1983&nbsp;&nbsp;</span>	}
<span id="L1984" class="ln">  1984&nbsp;&nbsp;</span>	if *matchFuzz != &#34;&#34; &amp;&amp; *fuzzCacheDir == &#34;&#34; {
<span id="L1985" class="ln">  1985&nbsp;&nbsp;</span>		fmt.Fprintln(os.Stderr, &#34;testing: -test.fuzzcachedir must be set if -test.fuzz is set&#34;)
<span id="L1986" class="ln">  1986&nbsp;&nbsp;</span>		flag.Usage()
<span id="L1987" class="ln">  1987&nbsp;&nbsp;</span>		m.exitCode = 2
<span id="L1988" class="ln">  1988&nbsp;&nbsp;</span>		return
<span id="L1989" class="ln">  1989&nbsp;&nbsp;</span>	}
<span id="L1990" class="ln">  1990&nbsp;&nbsp;</span>
<span id="L1991" class="ln">  1991&nbsp;&nbsp;</span>	if *matchList != &#34;&#34; {
<span id="L1992" class="ln">  1992&nbsp;&nbsp;</span>		listTests(m.deps.MatchString, m.tests, m.benchmarks, m.fuzzTargets, m.examples)
<span id="L1993" class="ln">  1993&nbsp;&nbsp;</span>		m.exitCode = 0
<span id="L1994" class="ln">  1994&nbsp;&nbsp;</span>		return
<span id="L1995" class="ln">  1995&nbsp;&nbsp;</span>	}
<span id="L1996" class="ln">  1996&nbsp;&nbsp;</span>
<span id="L1997" class="ln">  1997&nbsp;&nbsp;</span>	if *shuffle != &#34;off&#34; {
<span id="L1998" class="ln">  1998&nbsp;&nbsp;</span>		var n int64
<span id="L1999" class="ln">  1999&nbsp;&nbsp;</span>		var err error
<span id="L2000" class="ln">  2000&nbsp;&nbsp;</span>		if *shuffle == &#34;on&#34; {
<span id="L2001" class="ln">  2001&nbsp;&nbsp;</span>			n = time.Now().UnixNano()
<span id="L2002" class="ln">  2002&nbsp;&nbsp;</span>		} else {
<span id="L2003" class="ln">  2003&nbsp;&nbsp;</span>			n, err = strconv.ParseInt(*shuffle, 10, 64)
<span id="L2004" class="ln">  2004&nbsp;&nbsp;</span>			if err != nil {
<span id="L2005" class="ln">  2005&nbsp;&nbsp;</span>				fmt.Fprintln(os.Stderr, `testing: -shuffle should be &#34;off&#34;, &#34;on&#34;, or a valid integer:`, err)
<span id="L2006" class="ln">  2006&nbsp;&nbsp;</span>				m.exitCode = 2
<span id="L2007" class="ln">  2007&nbsp;&nbsp;</span>				return
<span id="L2008" class="ln">  2008&nbsp;&nbsp;</span>			}
<span id="L2009" class="ln">  2009&nbsp;&nbsp;</span>		}
<span id="L2010" class="ln">  2010&nbsp;&nbsp;</span>		fmt.Println(&#34;-test.shuffle&#34;, n)
<span id="L2011" class="ln">  2011&nbsp;&nbsp;</span>		rng := rand.New(rand.NewSource(n))
<span id="L2012" class="ln">  2012&nbsp;&nbsp;</span>		rng.Shuffle(len(m.tests), func(i, j int) { m.tests[i], m.tests[j] = m.tests[j], m.tests[i] })
<span id="L2013" class="ln">  2013&nbsp;&nbsp;</span>		rng.Shuffle(len(m.benchmarks), func(i, j int) { m.benchmarks[i], m.benchmarks[j] = m.benchmarks[j], m.benchmarks[i] })
<span id="L2014" class="ln">  2014&nbsp;&nbsp;</span>	}
<span id="L2015" class="ln">  2015&nbsp;&nbsp;</span>
<span id="L2016" class="ln">  2016&nbsp;&nbsp;</span>	parseCpuList()
<span id="L2017" class="ln">  2017&nbsp;&nbsp;</span>
<span id="L2018" class="ln">  2018&nbsp;&nbsp;</span>	m.before()
<span id="L2019" class="ln">  2019&nbsp;&nbsp;</span>	defer m.after()
<span id="L2020" class="ln">  2020&nbsp;&nbsp;</span>
<span id="L2021" class="ln">  2021&nbsp;&nbsp;</span>	<span class="comment">// Run tests, examples, and benchmarks unless this is a fuzz worker process.</span>
<span id="L2022" class="ln">  2022&nbsp;&nbsp;</span>	<span class="comment">// Workers start after this is done by their parent process, and they should</span>
<span id="L2023" class="ln">  2023&nbsp;&nbsp;</span>	<span class="comment">// not repeat this work.</span>
<span id="L2024" class="ln">  2024&nbsp;&nbsp;</span>	if !*isFuzzWorker {
<span id="L2025" class="ln">  2025&nbsp;&nbsp;</span>		deadline := m.startAlarm()
<span id="L2026" class="ln">  2026&nbsp;&nbsp;</span>		haveExamples = len(m.examples) &gt; 0
<span id="L2027" class="ln">  2027&nbsp;&nbsp;</span>		testRan, testOk := runTests(m.deps.MatchString, m.tests, deadline)
<span id="L2028" class="ln">  2028&nbsp;&nbsp;</span>		fuzzTargetsRan, fuzzTargetsOk := runFuzzTests(m.deps, m.fuzzTargets, deadline)
<span id="L2029" class="ln">  2029&nbsp;&nbsp;</span>		exampleRan, exampleOk := runExamples(m.deps.MatchString, m.examples)
<span id="L2030" class="ln">  2030&nbsp;&nbsp;</span>		m.stopAlarm()
<span id="L2031" class="ln">  2031&nbsp;&nbsp;</span>		if !testRan &amp;&amp; !exampleRan &amp;&amp; !fuzzTargetsRan &amp;&amp; *matchBenchmarks == &#34;&#34; &amp;&amp; *matchFuzz == &#34;&#34; {
<span id="L2032" class="ln">  2032&nbsp;&nbsp;</span>			fmt.Fprintln(os.Stderr, &#34;testing: warning: no tests to run&#34;)
<span id="L2033" class="ln">  2033&nbsp;&nbsp;</span>			if testingTesting &amp;&amp; *match != &#34;^$&#34; {
<span id="L2034" class="ln">  2034&nbsp;&nbsp;</span>				<span class="comment">// If this happens during testing of package testing it could be that</span>
<span id="L2035" class="ln">  2035&nbsp;&nbsp;</span>				<span class="comment">// package testing&#39;s own logic for when to run a test is broken,</span>
<span id="L2036" class="ln">  2036&nbsp;&nbsp;</span>				<span class="comment">// in which case every test will run nothing and succeed,</span>
<span id="L2037" class="ln">  2037&nbsp;&nbsp;</span>				<span class="comment">// with no obvious way to detect this problem (since no tests are running).</span>
<span id="L2038" class="ln">  2038&nbsp;&nbsp;</span>				<span class="comment">// So make &#39;no tests to run&#39; a hard failure when testing package testing itself.</span>
<span id="L2039" class="ln">  2039&nbsp;&nbsp;</span>				fmt.Print(chatty.prefix(), &#34;FAIL: package testing must run tests\n&#34;)
<span id="L2040" class="ln">  2040&nbsp;&nbsp;</span>				testOk = false
<span id="L2041" class="ln">  2041&nbsp;&nbsp;</span>			}
<span id="L2042" class="ln">  2042&nbsp;&nbsp;</span>		}
<span id="L2043" class="ln">  2043&nbsp;&nbsp;</span>		anyFailed := !testOk || !exampleOk || !fuzzTargetsOk || !runBenchmarks(m.deps.ImportPath(), m.deps.MatchString, m.benchmarks)
<span id="L2044" class="ln">  2044&nbsp;&nbsp;</span>		if !anyFailed &amp;&amp; race.Errors() &gt; 0 {
<span id="L2045" class="ln">  2045&nbsp;&nbsp;</span>			fmt.Print(chatty.prefix(), &#34;testing: race detected outside of test execution\n&#34;)
<span id="L2046" class="ln">  2046&nbsp;&nbsp;</span>			anyFailed = true
<span id="L2047" class="ln">  2047&nbsp;&nbsp;</span>		}
<span id="L2048" class="ln">  2048&nbsp;&nbsp;</span>		if anyFailed {
<span id="L2049" class="ln">  2049&nbsp;&nbsp;</span>			fmt.Print(chatty.prefix(), &#34;FAIL\n&#34;)
<span id="L2050" class="ln">  2050&nbsp;&nbsp;</span>			m.exitCode = 1
<span id="L2051" class="ln">  2051&nbsp;&nbsp;</span>			return
<span id="L2052" class="ln">  2052&nbsp;&nbsp;</span>		}
<span id="L2053" class="ln">  2053&nbsp;&nbsp;</span>	}
<span id="L2054" class="ln">  2054&nbsp;&nbsp;</span>
<span id="L2055" class="ln">  2055&nbsp;&nbsp;</span>	fuzzingOk := runFuzzing(m.deps, m.fuzzTargets)
<span id="L2056" class="ln">  2056&nbsp;&nbsp;</span>	if !fuzzingOk {
<span id="L2057" class="ln">  2057&nbsp;&nbsp;</span>		fmt.Print(chatty.prefix(), &#34;FAIL\n&#34;)
<span id="L2058" class="ln">  2058&nbsp;&nbsp;</span>		if *isFuzzWorker {
<span id="L2059" class="ln">  2059&nbsp;&nbsp;</span>			m.exitCode = fuzzWorkerExitCode
<span id="L2060" class="ln">  2060&nbsp;&nbsp;</span>		} else {
<span id="L2061" class="ln">  2061&nbsp;&nbsp;</span>			m.exitCode = 1
<span id="L2062" class="ln">  2062&nbsp;&nbsp;</span>		}
<span id="L2063" class="ln">  2063&nbsp;&nbsp;</span>		return
<span id="L2064" class="ln">  2064&nbsp;&nbsp;</span>	}
<span id="L2065" class="ln">  2065&nbsp;&nbsp;</span>
<span id="L2066" class="ln">  2066&nbsp;&nbsp;</span>	m.exitCode = 0
<span id="L2067" class="ln">  2067&nbsp;&nbsp;</span>	if !*isFuzzWorker {
<span id="L2068" class="ln">  2068&nbsp;&nbsp;</span>		fmt.Print(chatty.prefix(), &#34;PASS\n&#34;)
<span id="L2069" class="ln">  2069&nbsp;&nbsp;</span>	}
<span id="L2070" class="ln">  2070&nbsp;&nbsp;</span>	return
<span id="L2071" class="ln">  2071&nbsp;&nbsp;</span>}
<span id="L2072" class="ln">  2072&nbsp;&nbsp;</span>
<span id="L2073" class="ln">  2073&nbsp;&nbsp;</span>func (t *T) report() {
<span id="L2074" class="ln">  2074&nbsp;&nbsp;</span>	if t.parent == nil {
<span id="L2075" class="ln">  2075&nbsp;&nbsp;</span>		return
<span id="L2076" class="ln">  2076&nbsp;&nbsp;</span>	}
<span id="L2077" class="ln">  2077&nbsp;&nbsp;</span>	dstr := fmtDuration(t.duration)
<span id="L2078" class="ln">  2078&nbsp;&nbsp;</span>	format := &#34;--- %s: %s (%s)\n&#34;
<span id="L2079" class="ln">  2079&nbsp;&nbsp;</span>	if t.Failed() {
<span id="L2080" class="ln">  2080&nbsp;&nbsp;</span>		t.flushToParent(t.name, format, &#34;FAIL&#34;, t.name, dstr)
<span id="L2081" class="ln">  2081&nbsp;&nbsp;</span>	} else if t.chatty != nil {
<span id="L2082" class="ln">  2082&nbsp;&nbsp;</span>		if t.Skipped() {
<span id="L2083" class="ln">  2083&nbsp;&nbsp;</span>			t.flushToParent(t.name, format, &#34;SKIP&#34;, t.name, dstr)
<span id="L2084" class="ln">  2084&nbsp;&nbsp;</span>		} else {
<span id="L2085" class="ln">  2085&nbsp;&nbsp;</span>			t.flushToParent(t.name, format, &#34;PASS&#34;, t.name, dstr)
<span id="L2086" class="ln">  2086&nbsp;&nbsp;</span>		}
<span id="L2087" class="ln">  2087&nbsp;&nbsp;</span>	}
<span id="L2088" class="ln">  2088&nbsp;&nbsp;</span>}
<span id="L2089" class="ln">  2089&nbsp;&nbsp;</span>
<span id="L2090" class="ln">  2090&nbsp;&nbsp;</span>func listTests(matchString func(pat, str string) (bool, error), tests []InternalTest, benchmarks []InternalBenchmark, fuzzTargets []InternalFuzzTarget, examples []InternalExample) {
<span id="L2091" class="ln">  2091&nbsp;&nbsp;</span>	if _, err := matchString(*matchList, &#34;non-empty&#34;); err != nil {
<span id="L2092" class="ln">  2092&nbsp;&nbsp;</span>		fmt.Fprintf(os.Stderr, &#34;testing: invalid regexp in -test.list (%q): %s\n&#34;, *matchList, err)
<span id="L2093" class="ln">  2093&nbsp;&nbsp;</span>		os.Exit(1)
<span id="L2094" class="ln">  2094&nbsp;&nbsp;</span>	}
<span id="L2095" class="ln">  2095&nbsp;&nbsp;</span>
<span id="L2096" class="ln">  2096&nbsp;&nbsp;</span>	for _, test := range tests {
<span id="L2097" class="ln">  2097&nbsp;&nbsp;</span>		if ok, _ := matchString(*matchList, test.Name); ok {
<span id="L2098" class="ln">  2098&nbsp;&nbsp;</span>			fmt.Println(test.Name)
<span id="L2099" class="ln">  2099&nbsp;&nbsp;</span>		}
<span id="L2100" class="ln">  2100&nbsp;&nbsp;</span>	}
<span id="L2101" class="ln">  2101&nbsp;&nbsp;</span>	for _, bench := range benchmarks {
<span id="L2102" class="ln">  2102&nbsp;&nbsp;</span>		if ok, _ := matchString(*matchList, bench.Name); ok {
<span id="L2103" class="ln">  2103&nbsp;&nbsp;</span>			fmt.Println(bench.Name)
<span id="L2104" class="ln">  2104&nbsp;&nbsp;</span>		}
<span id="L2105" class="ln">  2105&nbsp;&nbsp;</span>	}
<span id="L2106" class="ln">  2106&nbsp;&nbsp;</span>	for _, fuzzTarget := range fuzzTargets {
<span id="L2107" class="ln">  2107&nbsp;&nbsp;</span>		if ok, _ := matchString(*matchList, fuzzTarget.Name); ok {
<span id="L2108" class="ln">  2108&nbsp;&nbsp;</span>			fmt.Println(fuzzTarget.Name)
<span id="L2109" class="ln">  2109&nbsp;&nbsp;</span>		}
<span id="L2110" class="ln">  2110&nbsp;&nbsp;</span>	}
<span id="L2111" class="ln">  2111&nbsp;&nbsp;</span>	for _, example := range examples {
<span id="L2112" class="ln">  2112&nbsp;&nbsp;</span>		if ok, _ := matchString(*matchList, example.Name); ok {
<span id="L2113" class="ln">  2113&nbsp;&nbsp;</span>			fmt.Println(example.Name)
<span id="L2114" class="ln">  2114&nbsp;&nbsp;</span>		}
<span id="L2115" class="ln">  2115&nbsp;&nbsp;</span>	}
<span id="L2116" class="ln">  2116&nbsp;&nbsp;</span>}
<span id="L2117" class="ln">  2117&nbsp;&nbsp;</span>
<span id="L2118" class="ln">  2118&nbsp;&nbsp;</span><span class="comment">// RunTests is an internal function but exported because it is cross-package;</span>
<span id="L2119" class="ln">  2119&nbsp;&nbsp;</span><span class="comment">// it is part of the implementation of the &#34;go test&#34; command.</span>
<span id="L2120" class="ln">  2120&nbsp;&nbsp;</span>func RunTests(matchString func(pat, str string) (bool, error), tests []InternalTest) (ok bool) {
<span id="L2121" class="ln">  2121&nbsp;&nbsp;</span>	var deadline time.Time
<span id="L2122" class="ln">  2122&nbsp;&nbsp;</span>	if *timeout &gt; 0 {
<span id="L2123" class="ln">  2123&nbsp;&nbsp;</span>		deadline = time.Now().Add(*timeout)
<span id="L2124" class="ln">  2124&nbsp;&nbsp;</span>	}
<span id="L2125" class="ln">  2125&nbsp;&nbsp;</span>	ran, ok := runTests(matchString, tests, deadline)
<span id="L2126" class="ln">  2126&nbsp;&nbsp;</span>	if !ran &amp;&amp; !haveExamples {
<span id="L2127" class="ln">  2127&nbsp;&nbsp;</span>		fmt.Fprintln(os.Stderr, &#34;testing: warning: no tests to run&#34;)
<span id="L2128" class="ln">  2128&nbsp;&nbsp;</span>	}
<span id="L2129" class="ln">  2129&nbsp;&nbsp;</span>	return ok
<span id="L2130" class="ln">  2130&nbsp;&nbsp;</span>}
<span id="L2131" class="ln">  2131&nbsp;&nbsp;</span>
<span id="L2132" class="ln">  2132&nbsp;&nbsp;</span>func runTests(matchString func(pat, str string) (bool, error), tests []InternalTest, deadline time.Time) (ran, ok bool) {
<span id="L2133" class="ln">  2133&nbsp;&nbsp;</span>	ok = true
<span id="L2134" class="ln">  2134&nbsp;&nbsp;</span>	for _, procs := range cpuList {
<span id="L2135" class="ln">  2135&nbsp;&nbsp;</span>		runtime.GOMAXPROCS(procs)
<span id="L2136" class="ln">  2136&nbsp;&nbsp;</span>		for i := uint(0); i &lt; *count; i++ {
<span id="L2137" class="ln">  2137&nbsp;&nbsp;</span>			if shouldFailFast() {
<span id="L2138" class="ln">  2138&nbsp;&nbsp;</span>				break
<span id="L2139" class="ln">  2139&nbsp;&nbsp;</span>			}
<span id="L2140" class="ln">  2140&nbsp;&nbsp;</span>			if i &gt; 0 &amp;&amp; !ran {
<span id="L2141" class="ln">  2141&nbsp;&nbsp;</span>				<span class="comment">// There were no tests to run on the first</span>
<span id="L2142" class="ln">  2142&nbsp;&nbsp;</span>				<span class="comment">// iteration. This won&#39;t change, so no reason</span>
<span id="L2143" class="ln">  2143&nbsp;&nbsp;</span>				<span class="comment">// to keep trying.</span>
<span id="L2144" class="ln">  2144&nbsp;&nbsp;</span>				break
<span id="L2145" class="ln">  2145&nbsp;&nbsp;</span>			}
<span id="L2146" class="ln">  2146&nbsp;&nbsp;</span>			ctx := newTestContext(*parallel, newMatcher(matchString, *match, &#34;-test.run&#34;, *skip))
<span id="L2147" class="ln">  2147&nbsp;&nbsp;</span>			ctx.deadline = deadline
<span id="L2148" class="ln">  2148&nbsp;&nbsp;</span>			t := &amp;T{
<span id="L2149" class="ln">  2149&nbsp;&nbsp;</span>				common: common{
<span id="L2150" class="ln">  2150&nbsp;&nbsp;</span>					signal:  make(chan bool, 1),
<span id="L2151" class="ln">  2151&nbsp;&nbsp;</span>					barrier: make(chan bool),
<span id="L2152" class="ln">  2152&nbsp;&nbsp;</span>					w:       os.Stdout,
<span id="L2153" class="ln">  2153&nbsp;&nbsp;</span>				},
<span id="L2154" class="ln">  2154&nbsp;&nbsp;</span>				context: ctx,
<span id="L2155" class="ln">  2155&nbsp;&nbsp;</span>			}
<span id="L2156" class="ln">  2156&nbsp;&nbsp;</span>			if Verbose() {
<span id="L2157" class="ln">  2157&nbsp;&nbsp;</span>				t.chatty = newChattyPrinter(t.w)
<span id="L2158" class="ln">  2158&nbsp;&nbsp;</span>			}
<span id="L2159" class="ln">  2159&nbsp;&nbsp;</span>			tRunner(t, func(t *T) {
<span id="L2160" class="ln">  2160&nbsp;&nbsp;</span>				for _, test := range tests {
<span id="L2161" class="ln">  2161&nbsp;&nbsp;</span>					t.Run(test.Name, test.F)
<span id="L2162" class="ln">  2162&nbsp;&nbsp;</span>				}
<span id="L2163" class="ln">  2163&nbsp;&nbsp;</span>			})
<span id="L2164" class="ln">  2164&nbsp;&nbsp;</span>			select {
<span id="L2165" class="ln">  2165&nbsp;&nbsp;</span>			case &lt;-t.signal:
<span id="L2166" class="ln">  2166&nbsp;&nbsp;</span>			default:
<span id="L2167" class="ln">  2167&nbsp;&nbsp;</span>				panic(&#34;internal error: tRunner exited without sending on t.signal&#34;)
<span id="L2168" class="ln">  2168&nbsp;&nbsp;</span>			}
<span id="L2169" class="ln">  2169&nbsp;&nbsp;</span>			ok = ok &amp;&amp; !t.Failed()
<span id="L2170" class="ln">  2170&nbsp;&nbsp;</span>			ran = ran || t.ran
<span id="L2171" class="ln">  2171&nbsp;&nbsp;</span>		}
<span id="L2172" class="ln">  2172&nbsp;&nbsp;</span>	}
<span id="L2173" class="ln">  2173&nbsp;&nbsp;</span>	return ran, ok
<span id="L2174" class="ln">  2174&nbsp;&nbsp;</span>}
<span id="L2175" class="ln">  2175&nbsp;&nbsp;</span>
<span id="L2176" class="ln">  2176&nbsp;&nbsp;</span><span class="comment">// before runs before all testing.</span>
<span id="L2177" class="ln">  2177&nbsp;&nbsp;</span>func (m *M) before() {
<span id="L2178" class="ln">  2178&nbsp;&nbsp;</span>	if *memProfileRate &gt; 0 {
<span id="L2179" class="ln">  2179&nbsp;&nbsp;</span>		runtime.MemProfileRate = *memProfileRate
<span id="L2180" class="ln">  2180&nbsp;&nbsp;</span>	}
<span id="L2181" class="ln">  2181&nbsp;&nbsp;</span>	if *cpuProfile != &#34;&#34; {
<span id="L2182" class="ln">  2182&nbsp;&nbsp;</span>		f, err := os.Create(toOutputDir(*cpuProfile))
<span id="L2183" class="ln">  2183&nbsp;&nbsp;</span>		if err != nil {
<span id="L2184" class="ln">  2184&nbsp;&nbsp;</span>			fmt.Fprintf(os.Stderr, &#34;testing: %s\n&#34;, err)
<span id="L2185" class="ln">  2185&nbsp;&nbsp;</span>			return
<span id="L2186" class="ln">  2186&nbsp;&nbsp;</span>		}
<span id="L2187" class="ln">  2187&nbsp;&nbsp;</span>		if err := m.deps.StartCPUProfile(f); err != nil {
<span id="L2188" class="ln">  2188&nbsp;&nbsp;</span>			fmt.Fprintf(os.Stderr, &#34;testing: can&#39;t start cpu profile: %s\n&#34;, err)
<span id="L2189" class="ln">  2189&nbsp;&nbsp;</span>			f.Close()
<span id="L2190" class="ln">  2190&nbsp;&nbsp;</span>			return
<span id="L2191" class="ln">  2191&nbsp;&nbsp;</span>		}
<span id="L2192" class="ln">  2192&nbsp;&nbsp;</span>		<span class="comment">// Could save f so after can call f.Close; not worth the effort.</span>
<span id="L2193" class="ln">  2193&nbsp;&nbsp;</span>	}
<span id="L2194" class="ln">  2194&nbsp;&nbsp;</span>	if *traceFile != &#34;&#34; {
<span id="L2195" class="ln">  2195&nbsp;&nbsp;</span>		f, err := os.Create(toOutputDir(*traceFile))
<span id="L2196" class="ln">  2196&nbsp;&nbsp;</span>		if err != nil {
<span id="L2197" class="ln">  2197&nbsp;&nbsp;</span>			fmt.Fprintf(os.Stderr, &#34;testing: %s\n&#34;, err)
<span id="L2198" class="ln">  2198&nbsp;&nbsp;</span>			return
<span id="L2199" class="ln">  2199&nbsp;&nbsp;</span>		}
<span id="L2200" class="ln">  2200&nbsp;&nbsp;</span>		if err := trace.Start(f); err != nil {
<span id="L2201" class="ln">  2201&nbsp;&nbsp;</span>			fmt.Fprintf(os.Stderr, &#34;testing: can&#39;t start tracing: %s\n&#34;, err)
<span id="L2202" class="ln">  2202&nbsp;&nbsp;</span>			f.Close()
<span id="L2203" class="ln">  2203&nbsp;&nbsp;</span>			return
<span id="L2204" class="ln">  2204&nbsp;&nbsp;</span>		}
<span id="L2205" class="ln">  2205&nbsp;&nbsp;</span>		<span class="comment">// Could save f so after can call f.Close; not worth the effort.</span>
<span id="L2206" class="ln">  2206&nbsp;&nbsp;</span>	}
<span id="L2207" class="ln">  2207&nbsp;&nbsp;</span>	if *blockProfile != &#34;&#34; &amp;&amp; *blockProfileRate &gt;= 0 {
<span id="L2208" class="ln">  2208&nbsp;&nbsp;</span>		runtime.SetBlockProfileRate(*blockProfileRate)
<span id="L2209" class="ln">  2209&nbsp;&nbsp;</span>	}
<span id="L2210" class="ln">  2210&nbsp;&nbsp;</span>	if *mutexProfile != &#34;&#34; &amp;&amp; *mutexProfileFraction &gt;= 0 {
<span id="L2211" class="ln">  2211&nbsp;&nbsp;</span>		runtime.SetMutexProfileFraction(*mutexProfileFraction)
<span id="L2212" class="ln">  2212&nbsp;&nbsp;</span>	}
<span id="L2213" class="ln">  2213&nbsp;&nbsp;</span>	if *coverProfile != &#34;&#34; &amp;&amp; CoverMode() == &#34;&#34; {
<span id="L2214" class="ln">  2214&nbsp;&nbsp;</span>		fmt.Fprintf(os.Stderr, &#34;testing: cannot use -test.coverprofile because test binary was not built with coverage enabled\n&#34;)
<span id="L2215" class="ln">  2215&nbsp;&nbsp;</span>		os.Exit(2)
<span id="L2216" class="ln">  2216&nbsp;&nbsp;</span>	}
<span id="L2217" class="ln">  2217&nbsp;&nbsp;</span>	if *gocoverdir != &#34;&#34; &amp;&amp; CoverMode() == &#34;&#34; {
<span id="L2218" class="ln">  2218&nbsp;&nbsp;</span>		fmt.Fprintf(os.Stderr, &#34;testing: cannot use -test.gocoverdir because test binary was not built with coverage enabled\n&#34;)
<span id="L2219" class="ln">  2219&nbsp;&nbsp;</span>		os.Exit(2)
<span id="L2220" class="ln">  2220&nbsp;&nbsp;</span>	}
<span id="L2221" class="ln">  2221&nbsp;&nbsp;</span>	if *testlog != &#34;&#34; {
<span id="L2222" class="ln">  2222&nbsp;&nbsp;</span>		<span class="comment">// Note: Not using toOutputDir.</span>
<span id="L2223" class="ln">  2223&nbsp;&nbsp;</span>		<span class="comment">// This file is for use by cmd/go, not users.</span>
<span id="L2224" class="ln">  2224&nbsp;&nbsp;</span>		var f *os.File
<span id="L2225" class="ln">  2225&nbsp;&nbsp;</span>		var err error
<span id="L2226" class="ln">  2226&nbsp;&nbsp;</span>		if m.numRun == 1 {
<span id="L2227" class="ln">  2227&nbsp;&nbsp;</span>			f, err = os.Create(*testlog)
<span id="L2228" class="ln">  2228&nbsp;&nbsp;</span>		} else {
<span id="L2229" class="ln">  2229&nbsp;&nbsp;</span>			f, err = os.OpenFile(*testlog, os.O_WRONLY, 0)
<span id="L2230" class="ln">  2230&nbsp;&nbsp;</span>			if err == nil {
<span id="L2231" class="ln">  2231&nbsp;&nbsp;</span>				f.Seek(0, io.SeekEnd)
<span id="L2232" class="ln">  2232&nbsp;&nbsp;</span>			}
<span id="L2233" class="ln">  2233&nbsp;&nbsp;</span>		}
<span id="L2234" class="ln">  2234&nbsp;&nbsp;</span>		if err != nil {
<span id="L2235" class="ln">  2235&nbsp;&nbsp;</span>			fmt.Fprintf(os.Stderr, &#34;testing: %s\n&#34;, err)
<span id="L2236" class="ln">  2236&nbsp;&nbsp;</span>			os.Exit(2)
<span id="L2237" class="ln">  2237&nbsp;&nbsp;</span>		}
<span id="L2238" class="ln">  2238&nbsp;&nbsp;</span>		m.deps.StartTestLog(f)
<span id="L2239" class="ln">  2239&nbsp;&nbsp;</span>		testlogFile = f
<span id="L2240" class="ln">  2240&nbsp;&nbsp;</span>	}
<span id="L2241" class="ln">  2241&nbsp;&nbsp;</span>	if *panicOnExit0 {
<span id="L2242" class="ln">  2242&nbsp;&nbsp;</span>		m.deps.SetPanicOnExit0(true)
<span id="L2243" class="ln">  2243&nbsp;&nbsp;</span>	}
<span id="L2244" class="ln">  2244&nbsp;&nbsp;</span>}
<span id="L2245" class="ln">  2245&nbsp;&nbsp;</span>
<span id="L2246" class="ln">  2246&nbsp;&nbsp;</span><span class="comment">// after runs after all testing.</span>
<span id="L2247" class="ln">  2247&nbsp;&nbsp;</span>func (m *M) after() {
<span id="L2248" class="ln">  2248&nbsp;&nbsp;</span>	m.afterOnce.Do(func() {
<span id="L2249" class="ln">  2249&nbsp;&nbsp;</span>		m.writeProfiles()
<span id="L2250" class="ln">  2250&nbsp;&nbsp;</span>	})
<span id="L2251" class="ln">  2251&nbsp;&nbsp;</span>
<span id="L2252" class="ln">  2252&nbsp;&nbsp;</span>	<span class="comment">// Restore PanicOnExit0 after every run, because we set it to true before</span>
<span id="L2253" class="ln">  2253&nbsp;&nbsp;</span>	<span class="comment">// every run. Otherwise, if m.Run is called multiple times the behavior of</span>
<span id="L2254" class="ln">  2254&nbsp;&nbsp;</span>	<span class="comment">// os.Exit(0) will not be restored after the second run.</span>
<span id="L2255" class="ln">  2255&nbsp;&nbsp;</span>	if *panicOnExit0 {
<span id="L2256" class="ln">  2256&nbsp;&nbsp;</span>		m.deps.SetPanicOnExit0(false)
<span id="L2257" class="ln">  2257&nbsp;&nbsp;</span>	}
<span id="L2258" class="ln">  2258&nbsp;&nbsp;</span>}
<span id="L2259" class="ln">  2259&nbsp;&nbsp;</span>
<span id="L2260" class="ln">  2260&nbsp;&nbsp;</span>func (m *M) writeProfiles() {
<span id="L2261" class="ln">  2261&nbsp;&nbsp;</span>	if *testlog != &#34;&#34; {
<span id="L2262" class="ln">  2262&nbsp;&nbsp;</span>		if err := m.deps.StopTestLog(); err != nil {
<span id="L2263" class="ln">  2263&nbsp;&nbsp;</span>			fmt.Fprintf(os.Stderr, &#34;testing: can&#39;t write %s: %s\n&#34;, *testlog, err)
<span id="L2264" class="ln">  2264&nbsp;&nbsp;</span>			os.Exit(2)
<span id="L2265" class="ln">  2265&nbsp;&nbsp;</span>		}
<span id="L2266" class="ln">  2266&nbsp;&nbsp;</span>		if err := testlogFile.Close(); err != nil {
<span id="L2267" class="ln">  2267&nbsp;&nbsp;</span>			fmt.Fprintf(os.Stderr, &#34;testing: can&#39;t write %s: %s\n&#34;, *testlog, err)
<span id="L2268" class="ln">  2268&nbsp;&nbsp;</span>			os.Exit(2)
<span id="L2269" class="ln">  2269&nbsp;&nbsp;</span>		}
<span id="L2270" class="ln">  2270&nbsp;&nbsp;</span>	}
<span id="L2271" class="ln">  2271&nbsp;&nbsp;</span>	if *cpuProfile != &#34;&#34; {
<span id="L2272" class="ln">  2272&nbsp;&nbsp;</span>		m.deps.StopCPUProfile() <span class="comment">// flushes profile to disk</span>
<span id="L2273" class="ln">  2273&nbsp;&nbsp;</span>	}
<span id="L2274" class="ln">  2274&nbsp;&nbsp;</span>	if *traceFile != &#34;&#34; {
<span id="L2275" class="ln">  2275&nbsp;&nbsp;</span>		trace.Stop() <span class="comment">// flushes trace to disk</span>
<span id="L2276" class="ln">  2276&nbsp;&nbsp;</span>	}
<span id="L2277" class="ln">  2277&nbsp;&nbsp;</span>	if *memProfile != &#34;&#34; {
<span id="L2278" class="ln">  2278&nbsp;&nbsp;</span>		f, err := os.Create(toOutputDir(*memProfile))
<span id="L2279" class="ln">  2279&nbsp;&nbsp;</span>		if err != nil {
<span id="L2280" class="ln">  2280&nbsp;&nbsp;</span>			fmt.Fprintf(os.Stderr, &#34;testing: %s\n&#34;, err)
<span id="L2281" class="ln">  2281&nbsp;&nbsp;</span>			os.Exit(2)
<span id="L2282" class="ln">  2282&nbsp;&nbsp;</span>		}
<span id="L2283" class="ln">  2283&nbsp;&nbsp;</span>		runtime.GC() <span class="comment">// materialize all statistics</span>
<span id="L2284" class="ln">  2284&nbsp;&nbsp;</span>		if err = m.deps.WriteProfileTo(&#34;allocs&#34;, f, 0); err != nil {
<span id="L2285" class="ln">  2285&nbsp;&nbsp;</span>			fmt.Fprintf(os.Stderr, &#34;testing: can&#39;t write %s: %s\n&#34;, *memProfile, err)
<span id="L2286" class="ln">  2286&nbsp;&nbsp;</span>			os.Exit(2)
<span id="L2287" class="ln">  2287&nbsp;&nbsp;</span>		}
<span id="L2288" class="ln">  2288&nbsp;&nbsp;</span>		f.Close()
<span id="L2289" class="ln">  2289&nbsp;&nbsp;</span>	}
<span id="L2290" class="ln">  2290&nbsp;&nbsp;</span>	if *blockProfile != &#34;&#34; &amp;&amp; *blockProfileRate &gt;= 0 {
<span id="L2291" class="ln">  2291&nbsp;&nbsp;</span>		f, err := os.Create(toOutputDir(*blockProfile))
<span id="L2292" class="ln">  2292&nbsp;&nbsp;</span>		if err != nil {
<span id="L2293" class="ln">  2293&nbsp;&nbsp;</span>			fmt.Fprintf(os.Stderr, &#34;testing: %s\n&#34;, err)
<span id="L2294" class="ln">  2294&nbsp;&nbsp;</span>			os.Exit(2)
<span id="L2295" class="ln">  2295&nbsp;&nbsp;</span>		}
<span id="L2296" class="ln">  2296&nbsp;&nbsp;</span>		if err = m.deps.WriteProfileTo(&#34;block&#34;, f, 0); err != nil {
<span id="L2297" class="ln">  2297&nbsp;&nbsp;</span>			fmt.Fprintf(os.Stderr, &#34;testing: can&#39;t write %s: %s\n&#34;, *blockProfile, err)
<span id="L2298" class="ln">  2298&nbsp;&nbsp;</span>			os.Exit(2)
<span id="L2299" class="ln">  2299&nbsp;&nbsp;</span>		}
<span id="L2300" class="ln">  2300&nbsp;&nbsp;</span>		f.Close()
<span id="L2301" class="ln">  2301&nbsp;&nbsp;</span>	}
<span id="L2302" class="ln">  2302&nbsp;&nbsp;</span>	if *mutexProfile != &#34;&#34; &amp;&amp; *mutexProfileFraction &gt;= 0 {
<span id="L2303" class="ln">  2303&nbsp;&nbsp;</span>		f, err := os.Create(toOutputDir(*mutexProfile))
<span id="L2304" class="ln">  2304&nbsp;&nbsp;</span>		if err != nil {
<span id="L2305" class="ln">  2305&nbsp;&nbsp;</span>			fmt.Fprintf(os.Stderr, &#34;testing: %s\n&#34;, err)
<span id="L2306" class="ln">  2306&nbsp;&nbsp;</span>			os.Exit(2)
<span id="L2307" class="ln">  2307&nbsp;&nbsp;</span>		}
<span id="L2308" class="ln">  2308&nbsp;&nbsp;</span>		if err = m.deps.WriteProfileTo(&#34;mutex&#34;, f, 0); err != nil {
<span id="L2309" class="ln">  2309&nbsp;&nbsp;</span>			fmt.Fprintf(os.Stderr, &#34;testing: can&#39;t write %s: %s\n&#34;, *mutexProfile, err)
<span id="L2310" class="ln">  2310&nbsp;&nbsp;</span>			os.Exit(2)
<span id="L2311" class="ln">  2311&nbsp;&nbsp;</span>		}
<span id="L2312" class="ln">  2312&nbsp;&nbsp;</span>		f.Close()
<span id="L2313" class="ln">  2313&nbsp;&nbsp;</span>	}
<span id="L2314" class="ln">  2314&nbsp;&nbsp;</span>	if CoverMode() != &#34;&#34; {
<span id="L2315" class="ln">  2315&nbsp;&nbsp;</span>		coverReport()
<span id="L2316" class="ln">  2316&nbsp;&nbsp;</span>	}
<span id="L2317" class="ln">  2317&nbsp;&nbsp;</span>}
<span id="L2318" class="ln">  2318&nbsp;&nbsp;</span>
<span id="L2319" class="ln">  2319&nbsp;&nbsp;</span><span class="comment">// toOutputDir returns the file name relocated, if required, to outputDir.</span>
<span id="L2320" class="ln">  2320&nbsp;&nbsp;</span><span class="comment">// Simple implementation to avoid pulling in path/filepath.</span>
<span id="L2321" class="ln">  2321&nbsp;&nbsp;</span>func toOutputDir(path string) string {
<span id="L2322" class="ln">  2322&nbsp;&nbsp;</span>	if *outputDir == &#34;&#34; || path == &#34;&#34; {
<span id="L2323" class="ln">  2323&nbsp;&nbsp;</span>		return path
<span id="L2324" class="ln">  2324&nbsp;&nbsp;</span>	}
<span id="L2325" class="ln">  2325&nbsp;&nbsp;</span>	<span class="comment">// On Windows, it&#39;s clumsy, but we can be almost always correct</span>
<span id="L2326" class="ln">  2326&nbsp;&nbsp;</span>	<span class="comment">// by just looking for a drive letter and a colon.</span>
<span id="L2327" class="ln">  2327&nbsp;&nbsp;</span>	<span class="comment">// Absolute paths always have a drive letter (ignoring UNC).</span>
<span id="L2328" class="ln">  2328&nbsp;&nbsp;</span>	<span class="comment">// Problem: if path == &#34;C:A&#34; and outputdir == &#34;C:\Go&#34; it&#39;s unclear</span>
<span id="L2329" class="ln">  2329&nbsp;&nbsp;</span>	<span class="comment">// what to do, but even then path/filepath doesn&#39;t help.</span>
<span id="L2330" class="ln">  2330&nbsp;&nbsp;</span>	<span class="comment">// TODO: Worth doing better? Probably not, because we&#39;re here only</span>
<span id="L2331" class="ln">  2331&nbsp;&nbsp;</span>	<span class="comment">// under the management of go test.</span>
<span id="L2332" class="ln">  2332&nbsp;&nbsp;</span>	if runtime.GOOS == &#34;windows&#34; &amp;&amp; len(path) &gt;= 2 {
<span id="L2333" class="ln">  2333&nbsp;&nbsp;</span>		letter, colon := path[0], path[1]
<span id="L2334" class="ln">  2334&nbsp;&nbsp;</span>		if (&#39;a&#39; &lt;= letter &amp;&amp; letter &lt;= &#39;z&#39; || &#39;A&#39; &lt;= letter &amp;&amp; letter &lt;= &#39;Z&#39;) &amp;&amp; colon == &#39;:&#39; {
<span id="L2335" class="ln">  2335&nbsp;&nbsp;</span>			<span class="comment">// If path starts with a drive letter we&#39;re stuck with it regardless.</span>
<span id="L2336" class="ln">  2336&nbsp;&nbsp;</span>			return path
<span id="L2337" class="ln">  2337&nbsp;&nbsp;</span>		}
<span id="L2338" class="ln">  2338&nbsp;&nbsp;</span>	}
<span id="L2339" class="ln">  2339&nbsp;&nbsp;</span>	if os.IsPathSeparator(path[0]) {
<span id="L2340" class="ln">  2340&nbsp;&nbsp;</span>		return path
<span id="L2341" class="ln">  2341&nbsp;&nbsp;</span>	}
<span id="L2342" class="ln">  2342&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;%s%c%s&#34;, *outputDir, os.PathSeparator, path)
<span id="L2343" class="ln">  2343&nbsp;&nbsp;</span>}
<span id="L2344" class="ln">  2344&nbsp;&nbsp;</span>
<span id="L2345" class="ln">  2345&nbsp;&nbsp;</span><span class="comment">// startAlarm starts an alarm if requested.</span>
<span id="L2346" class="ln">  2346&nbsp;&nbsp;</span>func (m *M) startAlarm() time.Time {
<span id="L2347" class="ln">  2347&nbsp;&nbsp;</span>	if *timeout &lt;= 0 {
<span id="L2348" class="ln">  2348&nbsp;&nbsp;</span>		return time.Time{}
<span id="L2349" class="ln">  2349&nbsp;&nbsp;</span>	}
<span id="L2350" class="ln">  2350&nbsp;&nbsp;</span>
<span id="L2351" class="ln">  2351&nbsp;&nbsp;</span>	deadline := time.Now().Add(*timeout)
<span id="L2352" class="ln">  2352&nbsp;&nbsp;</span>	m.timer = time.AfterFunc(*timeout, func() {
<span id="L2353" class="ln">  2353&nbsp;&nbsp;</span>		m.after()
<span id="L2354" class="ln">  2354&nbsp;&nbsp;</span>		debug.SetTraceback(&#34;all&#34;)
<span id="L2355" class="ln">  2355&nbsp;&nbsp;</span>		extra := &#34;&#34;
<span id="L2356" class="ln">  2356&nbsp;&nbsp;</span>
<span id="L2357" class="ln">  2357&nbsp;&nbsp;</span>		if list := runningList(); len(list) &gt; 0 {
<span id="L2358" class="ln">  2358&nbsp;&nbsp;</span>			var b strings.Builder
<span id="L2359" class="ln">  2359&nbsp;&nbsp;</span>			b.WriteString(&#34;\nrunning tests:&#34;)
<span id="L2360" class="ln">  2360&nbsp;&nbsp;</span>			for _, name := range list {
<span id="L2361" class="ln">  2361&nbsp;&nbsp;</span>				b.WriteString(&#34;\n\t&#34;)
<span id="L2362" class="ln">  2362&nbsp;&nbsp;</span>				b.WriteString(name)
<span id="L2363" class="ln">  2363&nbsp;&nbsp;</span>			}
<span id="L2364" class="ln">  2364&nbsp;&nbsp;</span>			extra = b.String()
<span id="L2365" class="ln">  2365&nbsp;&nbsp;</span>		}
<span id="L2366" class="ln">  2366&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;test timed out after %v%s&#34;, *timeout, extra))
<span id="L2367" class="ln">  2367&nbsp;&nbsp;</span>	})
<span id="L2368" class="ln">  2368&nbsp;&nbsp;</span>	return deadline
<span id="L2369" class="ln">  2369&nbsp;&nbsp;</span>}
<span id="L2370" class="ln">  2370&nbsp;&nbsp;</span>
<span id="L2371" class="ln">  2371&nbsp;&nbsp;</span><span class="comment">// runningList returns the list of running tests.</span>
<span id="L2372" class="ln">  2372&nbsp;&nbsp;</span>func runningList() []string {
<span id="L2373" class="ln">  2373&nbsp;&nbsp;</span>	var list []string
<span id="L2374" class="ln">  2374&nbsp;&nbsp;</span>	running.Range(func(k, v any) bool {
<span id="L2375" class="ln">  2375&nbsp;&nbsp;</span>		list = append(list, fmt.Sprintf(&#34;%s (%v)&#34;, k.(string), time.Since(v.(time.Time)).Round(time.Second)))
<span id="L2376" class="ln">  2376&nbsp;&nbsp;</span>		return true
<span id="L2377" class="ln">  2377&nbsp;&nbsp;</span>	})
<span id="L2378" class="ln">  2378&nbsp;&nbsp;</span>	sort.Strings(list)
<span id="L2379" class="ln">  2379&nbsp;&nbsp;</span>	return list
<span id="L2380" class="ln">  2380&nbsp;&nbsp;</span>}
<span id="L2381" class="ln">  2381&nbsp;&nbsp;</span>
<span id="L2382" class="ln">  2382&nbsp;&nbsp;</span><span class="comment">// stopAlarm turns off the alarm.</span>
<span id="L2383" class="ln">  2383&nbsp;&nbsp;</span>func (m *M) stopAlarm() {
<span id="L2384" class="ln">  2384&nbsp;&nbsp;</span>	if *timeout &gt; 0 {
<span id="L2385" class="ln">  2385&nbsp;&nbsp;</span>		m.timer.Stop()
<span id="L2386" class="ln">  2386&nbsp;&nbsp;</span>	}
<span id="L2387" class="ln">  2387&nbsp;&nbsp;</span>}
<span id="L2388" class="ln">  2388&nbsp;&nbsp;</span>
<span id="L2389" class="ln">  2389&nbsp;&nbsp;</span>func parseCpuList() {
<span id="L2390" class="ln">  2390&nbsp;&nbsp;</span>	for _, val := range strings.Split(*cpuListStr, &#34;,&#34;) {
<span id="L2391" class="ln">  2391&nbsp;&nbsp;</span>		val = strings.TrimSpace(val)
<span id="L2392" class="ln">  2392&nbsp;&nbsp;</span>		if val == &#34;&#34; {
<span id="L2393" class="ln">  2393&nbsp;&nbsp;</span>			continue
<span id="L2394" class="ln">  2394&nbsp;&nbsp;</span>		}
<span id="L2395" class="ln">  2395&nbsp;&nbsp;</span>		cpu, err := strconv.Atoi(val)
<span id="L2396" class="ln">  2396&nbsp;&nbsp;</span>		if err != nil || cpu &lt;= 0 {
<span id="L2397" class="ln">  2397&nbsp;&nbsp;</span>			fmt.Fprintf(os.Stderr, &#34;testing: invalid value %q for -test.cpu\n&#34;, val)
<span id="L2398" class="ln">  2398&nbsp;&nbsp;</span>			os.Exit(1)
<span id="L2399" class="ln">  2399&nbsp;&nbsp;</span>		}
<span id="L2400" class="ln">  2400&nbsp;&nbsp;</span>		cpuList = append(cpuList, cpu)
<span id="L2401" class="ln">  2401&nbsp;&nbsp;</span>	}
<span id="L2402" class="ln">  2402&nbsp;&nbsp;</span>	if cpuList == nil {
<span id="L2403" class="ln">  2403&nbsp;&nbsp;</span>		cpuList = append(cpuList, runtime.GOMAXPROCS(-1))
<span id="L2404" class="ln">  2404&nbsp;&nbsp;</span>	}
<span id="L2405" class="ln">  2405&nbsp;&nbsp;</span>}
<span id="L2406" class="ln">  2406&nbsp;&nbsp;</span>
<span id="L2407" class="ln">  2407&nbsp;&nbsp;</span>func shouldFailFast() bool {
<span id="L2408" class="ln">  2408&nbsp;&nbsp;</span>	return *failFast &amp;&amp; numFailed.Load() &gt; 0
<span id="L2409" class="ln">  2409&nbsp;&nbsp;</span>}
<span id="L2410" class="ln">  2410&nbsp;&nbsp;</span>
</pre><p><a href="testing.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
