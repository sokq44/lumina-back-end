<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/text/scanner/scanner.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./scanner.go?s=10035:10064#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/text">text</a>/<a href="http://localhost:8080/src/text/scanner">scanner</a>/<span class="text-muted">scanner.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/text/scanner">text/scanner</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package scanner provides a scanner and tokenizer for UTF-8-encoded text.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// It takes an io.Reader providing the source, which then can be tokenized</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// through repeated calls to the Scan function. For compatibility with</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// existing tools, the NUL character is not allowed. If the first character</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// in the source is a UTF-8 encoded byte order mark (BOM), it is discarded.</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// By default, a Scanner skips white space and Go comments and recognizes all</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// literals as defined by the Go language specification. It may be</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// customized to recognize only a subset of those literals and to recognize</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// different identifier and white space characters.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>package scanner
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>import (
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;unicode&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>)
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// Position is a value that represents a source position.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// A position is valid if Line &gt; 0.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>type Position struct {
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	Filename string <span class="comment">// filename, if any</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	Offset   int    <span class="comment">// byte offset, starting at 0</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	Line     int    <span class="comment">// line number, starting at 1</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	Column   int    <span class="comment">// column number, starting at 1 (character count per line)</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>}
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// IsValid reports whether the position is valid.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>func (pos *Position) IsValid() bool { return pos.Line &gt; 0 }
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>func (pos Position) String() string {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	s := pos.Filename
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	if s == &#34;&#34; {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		s = &#34;&lt;input&gt;&#34;
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	if pos.IsValid() {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>		s += fmt.Sprintf(&#34;:%d:%d&#34;, pos.Line, pos.Column)
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	return s
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>}
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// Predefined mode bits to control recognition of tokens. For instance,</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// to configure a Scanner such that it only recognizes (Go) identifiers,</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// integers, and skips comments, set the Scanner&#39;s Mode field to:</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//	ScanIdents | ScanInts | SkipComments</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// With the exceptions of comments, which are skipped if SkipComments is</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// set, unrecognized tokens are not ignored. Instead, the scanner simply</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// returns the respective individual characters (or possibly sub-tokens).</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// For instance, if the mode is ScanIdents (not ScanStrings), the string</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// &#34;foo&#34; is scanned as the token sequence &#39;&#34;&#39; Ident &#39;&#34;&#39;.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// Use GoTokens to configure the Scanner such that it accepts all Go</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// literal tokens including Go identifiers. Comments will be skipped.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>const (
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	ScanIdents     = 1 &lt;&lt; -Ident
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	ScanInts       = 1 &lt;&lt; -Int
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	ScanFloats     = 1 &lt;&lt; -Float <span class="comment">// includes Ints and hexadecimal floats</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	ScanChars      = 1 &lt;&lt; -Char
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	ScanStrings    = 1 &lt;&lt; -String
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	ScanRawStrings = 1 &lt;&lt; -RawString
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	ScanComments   = 1 &lt;&lt; -Comment
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	SkipComments   = 1 &lt;&lt; -skipComment <span class="comment">// if set with ScanComments, comments become white space</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	GoTokens       = ScanIdents | ScanFloats | ScanChars | ScanStrings | ScanRawStrings | ScanComments | SkipComments
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>)
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// The result of Scan is one of these tokens or a Unicode character.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>const (
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	EOF = -(iota + 1)
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	Ident
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	Int
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	Float
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	Char
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	String
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	RawString
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	Comment
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">// internal use only</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	skipComment
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>)
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>var tokenString = map[rune]string{
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	EOF:       &#34;EOF&#34;,
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	Ident:     &#34;Ident&#34;,
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	Int:       &#34;Int&#34;,
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	Float:     &#34;Float&#34;,
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	Char:      &#34;Char&#34;,
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	String:    &#34;String&#34;,
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	RawString: &#34;RawString&#34;,
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	Comment:   &#34;Comment&#34;,
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// TokenString returns a printable string for a token or Unicode character.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>func TokenString(tok rune) string {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	if s, found := tokenString[tok]; found {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		return s
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;%q&#34;, string(tok))
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// GoWhitespace is the default value for the Scanner&#39;s Whitespace field.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// Its value selects Go&#39;s white space characters.</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>const GoWhitespace = 1&lt;&lt;&#39;\t&#39; | 1&lt;&lt;&#39;\n&#39; | 1&lt;&lt;&#39;\r&#39; | 1&lt;&lt;&#39; &#39;
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>const bufLen = 1024 <span class="comment">// at least utf8.UTFMax</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// A Scanner implements reading of Unicode characters and tokens from an io.Reader.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>type Scanner struct {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// Input</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	src io.Reader
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// Source buffer</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	srcBuf [bufLen + 1]byte <span class="comment">// +1 for sentinel for common case of s.next()</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	srcPos int              <span class="comment">// reading position (srcBuf index)</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	srcEnd int              <span class="comment">// source end (srcBuf index)</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">// Source position</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	srcBufOffset int <span class="comment">// byte offset of srcBuf[0] in source</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	line         int <span class="comment">// line count</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	column       int <span class="comment">// character count</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	lastLineLen  int <span class="comment">// length of last line in characters (for correct column reporting)</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	lastCharLen  int <span class="comment">// length of last character in bytes</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// Token text buffer</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// Typically, token text is stored completely in srcBuf, but in general</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// the token text&#39;s head may be buffered in tokBuf while the token text&#39;s</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// tail is stored in srcBuf.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	tokBuf bytes.Buffer <span class="comment">// token text head that is not in srcBuf anymore</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	tokPos int          <span class="comment">// token text tail position (srcBuf index); valid if &gt;= 0</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	tokEnd int          <span class="comment">// token text tail end (srcBuf index)</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// One character look-ahead</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	ch rune <span class="comment">// character before current srcPos</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// Error is called for each error encountered. If no Error</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">// function is set, the error is reported to os.Stderr.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	Error func(s *Scanner, msg string)
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">// ErrorCount is incremented by one for each error encountered.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	ErrorCount int
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// The Mode field controls which tokens are recognized. For instance,</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">// to recognize Ints, set the ScanInts bit in Mode. The field may be</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">// changed at any time.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	Mode uint
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// The Whitespace field controls which characters are recognized</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">// as white space. To recognize a character ch &lt;= &#39; &#39; as white space,</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">// set the ch&#39;th bit in Whitespace (the Scanner&#39;s behavior is undefined</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// for values ch &gt; &#39; &#39;). The field may be changed at any time.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	Whitespace uint64
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	<span class="comment">// IsIdentRune is a predicate controlling the characters accepted</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">// as the ith rune in an identifier. The set of valid characters</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">// must not intersect with the set of white space characters.</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// If no IsIdentRune function is set, regular Go identifiers are</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	<span class="comment">// accepted instead. The field may be changed at any time.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	IsIdentRune func(ch rune, i int) bool
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// Start position of most recently scanned token; set by Scan.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	<span class="comment">// Calling Init or Next invalidates the position (Line == 0).</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	<span class="comment">// The Filename field is always left untouched by the Scanner.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	<span class="comment">// If an error is reported (via Error) and Position is invalid,</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	<span class="comment">// the scanner is not inside a token. Call Pos to obtain an error</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	<span class="comment">// position in that case, or to obtain the position immediately</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	<span class="comment">// after the most recently scanned token.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	Position
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// Init initializes a Scanner with a new source and returns s.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// Error is set to nil, ErrorCount is set to 0, Mode is set to GoTokens,</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// and Whitespace is set to GoWhitespace.</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>func (s *Scanner) Init(src io.Reader) *Scanner {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	s.src = src
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	<span class="comment">// initialize source buffer</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	<span class="comment">// (the first call to next() will fill it by calling src.Read)</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	s.srcBuf[0] = utf8.RuneSelf <span class="comment">// sentinel</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	s.srcPos = 0
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	s.srcEnd = 0
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	<span class="comment">// initialize source position</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	s.srcBufOffset = 0
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	s.line = 1
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	s.column = 0
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	s.lastLineLen = 0
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	s.lastCharLen = 0
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	<span class="comment">// initialize token text buffer</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// (required for first call to next()).</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	s.tokPos = -1
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	<span class="comment">// initialize one character look-ahead</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	s.ch = -2 <span class="comment">// no char read yet, not EOF</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	<span class="comment">// initialize public fields</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	s.Error = nil
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	s.ErrorCount = 0
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	s.Mode = GoTokens
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	s.Whitespace = GoWhitespace
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	s.Line = 0 <span class="comment">// invalidate token position</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	return s
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// next reads and returns the next Unicode character. It is designed such</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// that only a minimal amount of work needs to be done in the common ASCII</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// case (one test to check for both ASCII and end-of-buffer, and one test</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// to check for newlines).</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>func (s *Scanner) next() rune {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	ch, width := rune(s.srcBuf[s.srcPos]), 1
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	if ch &gt;= utf8.RuneSelf {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		<span class="comment">// uncommon case: not ASCII or not enough bytes</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		for s.srcPos+utf8.UTFMax &gt; s.srcEnd &amp;&amp; !utf8.FullRune(s.srcBuf[s.srcPos:s.srcEnd]) {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>			<span class="comment">// not enough bytes: read some more, but first</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>			<span class="comment">// save away token text if any</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			if s.tokPos &gt;= 0 {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>				s.tokBuf.Write(s.srcBuf[s.tokPos:s.srcPos])
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>				s.tokPos = 0
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>				<span class="comment">// s.tokEnd is set by Scan()</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>			}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			<span class="comment">// move unread bytes to beginning of buffer</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			copy(s.srcBuf[0:], s.srcBuf[s.srcPos:s.srcEnd])
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>			s.srcBufOffset += s.srcPos
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>			<span class="comment">// read more bytes</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>			<span class="comment">// (an io.Reader must return io.EOF when it reaches</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>			<span class="comment">// the end of what it is reading - simply returning</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>			<span class="comment">// n == 0 will make this loop retry forever; but the</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>			<span class="comment">// error is in the reader implementation in that case)</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>			i := s.srcEnd - s.srcPos
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>			n, err := s.src.Read(s.srcBuf[i:bufLen])
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			s.srcPos = 0
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>			s.srcEnd = i + n
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			s.srcBuf[s.srcEnd] = utf8.RuneSelf <span class="comment">// sentinel</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			if err != nil {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>				if err != io.EOF {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>					s.error(err.Error())
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>				}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>				if s.srcEnd == 0 {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>					if s.lastCharLen &gt; 0 {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>						<span class="comment">// previous character was not EOF</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>						s.column++
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>					}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>					s.lastCharLen = 0
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>					return EOF
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>				}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>				<span class="comment">// If err == EOF, we won&#39;t be getting more</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>				<span class="comment">// bytes; break to avoid infinite loop. If</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>				<span class="comment">// err is something else, we don&#39;t know if</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>				<span class="comment">// we can get more bytes; thus also break.</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>				break
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>			}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		<span class="comment">// at least one byte</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		ch = rune(s.srcBuf[s.srcPos])
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		if ch &gt;= utf8.RuneSelf {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>			<span class="comment">// uncommon case: not ASCII</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>			ch, width = utf8.DecodeRune(s.srcBuf[s.srcPos:s.srcEnd])
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>			if ch == utf8.RuneError &amp;&amp; width == 1 {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>				<span class="comment">// advance for correct error position</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>				s.srcPos += width
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>				s.lastCharLen = width
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>				s.column++
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>				s.error(&#34;invalid UTF-8 encoding&#34;)
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>				return ch
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>			}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		}
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	<span class="comment">// advance</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	s.srcPos += width
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	s.lastCharLen = width
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	s.column++
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	<span class="comment">// special situations</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	switch ch {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	case 0:
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		<span class="comment">// for compatibility with other tools</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		s.error(&#34;invalid character NUL&#34;)
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	case &#39;\n&#39;:
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		s.line++
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		s.lastLineLen = s.column
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		s.column = 0
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	return ch
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span><span class="comment">// Next reads and returns the next Unicode character.</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">// It returns EOF at the end of the source. It reports</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">// a read error by calling s.Error, if not nil; otherwise</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// it prints an error message to os.Stderr. Next does not</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span><span class="comment">// update the Scanner&#39;s Position field; use Pos() to</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span><span class="comment">// get the current position.</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>func (s *Scanner) Next() rune {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	s.tokPos = -1 <span class="comment">// don&#39;t collect token text</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	s.Line = 0    <span class="comment">// invalidate token position</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	ch := s.Peek()
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	if ch != EOF {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		s.ch = s.next()
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	return ch
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">// Peek returns the next Unicode character in the source without advancing</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span><span class="comment">// the scanner. It returns EOF if the scanner&#39;s position is at the last</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">// character of the source.</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span><span class="selection">func (s *Scanner) Peek() rune</span> {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	if s.ch == -2 {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		<span class="comment">// this code is only run for the very first character</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		s.ch = s.next()
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		if s.ch == &#39;\uFEFF&#39; {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>			s.ch = s.next() <span class="comment">// ignore BOM</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	return s.ch
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>func (s *Scanner) error(msg string) {
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	s.tokEnd = s.srcPos - s.lastCharLen <span class="comment">// make sure token text is terminated</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	s.ErrorCount++
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	if s.Error != nil {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		s.Error(s, msg)
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		return
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	pos := s.Position
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	if !pos.IsValid() {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		pos = s.Pos()
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	fmt.Fprintf(os.Stderr, &#34;%s: %s\n&#34;, pos, msg)
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>func (s *Scanner) errorf(format string, args ...any) {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	s.error(fmt.Sprintf(format, args...))
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>func (s *Scanner) isIdentRune(ch rune, i int) bool {
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	if s.IsIdentRune != nil {
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		return ch != EOF &amp;&amp; s.IsIdentRune(ch, i)
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	}
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	return ch == &#39;_&#39; || unicode.IsLetter(ch) || unicode.IsDigit(ch) &amp;&amp; i &gt; 0
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>func (s *Scanner) scanIdentifier() rune {
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	<span class="comment">// we know the zero&#39;th rune is OK; start scanning at the next one</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	ch := s.next()
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	for i := 1; s.isIdentRune(ch, i); i++ {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		ch = s.next()
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	return ch
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>func lower(ch rune) rune     { return (&#39;a&#39; - &#39;A&#39;) | ch } <span class="comment">// returns lower-case ch iff ch is ASCII letter</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>func isDecimal(ch rune) bool { return &#39;0&#39; &lt;= ch &amp;&amp; ch &lt;= &#39;9&#39; }
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>func isHex(ch rune) bool     { return &#39;0&#39; &lt;= ch &amp;&amp; ch &lt;= &#39;9&#39; || &#39;a&#39; &lt;= lower(ch) &amp;&amp; lower(ch) &lt;= &#39;f&#39; }
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span><span class="comment">// digits accepts the sequence { digit | &#39;_&#39; } starting with ch0.</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span><span class="comment">// If base &lt;= 10, digits accepts any decimal digit but records</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// the first invalid digit &gt;= base in *invalid if *invalid == 0.</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// digits returns the first rune that is not part of the sequence</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">// anymore, and a bitset describing whether the sequence contained</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// digits (bit 0 is set), or separators &#39;_&#39; (bit 1 is set).</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>func (s *Scanner) digits(ch0 rune, base int, invalid *rune) (ch rune, digsep int) {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	ch = ch0
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	if base &lt;= 10 {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		max := rune(&#39;0&#39; + base)
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		for isDecimal(ch) || ch == &#39;_&#39; {
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>			ds := 1
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>			if ch == &#39;_&#39; {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>				ds = 2
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>			} else if ch &gt;= max &amp;&amp; *invalid == 0 {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>				*invalid = ch
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>			}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>			digsep |= ds
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>			ch = s.next()
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	} else {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		for isHex(ch) || ch == &#39;_&#39; {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>			ds := 1
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>			if ch == &#39;_&#39; {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>				ds = 2
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>			}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>			digsep |= ds
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>			ch = s.next()
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	}
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	return
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>}
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>func (s *Scanner) scanNumber(ch rune, seenDot bool) (rune, rune) {
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	base := 10         <span class="comment">// number base</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	prefix := rune(0)  <span class="comment">// one of 0 (decimal), &#39;0&#39; (0-octal), &#39;x&#39;, &#39;o&#39;, or &#39;b&#39;</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	digsep := 0        <span class="comment">// bit 0: digit present, bit 1: &#39;_&#39; present</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	invalid := rune(0) <span class="comment">// invalid digit in literal, or 0</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	<span class="comment">// integer part</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	var tok rune
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	var ds int
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	if !seenDot {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		tok = Int
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		if ch == &#39;0&#39; {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			ch = s.next()
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>			switch lower(ch) {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>			case &#39;x&#39;:
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>				ch = s.next()
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>				base, prefix = 16, &#39;x&#39;
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>			case &#39;o&#39;:
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>				ch = s.next()
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>				base, prefix = 8, &#39;o&#39;
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>			case &#39;b&#39;:
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>				ch = s.next()
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>				base, prefix = 2, &#39;b&#39;
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>			default:
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>				base, prefix = 8, &#39;0&#39;
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>				digsep = 1 <span class="comment">// leading 0</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>			}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		}
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		ch, ds = s.digits(ch, base, &amp;invalid)
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		digsep |= ds
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		if ch == &#39;.&#39; &amp;&amp; s.Mode&amp;ScanFloats != 0 {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>			ch = s.next()
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			seenDot = true
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	<span class="comment">// fractional part</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	if seenDot {
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>		tok = Float
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		if prefix == &#39;o&#39; || prefix == &#39;b&#39; {
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>			s.error(&#34;invalid radix point in &#34; + litname(prefix))
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		ch, ds = s.digits(ch, base, &amp;invalid)
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		digsep |= ds
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	}
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	if digsep&amp;1 == 0 {
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		s.error(litname(prefix) + &#34; has no digits&#34;)
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	<span class="comment">// exponent</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	if e := lower(ch); (e == &#39;e&#39; || e == &#39;p&#39;) &amp;&amp; s.Mode&amp;ScanFloats != 0 {
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		switch {
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		case e == &#39;e&#39; &amp;&amp; prefix != 0 &amp;&amp; prefix != &#39;0&#39;:
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>			s.errorf(&#34;%q exponent requires decimal mantissa&#34;, ch)
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		case e == &#39;p&#39; &amp;&amp; prefix != &#39;x&#39;:
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>			s.errorf(&#34;%q exponent requires hexadecimal mantissa&#34;, ch)
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		}
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		ch = s.next()
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		tok = Float
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		if ch == &#39;+&#39; || ch == &#39;-&#39; {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>			ch = s.next()
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		ch, ds = s.digits(ch, 10, nil)
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		digsep |= ds
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		if ds&amp;1 == 0 {
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>			s.error(&#34;exponent has no digits&#34;)
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	} else if prefix == &#39;x&#39; &amp;&amp; tok == Float {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		s.error(&#34;hexadecimal mantissa requires a &#39;p&#39; exponent&#34;)
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	if tok == Int &amp;&amp; invalid != 0 {
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		s.errorf(&#34;invalid digit %q in %s&#34;, invalid, litname(prefix))
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	if digsep&amp;2 != 0 {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		s.tokEnd = s.srcPos - s.lastCharLen <span class="comment">// make sure token text is terminated</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>		if i := invalidSep(s.TokenText()); i &gt;= 0 {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>			s.error(&#34;&#39;_&#39; must separate successive digits&#34;)
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>		}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	}
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	return tok, ch
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>}
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>func litname(prefix rune) string {
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	switch prefix {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	default:
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		return &#34;decimal literal&#34;
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	case &#39;x&#39;:
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		return &#34;hexadecimal literal&#34;
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	case &#39;o&#39;, &#39;0&#39;:
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		return &#34;octal literal&#34;
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	case &#39;b&#39;:
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		return &#34;binary literal&#34;
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>}
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span><span class="comment">// invalidSep returns the index of the first invalid separator in x, or -1.</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>func invalidSep(x string) int {
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	x1 := &#39; &#39; <span class="comment">// prefix char, we only care if it&#39;s &#39;x&#39;</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	d := &#39;.&#39;  <span class="comment">// digit, one of &#39;_&#39;, &#39;0&#39; (a digit), or &#39;.&#39; (anything else)</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	i := 0
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	<span class="comment">// a prefix counts as a digit</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	if len(x) &gt;= 2 &amp;&amp; x[0] == &#39;0&#39; {
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		x1 = lower(rune(x[1]))
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		if x1 == &#39;x&#39; || x1 == &#39;o&#39; || x1 == &#39;b&#39; {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>			d = &#39;0&#39;
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>			i = 2
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		}
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	}
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	<span class="comment">// mantissa and exponent</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	for ; i &lt; len(x); i++ {
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		p := d <span class="comment">// previous digit</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		d = rune(x[i])
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		switch {
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>		case d == &#39;_&#39;:
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>			if p != &#39;0&#39; {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>				return i
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>			}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		case isDecimal(d) || x1 == &#39;x&#39; &amp;&amp; isHex(d):
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>			d = &#39;0&#39;
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		default:
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>			if p == &#39;_&#39; {
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>				return i - 1
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>			}
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>			d = &#39;.&#39;
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		}
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	}
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	if d == &#39;_&#39; {
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		return len(x) - 1
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	return -1
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>func digitVal(ch rune) int {
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	switch {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	case &#39;0&#39; &lt;= ch &amp;&amp; ch &lt;= &#39;9&#39;:
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		return int(ch - &#39;0&#39;)
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	case &#39;a&#39; &lt;= lower(ch) &amp;&amp; lower(ch) &lt;= &#39;f&#39;:
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		return int(lower(ch) - &#39;a&#39; + 10)
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	}
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	return 16 <span class="comment">// larger than any legal digit val</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>}
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>func (s *Scanner) scanDigits(ch rune, base, n int) rune {
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	for n &gt; 0 &amp;&amp; digitVal(ch) &lt; base {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		ch = s.next()
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		n--
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	}
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	if n &gt; 0 {
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>		s.error(&#34;invalid char escape&#34;)
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	}
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	return ch
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>}
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>func (s *Scanner) scanEscape(quote rune) rune {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	ch := s.next() <span class="comment">// read character after &#39;/&#39;</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	switch ch {
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	case &#39;a&#39;, &#39;b&#39;, &#39;f&#39;, &#39;n&#39;, &#39;r&#39;, &#39;t&#39;, &#39;v&#39;, &#39;\\&#39;, quote:
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>		<span class="comment">// nothing to do</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		ch = s.next()
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	case &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;:
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		ch = s.scanDigits(ch, 8, 3)
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	case &#39;x&#39;:
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		ch = s.scanDigits(s.next(), 16, 2)
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	case &#39;u&#39;:
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>		ch = s.scanDigits(s.next(), 16, 4)
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	case &#39;U&#39;:
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>		ch = s.scanDigits(s.next(), 16, 8)
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	default:
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		s.error(&#34;invalid char escape&#34;)
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	}
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	return ch
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>func (s *Scanner) scanString(quote rune) (n int) {
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	ch := s.next() <span class="comment">// read character after quote</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	for ch != quote {
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		if ch == &#39;\n&#39; || ch &lt; 0 {
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>			s.error(&#34;literal not terminated&#34;)
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>			return
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		if ch == &#39;\\&#39; {
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>			ch = s.scanEscape(quote)
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		} else {
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>			ch = s.next()
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		}
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		n++
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	}
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	return
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>}
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>func (s *Scanner) scanRawString() {
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	ch := s.next() <span class="comment">// read character after &#39;`&#39;</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	for ch != &#39;`&#39; {
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>		if ch &lt; 0 {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>			s.error(&#34;literal not terminated&#34;)
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>			return
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		}
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		ch = s.next()
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	}
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>}
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>func (s *Scanner) scanChar() {
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	if s.scanString(&#39;\&#39;&#39;) != 1 {
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		s.error(&#34;invalid char literal&#34;)
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	}
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>}
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>func (s *Scanner) scanComment(ch rune) rune {
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	<span class="comment">// ch == &#39;/&#39; || ch == &#39;*&#39;</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	if ch == &#39;/&#39; {
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		<span class="comment">// line comment</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		ch = s.next() <span class="comment">// read character after &#34;//&#34;</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		for ch != &#39;\n&#39; &amp;&amp; ch &gt;= 0 {
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>			ch = s.next()
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		}
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>		return ch
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	}
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	<span class="comment">// general comment</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	ch = s.next() <span class="comment">// read character after &#34;/*&#34;</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	for {
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>		if ch &lt; 0 {
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>			s.error(&#34;comment not terminated&#34;)
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>			break
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		}
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		ch0 := ch
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		ch = s.next()
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		if ch0 == &#39;*&#39; &amp;&amp; ch == &#39;/&#39; {
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>			ch = s.next()
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>			break
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		}
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	}
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	return ch
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>}
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span><span class="comment">// Scan reads the next token or Unicode character from source and returns it.</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span><span class="comment">// It only recognizes tokens t for which the respective Mode bit (1&lt;&lt;-t) is set.</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span><span class="comment">// It returns EOF at the end of the source. It reports scanner errors (read and</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span><span class="comment">// token errors) by calling s.Error, if not nil; otherwise it prints an error</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span><span class="comment">// message to os.Stderr.</span>
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>func (s *Scanner) Scan() rune {
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	ch := s.Peek()
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	<span class="comment">// reset token text position</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	s.tokPos = -1
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	s.Line = 0
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>redo:
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	<span class="comment">// skip white space</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	for s.Whitespace&amp;(1&lt;&lt;uint(ch)) != 0 {
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		ch = s.next()
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	}
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	<span class="comment">// start collecting token text</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	s.tokBuf.Reset()
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	s.tokPos = s.srcPos - s.lastCharLen
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	<span class="comment">// set token position</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	<span class="comment">// (this is a slightly optimized version of the code in Pos())</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	s.Offset = s.srcBufOffset + s.tokPos
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	if s.column &gt; 0 {
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>		<span class="comment">// common case: last character was not a &#39;\n&#39;</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		s.Line = s.line
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>		s.Column = s.column
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>	} else {
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>		<span class="comment">// last character was a &#39;\n&#39;</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>		<span class="comment">// (we cannot be at the beginning of the source</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		<span class="comment">// since we have called next() at least once)</span>
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		s.Line = s.line - 1
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		s.Column = s.lastLineLen
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>	}
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	<span class="comment">// determine token value</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	tok := ch
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	switch {
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	case s.isIdentRune(ch, 0):
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>		if s.Mode&amp;ScanIdents != 0 {
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>			tok = Ident
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>			ch = s.scanIdentifier()
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>		} else {
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>			ch = s.next()
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>		}
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	case isDecimal(ch):
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		if s.Mode&amp;(ScanInts|ScanFloats) != 0 {
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>			tok, ch = s.scanNumber(ch, false)
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		} else {
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>			ch = s.next()
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>		}
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>	default:
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>		switch ch {
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>		case EOF:
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>			break
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>		case &#39;&#34;&#39;:
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>			if s.Mode&amp;ScanStrings != 0 {
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>				s.scanString(&#39;&#34;&#39;)
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>				tok = String
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>			}
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>			ch = s.next()
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>		case &#39;\&#39;&#39;:
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>			if s.Mode&amp;ScanChars != 0 {
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>				s.scanChar()
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>				tok = Char
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>			}
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>			ch = s.next()
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>		case &#39;.&#39;:
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>			ch = s.next()
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>			if isDecimal(ch) &amp;&amp; s.Mode&amp;ScanFloats != 0 {
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>				tok, ch = s.scanNumber(ch, true)
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>			}
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>		case &#39;/&#39;:
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>			ch = s.next()
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>			if (ch == &#39;/&#39; || ch == &#39;*&#39;) &amp;&amp; s.Mode&amp;ScanComments != 0 {
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>				if s.Mode&amp;SkipComments != 0 {
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>					s.tokPos = -1 <span class="comment">// don&#39;t collect token text</span>
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>					ch = s.scanComment(ch)
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>					goto redo
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>				}
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>				ch = s.scanComment(ch)
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>				tok = Comment
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>			}
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		case &#39;`&#39;:
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>			if s.Mode&amp;ScanRawStrings != 0 {
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>				s.scanRawString()
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>				tok = RawString
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>			}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>			ch = s.next()
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		default:
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>			ch = s.next()
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>		}
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>	}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	<span class="comment">// end of token text</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>	s.tokEnd = s.srcPos - s.lastCharLen
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	s.ch = ch
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>	return tok
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>}
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>
<span id="L744" class="ln">   744&nbsp;&nbsp;</span><span class="comment">// Pos returns the position of the character immediately after</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span><span class="comment">// the character or token returned by the last call to Next or Scan.</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span><span class="comment">// Use the Scanner&#39;s Position field for the start position of the most</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span><span class="comment">// recently scanned token.</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>func (s *Scanner) Pos() (pos Position) {
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>	pos.Filename = s.Filename
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>	pos.Offset = s.srcBufOffset + s.srcPos - s.lastCharLen
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	switch {
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	case s.column &gt; 0:
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>		<span class="comment">// common case: last character was not a &#39;\n&#39;</span>
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>		pos.Line = s.line
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>		pos.Column = s.column
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	case s.lastLineLen &gt; 0:
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>		<span class="comment">// last character was a &#39;\n&#39;</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		pos.Line = s.line - 1
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>		pos.Column = s.lastLineLen
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>	default:
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>		<span class="comment">// at the beginning of the source</span>
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>		pos.Line = 1
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>		pos.Column = 1
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	}
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>	return
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>}
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>
<span id="L768" class="ln">   768&nbsp;&nbsp;</span><span class="comment">// TokenText returns the string corresponding to the most recently scanned token.</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span><span class="comment">// Valid after calling Scan and in calls of Scanner.Error.</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>func (s *Scanner) TokenText() string {
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>	if s.tokPos &lt; 0 {
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>		<span class="comment">// no token text</span>
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>	}
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	if s.tokEnd &lt; s.tokPos {
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>		<span class="comment">// if EOF was reached, s.tokEnd is set to -1 (s.srcPos == 0)</span>
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>		s.tokEnd = s.tokPos
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	}
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	<span class="comment">// s.tokEnd &gt;= s.tokPos</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	if s.tokBuf.Len() == 0 {
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>		<span class="comment">// common case: the entire token text is still in srcBuf</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>		return string(s.srcBuf[s.tokPos:s.tokEnd])
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>	}
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	<span class="comment">// part of the token text was saved in tokBuf: save the rest in</span>
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>	<span class="comment">// tokBuf as well and return its content</span>
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>	s.tokBuf.Write(s.srcBuf[s.tokPos:s.tokEnd])
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	s.tokPos = s.tokEnd <span class="comment">// ensure idempotency of TokenText() call</span>
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	return s.tokBuf.String()
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>}
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>
</pre><p><a href="scanner.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
