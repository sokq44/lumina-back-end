<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/text/template/exec.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./exec.go?s=6644:6688#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/text">text</a>/<a href="http://localhost:8080/src/text/template">template</a>/<span class="text-muted">exec.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/text/template">text/template</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package template
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;internal/fmtsort&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;runtime&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;text/template/parse&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// maxExecDepth specifies the maximum stack depth of templates within</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// templates. This limit is only practically reached by accidentally</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// recursive template invocations. This limit allows us to return</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// an error instead of triggering a stack overflow.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>var maxExecDepth = initMaxExecDepth()
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>func initMaxExecDepth() int {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	if runtime.GOARCH == &#34;wasm&#34; {
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>		return 1000
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	}
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	return 100000
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>}
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// state represents the state of an execution. It&#39;s not part of the</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// template so that multiple executions of the same template</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// can execute in parallel.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>type state struct {
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	tmpl  *Template
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	wr    io.Writer
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	node  parse.Node <span class="comment">// current node, for errors</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	vars  []variable <span class="comment">// push-down stack of variable values.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	depth int        <span class="comment">// the height of the stack of executing templates.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>}
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// variable holds the dynamic value of a variable such as $, $x etc.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>type variable struct {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	name  string
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	value reflect.Value
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// push pushes a new variable on the stack.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>func (s *state) push(name string, value reflect.Value) {
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	s.vars = append(s.vars, variable{name, value})
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// mark returns the length of the variable stack.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>func (s *state) mark() int {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	return len(s.vars)
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// pop pops the variable stack up to the mark.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>func (s *state) pop(mark int) {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	s.vars = s.vars[0:mark]
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// setVar overwrites the last declared variable with the given name.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// Used by variable assignments.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>func (s *state) setVar(name string, value reflect.Value) {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	for i := s.mark() - 1; i &gt;= 0; i-- {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		if s.vars[i].name == name {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>			s.vars[i].value = value
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>			return
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	s.errorf(&#34;undefined variable: %s&#34;, name)
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// setTopVar overwrites the top-nth variable on the stack. Used by range iterations.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>func (s *state) setTopVar(n int, value reflect.Value) {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	s.vars[len(s.vars)-n].value = value
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// varValue returns the value of the named variable.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>func (s *state) varValue(name string) reflect.Value {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	for i := s.mark() - 1; i &gt;= 0; i-- {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		if s.vars[i].name == name {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>			return s.vars[i].value
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	s.errorf(&#34;undefined variable: %s&#34;, name)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	return zero
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>var zero reflect.Value
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>type missingValType struct{}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>var missingVal = reflect.ValueOf(missingValType{})
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>var missingValReflectType = reflect.TypeFor[missingValType]()
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>func isMissing(v reflect.Value) bool {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	return v.IsValid() &amp;&amp; v.Type() == missingValReflectType
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// at marks the state to be on node n, for error reporting.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>func (s *state) at(node parse.Node) {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	s.node = node
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// doublePercent returns the string with %&#39;s replaced by %%, if necessary,</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// so it can be used safely inside a Printf format string.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>func doublePercent(str string) string {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	return strings.ReplaceAll(str, &#34;%&#34;, &#34;%%&#34;)
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// TODO: It would be nice if ExecError was more broken down, but</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// the way ErrorContext embeds the template name makes the</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// processing too clumsy.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// ExecError is the custom error type returned when Execute has an</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// error evaluating its template. (If a write error occurs, the actual</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// error is returned; it will not be of type ExecError.)</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>type ExecError struct {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	Name string <span class="comment">// Name of template.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	Err  error  <span class="comment">// Pre-formatted error.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>func (e ExecError) Error() string {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	return e.Err.Error()
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>func (e ExecError) Unwrap() error {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	return e.Err
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// errorf records an ExecError and terminates processing.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>func (s *state) errorf(format string, args ...any) {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	name := doublePercent(s.tmpl.Name())
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	if s.node == nil {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		format = fmt.Sprintf(&#34;template: %s: %s&#34;, name, format)
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	} else {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		location, context := s.tmpl.ErrorContext(s.node)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		format = fmt.Sprintf(&#34;template: %s: executing %q at &lt;%s&gt;: %s&#34;, location, name, doublePercent(context), format)
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	panic(ExecError{
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		Name: s.tmpl.Name(),
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		Err:  fmt.Errorf(format, args...),
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	})
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// writeError is the wrapper type used internally when Execute has an</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// error writing to its output. We strip the wrapper in errRecover.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// Note that this is not an implementation of error, so it cannot escape</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// from the package as an error value.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>type writeError struct {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	Err error <span class="comment">// Original error.</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>func (s *state) writeError(err error) {
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	panic(writeError{
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		Err: err,
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	})
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">// errRecover is the handler that turns panics into returns from the top</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">// level of Parse.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>func errRecover(errp *error) {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	e := recover()
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	if e != nil {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		switch err := e.(type) {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		case runtime.Error:
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>			panic(e)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		case writeError:
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>			*errp = err.Err <span class="comment">// Strip the wrapper.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		case ExecError:
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>			*errp = err <span class="comment">// Keep the wrapper.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		default:
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>			panic(e)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">// ExecuteTemplate applies the template associated with t that has the given name</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// to the specified data object and writes the output to wr.</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// If an error occurs executing the template or writing its output,</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// execution stops, but partial results may already have been written to</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// the output writer.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// A template may be executed safely in parallel, although if parallel</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// executions share a Writer the output may be interleaved.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>func (t *Template) ExecuteTemplate(wr io.Writer, name string, data any) error {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	tmpl := t.Lookup(name)
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	if tmpl == nil {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;template: no template %q associated with template %q&#34;, name, t.name)
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	return tmpl.Execute(wr, data)
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// Execute applies a parsed template to the specified data object,</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// and writes the output to wr.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">// If an error occurs executing the template or writing its output,</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// execution stops, but partial results may already have been written to</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// the output writer.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// A template may be executed safely in parallel, although if parallel</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// executions share a Writer the output may be interleaved.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// If data is a reflect.Value, the template applies to the concrete</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// value that the reflect.Value holds, as in fmt.Print.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>func (t *Template) Execute(wr io.Writer, data any) error {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	return t.execute(wr, data)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>func (t *Template) execute(wr io.Writer, data any) (err error) {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	defer errRecover(&amp;err)
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	value, ok := data.(reflect.Value)
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	if !ok {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		value = reflect.ValueOf(data)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	state := &amp;state{
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		tmpl: t,
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		wr:   wr,
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		vars: []variable{{&#34;$&#34;, value}},
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	if t.Tree == nil || t.Root == nil {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		state.errorf(&#34;%q is an incomplete or empty template&#34;, t.Name())
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	state.walk(value, t.Root)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	return
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// DefinedTemplates returns a string listing the defined templates,</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// prefixed by the string &#34;; defined templates are: &#34;. If there are none,</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">// it returns the empty string. For generating an error message here</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// and in html/template.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="selection">func (t *Template) DefinedTemplates() string</span> {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	if t.common == nil {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	var b strings.Builder
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	t.muTmpl.RLock()
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	defer t.muTmpl.RUnlock()
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	for name, tmpl := range t.tmpl {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		if tmpl.Tree == nil || tmpl.Root == nil {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			continue
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		if b.Len() == 0 {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			b.WriteString(&#34;; defined templates are: &#34;)
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		} else {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>			b.WriteString(&#34;, &#34;)
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;b, &#34;%q&#34;, name)
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	return b.String()
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">// Sentinel errors for use with panic to signal early exits from range loops.</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>var (
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	walkBreak    = errors.New(&#34;break&#34;)
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	walkContinue = errors.New(&#34;continue&#34;)
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// Walk functions step through the major pieces of the template structure,</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// generating output as they go.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>func (s *state) walk(dot reflect.Value, node parse.Node) {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	s.at(node)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	switch node := node.(type) {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	case *parse.ActionNode:
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		<span class="comment">// Do not pop variables so they persist until next end.</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		<span class="comment">// Also, if the action declares variables, don&#39;t print the result.</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		val := s.evalPipeline(dot, node.Pipe)
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		if len(node.Pipe.Decl) == 0 {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>			s.printValue(node, val)
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	case *parse.BreakNode:
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		panic(walkBreak)
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	case *parse.CommentNode:
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	case *parse.ContinueNode:
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		panic(walkContinue)
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	case *parse.IfNode:
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		s.walkIfOrWith(parse.NodeIf, dot, node.Pipe, node.List, node.ElseList)
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	case *parse.ListNode:
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		for _, node := range node.Nodes {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>			s.walk(dot, node)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	case *parse.RangeNode:
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		s.walkRange(dot, node)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	case *parse.TemplateNode:
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		s.walkTemplate(dot, node)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	case *parse.TextNode:
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		if _, err := s.wr.Write(node.Text); err != nil {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>			s.writeError(err)
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	case *parse.WithNode:
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		s.walkIfOrWith(parse.NodeWith, dot, node.Pipe, node.List, node.ElseList)
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	default:
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		s.errorf(&#34;unknown node: %s&#34;, node)
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">// walkIfOrWith walks an &#39;if&#39; or &#39;with&#39; node. The two control structures</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span><span class="comment">// are identical in behavior except that &#39;with&#39; sets dot.</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>func (s *state) walkIfOrWith(typ parse.NodeType, dot reflect.Value, pipe *parse.PipeNode, list, elseList *parse.ListNode) {
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	defer s.pop(s.mark())
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	val := s.evalPipeline(dot, pipe)
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	truth, ok := isTrue(indirectInterface(val))
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	if !ok {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		s.errorf(&#34;if/with can&#39;t use %v&#34;, val)
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	if truth {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		if typ == parse.NodeWith {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>			s.walk(val, list)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		} else {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>			s.walk(dot, list)
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	} else if elseList != nil {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		s.walk(dot, elseList)
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span><span class="comment">// IsTrue reports whether the value is &#39;true&#39;, in the sense of not the zero of its type,</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span><span class="comment">// and whether the value has a meaningful truth value. This is the definition of</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span><span class="comment">// truth used by if and other such actions.</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>func IsTrue(val any) (truth, ok bool) {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	return isTrue(reflect.ValueOf(val))
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>func isTrue(val reflect.Value) (truth, ok bool) {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	if !val.IsValid() {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		<span class="comment">// Something like var x interface{}, never set. It&#39;s a form of nil.</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		return false, true
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	switch val.Kind() {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	case reflect.Array, reflect.Map, reflect.Slice, reflect.String:
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		truth = val.Len() &gt; 0
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	case reflect.Bool:
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		truth = val.Bool()
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	case reflect.Complex64, reflect.Complex128:
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		truth = val.Complex() != 0
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	case reflect.Chan, reflect.Func, reflect.Pointer, reflect.Interface:
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		truth = !val.IsNil()
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		truth = val.Int() != 0
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	case reflect.Float32, reflect.Float64:
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		truth = val.Float() != 0
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		truth = val.Uint() != 0
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	case reflect.Struct:
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		truth = true <span class="comment">// Struct values are always true.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	default:
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		return
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	}
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	return truth, true
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>func (s *state) walkRange(dot reflect.Value, r *parse.RangeNode) {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	s.at(r)
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	defer func() {
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		if r := recover(); r != nil &amp;&amp; r != walkBreak {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>			panic(r)
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	}()
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	defer s.pop(s.mark())
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	val, _ := indirect(s.evalPipeline(dot, r.Pipe))
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	<span class="comment">// mark top of stack before any variables in the body are pushed.</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	mark := s.mark()
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	oneIteration := func(index, elem reflect.Value) {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		if len(r.Pipe.Decl) &gt; 0 {
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>			if r.Pipe.IsAssign {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>				<span class="comment">// With two variables, index comes first.</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>				<span class="comment">// With one, we use the element.</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>				if len(r.Pipe.Decl) &gt; 1 {
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>					s.setVar(r.Pipe.Decl[0].Ident[0], index)
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>				} else {
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>					s.setVar(r.Pipe.Decl[0].Ident[0], elem)
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>				}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>			} else {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>				<span class="comment">// Set top var (lexically the second if there</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>				<span class="comment">// are two) to the element.</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>				s.setTopVar(1, elem)
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>			}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		}
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		if len(r.Pipe.Decl) &gt; 1 {
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>			if r.Pipe.IsAssign {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>				s.setVar(r.Pipe.Decl[1].Ident[0], elem)
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>			} else {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>				<span class="comment">// Set next var (lexically the first if there</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>				<span class="comment">// are two) to the index.</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>				s.setTopVar(2, index)
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>			}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		defer s.pop(mark)
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		defer func() {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>			<span class="comment">// Consume panic(walkContinue)</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>			if r := recover(); r != nil &amp;&amp; r != walkContinue {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>				panic(r)
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>			}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		}()
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		s.walk(elem, r.List)
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	switch val.Kind() {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	case reflect.Array, reflect.Slice:
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		if val.Len() == 0 {
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>			break
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>		}
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		for i := 0; i &lt; val.Len(); i++ {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>			oneIteration(reflect.ValueOf(i), val.Index(i))
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		}
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		return
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	case reflect.Map:
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>		if val.Len() == 0 {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>			break
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		om := fmtsort.Sort(val)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		for i, key := range om.Key {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>			oneIteration(key, om.Value[i])
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		}
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		return
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	case reflect.Chan:
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		if val.IsNil() {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>			break
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		if val.Type().ChanDir() == reflect.SendDir {
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>			s.errorf(&#34;range over send-only channel %v&#34;, val)
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>			break
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		i := 0
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		for ; ; i++ {
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>			elem, ok := val.Recv()
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>			if !ok {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>				break
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>			}
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>			oneIteration(reflect.ValueOf(i), elem)
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		if i == 0 {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			break
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		return
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	case reflect.Invalid:
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		break <span class="comment">// An invalid value is likely a nil map, etc. and acts like an empty map.</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	default:
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		s.errorf(&#34;range can&#39;t iterate over %v&#34;, val)
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	if r.ElseList != nil {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		s.walk(dot, r.ElseList)
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>}
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>func (s *state) walkTemplate(dot reflect.Value, t *parse.TemplateNode) {
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	s.at(t)
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	tmpl := s.tmpl.Lookup(t.Name)
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	if tmpl == nil {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		s.errorf(&#34;template %q not defined&#34;, t.Name)
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	if s.depth == maxExecDepth {
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		s.errorf(&#34;exceeded maximum template depth (%v)&#34;, maxExecDepth)
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	}
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	<span class="comment">// Variables declared by the pipeline persist.</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	dot = s.evalPipeline(dot, t.Pipe)
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	newState := *s
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	newState.depth++
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	newState.tmpl = tmpl
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	<span class="comment">// No dynamic scoping: template invocations inherit no variables.</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	newState.vars = []variable{{&#34;$&#34;, dot}}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	newState.walk(dot, tmpl.Root)
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>}
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span><span class="comment">// Eval functions evaluate pipelines, commands, and their elements and extract</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span><span class="comment">// values from the data structure by examining fields, calling methods, and so on.</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span><span class="comment">// The printing of those values happens only through walk functions.</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span><span class="comment">// evalPipeline returns the value acquired by evaluating a pipeline. If the</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span><span class="comment">// pipeline has a variable declaration, the variable will be pushed on the</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span><span class="comment">// stack. Callers should therefore pop the stack after they are finished</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span><span class="comment">// executing commands depending on the pipeline value.</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>func (s *state) evalPipeline(dot reflect.Value, pipe *parse.PipeNode) (value reflect.Value) {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	if pipe == nil {
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		return
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	s.at(pipe)
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	value = missingVal
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	for _, cmd := range pipe.Cmds {
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>		value = s.evalCommand(dot, cmd, value) <span class="comment">// previous value is this one&#39;s final arg.</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>		<span class="comment">// If the object has type interface{}, dig down one level to the thing inside.</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		if value.Kind() == reflect.Interface &amp;&amp; value.Type().NumMethod() == 0 {
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>			value = reflect.ValueOf(value.Interface()) <span class="comment">// lovely!</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>		}
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	for _, variable := range pipe.Decl {
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		if pipe.IsAssign {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>			s.setVar(variable.Ident[0], value)
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		} else {
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>			s.push(variable.Ident[0], value)
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		}
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	}
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	return value
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>func (s *state) notAFunction(args []parse.Node, final reflect.Value) {
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	if len(args) &gt; 1 || !isMissing(final) {
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		s.errorf(&#34;can&#39;t give argument to non-function %s&#34;, args[0])
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	}
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>func (s *state) evalCommand(dot reflect.Value, cmd *parse.CommandNode, final reflect.Value) reflect.Value {
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	firstWord := cmd.Args[0]
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	switch n := firstWord.(type) {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	case *parse.FieldNode:
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		return s.evalFieldNode(dot, n, cmd.Args, final)
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	case *parse.ChainNode:
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		return s.evalChainNode(dot, n, cmd.Args, final)
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	case *parse.IdentifierNode:
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		<span class="comment">// Must be a function.</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		return s.evalFunction(dot, n, cmd, cmd.Args, final)
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	case *parse.PipeNode:
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		<span class="comment">// Parenthesized pipeline. The arguments are all inside the pipeline; final must be absent.</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		s.notAFunction(cmd.Args, final)
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		return s.evalPipeline(dot, n)
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	case *parse.VariableNode:
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		return s.evalVariableNode(dot, n, cmd.Args, final)
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	s.at(firstWord)
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	s.notAFunction(cmd.Args, final)
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	switch word := firstWord.(type) {
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	case *parse.BoolNode:
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		return reflect.ValueOf(word.True)
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	case *parse.DotNode:
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		return dot
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	case *parse.NilNode:
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		s.errorf(&#34;nil is not a command&#34;)
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	case *parse.NumberNode:
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		return s.idealConstant(word)
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	case *parse.StringNode:
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		return reflect.ValueOf(word.Text)
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	}
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	s.errorf(&#34;can&#39;t evaluate command %q&#34;, firstWord)
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	panic(&#34;not reached&#34;)
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>}
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span><span class="comment">// idealConstant is called to return the value of a number in a context where</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span><span class="comment">// we don&#39;t know the type. In that case, the syntax of the number tells us</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span><span class="comment">// its type, and we use Go rules to resolve. Note there is no such thing as</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span><span class="comment">// a uint ideal constant in this situation - the value must be of int type.</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>func (s *state) idealConstant(constant *parse.NumberNode) reflect.Value {
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	<span class="comment">// These are ideal constants but we don&#39;t know the type</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	<span class="comment">// and we have no context.  (If it was a method argument,</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	<span class="comment">// we&#39;d know what we need.) The syntax guides us to some extent.</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	s.at(constant)
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	switch {
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	case constant.IsComplex:
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		return reflect.ValueOf(constant.Complex128) <span class="comment">// incontrovertible.</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	case constant.IsFloat &amp;&amp;
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		!isHexInt(constant.Text) &amp;&amp; !isRuneInt(constant.Text) &amp;&amp;
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		strings.ContainsAny(constant.Text, &#34;.eEpP&#34;):
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		return reflect.ValueOf(constant.Float64)
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	case constant.IsInt:
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		n := int(constant.Int64)
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		if int64(n) != constant.Int64 {
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>			s.errorf(&#34;%s overflows int&#34;, constant.Text)
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		}
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		return reflect.ValueOf(n)
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	case constant.IsUint:
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		s.errorf(&#34;%s overflows int&#34;, constant.Text)
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	return zero
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>}
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>func isRuneInt(s string) bool {
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	return len(s) &gt; 0 &amp;&amp; s[0] == &#39;\&#39;&#39;
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>func isHexInt(s string) bool {
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	return len(s) &gt; 2 &amp;&amp; s[0] == &#39;0&#39; &amp;&amp; (s[1] == &#39;x&#39; || s[1] == &#39;X&#39;) &amp;&amp; !strings.ContainsAny(s, &#34;pP&#34;)
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>}
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>func (s *state) evalFieldNode(dot reflect.Value, field *parse.FieldNode, args []parse.Node, final reflect.Value) reflect.Value {
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	s.at(field)
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	return s.evalFieldChain(dot, dot, field, field.Ident, args, final)
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>}
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>func (s *state) evalChainNode(dot reflect.Value, chain *parse.ChainNode, args []parse.Node, final reflect.Value) reflect.Value {
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	s.at(chain)
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	if len(chain.Field) == 0 {
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		s.errorf(&#34;internal error: no fields in evalChainNode&#34;)
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	}
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	if chain.Node.Type() == parse.NodeNil {
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		s.errorf(&#34;indirection through explicit nil in %s&#34;, chain)
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	}
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	<span class="comment">// (pipe).Field1.Field2 has pipe as .Node, fields as .Field. Eval the pipeline, then the fields.</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	pipe := s.evalArg(dot, nil, chain.Node)
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	return s.evalFieldChain(dot, pipe, chain, chain.Field, args, final)
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>}
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>func (s *state) evalVariableNode(dot reflect.Value, variable *parse.VariableNode, args []parse.Node, final reflect.Value) reflect.Value {
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	<span class="comment">// $x.Field has $x as the first ident, Field as the second. Eval the var, then the fields.</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	s.at(variable)
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	value := s.varValue(variable.Ident[0])
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	if len(variable.Ident) == 1 {
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		s.notAFunction(args, final)
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>		return value
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	}
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	return s.evalFieldChain(dot, value, variable, variable.Ident[1:], args, final)
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>}
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span><span class="comment">// evalFieldChain evaluates .X.Y.Z possibly followed by arguments.</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span><span class="comment">// dot is the environment in which to evaluate arguments, while</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span><span class="comment">// receiver is the value being walked along the chain.</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>func (s *state) evalFieldChain(dot, receiver reflect.Value, node parse.Node, ident []string, args []parse.Node, final reflect.Value) reflect.Value {
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	n := len(ident)
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	for i := 0; i &lt; n-1; i++ {
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>		receiver = s.evalField(dot, ident[i], node, nil, missingVal, receiver)
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	}
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	<span class="comment">// Now if it&#39;s a method, it gets the arguments.</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	return s.evalField(dot, ident[n-1], node, args, final, receiver)
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>}
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>func (s *state) evalFunction(dot reflect.Value, node *parse.IdentifierNode, cmd parse.Node, args []parse.Node, final reflect.Value) reflect.Value {
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	s.at(node)
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	name := node.Ident
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	function, isBuiltin, ok := findFunction(name, s.tmpl)
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	if !ok {
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>		s.errorf(&#34;%q is not a defined function&#34;, name)
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	}
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	return s.evalCall(dot, function, isBuiltin, cmd, name, args, final)
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>}
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span><span class="comment">// evalField evaluates an expression like (.Field) or (.Field arg1 arg2).</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span><span class="comment">// The &#39;final&#39; argument represents the return value from the preceding</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span><span class="comment">// value of the pipeline, if any.</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>func (s *state) evalField(dot reflect.Value, fieldName string, node parse.Node, args []parse.Node, final, receiver reflect.Value) reflect.Value {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	if !receiver.IsValid() {
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		if s.tmpl.option.missingKey == mapError { <span class="comment">// Treat invalid value as missing map key.</span>
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>			s.errorf(&#34;nil data; no entry for key %q&#34;, fieldName)
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		}
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		return zero
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	}
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	typ := receiver.Type()
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	receiver, isNil := indirect(receiver)
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	if receiver.Kind() == reflect.Interface &amp;&amp; isNil {
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		<span class="comment">// Calling a method on a nil interface can&#39;t work. The</span>
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>		<span class="comment">// MethodByName method call below would panic.</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		s.errorf(&#34;nil pointer evaluating %s.%s&#34;, typ, fieldName)
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>		return zero
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	}
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	<span class="comment">// Unless it&#39;s an interface, need to get to a value of type *T to guarantee</span>
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	<span class="comment">// we see all methods of T and *T.</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	ptr := receiver
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	if ptr.Kind() != reflect.Interface &amp;&amp; ptr.Kind() != reflect.Pointer &amp;&amp; ptr.CanAddr() {
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		ptr = ptr.Addr()
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	}
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	if method := ptr.MethodByName(fieldName); method.IsValid() {
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		return s.evalCall(dot, method, false, node, fieldName, args, final)
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	}
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	hasArgs := len(args) &gt; 1 || !isMissing(final)
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	<span class="comment">// It&#39;s not a method; must be a field of a struct or an element of a map.</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	switch receiver.Kind() {
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	case reflect.Struct:
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		tField, ok := receiver.Type().FieldByName(fieldName)
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>		if ok {
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>			field, err := receiver.FieldByIndexErr(tField.Index)
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>			if !tField.IsExported() {
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>				s.errorf(&#34;%s is an unexported field of struct type %s&#34;, fieldName, typ)
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>			}
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>			if err != nil {
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>				s.errorf(&#34;%v&#34;, err)
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>			}
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>			<span class="comment">// If it&#39;s a function, we must call it.</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>			if hasArgs {
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>				s.errorf(&#34;%s has arguments but cannot be invoked as function&#34;, fieldName)
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>			}
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>			return field
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>		}
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	case reflect.Map:
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		<span class="comment">// If it&#39;s a map, attempt to use the field name as a key.</span>
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		nameVal := reflect.ValueOf(fieldName)
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		if nameVal.Type().AssignableTo(receiver.Type().Key()) {
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>			if hasArgs {
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>				s.errorf(&#34;%s is not a method but has arguments&#34;, fieldName)
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>			}
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>			result := receiver.MapIndex(nameVal)
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>			if !result.IsValid() {
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>				switch s.tmpl.option.missingKey {
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>				case mapInvalid:
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>					<span class="comment">// Just use the invalid value.</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>				case mapZeroValue:
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>					result = reflect.Zero(receiver.Type().Elem())
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>				case mapError:
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>					s.errorf(&#34;map has no entry for key %q&#34;, fieldName)
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>				}
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>			}
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>			return result
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		}
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	case reflect.Pointer:
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>		etyp := receiver.Type().Elem()
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>		if etyp.Kind() == reflect.Struct {
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>			if _, ok := etyp.FieldByName(fieldName); !ok {
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>				<span class="comment">// If there&#39;s no such field, say &#34;can&#39;t evaluate&#34;</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>				<span class="comment">// instead of &#34;nil pointer evaluating&#34;.</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>				break
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>			}
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		}
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>		if isNil {
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>			s.errorf(&#34;nil pointer evaluating %s.%s&#34;, typ, fieldName)
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>		}
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	}
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	s.errorf(&#34;can&#39;t evaluate field %s in type %s&#34;, fieldName, typ)
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	panic(&#34;not reached&#34;)
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>}
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>var (
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	errorType        = reflect.TypeFor[error]()
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	fmtStringerType  = reflect.TypeFor[fmt.Stringer]()
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	reflectValueType = reflect.TypeFor[reflect.Value]()
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>)
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span><span class="comment">// evalCall executes a function or method call. If it&#39;s a method, fun already has the receiver bound, so</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span><span class="comment">// it looks just like a function call. The arg list, if non-nil, includes (in the manner of the shell), arg[0]</span>
<span id="L718" class="ln">   718&nbsp;&nbsp;</span><span class="comment">// as the function itself.</span>
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>func (s *state) evalCall(dot, fun reflect.Value, isBuiltin bool, node parse.Node, name string, args []parse.Node, final reflect.Value) reflect.Value {
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	if args != nil {
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		args = args[1:] <span class="comment">// Zeroth arg is function name/node; not passed to function.</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	}
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	typ := fun.Type()
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	numIn := len(args)
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	if !isMissing(final) {
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		numIn++
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	}
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	numFixed := len(args)
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	if typ.IsVariadic() {
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		numFixed = typ.NumIn() - 1 <span class="comment">// last arg is the variadic one.</span>
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		if numIn &lt; numFixed {
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>			s.errorf(&#34;wrong number of args for %s: want at least %d got %d&#34;, name, typ.NumIn()-1, len(args))
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>		}
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	} else if numIn != typ.NumIn() {
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>		s.errorf(&#34;wrong number of args for %s: want %d got %d&#34;, name, typ.NumIn(), numIn)
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>	}
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	if !goodFunc(typ) {
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>		<span class="comment">// TODO: This could still be a confusing error; maybe goodFunc should provide info.</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>		s.errorf(&#34;can&#39;t call method/function %q with %d results&#34;, name, typ.NumOut())
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	}
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>	unwrap := func(v reflect.Value) reflect.Value {
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>		if v.Type() == reflectValueType {
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>			v = v.Interface().(reflect.Value)
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>		}
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>		return v
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	}
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>	<span class="comment">// Special case for builtin and/or, which short-circuit.</span>
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>	if isBuiltin &amp;&amp; (name == &#34;and&#34; || name == &#34;or&#34;) {
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>		argType := typ.In(0)
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>		var v reflect.Value
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>		for _, arg := range args {
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>			v = s.evalArg(dot, argType, arg).Interface().(reflect.Value)
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>			if truth(v) == (name == &#34;or&#34;) {
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>				<span class="comment">// This value was already unwrapped</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>				<span class="comment">// by the .Interface().(reflect.Value).</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>				return v
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>			}
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		}
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>		if final != missingVal {
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>			<span class="comment">// The last argument to and/or is coming from</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>			<span class="comment">// the pipeline. We didn&#39;t short circuit on an earlier</span>
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>			<span class="comment">// argument, so we are going to return this one.</span>
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>			<span class="comment">// We don&#39;t have to evaluate final, but we do</span>
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>			<span class="comment">// have to check its type. Then, since we are</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>			<span class="comment">// going to return it, we have to unwrap it.</span>
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>			v = unwrap(s.validateType(final, argType))
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		}
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		return v
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>	}
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>	<span class="comment">// Build the arg list.</span>
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>	argv := make([]reflect.Value, numIn)
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>	<span class="comment">// Args must be evaluated. Fixed args first.</span>
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	i := 0
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>	for ; i &lt; numFixed &amp;&amp; i &lt; len(args); i++ {
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>		argv[i] = s.evalArg(dot, typ.In(i), args[i])
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	}
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	<span class="comment">// Now the ... args.</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>	if typ.IsVariadic() {
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>		argType := typ.In(typ.NumIn() - 1).Elem() <span class="comment">// Argument is a slice.</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>		for ; i &lt; len(args); i++ {
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>			argv[i] = s.evalArg(dot, argType, args[i])
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>		}
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	}
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	<span class="comment">// Add final value if necessary.</span>
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>	if !isMissing(final) {
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>		t := typ.In(typ.NumIn() - 1)
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>		if typ.IsVariadic() {
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>			if numIn-1 &lt; numFixed {
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>				<span class="comment">// The added final argument corresponds to a fixed parameter of the function.</span>
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>				<span class="comment">// Validate against the type of the actual parameter.</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>				t = typ.In(numIn - 1)
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>			} else {
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>				<span class="comment">// The added final argument corresponds to the variadic part.</span>
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>				<span class="comment">// Validate against the type of the elements of the variadic slice.</span>
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>				t = t.Elem()
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>			}
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>		}
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>		argv[i] = s.validateType(final, t)
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>	}
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	v, err := safeCall(fun, argv)
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>	<span class="comment">// If we have an error that is not nil, stop execution and return that</span>
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>	<span class="comment">// error to the caller.</span>
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>	if err != nil {
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>		s.at(node)
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>		s.errorf(&#34;error calling %s: %w&#34;, name, err)
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>	}
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>	return unwrap(v)
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>}
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>
<span id="L813" class="ln">   813&nbsp;&nbsp;</span><span class="comment">// canBeNil reports whether an untyped nil can be assigned to the type. See reflect.Zero.</span>
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>func canBeNil(typ reflect.Type) bool {
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>	switch typ.Kind() {
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>	case reflect.Chan, reflect.Func, reflect.Interface, reflect.Map, reflect.Pointer, reflect.Slice:
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>		return true
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>	case reflect.Struct:
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>		return typ == reflectValueType
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>	}
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>	return false
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>}
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>
<span id="L824" class="ln">   824&nbsp;&nbsp;</span><span class="comment">// validateType guarantees that the value is valid and assignable to the type.</span>
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>func (s *state) validateType(value reflect.Value, typ reflect.Type) reflect.Value {
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>	if !value.IsValid() {
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>		if typ == nil {
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>			<span class="comment">// An untyped nil interface{}. Accept as a proper nil value.</span>
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>			return reflect.ValueOf(nil)
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>		}
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>		if canBeNil(typ) {
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>			<span class="comment">// Like above, but use the zero value of the non-nil type.</span>
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>			return reflect.Zero(typ)
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>		}
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>		s.errorf(&#34;invalid value; expected %s&#34;, typ)
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>	}
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>	if typ == reflectValueType &amp;&amp; value.Type() != typ {
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>		return reflect.ValueOf(value)
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>	}
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>	if typ != nil &amp;&amp; !value.Type().AssignableTo(typ) {
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>		if value.Kind() == reflect.Interface &amp;&amp; !value.IsNil() {
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>			value = value.Elem()
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>			if value.Type().AssignableTo(typ) {
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>				return value
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>			}
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>			<span class="comment">// fallthrough</span>
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>		}
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>		<span class="comment">// Does one dereference or indirection work? We could do more, as we</span>
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>		<span class="comment">// do with method receivers, but that gets messy and method receivers</span>
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>		<span class="comment">// are much more constrained, so it makes more sense there than here.</span>
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>		<span class="comment">// Besides, one is almost always all you need.</span>
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>		switch {
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>		case value.Kind() == reflect.Pointer &amp;&amp; value.Type().Elem().AssignableTo(typ):
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>			value = value.Elem()
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>			if !value.IsValid() {
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>				s.errorf(&#34;dereference of nil pointer of type %s&#34;, typ)
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>			}
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>		case reflect.PointerTo(value.Type()).AssignableTo(typ) &amp;&amp; value.CanAddr():
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>			value = value.Addr()
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>		default:
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>			s.errorf(&#34;wrong type for value; expected %s; got %s&#34;, typ, value.Type())
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>		}
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>	}
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	return value
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>}
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>func (s *state) evalArg(dot reflect.Value, typ reflect.Type, n parse.Node) reflect.Value {
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>	s.at(n)
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>	switch arg := n.(type) {
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>	case *parse.DotNode:
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>		return s.validateType(dot, typ)
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>	case *parse.NilNode:
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>		if canBeNil(typ) {
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>			return reflect.Zero(typ)
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>		}
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>		s.errorf(&#34;cannot assign nil to %s&#34;, typ)
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>	case *parse.FieldNode:
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>		return s.validateType(s.evalFieldNode(dot, arg, []parse.Node{n}, missingVal), typ)
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>	case *parse.VariableNode:
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>		return s.validateType(s.evalVariableNode(dot, arg, nil, missingVal), typ)
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>	case *parse.PipeNode:
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>		return s.validateType(s.evalPipeline(dot, arg), typ)
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>	case *parse.IdentifierNode:
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>		return s.validateType(s.evalFunction(dot, arg, arg, nil, missingVal), typ)
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>	case *parse.ChainNode:
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>		return s.validateType(s.evalChainNode(dot, arg, nil, missingVal), typ)
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>	}
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>	switch typ.Kind() {
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>	case reflect.Bool:
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>		return s.evalBool(typ, n)
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>	case reflect.Complex64, reflect.Complex128:
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>		return s.evalComplex(typ, n)
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>	case reflect.Float32, reflect.Float64:
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>		return s.evalFloat(typ, n)
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>		return s.evalInteger(typ, n)
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>	case reflect.Interface:
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>		if typ.NumMethod() == 0 {
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>			return s.evalEmptyInterface(dot, n)
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>		}
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>	case reflect.Struct:
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>		if typ == reflectValueType {
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>			return reflect.ValueOf(s.evalEmptyInterface(dot, n))
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>		}
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>	case reflect.String:
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>		return s.evalString(typ, n)
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>		return s.evalUnsignedInteger(typ, n)
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>	}
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>	s.errorf(&#34;can&#39;t handle %s for arg of type %s&#34;, n, typ)
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>	panic(&#34;not reached&#34;)
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>}
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>func (s *state) evalBool(typ reflect.Type, n parse.Node) reflect.Value {
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>	s.at(n)
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>	if n, ok := n.(*parse.BoolNode); ok {
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>		value := reflect.New(typ).Elem()
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>		value.SetBool(n.True)
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>		return value
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>	}
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>	s.errorf(&#34;expected bool; found %s&#34;, n)
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>	panic(&#34;not reached&#34;)
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>}
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>func (s *state) evalString(typ reflect.Type, n parse.Node) reflect.Value {
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>	s.at(n)
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>	if n, ok := n.(*parse.StringNode); ok {
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>		value := reflect.New(typ).Elem()
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>		value.SetString(n.Text)
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>		return value
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>	}
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>	s.errorf(&#34;expected string; found %s&#34;, n)
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>	panic(&#34;not reached&#34;)
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>}
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>func (s *state) evalInteger(typ reflect.Type, n parse.Node) reflect.Value {
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>	s.at(n)
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>	if n, ok := n.(*parse.NumberNode); ok &amp;&amp; n.IsInt {
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>		value := reflect.New(typ).Elem()
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>		value.SetInt(n.Int64)
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>		return value
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>	}
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>	s.errorf(&#34;expected integer; found %s&#34;, n)
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>	panic(&#34;not reached&#34;)
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>}
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>func (s *state) evalUnsignedInteger(typ reflect.Type, n parse.Node) reflect.Value {
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>	s.at(n)
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>	if n, ok := n.(*parse.NumberNode); ok &amp;&amp; n.IsUint {
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>		value := reflect.New(typ).Elem()
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>		value.SetUint(n.Uint64)
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>		return value
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>	}
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>	s.errorf(&#34;expected unsigned integer; found %s&#34;, n)
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>	panic(&#34;not reached&#34;)
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>}
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>func (s *state) evalFloat(typ reflect.Type, n parse.Node) reflect.Value {
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>	s.at(n)
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>	if n, ok := n.(*parse.NumberNode); ok &amp;&amp; n.IsFloat {
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>		value := reflect.New(typ).Elem()
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>		value.SetFloat(n.Float64)
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>		return value
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>	}
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>	s.errorf(&#34;expected float; found %s&#34;, n)
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>	panic(&#34;not reached&#34;)
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>}
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>func (s *state) evalComplex(typ reflect.Type, n parse.Node) reflect.Value {
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>	if n, ok := n.(*parse.NumberNode); ok &amp;&amp; n.IsComplex {
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>		value := reflect.New(typ).Elem()
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>		value.SetComplex(n.Complex128)
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>		return value
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>	}
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>	s.errorf(&#34;expected complex; found %s&#34;, n)
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>	panic(&#34;not reached&#34;)
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>}
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>func (s *state) evalEmptyInterface(dot reflect.Value, n parse.Node) reflect.Value {
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>	s.at(n)
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>	switch n := n.(type) {
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>	case *parse.BoolNode:
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>		return reflect.ValueOf(n.True)
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>	case *parse.DotNode:
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>		return dot
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>	case *parse.FieldNode:
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>		return s.evalFieldNode(dot, n, nil, missingVal)
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>	case *parse.IdentifierNode:
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>		return s.evalFunction(dot, n, n, nil, missingVal)
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>	case *parse.NilNode:
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>		<span class="comment">// NilNode is handled in evalArg, the only place that calls here.</span>
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>		s.errorf(&#34;evalEmptyInterface: nil (can&#39;t happen)&#34;)
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>	case *parse.NumberNode:
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>		return s.idealConstant(n)
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>	case *parse.StringNode:
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>		return reflect.ValueOf(n.Text)
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>	case *parse.VariableNode:
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>		return s.evalVariableNode(dot, n, nil, missingVal)
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>	case *parse.PipeNode:
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>		return s.evalPipeline(dot, n)
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>	}
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>	s.errorf(&#34;can&#39;t handle assignment of %s to empty interface argument&#34;, n)
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>	panic(&#34;not reached&#34;)
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>}
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span><span class="comment">// indirect returns the item at the end of indirection, and a bool to indicate</span>
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span><span class="comment">// if it&#39;s nil. If the returned bool is true, the returned value&#39;s kind will be</span>
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span><span class="comment">// either a pointer or interface.</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>func indirect(v reflect.Value) (rv reflect.Value, isNil bool) {
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>	for ; v.Kind() == reflect.Pointer || v.Kind() == reflect.Interface; v = v.Elem() {
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>		if v.IsNil() {
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>			return v, true
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>		}
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>	}
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>	return v, false
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>}
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span><span class="comment">// indirectInterface returns the concrete value in an interface value,</span>
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span><span class="comment">// or else the zero reflect.Value.</span>
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span><span class="comment">// That is, if v represents the interface value x, the result is the same as reflect.ValueOf(x):</span>
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span><span class="comment">// the fact that x was an interface value is forgotten.</span>
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>func indirectInterface(v reflect.Value) reflect.Value {
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>	if v.Kind() != reflect.Interface {
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>		return v
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>	}
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	if v.IsNil() {
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>		return reflect.Value{}
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>	}
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>	return v.Elem()
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>}
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span><span class="comment">// printValue writes the textual representation of the value to the output of</span>
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span><span class="comment">// the template.</span>
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>func (s *state) printValue(n parse.Node, v reflect.Value) {
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>	s.at(n)
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>	iface, ok := printableValue(v)
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>	if !ok {
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>		s.errorf(&#34;can&#39;t print %s of type %s&#34;, n, v.Type())
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>	}
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>	_, err := fmt.Fprint(s.wr, iface)
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>	if err != nil {
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>		s.writeError(err)
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>	}
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>}
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span><span class="comment">// printableValue returns the, possibly indirected, interface value inside v that</span>
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span><span class="comment">// is best for a call to formatted printer.</span>
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>func printableValue(v reflect.Value) (any, bool) {
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>	if v.Kind() == reflect.Pointer {
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>		v, _ = indirect(v) <span class="comment">// fmt.Fprint handles nil.</span>
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>	}
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>	if !v.IsValid() {
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>		return &#34;&lt;no value&gt;&#34;, true
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>	}
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>	if !v.Type().Implements(errorType) &amp;&amp; !v.Type().Implements(fmtStringerType) {
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>		if v.CanAddr() &amp;&amp; (reflect.PointerTo(v.Type()).Implements(errorType) || reflect.PointerTo(v.Type()).Implements(fmtStringerType)) {
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>			v = v.Addr()
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>		} else {
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>			switch v.Kind() {
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>			case reflect.Chan, reflect.Func:
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>				return nil, false
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>			}
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>		}
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>	}
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>	return v.Interface(), true
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>}
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>
</pre><p><a href="exec.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
