<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/text/template/funcs.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./funcs.go?s=20127:20161#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/text">text</a>/<a href="http://localhost:8080/src/text/template">template</a>/<span class="text-muted">funcs.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/text/template">text/template</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package template
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;net/url&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;unicode&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// FuncMap is the type of the map defining the mapping from names to functions.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// Each function must have either a single return value, or two return values of</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// which the second has type error. In that case, if the second (error)</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// return value evaluates to non-nil during execution, execution terminates and</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// Execute returns that error.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// Errors returned by Execute wrap the underlying error; call errors.As to</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// unwrap them.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// When template execution invokes a function with an argument list, that list</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// must be assignable to the function&#39;s parameter types. Functions meant to</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// apply to arguments of arbitrary type can use parameters of type interface{} or</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// of type reflect.Value. Similarly, functions meant to return a result of arbitrary</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// type can return interface{} or reflect.Value.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>type FuncMap map[string]any
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// builtins returns the FuncMap.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// It is not a global variable so the linker can dead code eliminate</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// more when this isn&#39;t called. See golang.org/issue/36021.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// TODO: revert this back to a global map once golang.org/issue/2559 is fixed.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>func builtins() FuncMap {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	return FuncMap{
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		&#34;and&#34;:      and,
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>		&#34;call&#34;:     call,
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>		&#34;html&#34;:     HTMLEscaper,
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>		&#34;index&#34;:    index,
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		&#34;slice&#34;:    slice,
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>		&#34;js&#34;:       JSEscaper,
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>		&#34;len&#34;:      length,
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		&#34;not&#34;:      not,
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		&#34;or&#34;:       or,
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>		&#34;print&#34;:    fmt.Sprint,
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		&#34;printf&#34;:   fmt.Sprintf,
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		&#34;println&#34;:  fmt.Sprintln,
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		&#34;urlquery&#34;: URLQueryEscaper,
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		<span class="comment">// Comparisons</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		&#34;eq&#34;: eq, <span class="comment">// ==</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		&#34;ge&#34;: ge, <span class="comment">// &gt;=</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		&#34;gt&#34;: gt, <span class="comment">// &gt;</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		&#34;le&#34;: le, <span class="comment">// &lt;=</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		&#34;lt&#34;: lt, <span class="comment">// &lt;</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		&#34;ne&#34;: ne, <span class="comment">// !=</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>var builtinFuncsOnce struct {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	sync.Once
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	v map[string]reflect.Value
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// builtinFuncsOnce lazily computes &amp; caches the builtinFuncs map.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// TODO: revert this back to a global map once golang.org/issue/2559 is fixed.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>func builtinFuncs() map[string]reflect.Value {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	builtinFuncsOnce.Do(func() {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		builtinFuncsOnce.v = createValueFuncs(builtins())
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	})
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	return builtinFuncsOnce.v
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// createValueFuncs turns a FuncMap into a map[string]reflect.Value</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>func createValueFuncs(funcMap FuncMap) map[string]reflect.Value {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	m := make(map[string]reflect.Value)
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	addValueFuncs(m, funcMap)
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	return m
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// addValueFuncs adds to values the functions in funcs, converting them to reflect.Values.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>func addValueFuncs(out map[string]reflect.Value, in FuncMap) {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	for name, fn := range in {
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		if !goodName(name) {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>			panic(fmt.Errorf(&#34;function name %q is not a valid identifier&#34;, name))
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		v := reflect.ValueOf(fn)
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		if v.Kind() != reflect.Func {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>			panic(&#34;value for &#34; + name + &#34; not a function&#34;)
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		if !goodFunc(v.Type()) {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>			panic(fmt.Errorf(&#34;can&#39;t install method/function %q with %d results&#34;, name, v.Type().NumOut()))
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		out[name] = v
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// addFuncs adds to values the functions in funcs. It does no checking of the input -</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// call addValueFuncs first.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>func addFuncs(out, in FuncMap) {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	for name, fn := range in {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		out[name] = fn
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// goodFunc reports whether the function or method has the right result signature.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>func goodFunc(typ reflect.Type) bool {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// We allow functions with 1 result or 2 results where the second is an error.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	switch {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	case typ.NumOut() == 1:
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		return true
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	case typ.NumOut() == 2 &amp;&amp; typ.Out(1) == errorType:
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		return true
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	return false
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// goodName reports whether the function name is a valid identifier.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>func goodName(name string) bool {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	if name == &#34;&#34; {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		return false
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	for i, r := range name {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		switch {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		case r == &#39;_&#39;:
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		case i == 0 &amp;&amp; !unicode.IsLetter(r):
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			return false
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		case !unicode.IsLetter(r) &amp;&amp; !unicode.IsDigit(r):
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			return false
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	return true
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// findFunction looks for a function in the template, and global map.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>func findFunction(name string, tmpl *Template) (v reflect.Value, isBuiltin, ok bool) {
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	if tmpl != nil &amp;&amp; tmpl.common != nil {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		tmpl.muFuncs.RLock()
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		defer tmpl.muFuncs.RUnlock()
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		if fn := tmpl.execFuncs[name]; fn.IsValid() {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>			return fn, false, true
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	if fn := builtinFuncs()[name]; fn.IsValid() {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		return fn, true, true
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	return reflect.Value{}, false, false
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// prepareArg checks if value can be used as an argument of type argType, and</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// converts an invalid value to appropriate zero if possible.</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>func prepareArg(value reflect.Value, argType reflect.Type) (reflect.Value, error) {
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	if !value.IsValid() {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		if !canBeNil(argType) {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>			return reflect.Value{}, fmt.Errorf(&#34;value is nil; should be of type %s&#34;, argType)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		value = reflect.Zero(argType)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	if value.Type().AssignableTo(argType) {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		return value, nil
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	if intLike(value.Kind()) &amp;&amp; intLike(argType.Kind()) &amp;&amp; value.Type().ConvertibleTo(argType) {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		value = value.Convert(argType)
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		return value, nil
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	return reflect.Value{}, fmt.Errorf(&#34;value has type %s; should be %s&#34;, value.Type(), argType)
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>func intLike(typ reflect.Kind) bool {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	switch typ {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		return true
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		return true
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	return false
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// indexArg checks if a reflect.Value can be used as an index, and converts it to int if possible.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>func indexArg(index reflect.Value, cap int) (int, error) {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	var x int64
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	switch index.Kind() {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		x = index.Int()
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		x = int64(index.Uint())
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	case reflect.Invalid:
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		return 0, fmt.Errorf(&#34;cannot index slice/array with nil&#34;)
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	default:
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		return 0, fmt.Errorf(&#34;cannot index slice/array with type %s&#34;, index.Type())
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	if x &lt; 0 || int(x) &lt; 0 || int(x) &gt; cap {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		return 0, fmt.Errorf(&#34;index out of range: %d&#34;, x)
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	return int(x), nil
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// Indexing.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// index returns the result of indexing its first argument by the following</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// arguments. Thus &#34;index x 1 2 3&#34; is, in Go syntax, x[1][2][3]. Each</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">// indexed item must be a map, slice, or array.</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>func index(item reflect.Value, indexes ...reflect.Value) (reflect.Value, error) {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	item = indirectInterface(item)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	if !item.IsValid() {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		return reflect.Value{}, fmt.Errorf(&#34;index of untyped nil&#34;)
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	for _, index := range indexes {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		index = indirectInterface(index)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		var isNil bool
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		if item, isNil = indirect(item); isNil {
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>			return reflect.Value{}, fmt.Errorf(&#34;index of nil pointer&#34;)
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		switch item.Kind() {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		case reflect.Array, reflect.Slice, reflect.String:
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>			x, err := indexArg(index, item.Len())
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>			if err != nil {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>				return reflect.Value{}, err
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>			}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>			item = item.Index(x)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		case reflect.Map:
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>			index, err := prepareArg(index, item.Type().Key())
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			if err != nil {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>				return reflect.Value{}, err
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>			}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			if x := item.MapIndex(index); x.IsValid() {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>				item = x
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>			} else {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>				item = reflect.Zero(item.Type().Elem())
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>			}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		case reflect.Invalid:
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>			<span class="comment">// the loop holds invariant: item.IsValid()</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>			panic(&#34;unreachable&#34;)
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		default:
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>			return reflect.Value{}, fmt.Errorf(&#34;can&#39;t index item of type %s&#34;, item.Type())
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	return item, nil
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// Slicing.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// slice returns the result of slicing its first argument by the remaining</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span><span class="comment">// arguments. Thus &#34;slice x 1 2&#34; is, in Go syntax, x[1:2], while &#34;slice x&#34;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">// is x[:], &#34;slice x 1&#34; is x[1:], and &#34;slice x 1 2 3&#34; is x[1:2:3]. The first</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// argument must be a string, slice, or array.</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>func slice(item reflect.Value, indexes ...reflect.Value) (reflect.Value, error) {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	item = indirectInterface(item)
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	if !item.IsValid() {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		return reflect.Value{}, fmt.Errorf(&#34;slice of untyped nil&#34;)
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	if len(indexes) &gt; 3 {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		return reflect.Value{}, fmt.Errorf(&#34;too many slice indexes: %d&#34;, len(indexes))
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	var cap int
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	switch item.Kind() {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	case reflect.String:
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		if len(indexes) == 3 {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>			return reflect.Value{}, fmt.Errorf(&#34;cannot 3-index slice a string&#34;)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		cap = item.Len()
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	case reflect.Array, reflect.Slice:
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		cap = item.Cap()
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	default:
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		return reflect.Value{}, fmt.Errorf(&#34;can&#39;t slice item of type %s&#34;, item.Type())
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	<span class="comment">// set default values for cases item[:], item[i:].</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	idx := [3]int{0, item.Len()}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	for i, index := range indexes {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		x, err := indexArg(index, cap)
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		if err != nil {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>			return reflect.Value{}, err
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		idx[i] = x
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	<span class="comment">// given item[i:j], make sure i &lt;= j.</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	if idx[0] &gt; idx[1] {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		return reflect.Value{}, fmt.Errorf(&#34;invalid slice index: %d &gt; %d&#34;, idx[0], idx[1])
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	if len(indexes) &lt; 3 {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		return item.Slice(idx[0], idx[1]), nil
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	<span class="comment">// given item[i:j:k], make sure i &lt;= j &lt;= k.</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	if idx[1] &gt; idx[2] {
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		return reflect.Value{}, fmt.Errorf(&#34;invalid slice index: %d &gt; %d&#34;, idx[1], idx[2])
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	return item.Slice3(idx[0], idx[1], idx[2]), nil
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">// Length</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">// length returns the length of the item, with an error if it has no defined length.</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>func length(item reflect.Value) (int, error) {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	item, isNil := indirect(item)
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	if isNil {
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		return 0, fmt.Errorf(&#34;len of nil pointer&#34;)
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	switch item.Kind() {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	case reflect.Array, reflect.Chan, reflect.Map, reflect.Slice, reflect.String:
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		return item.Len(), nil
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	return 0, fmt.Errorf(&#34;len of type %s&#34;, item.Type())
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span><span class="comment">// Function invocation</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">// call returns the result of evaluating the first argument as a function.</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span><span class="comment">// The function must return 1 result, or 2 results, the second of which is an error.</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>func call(fn reflect.Value, args ...reflect.Value) (reflect.Value, error) {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	fn = indirectInterface(fn)
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	if !fn.IsValid() {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		return reflect.Value{}, fmt.Errorf(&#34;call of nil&#34;)
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	typ := fn.Type()
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	if typ.Kind() != reflect.Func {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		return reflect.Value{}, fmt.Errorf(&#34;non-function of type %s&#34;, typ)
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	if !goodFunc(typ) {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		return reflect.Value{}, fmt.Errorf(&#34;function called with %d args; should be 1 or 2&#34;, typ.NumOut())
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	numIn := typ.NumIn()
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	var dddType reflect.Type
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	if typ.IsVariadic() {
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		if len(args) &lt; numIn-1 {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>			return reflect.Value{}, fmt.Errorf(&#34;wrong number of args: got %d want at least %d&#34;, len(args), numIn-1)
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		dddType = typ.In(numIn - 1).Elem()
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	} else {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		if len(args) != numIn {
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>			return reflect.Value{}, fmt.Errorf(&#34;wrong number of args: got %d want %d&#34;, len(args), numIn)
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	argv := make([]reflect.Value, len(args))
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	for i, arg := range args {
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		arg = indirectInterface(arg)
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		<span class="comment">// Compute the expected type. Clumsy because of variadics.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		argType := dddType
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		if !typ.IsVariadic() || i &lt; numIn-1 {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>			argType = typ.In(i)
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		var err error
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		if argv[i], err = prepareArg(arg, argType); err != nil {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>			return reflect.Value{}, fmt.Errorf(&#34;arg %d: %w&#34;, i, err)
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	return safeCall(fn, argv)
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>}
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">// safeCall runs fun.Call(args), and returns the resulting value and error, if</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// any. If the call panics, the panic value is returned as an error.</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>func safeCall(fun reflect.Value, args []reflect.Value) (val reflect.Value, err error) {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	defer func() {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		if r := recover(); r != nil {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>			if e, ok := r.(error); ok {
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>				err = e
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			} else {
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>				err = fmt.Errorf(&#34;%v&#34;, r)
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>			}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		}
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	}()
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	ret := fun.Call(args)
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	if len(ret) == 2 &amp;&amp; !ret[1].IsNil() {
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		return ret[0], ret[1].Interface().(error)
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	}
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	return ret[0], nil
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span><span class="comment">// Boolean logic.</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>func truth(arg reflect.Value) bool {
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	t, _ := isTrue(indirectInterface(arg))
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	return t
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">// and computes the Boolean AND of its arguments, returning</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">// the first false argument it encounters, or the last argument.</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>func and(arg0 reflect.Value, args ...reflect.Value) reflect.Value {
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	panic(&#34;unreachable&#34;) <span class="comment">// implemented as a special case in evalCall</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span><span class="comment">// or computes the Boolean OR of its arguments, returning</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span><span class="comment">// the first true argument it encounters, or the last argument.</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>func or(arg0 reflect.Value, args ...reflect.Value) reflect.Value {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	panic(&#34;unreachable&#34;) <span class="comment">// implemented as a special case in evalCall</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span><span class="comment">// not returns the Boolean negation of its argument.</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>func not(arg reflect.Value) bool {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	return !truth(arg)
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// Comparison.</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span><span class="comment">// TODO: Perhaps allow comparison between signed and unsigned integers.</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>var (
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	errBadComparisonType = errors.New(&#34;invalid type for comparison&#34;)
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	errBadComparison     = errors.New(&#34;incompatible types for comparison&#34;)
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	errNoComparison      = errors.New(&#34;missing argument for comparison&#34;)
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>)
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>type kind int
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>const (
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	invalidKind kind = iota
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	boolKind
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	complexKind
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	intKind
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	floatKind
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	stringKind
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	uintKind
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>)
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>func basicKind(v reflect.Value) (kind, error) {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	switch v.Kind() {
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	case reflect.Bool:
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		return boolKind, nil
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		return intKind, nil
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		return uintKind, nil
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	case reflect.Float32, reflect.Float64:
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		return floatKind, nil
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	case reflect.Complex64, reflect.Complex128:
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		return complexKind, nil
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	case reflect.String:
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		return stringKind, nil
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	}
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	return invalidKind, errBadComparisonType
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span><span class="comment">// isNil returns true if v is the zero reflect.Value, or nil of its type.</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>func isNil(v reflect.Value) bool {
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	if !v.IsValid() {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		return true
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	switch v.Kind() {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	case reflect.Chan, reflect.Func, reflect.Interface, reflect.Map, reflect.Pointer, reflect.Slice:
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		return v.IsNil()
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	return false
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// canCompare reports whether v1 and v2 are both the same kind, or one is nil.</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">// Called only when dealing with nillable types, or there&#39;s about to be an error.</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>func canCompare(v1, v2 reflect.Value) bool {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	k1 := v1.Kind()
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	k2 := v2.Kind()
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	if k1 == k2 {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		return true
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	<span class="comment">// We know the type can be compared to nil.</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	return k1 == reflect.Invalid || k2 == reflect.Invalid
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span><span class="comment">// eq evaluates the comparison a == b || a == c || ...</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>func eq(arg1 reflect.Value, arg2 ...reflect.Value) (bool, error) {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	arg1 = indirectInterface(arg1)
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	if len(arg2) == 0 {
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		return false, errNoComparison
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	}
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	k1, _ := basicKind(arg1)
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	for _, arg := range arg2 {
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		arg = indirectInterface(arg)
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		k2, _ := basicKind(arg)
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		truth := false
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		if k1 != k2 {
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>			<span class="comment">// Special case: Can compare integer values regardless of type&#39;s sign.</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>			switch {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>			case k1 == intKind &amp;&amp; k2 == uintKind:
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>				truth = arg1.Int() &gt;= 0 &amp;&amp; uint64(arg1.Int()) == arg.Uint()
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>			case k1 == uintKind &amp;&amp; k2 == intKind:
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>				truth = arg.Int() &gt;= 0 &amp;&amp; arg1.Uint() == uint64(arg.Int())
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>			default:
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>				if arg1.IsValid() &amp;&amp; arg.IsValid() {
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>					return false, errBadComparison
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>				}
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>			}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		} else {
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>			switch k1 {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>			case boolKind:
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>				truth = arg1.Bool() == arg.Bool()
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>			case complexKind:
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>				truth = arg1.Complex() == arg.Complex()
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>			case floatKind:
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>				truth = arg1.Float() == arg.Float()
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>			case intKind:
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>				truth = arg1.Int() == arg.Int()
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>			case stringKind:
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>				truth = arg1.String() == arg.String()
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>			case uintKind:
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>				truth = arg1.Uint() == arg.Uint()
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>			default:
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>				if !canCompare(arg1, arg) {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>					return false, fmt.Errorf(&#34;non-comparable types %s: %v, %s: %v&#34;, arg1, arg1.Type(), arg.Type(), arg)
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>				}
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>				if isNil(arg1) || isNil(arg) {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>					truth = isNil(arg) == isNil(arg1)
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>				} else {
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>					if !arg.Type().Comparable() {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>						return false, fmt.Errorf(&#34;non-comparable type %s: %v&#34;, arg, arg.Type())
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>					}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>					truth = arg1.Interface() == arg.Interface()
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>				}
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>			}
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		}
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		if truth {
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>			return true, nil
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		}
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	}
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	return false, nil
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>}
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span><span class="comment">// ne evaluates the comparison a != b.</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>func ne(arg1, arg2 reflect.Value) (bool, error) {
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	<span class="comment">// != is the inverse of ==.</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	equal, err := eq(arg1, arg2)
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	return !equal, err
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>}
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span><span class="comment">// lt evaluates the comparison a &lt; b.</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>func lt(arg1, arg2 reflect.Value) (bool, error) {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	arg1 = indirectInterface(arg1)
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	k1, err := basicKind(arg1)
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	if err != nil {
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		return false, err
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	arg2 = indirectInterface(arg2)
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	k2, err := basicKind(arg2)
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	if err != nil {
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		return false, err
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	}
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	truth := false
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	if k1 != k2 {
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		<span class="comment">// Special case: Can compare integer values regardless of type&#39;s sign.</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>		switch {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		case k1 == intKind &amp;&amp; k2 == uintKind:
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>			truth = arg1.Int() &lt; 0 || uint64(arg1.Int()) &lt; arg2.Uint()
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		case k1 == uintKind &amp;&amp; k2 == intKind:
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>			truth = arg2.Int() &gt;= 0 &amp;&amp; arg1.Uint() &lt; uint64(arg2.Int())
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		default:
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>			return false, errBadComparison
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		}
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	} else {
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		switch k1 {
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		case boolKind, complexKind:
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>			return false, errBadComparisonType
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>		case floatKind:
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>			truth = arg1.Float() &lt; arg2.Float()
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		case intKind:
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>			truth = arg1.Int() &lt; arg2.Int()
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		case stringKind:
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>			truth = arg1.String() &lt; arg2.String()
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		case uintKind:
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>			truth = arg1.Uint() &lt; arg2.Uint()
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		default:
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>			panic(&#34;invalid kind&#34;)
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		}
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	}
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	return truth, nil
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span><span class="comment">// le evaluates the comparison &lt;= b.</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>func le(arg1, arg2 reflect.Value) (bool, error) {
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	<span class="comment">// &lt;= is &lt; or ==.</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	lessThan, err := lt(arg1, arg2)
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	if lessThan || err != nil {
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		return lessThan, err
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	}
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	return eq(arg1, arg2)
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span><span class="comment">// gt evaluates the comparison a &gt; b.</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>func gt(arg1, arg2 reflect.Value) (bool, error) {
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	<span class="comment">// &gt; is the inverse of &lt;=.</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	lessOrEqual, err := le(arg1, arg2)
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	if err != nil {
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		return false, err
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	return !lessOrEqual, nil
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>}
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span><span class="comment">// ge evaluates the comparison a &gt;= b.</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>func ge(arg1, arg2 reflect.Value) (bool, error) {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	<span class="comment">// &gt;= is the inverse of &lt;.</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	lessThan, err := lt(arg1, arg2)
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	if err != nil {
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		return false, err
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	}
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	return !lessThan, nil
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>}
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span><span class="comment">// HTML escaping.</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>var (
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	htmlQuot = []byte(&#34;&amp;#34;&#34;) <span class="comment">// shorter than &#34;&amp;quot;&#34;</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	htmlApos = []byte(&#34;&amp;#39;&#34;) <span class="comment">// shorter than &#34;&amp;apos;&#34; and apos was not in HTML until HTML5</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	htmlAmp  = []byte(&#34;&amp;amp;&#34;)
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	htmlLt   = []byte(&#34;&amp;lt;&#34;)
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	htmlGt   = []byte(&#34;&amp;gt;&#34;)
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	htmlNull = []byte(&#34;\uFFFD&#34;)
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>)
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span><span class="comment">// HTMLEscape writes to w the escaped HTML equivalent of the plain text data b.</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>func HTMLEscape(w io.Writer, b []byte) {
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	last := 0
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	for i, c := range b {
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		var html []byte
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>		switch c {
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		case &#39;\000&#39;:
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>			html = htmlNull
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		case &#39;&#34;&#39;:
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>			html = htmlQuot
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		case &#39;\&#39;&#39;:
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>			html = htmlApos
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>		case &#39;&amp;&#39;:
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>			html = htmlAmp
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>		case &#39;&lt;&#39;:
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>			html = htmlLt
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		case &#39;&gt;&#39;:
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>			html = htmlGt
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		default:
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>			continue
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		}
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		w.Write(b[last:i])
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		w.Write(html)
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		last = i + 1
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	}
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	w.Write(b[last:])
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>}
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span><span class="comment">// HTMLEscapeString returns the escaped HTML equivalent of the plain text data s.</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>func HTMLEscapeString(s string) string {
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>	<span class="comment">// Avoid allocation if we can.</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>	if !strings.ContainsAny(s, &#34;&#39;\&#34;&amp;&lt;&gt;\000&#34;) {
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>		return s
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	}
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	var b strings.Builder
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	HTMLEscape(&amp;b, []byte(s))
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	return b.String()
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>}
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span><span class="comment">// HTMLEscaper returns the escaped HTML equivalent of the textual</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span><span class="comment">// representation of its arguments.</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>func HTMLEscaper(args ...any) string {
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	return HTMLEscapeString(evalArgs(args))
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>}
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span><span class="comment">// JavaScript escaping.</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>var (
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	jsLowUni = []byte(`\u00`)
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	hex      = []byte(&#34;0123456789ABCDEF&#34;)
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	jsBackslash = []byte(`\\`)
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	jsApos      = []byte(`\&#39;`)
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	jsQuot      = []byte(`\&#34;`)
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	jsLt        = []byte(`\u003C`)
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	jsGt        = []byte(`\u003E`)
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	jsAmp       = []byte(`\u0026`)
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	jsEq        = []byte(`\u003D`)
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>)
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span><span class="comment">// JSEscape writes to w the escaped JavaScript equivalent of the plain text data b.</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>func JSEscape(w io.Writer, b []byte) {
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	last := 0
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	for i := 0; i &lt; len(b); i++ {
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		c := b[i]
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		if !jsIsSpecial(rune(c)) {
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>			<span class="comment">// fast path: nothing to do</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>			continue
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		}
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		w.Write(b[last:i])
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>		if c &lt; utf8.RuneSelf {
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>			<span class="comment">// Quotes, slashes and angle brackets get quoted.</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>			<span class="comment">// Control characters get written as \u00XX.</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>			switch c {
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>			case &#39;\\&#39;:
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>				w.Write(jsBackslash)
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>			case &#39;\&#39;&#39;:
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>				w.Write(jsApos)
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>			case &#39;&#34;&#39;:
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>				w.Write(jsQuot)
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>			case &#39;&lt;&#39;:
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>				w.Write(jsLt)
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>			case &#39;&gt;&#39;:
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>				w.Write(jsGt)
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>			case &#39;&amp;&#39;:
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>				w.Write(jsAmp)
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>			case &#39;=&#39;:
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>				w.Write(jsEq)
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>			default:
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>				w.Write(jsLowUni)
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>				t, b := c&gt;&gt;4, c&amp;0x0f
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>				w.Write(hex[t : t+1])
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>				w.Write(hex[b : b+1])
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>			}
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		} else {
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>			<span class="comment">// Unicode rune.</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>			r, size := utf8.DecodeRune(b[i:])
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>			if unicode.IsPrint(r) {
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>				w.Write(b[i : i+size])
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>			} else {
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>				fmt.Fprintf(w, &#34;\\u%04X&#34;, r)
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>			}
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>			i += size - 1
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>		}
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>		last = i + 1
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	}
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>	w.Write(b[last:])
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>}
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span><span class="comment">// JSEscapeString returns the escaped JavaScript equivalent of the plain text data s.</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>func JSEscapeString(s string) string {
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	<span class="comment">// Avoid allocation if we can.</span>
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	if strings.IndexFunc(s, jsIsSpecial) &lt; 0 {
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		return s
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>	}
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	var b strings.Builder
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	JSEscape(&amp;b, []byte(s))
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	return b.String()
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>func jsIsSpecial(r rune) bool {
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>	switch r {
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	case &#39;\\&#39;, &#39;\&#39;&#39;, &#39;&#34;&#39;, &#39;&lt;&#39;, &#39;&gt;&#39;, &#39;&amp;&#39;, &#39;=&#39;:
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>		return true
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>	}
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	return r &lt; &#39; &#39; || utf8.RuneSelf &lt;= r
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>}
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span><span class="comment">// JSEscaper returns the escaped JavaScript equivalent of the textual</span>
<span id="L741" class="ln">   741&nbsp;&nbsp;</span><span class="comment">// representation of its arguments.</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span><span class="selection">func JSEscaper(args ...any) string</span> {
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>	return JSEscapeString(evalArgs(args))
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>}
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span><span class="comment">// URLQueryEscaper returns the escaped value of the textual representation of</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span><span class="comment">// its arguments in a form suitable for embedding in a URL query.</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>func URLQueryEscaper(args ...any) string {
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>	return url.QueryEscape(evalArgs(args))
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>}
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>
<span id="L752" class="ln">   752&nbsp;&nbsp;</span><span class="comment">// evalArgs formats the list of arguments into a string. It is therefore equivalent to</span>
<span id="L753" class="ln">   753&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L754" class="ln">   754&nbsp;&nbsp;</span><span class="comment">//	fmt.Sprint(args...)</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L756" class="ln">   756&nbsp;&nbsp;</span><span class="comment">// except that each argument is indirected (if a pointer), as required,</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span><span class="comment">// using the same rules as the default string evaluation during template</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span><span class="comment">// execution.</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>func evalArgs(args []any) string {
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>	ok := false
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	var s string
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	<span class="comment">// Fast path for simple common case.</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	if len(args) == 1 {
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>		s, ok = args[0].(string)
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>	}
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	if !ok {
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		for i, arg := range args {
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>			a, ok := printableValue(reflect.ValueOf(arg))
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>			if ok {
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>				args[i] = a
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>			} <span class="comment">// else let fmt do its thing</span>
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>		}
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>		s = fmt.Sprint(args...)
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>	}
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>	return s
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>}
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>
</pre><p><a href="funcs.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
