<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/text/template/helper.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./helper.go?s=4432:4495#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/text">text</a>/<a href="http://localhost:8080/src/text/template">template</a>/<span class="text-muted">helper.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/text/template">text/template</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Helper functions to make constructing templates easier.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package template
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;io/fs&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;path&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;path/filepath&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>)
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// Functions and methods to parse templates.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// Must is a helper that wraps a call to a function returning (*Template, error)</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// and panics if the error is non-nil. It is intended for use in variable</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// initializations such as</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">//	var t = template.Must(template.New(&#34;name&#34;).Parse(&#34;text&#34;))</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>func Must(t *Template, err error) *Template {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	if err != nil {
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>		panic(err)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	}
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	return t
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>}
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// ParseFiles creates a new Template and parses the template definitions from</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// the named files. The returned template&#39;s name will have the base name and</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// parsed contents of the first file. There must be at least one file.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// If an error occurs, parsing stops and the returned *Template is nil.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// When parsing multiple files with the same name in different directories,</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// the last one mentioned will be the one that results.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// For instance, ParseFiles(&#34;a/foo&#34;, &#34;b/foo&#34;) stores &#34;b/foo&#34; as the template</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// named &#34;foo&#34;, while &#34;a/foo&#34; is unavailable.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>func ParseFiles(filenames ...string) (*Template, error) {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	return parseFiles(nil, readFileOS, filenames...)
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// ParseFiles parses the named files and associates the resulting templates with</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// t. If an error occurs, parsing stops and the returned template is nil;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// otherwise it is t. There must be at least one file.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// Since the templates created by ParseFiles are named by the base</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// names of the argument files, t should usually have the name of one</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// of the (base) names of the files. If it does not, depending on t&#39;s</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// contents before calling ParseFiles, t.Execute may fail. In that</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// case use t.ExecuteTemplate to execute a valid template.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// When parsing multiple files with the same name in different directories,</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// the last one mentioned will be the one that results.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>func (t *Template) ParseFiles(filenames ...string) (*Template, error) {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	t.init()
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	return parseFiles(t, readFileOS, filenames...)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// parseFiles is the helper for the method and function. If the argument</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// template is nil, it is created from the first file.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>func parseFiles(t *Template, readFile func(string) (string, []byte, error), filenames ...string) (*Template, error) {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	if len(filenames) == 0 {
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		<span class="comment">// Not really a problem, but be consistent.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;template: no files named in call to ParseFiles&#34;)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	for _, filename := range filenames {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		name, b, err := readFile(filename)
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		if err != nil {
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>			return nil, err
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		s := string(b)
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>		<span class="comment">// First template becomes return value if not already defined,</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		<span class="comment">// and we use that one for subsequent New calls to associate</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		<span class="comment">// all the templates together. Also, if this file has the same name</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		<span class="comment">// as t, this file becomes the contents of t, so</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		<span class="comment">//  t, err := New(name).Funcs(xxx).ParseFiles(name)</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		<span class="comment">// works. Otherwise we create a new template associated with t.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		var tmpl *Template
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		if t == nil {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>			t = New(name)
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		if name == t.Name() {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>			tmpl = t
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		} else {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>			tmpl = t.New(name)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		_, err = tmpl.Parse(s)
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		if err != nil {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>			return nil, err
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	}
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	return t, nil
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// ParseGlob creates a new Template and parses the template definitions from</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// the files identified by the pattern. The files are matched according to the</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// semantics of filepath.Match, and the pattern must match at least one file.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// The returned template will have the (base) name and (parsed) contents of the</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// first file matched by the pattern. ParseGlob is equivalent to calling</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// ParseFiles with the list of files matched by the pattern.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// When parsing multiple files with the same name in different directories,</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// the last one mentioned will be the one that results.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>func ParseGlob(pattern string) (*Template, error) {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	return parseGlob(nil, pattern)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// ParseGlob parses the template definitions in the files identified by the</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// pattern and associates the resulting templates with t. The files are matched</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// according to the semantics of filepath.Match, and the pattern must match at</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// least one file. ParseGlob is equivalent to calling t.ParseFiles with the</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// list of files matched by the pattern.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// When parsing multiple files with the same name in different directories,</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// the last one mentioned will be the one that results.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="selection">func (t *Template) ParseGlob(pattern string) (*Template, error)</span> {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	t.init()
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	return parseGlob(t, pattern)
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// parseGlob is the implementation of the function and method ParseGlob.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>func parseGlob(t *Template, pattern string) (*Template, error) {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	filenames, err := filepath.Glob(pattern)
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	if err != nil {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		return nil, err
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	if len(filenames) == 0 {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;template: pattern matches no files: %#q&#34;, pattern)
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	return parseFiles(t, readFileOS, filenames...)
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// ParseFS is like ParseFiles or ParseGlob but reads from the file system fsys</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// instead of the host operating system&#39;s file system.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// It accepts a list of glob patterns.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// (Note that most file names serve as glob patterns matching only themselves.)</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>func ParseFS(fsys fs.FS, patterns ...string) (*Template, error) {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	return parseFS(nil, fsys, patterns)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// ParseFS is like ParseFiles or ParseGlob but reads from the file system fsys</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// instead of the host operating system&#39;s file system.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// It accepts a list of glob patterns.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// (Note that most file names serve as glob patterns matching only themselves.)</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>func (t *Template) ParseFS(fsys fs.FS, patterns ...string) (*Template, error) {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	t.init()
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	return parseFS(t, fsys, patterns)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>func parseFS(t *Template, fsys fs.FS, patterns []string) (*Template, error) {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	var filenames []string
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	for _, pattern := range patterns {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		list, err := fs.Glob(fsys, pattern)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		if err != nil {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>			return nil, err
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		if len(list) == 0 {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>			return nil, fmt.Errorf(&#34;template: pattern matches no files: %#q&#34;, pattern)
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		filenames = append(filenames, list...)
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	return parseFiles(t, readFileFS(fsys), filenames...)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>func readFileOS(file string) (name string, b []byte, err error) {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	name = filepath.Base(file)
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	b, err = os.ReadFile(file)
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	return
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>func readFileFS(fsys fs.FS) func(string) (string, []byte, error) {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	return func(file string) (name string, b []byte, err error) {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		name = path.Base(file)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		b, err = fs.ReadFile(fsys, file)
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		return
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>
</pre><p><a href="helper.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
