<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/text/template/parse/node.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./node.go?s=13728:13828#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/text">text</a>/<a href="http://localhost:8080/src/text/template">template</a>/<a href="http://localhost:8080/src/text/template/parse">parse</a>/<span class="text-muted">node.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/text/template/parse">text/template/parse</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Parse nodes.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package parse
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>)
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>var textFormat = &#34;%s&#34; <span class="comment">// Changed to &#34;%q&#34; in tests for better error messages.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// A Node is an element in the parse tree. The interface is trivial.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// The interface contains an unexported method so that only</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// types local to this package can satisfy it.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>type Node interface {
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	Type() NodeType
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	String() string
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	<span class="comment">// Copy does a deep copy of the Node and all its components.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	<span class="comment">// To avoid type assertions, some XxxNodes also have specialized</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	<span class="comment">// CopyXxx methods that return *XxxNode.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	Copy() Node
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	Position() Pos <span class="comment">// byte position of start of node in full original input string</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	<span class="comment">// tree returns the containing *Tree.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	<span class="comment">// It is unexported so all implementations of Node are in this package.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	tree() *Tree
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	<span class="comment">// writeTo writes the String output to the builder.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	writeTo(*strings.Builder)
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>}
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// NodeType identifies the type of a parse tree node.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>type NodeType int
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// Pos represents a byte position in the original input text from which</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// this template was parsed.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>type Pos int
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>func (p Pos) Position() Pos {
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	return p
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>}
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// Type returns itself and provides an easy default implementation</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// for embedding in a Node. Embedded in all non-trivial Nodes.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>func (t NodeType) Type() NodeType {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	return t
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>const (
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	NodeText       NodeType = iota <span class="comment">// Plain text.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	NodeAction                     <span class="comment">// A non-control action such as a field evaluation.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	NodeBool                       <span class="comment">// A boolean constant.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	NodeChain                      <span class="comment">// A sequence of field accesses.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	NodeCommand                    <span class="comment">// An element of a pipeline.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	NodeDot                        <span class="comment">// The cursor, dot.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	nodeElse                       <span class="comment">// An else action. Not added to tree.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	nodeEnd                        <span class="comment">// An end action. Not added to tree.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	NodeField                      <span class="comment">// A field or method name.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	NodeIdentifier                 <span class="comment">// An identifier; always a function name.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	NodeIf                         <span class="comment">// An if action.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	NodeList                       <span class="comment">// A list of Nodes.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	NodeNil                        <span class="comment">// An untyped nil constant.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	NodeNumber                     <span class="comment">// A numerical constant.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	NodePipe                       <span class="comment">// A pipeline of commands.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	NodeRange                      <span class="comment">// A range action.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	NodeString                     <span class="comment">// A string constant.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	NodeTemplate                   <span class="comment">// A template invocation action.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	NodeVariable                   <span class="comment">// A $ variable.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	NodeWith                       <span class="comment">// A with action.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	NodeComment                    <span class="comment">// A comment.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	NodeBreak                      <span class="comment">// A break action.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	NodeContinue                   <span class="comment">// A continue action.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>)
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// Nodes.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// ListNode holds a sequence of nodes.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>type ListNode struct {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	NodeType
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	Pos
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	tr    *Tree
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	Nodes []Node <span class="comment">// The element nodes in lexical order.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>func (t *Tree) newList(pos Pos) *ListNode {
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	return &amp;ListNode{tr: t, NodeType: NodeList, Pos: pos}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>}
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>func (l *ListNode) append(n Node) {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	l.Nodes = append(l.Nodes, n)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>func (l *ListNode) tree() *Tree {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	return l.tr
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>func (l *ListNode) String() string {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	var sb strings.Builder
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	l.writeTo(&amp;sb)
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	return sb.String()
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>func (l *ListNode) writeTo(sb *strings.Builder) {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	for _, n := range l.Nodes {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		n.writeTo(sb)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>func (l *ListNode) CopyList() *ListNode {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	if l == nil {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		return l
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	n := l.tr.newList(l.Pos)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	for _, elem := range l.Nodes {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		n.append(elem.Copy())
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	return n
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>func (l *ListNode) Copy() Node {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	return l.CopyList()
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// TextNode holds plain text.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>type TextNode struct {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	NodeType
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	Pos
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	tr   *Tree
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	Text []byte <span class="comment">// The text; may span newlines.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>func (t *Tree) newText(pos Pos, text string) *TextNode {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	return &amp;TextNode{tr: t, NodeType: NodeText, Pos: pos, Text: []byte(text)}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>func (t *TextNode) String() string {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	return fmt.Sprintf(textFormat, t.Text)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>func (t *TextNode) writeTo(sb *strings.Builder) {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	sb.WriteString(t.String())
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>func (t *TextNode) tree() *Tree {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	return t.tr
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>func (t *TextNode) Copy() Node {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	return &amp;TextNode{tr: t.tr, NodeType: NodeText, Pos: t.Pos, Text: append([]byte{}, t.Text...)}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// CommentNode holds a comment.</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>type CommentNode struct {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	NodeType
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	Pos
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	tr   *Tree
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	Text string <span class="comment">// Comment text.</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>func (t *Tree) newComment(pos Pos, text string) *CommentNode {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	return &amp;CommentNode{tr: t, NodeType: NodeComment, Pos: pos, Text: text}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>func (c *CommentNode) String() string {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	var sb strings.Builder
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	c.writeTo(&amp;sb)
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	return sb.String()
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>func (c *CommentNode) writeTo(sb *strings.Builder) {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	sb.WriteString(&#34;{{&#34;)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	sb.WriteString(c.Text)
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	sb.WriteString(&#34;}}&#34;)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>func (c *CommentNode) tree() *Tree {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	return c.tr
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>func (c *CommentNode) Copy() Node {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	return &amp;CommentNode{tr: c.tr, NodeType: NodeComment, Pos: c.Pos, Text: c.Text}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// PipeNode holds a pipeline with optional declaration</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>type PipeNode struct {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	NodeType
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	Pos
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	tr       *Tree
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	Line     int             <span class="comment">// The line number in the input. Deprecated: Kept for compatibility.</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	IsAssign bool            <span class="comment">// The variables are being assigned, not declared.</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	Decl     []*VariableNode <span class="comment">// Variables in lexical order.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	Cmds     []*CommandNode  <span class="comment">// The commands in lexical order.</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>func (t *Tree) newPipeline(pos Pos, line int, vars []*VariableNode) *PipeNode {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	return &amp;PipeNode{tr: t, NodeType: NodePipe, Pos: pos, Line: line, Decl: vars}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>func (p *PipeNode) append(command *CommandNode) {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	p.Cmds = append(p.Cmds, command)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>func (p *PipeNode) String() string {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	var sb strings.Builder
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	p.writeTo(&amp;sb)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	return sb.String()
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>func (p *PipeNode) writeTo(sb *strings.Builder) {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	if len(p.Decl) &gt; 0 {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		for i, v := range p.Decl {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>			if i &gt; 0 {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>				sb.WriteString(&#34;, &#34;)
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>			}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>			v.writeTo(sb)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		sb.WriteString(&#34; := &#34;)
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	for i, c := range p.Cmds {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>			sb.WriteString(&#34; | &#34;)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		c.writeTo(sb)
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>func (p *PipeNode) tree() *Tree {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	return p.tr
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>func (p *PipeNode) CopyPipe() *PipeNode {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	if p == nil {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		return p
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	vars := make([]*VariableNode, len(p.Decl))
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	for i, d := range p.Decl {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		vars[i] = d.Copy().(*VariableNode)
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	n := p.tr.newPipeline(p.Pos, p.Line, vars)
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	n.IsAssign = p.IsAssign
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	for _, c := range p.Cmds {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		n.append(c.Copy().(*CommandNode))
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	return n
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>func (p *PipeNode) Copy() Node {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	return p.CopyPipe()
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// ActionNode holds an action (something bounded by delimiters).</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// Control actions have their own nodes; ActionNode represents simple</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// ones such as field evaluations and parenthesized pipelines.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>type ActionNode struct {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	NodeType
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	Pos
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	tr   *Tree
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	Line int       <span class="comment">// The line number in the input. Deprecated: Kept for compatibility.</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	Pipe *PipeNode <span class="comment">// The pipeline in the action.</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>func (t *Tree) newAction(pos Pos, line int, pipe *PipeNode) *ActionNode {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	return &amp;ActionNode{tr: t, NodeType: NodeAction, Pos: pos, Line: line, Pipe: pipe}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>func (a *ActionNode) String() string {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	var sb strings.Builder
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	a.writeTo(&amp;sb)
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	return sb.String()
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>func (a *ActionNode) writeTo(sb *strings.Builder) {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	sb.WriteString(&#34;{{&#34;)
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	a.Pipe.writeTo(sb)
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	sb.WriteString(&#34;}}&#34;)
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>func (a *ActionNode) tree() *Tree {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	return a.tr
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>func (a *ActionNode) Copy() Node {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	return a.tr.newAction(a.Pos, a.Line, a.Pipe.CopyPipe())
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// CommandNode holds a command (a pipeline inside an evaluating action).</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>type CommandNode struct {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	NodeType
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	Pos
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	tr   *Tree
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	Args []Node <span class="comment">// Arguments in lexical order: Identifier, field, or constant.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>func (t *Tree) newCommand(pos Pos) *CommandNode {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	return &amp;CommandNode{tr: t, NodeType: NodeCommand, Pos: pos}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>func (c *CommandNode) append(arg Node) {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	c.Args = append(c.Args, arg)
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>func (c *CommandNode) String() string {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	var sb strings.Builder
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	c.writeTo(&amp;sb)
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	return sb.String()
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>func (c *CommandNode) writeTo(sb *strings.Builder) {
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	for i, arg := range c.Args {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			sb.WriteByte(&#39; &#39;)
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		if arg, ok := arg.(*PipeNode); ok {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>			sb.WriteByte(&#39;(&#39;)
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>			arg.writeTo(sb)
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>			sb.WriteByte(&#39;)&#39;)
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>			continue
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		arg.writeTo(sb)
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>func (c *CommandNode) tree() *Tree {
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	return c.tr
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>func (c *CommandNode) Copy() Node {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	if c == nil {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		return c
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	n := c.tr.newCommand(c.Pos)
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	for _, c := range c.Args {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		n.append(c.Copy())
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	return n
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">// IdentifierNode holds an identifier.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>type IdentifierNode struct {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	NodeType
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	Pos
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	tr    *Tree
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	Ident string <span class="comment">// The identifier&#39;s name.</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">// NewIdentifier returns a new IdentifierNode with the given identifier name.</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>func NewIdentifier(ident string) *IdentifierNode {
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	return &amp;IdentifierNode{NodeType: NodeIdentifier, Ident: ident}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// SetPos sets the position. NewIdentifier is a public method so we can&#39;t modify its signature.</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">// Chained for convenience.</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// TODO: fix one day?</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>func (i *IdentifierNode) SetPos(pos Pos) *IdentifierNode {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	i.Pos = pos
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	return i
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">// SetTree sets the parent tree for the node. NewIdentifier is a public method so we can&#39;t modify its signature.</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span><span class="comment">// Chained for convenience.</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span><span class="comment">// TODO: fix one day?</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>func (i *IdentifierNode) SetTree(t *Tree) *IdentifierNode {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	i.tr = t
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	return i
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>}
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>func (i *IdentifierNode) String() string {
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	return i.Ident
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>func (i *IdentifierNode) writeTo(sb *strings.Builder) {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	sb.WriteString(i.String())
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>func (i *IdentifierNode) tree() *Tree {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	return i.tr
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>func (i *IdentifierNode) Copy() Node {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	return NewIdentifier(i.Ident).SetTree(i.tr).SetPos(i.Pos)
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span><span class="comment">// VariableNode holds a list of variable names, possibly with chained field</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span><span class="comment">// accesses. The dollar sign is part of the (first) name.</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>type VariableNode struct {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	NodeType
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	Pos
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	tr    *Tree
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	Ident []string <span class="comment">// Variable name and fields in lexical order.</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>func (t *Tree) newVariable(pos Pos, ident string) *VariableNode {
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	return &amp;VariableNode{tr: t, NodeType: NodeVariable, Pos: pos, Ident: strings.Split(ident, &#34;.&#34;)}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>}
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>func (v *VariableNode) String() string {
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	var sb strings.Builder
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	v.writeTo(&amp;sb)
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	return sb.String()
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>func (v *VariableNode) writeTo(sb *strings.Builder) {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	for i, id := range v.Ident {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>			sb.WriteByte(&#39;.&#39;)
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		sb.WriteString(id)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>func (v *VariableNode) tree() *Tree {
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	return v.tr
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>func (v *VariableNode) Copy() Node {
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	return &amp;VariableNode{tr: v.tr, NodeType: NodeVariable, Pos: v.Pos, Ident: append([]string{}, v.Ident...)}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span><span class="comment">// DotNode holds the special identifier &#39;.&#39;.</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>type DotNode struct {
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	NodeType
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	Pos
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	tr *Tree
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>}
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>func (t *Tree) newDot(pos Pos) *DotNode {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	return &amp;DotNode{tr: t, NodeType: NodeDot, Pos: pos}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>}
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>func (d *DotNode) Type() NodeType {
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	<span class="comment">// Override method on embedded NodeType for API compatibility.</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	<span class="comment">// TODO: Not really a problem; could change API without effect but</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	<span class="comment">// api tool complains.</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	return NodeDot
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>}
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>func (d *DotNode) String() string {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	return &#34;.&#34;
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>func (d *DotNode) writeTo(sb *strings.Builder) {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	sb.WriteString(d.String())
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>func (d *DotNode) tree() *Tree {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	return d.tr
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>func (d *DotNode) Copy() Node {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	return d.tr.newDot(d.Pos)
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span><span class="comment">// NilNode holds the special identifier &#39;nil&#39; representing an untyped nil constant.</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>type NilNode struct {
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	NodeType
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	Pos
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	tr *Tree
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>func (t *Tree) newNil(pos Pos) *NilNode {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	return &amp;NilNode{tr: t, NodeType: NodeNil, Pos: pos}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>}
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>func (n *NilNode) Type() NodeType {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	<span class="comment">// Override method on embedded NodeType for API compatibility.</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	<span class="comment">// TODO: Not really a problem; could change API without effect but</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	<span class="comment">// api tool complains.</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	return NodeNil
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>}
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>func (n *NilNode) String() string {
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	return &#34;nil&#34;
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>}
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>func (n *NilNode) writeTo(sb *strings.Builder) {
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	sb.WriteString(n.String())
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>}
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>func (n *NilNode) tree() *Tree {
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	return n.tr
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>func (n *NilNode) Copy() Node {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	return n.tr.newNil(n.Pos)
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span><span class="comment">// FieldNode holds a field (identifier starting with &#39;.&#39;).</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span><span class="comment">// The names may be chained (&#39;.x.y&#39;).</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span><span class="comment">// The period is dropped from each ident.</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>type FieldNode struct {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	NodeType
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	Pos
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	tr    *Tree
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	Ident []string <span class="comment">// The identifiers in lexical order.</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>}
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>func (t *Tree) newField(pos Pos, ident string) *FieldNode {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	return &amp;FieldNode{tr: t, NodeType: NodeField, Pos: pos, Ident: strings.Split(ident[1:], &#34;.&#34;)} <span class="comment">// [1:] to drop leading period</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>}
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>func (f *FieldNode) String() string {
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	var sb strings.Builder
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	f.writeTo(&amp;sb)
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	return sb.String()
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>func (f *FieldNode) writeTo(sb *strings.Builder) {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	for _, id := range f.Ident {
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		sb.WriteByte(&#39;.&#39;)
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		sb.WriteString(id)
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	}
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>}
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>func (f *FieldNode) tree() *Tree {
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	return f.tr
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>}
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>func (f *FieldNode) Copy() Node {
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	return &amp;FieldNode{tr: f.tr, NodeType: NodeField, Pos: f.Pos, Ident: append([]string{}, f.Ident...)}
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span><span class="comment">// ChainNode holds a term followed by a chain of field accesses (identifier starting with &#39;.&#39;).</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span><span class="comment">// The names may be chained (&#39;.x.y&#39;).</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span><span class="comment">// The periods are dropped from each ident.</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>type ChainNode struct {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	NodeType
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	Pos
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	tr    *Tree
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	Node  Node
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	Field []string <span class="comment">// The identifiers in lexical order.</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>}
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>func (t *Tree) newChain(pos Pos, node Node) *ChainNode {
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	return &amp;ChainNode{tr: t, NodeType: NodeChain, Pos: pos, Node: node}
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>}
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span><span class="comment">// Add adds the named field (which should start with a period) to the end of the chain.</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>func (c *ChainNode) Add(field string) {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	if len(field) == 0 || field[0] != &#39;.&#39; {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		panic(&#34;no dot in field&#34;)
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	}
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	field = field[1:] <span class="comment">// Remove leading dot.</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	if field == &#34;&#34; {
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		panic(&#34;empty field&#34;)
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	}
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	c.Field = append(c.Field, field)
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>}
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>func (c *ChainNode) String() string {
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	var sb strings.Builder
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	c.writeTo(&amp;sb)
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	return sb.String()
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>func (c *ChainNode) writeTo(sb *strings.Builder) {
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	if _, ok := c.Node.(*PipeNode); ok {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		sb.WriteByte(&#39;(&#39;)
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		c.Node.writeTo(sb)
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		sb.WriteByte(&#39;)&#39;)
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	} else {
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		c.Node.writeTo(sb)
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	}
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	for _, field := range c.Field {
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>		sb.WriteByte(&#39;.&#39;)
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		sb.WriteString(field)
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>}
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>func (c *ChainNode) tree() *Tree {
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	return c.tr
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>}
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>func (c *ChainNode) Copy() Node {
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	return &amp;ChainNode{tr: c.tr, NodeType: NodeChain, Pos: c.Pos, Node: c.Node, Field: append([]string{}, c.Field...)}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>}
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span><span class="comment">// BoolNode holds a boolean constant.</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span><span class="selection">type BoolNode struct {
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	NodeType
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	Pos
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	tr   *Tree
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	True bool </span><span class="selection-comment">// The value of the boolean constant.</span><span class="selection">
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>}</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>func (t *Tree) newBool(pos Pos, true bool) *BoolNode {
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	return &amp;BoolNode{tr: t, NodeType: NodeBool, Pos: pos, True: true}
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>}
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>func (b *BoolNode) String() string {
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	if b.True {
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		return &#34;true&#34;
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	}
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	return &#34;false&#34;
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>}
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>func (b *BoolNode) writeTo(sb *strings.Builder) {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	sb.WriteString(b.String())
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>}
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>func (b *BoolNode) tree() *Tree {
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	return b.tr
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>}
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>func (b *BoolNode) Copy() Node {
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	return b.tr.newBool(b.Pos, b.True)
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>}
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span><span class="comment">// NumberNode holds a number: signed or unsigned integer, float, or complex.</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span><span class="comment">// The value is parsed and stored under all the types that can represent the value.</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span><span class="comment">// This simulates in a small amount of code the behavior of Go&#39;s ideal constants.</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>type NumberNode struct {
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	NodeType
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	Pos
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	tr         *Tree
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	IsInt      bool       <span class="comment">// Number has an integral value.</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	IsUint     bool       <span class="comment">// Number has an unsigned integral value.</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	IsFloat    bool       <span class="comment">// Number has a floating-point value.</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	IsComplex  bool       <span class="comment">// Number is complex.</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	Int64      int64      <span class="comment">// The signed integer value.</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	Uint64     uint64     <span class="comment">// The unsigned integer value.</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	Float64    float64    <span class="comment">// The floating-point value.</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	Complex128 complex128 <span class="comment">// The complex value.</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	Text       string     <span class="comment">// The original textual representation from the input.</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>}
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>func (t *Tree) newNumber(pos Pos, text string, typ itemType) (*NumberNode, error) {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	n := &amp;NumberNode{tr: t, NodeType: NodeNumber, Pos: pos, Text: text}
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	switch typ {
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	case itemCharConstant:
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		rune, _, tail, err := strconv.UnquoteChar(text[1:], text[0])
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		if err != nil {
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>			return nil, err
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		}
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>		if tail != &#34;&#39;&#34; {
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>			return nil, fmt.Errorf(&#34;malformed character constant: %s&#34;, text)
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		}
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>		n.Int64 = int64(rune)
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		n.IsInt = true
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>		n.Uint64 = uint64(rune)
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		n.IsUint = true
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		n.Float64 = float64(rune) <span class="comment">// odd but those are the rules.</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>		n.IsFloat = true
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		return n, nil
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	case itemComplex:
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		<span class="comment">// fmt.Sscan can parse the pair, so let it do the work.</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		if _, err := fmt.Sscan(text, &amp;n.Complex128); err != nil {
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>			return nil, err
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>		}
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		n.IsComplex = true
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>		n.simplifyComplex()
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		return n, nil
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	}
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	<span class="comment">// Imaginary constants can only be complex unless they are zero.</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	if len(text) &gt; 0 &amp;&amp; text[len(text)-1] == &#39;i&#39; {
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		f, err := strconv.ParseFloat(text[:len(text)-1], 64)
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>		if err == nil {
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>			n.IsComplex = true
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>			n.Complex128 = complex(0, f)
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>			n.simplifyComplex()
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>			return n, nil
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>		}
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	}
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	<span class="comment">// Do integer test first so we get 0x123 etc.</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	u, err := strconv.ParseUint(text, 0, 64) <span class="comment">// will fail for -0; fixed below.</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	if err == nil {
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>		n.IsUint = true
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>		n.Uint64 = u
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	}
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	i, err := strconv.ParseInt(text, 0, 64)
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	if err == nil {
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		n.IsInt = true
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		n.Int64 = i
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		if i == 0 {
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>			n.IsUint = true <span class="comment">// in case of -0.</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>			n.Uint64 = u
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		}
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	}
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	<span class="comment">// If an integer extraction succeeded, promote the float.</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	if n.IsInt {
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		n.IsFloat = true
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		n.Float64 = float64(n.Int64)
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	} else if n.IsUint {
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>		n.IsFloat = true
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>		n.Float64 = float64(n.Uint64)
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	} else {
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		f, err := strconv.ParseFloat(text, 64)
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>		if err == nil {
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>			<span class="comment">// If we parsed it as a float but it looks like an integer,</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>			<span class="comment">// it&#39;s a huge number too large to fit in an int. Reject it.</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>			if !strings.ContainsAny(text, &#34;.eEpP&#34;) {
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>				return nil, fmt.Errorf(&#34;integer overflow: %q&#34;, text)
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>			}
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>			n.IsFloat = true
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>			n.Float64 = f
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>			<span class="comment">// If a floating-point extraction succeeded, extract the int if needed.</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>			if !n.IsInt &amp;&amp; float64(int64(f)) == f {
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>				n.IsInt = true
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>				n.Int64 = int64(f)
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>			}
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>			if !n.IsUint &amp;&amp; float64(uint64(f)) == f {
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>				n.IsUint = true
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>				n.Uint64 = uint64(f)
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>			}
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>		}
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	}
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	if !n.IsInt &amp;&amp; !n.IsUint &amp;&amp; !n.IsFloat {
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;illegal number syntax: %q&#34;, text)
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	}
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	return n, nil
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>}
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span><span class="comment">// simplifyComplex pulls out any other types that are represented by the complex number.</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span><span class="comment">// These all require that the imaginary part be zero.</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>func (n *NumberNode) simplifyComplex() {
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>	n.IsFloat = imag(n.Complex128) == 0
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	if n.IsFloat {
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>		n.Float64 = real(n.Complex128)
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		n.IsInt = float64(int64(n.Float64)) == n.Float64
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		if n.IsInt {
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>			n.Int64 = int64(n.Float64)
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		}
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		n.IsUint = float64(uint64(n.Float64)) == n.Float64
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		if n.IsUint {
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>			n.Uint64 = uint64(n.Float64)
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		}
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	}
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>func (n *NumberNode) String() string {
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>	return n.Text
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>}
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>func (n *NumberNode) writeTo(sb *strings.Builder) {
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	sb.WriteString(n.String())
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>}
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>func (n *NumberNode) tree() *Tree {
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>	return n.tr
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>}
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>func (n *NumberNode) Copy() Node {
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	nn := new(NumberNode)
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>	*nn = *n <span class="comment">// Easy, fast, correct.</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	return nn
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>}
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>
<span id="L750" class="ln">   750&nbsp;&nbsp;</span><span class="comment">// StringNode holds a string constant. The value has been &#34;unquoted&#34;.</span>
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>type StringNode struct {
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	NodeType
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	Pos
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	tr     *Tree
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	Quoted string <span class="comment">// The original text of the string, with quotes.</span>
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	Text   string <span class="comment">// The string, after quote processing.</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>}
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>func (t *Tree) newString(pos Pos, orig, text string) *StringNode {
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>	return &amp;StringNode{tr: t, NodeType: NodeString, Pos: pos, Quoted: orig, Text: text}
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>}
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>func (s *StringNode) String() string {
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	return s.Quoted
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>}
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>func (s *StringNode) writeTo(sb *strings.Builder) {
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	sb.WriteString(s.String())
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>}
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>func (s *StringNode) tree() *Tree {
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	return s.tr
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>}
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>func (s *StringNode) Copy() Node {
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	return s.tr.newString(s.Pos, s.Quoted, s.Text)
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>}
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span><span class="comment">// endNode represents an {{end}} action.</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span><span class="comment">// It does not appear in the final parse tree.</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>type endNode struct {
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	NodeType
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>	Pos
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>	tr *Tree
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>}
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>func (t *Tree) newEnd(pos Pos) *endNode {
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>	return &amp;endNode{tr: t, NodeType: nodeEnd, Pos: pos}
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>}
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>func (e *endNode) String() string {
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>	return &#34;{{end}}&#34;
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>}
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>func (e *endNode) writeTo(sb *strings.Builder) {
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>	sb.WriteString(e.String())
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>}
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>func (e *endNode) tree() *Tree {
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	return e.tr
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>}
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>func (e *endNode) Copy() Node {
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>	return e.tr.newEnd(e.Pos)
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>}
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span><span class="comment">// elseNode represents an {{else}} action. Does not appear in the final tree.</span>
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>type elseNode struct {
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>	NodeType
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>	Pos
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	tr   *Tree
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>	Line int <span class="comment">// The line number in the input. Deprecated: Kept for compatibility.</span>
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>func (t *Tree) newElse(pos Pos, line int) *elseNode {
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>	return &amp;elseNode{tr: t, NodeType: nodeElse, Pos: pos, Line: line}
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>}
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>func (e *elseNode) Type() NodeType {
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>	return nodeElse
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>}
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>func (e *elseNode) String() string {
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>	return &#34;{{else}}&#34;
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>}
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>func (e *elseNode) writeTo(sb *strings.Builder) {
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>	sb.WriteString(e.String())
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>}
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>func (e *elseNode) tree() *Tree {
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>	return e.tr
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>}
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>func (e *elseNode) Copy() Node {
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>	return e.tr.newElse(e.Pos, e.Line)
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>}
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>
<span id="L839" class="ln">   839&nbsp;&nbsp;</span><span class="comment">// BranchNode is the common representation of if, range, and with.</span>
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>type BranchNode struct {
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>	NodeType
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>	Pos
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>	tr       *Tree
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>	Line     int       <span class="comment">// The line number in the input. Deprecated: Kept for compatibility.</span>
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>	Pipe     *PipeNode <span class="comment">// The pipeline to be evaluated.</span>
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>	List     *ListNode <span class="comment">// What to execute if the value is non-empty.</span>
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>	ElseList *ListNode <span class="comment">// What to execute if the value is empty (nil if absent).</span>
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>}
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>func (b *BranchNode) String() string {
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>	var sb strings.Builder
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>	b.writeTo(&amp;sb)
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>	return sb.String()
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>}
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>func (b *BranchNode) writeTo(sb *strings.Builder) {
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>	name := &#34;&#34;
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>	switch b.NodeType {
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>	case NodeIf:
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>		name = &#34;if&#34;
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>	case NodeRange:
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>		name = &#34;range&#34;
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>	case NodeWith:
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>		name = &#34;with&#34;
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>	default:
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>		panic(&#34;unknown branch type&#34;)
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>	}
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>	sb.WriteString(&#34;{{&#34;)
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>	sb.WriteString(name)
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>	sb.WriteByte(&#39; &#39;)
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>	b.Pipe.writeTo(sb)
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>	sb.WriteString(&#34;}}&#34;)
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>	b.List.writeTo(sb)
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>	if b.ElseList != nil {
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>		sb.WriteString(&#34;{{else}}&#34;)
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>		b.ElseList.writeTo(sb)
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>	}
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>	sb.WriteString(&#34;{{end}}&#34;)
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>}
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>func (b *BranchNode) tree() *Tree {
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>	return b.tr
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>}
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>func (b *BranchNode) Copy() Node {
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>	switch b.NodeType {
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>	case NodeIf:
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>		return b.tr.newIf(b.Pos, b.Line, b.Pipe, b.List, b.ElseList)
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>	case NodeRange:
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>		return b.tr.newRange(b.Pos, b.Line, b.Pipe, b.List, b.ElseList)
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>	case NodeWith:
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>		return b.tr.newWith(b.Pos, b.Line, b.Pipe, b.List, b.ElseList)
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>	default:
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>		panic(&#34;unknown branch type&#34;)
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	}
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>}
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>
<span id="L898" class="ln">   898&nbsp;&nbsp;</span><span class="comment">// IfNode represents an {{if}} action and its commands.</span>
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>type IfNode struct {
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>	BranchNode
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>}
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>func (t *Tree) newIf(pos Pos, line int, pipe *PipeNode, list, elseList *ListNode) *IfNode {
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>	return &amp;IfNode{BranchNode{tr: t, NodeType: NodeIf, Pos: pos, Line: line, Pipe: pipe, List: list, ElseList: elseList}}
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>}
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>func (i *IfNode) Copy() Node {
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>	return i.tr.newIf(i.Pos, i.Line, i.Pipe.CopyPipe(), i.List.CopyList(), i.ElseList.CopyList())
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>}
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>
<span id="L911" class="ln">   911&nbsp;&nbsp;</span><span class="comment">// BreakNode represents a {{break}} action.</span>
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>type BreakNode struct {
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>	tr *Tree
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>	NodeType
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>	Pos
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>	Line int
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>}
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>func (t *Tree) newBreak(pos Pos, line int) *BreakNode {
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>	return &amp;BreakNode{tr: t, NodeType: NodeBreak, Pos: pos, Line: line}
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>}
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>func (b *BreakNode) Copy() Node                  { return b.tr.newBreak(b.Pos, b.Line) }
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>func (b *BreakNode) String() string              { return &#34;{{break}}&#34; }
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>func (b *BreakNode) tree() *Tree                 { return b.tr }
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>func (b *BreakNode) writeTo(sb *strings.Builder) { sb.WriteString(&#34;{{break}}&#34;) }
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>
<span id="L928" class="ln">   928&nbsp;&nbsp;</span><span class="comment">// ContinueNode represents a {{continue}} action.</span>
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>type ContinueNode struct {
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	tr *Tree
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>	NodeType
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>	Pos
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>	Line int
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>}
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>func (t *Tree) newContinue(pos Pos, line int) *ContinueNode {
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>	return &amp;ContinueNode{tr: t, NodeType: NodeContinue, Pos: pos, Line: line}
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>}
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>func (c *ContinueNode) Copy() Node                  { return c.tr.newContinue(c.Pos, c.Line) }
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>func (c *ContinueNode) String() string              { return &#34;{{continue}}&#34; }
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>func (c *ContinueNode) tree() *Tree                 { return c.tr }
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>func (c *ContinueNode) writeTo(sb *strings.Builder) { sb.WriteString(&#34;{{continue}}&#34;) }
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>
<span id="L945" class="ln">   945&nbsp;&nbsp;</span><span class="comment">// RangeNode represents a {{range}} action and its commands.</span>
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>type RangeNode struct {
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>	BranchNode
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>}
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>func (t *Tree) newRange(pos Pos, line int, pipe *PipeNode, list, elseList *ListNode) *RangeNode {
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>	return &amp;RangeNode{BranchNode{tr: t, NodeType: NodeRange, Pos: pos, Line: line, Pipe: pipe, List: list, ElseList: elseList}}
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>}
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>func (r *RangeNode) Copy() Node {
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>	return r.tr.newRange(r.Pos, r.Line, r.Pipe.CopyPipe(), r.List.CopyList(), r.ElseList.CopyList())
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>}
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>
<span id="L958" class="ln">   958&nbsp;&nbsp;</span><span class="comment">// WithNode represents a {{with}} action and its commands.</span>
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>type WithNode struct {
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>	BranchNode
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>}
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>func (t *Tree) newWith(pos Pos, line int, pipe *PipeNode, list, elseList *ListNode) *WithNode {
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>	return &amp;WithNode{BranchNode{tr: t, NodeType: NodeWith, Pos: pos, Line: line, Pipe: pipe, List: list, ElseList: elseList}}
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>}
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>func (w *WithNode) Copy() Node {
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>	return w.tr.newWith(w.Pos, w.Line, w.Pipe.CopyPipe(), w.List.CopyList(), w.ElseList.CopyList())
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>}
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>
<span id="L971" class="ln">   971&nbsp;&nbsp;</span><span class="comment">// TemplateNode represents a {{template}} action.</span>
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>type TemplateNode struct {
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>	NodeType
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>	Pos
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>	tr   *Tree
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>	Line int       <span class="comment">// The line number in the input. Deprecated: Kept for compatibility.</span>
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>	Name string    <span class="comment">// The name of the template (unquoted).</span>
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>	Pipe *PipeNode <span class="comment">// The command to evaluate as dot for the template.</span>
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>}
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>func (t *Tree) newTemplate(pos Pos, line int, name string, pipe *PipeNode) *TemplateNode {
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>	return &amp;TemplateNode{tr: t, NodeType: NodeTemplate, Pos: pos, Line: line, Name: name, Pipe: pipe}
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>}
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>func (t *TemplateNode) String() string {
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>	var sb strings.Builder
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	t.writeTo(&amp;sb)
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>	return sb.String()
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>}
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>func (t *TemplateNode) writeTo(sb *strings.Builder) {
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>	sb.WriteString(&#34;{{template &#34;)
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>	sb.WriteString(strconv.Quote(t.Name))
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>	if t.Pipe != nil {
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>		sb.WriteByte(&#39; &#39;)
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>		t.Pipe.writeTo(sb)
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>	}
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>	sb.WriteString(&#34;}}&#34;)
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>}
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>func (t *TemplateNode) tree() *Tree {
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>	return t.tr
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>}
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>func (t *TemplateNode) Copy() Node {
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>	return t.tr.newTemplate(t.Pos, t.Line, t.Name, t.Pipe.CopyPipe())
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>}
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>
</pre><p><a href="node.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
