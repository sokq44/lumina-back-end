<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/text/template/template.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./template.go?s=5558:5606#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/text">text</a>/<a href="http://localhost:8080/src/text/template">template</a>/<span class="text-muted">template.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/text/template">text/template</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package template
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;text/template/parse&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>)
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// common holds the information shared by related templates.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>type common struct {
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	tmpl   map[string]*Template <span class="comment">// Map from name to defined templates.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	muTmpl sync.RWMutex         <span class="comment">// protects tmpl</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	option option
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	<span class="comment">// We use two maps, one for parsing and one for execution.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	<span class="comment">// This separation makes the API cleaner since it doesn&#39;t</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	<span class="comment">// expose reflection to the client.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	muFuncs    sync.RWMutex <span class="comment">// protects parseFuncs and execFuncs</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	parseFuncs FuncMap
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	execFuncs  map[string]reflect.Value
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>}
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// Template is the representation of a parsed template. The *parse.Tree</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// field is exported only for use by html/template and should be treated</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// as unexported by all other clients.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>type Template struct {
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	name string
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	*parse.Tree
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	*common
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	leftDelim  string
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	rightDelim string
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// New allocates a new, undefined template with the given name.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>func New(name string) *Template {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	t := &amp;Template{
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>		name: name,
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	}
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	t.init()
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	return t
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>}
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// Name returns the name of the template.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>func (t *Template) Name() string {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	return t.name
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// New allocates a new, undefined template associated with the given one and with the same</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// delimiters. The association, which is transitive, allows one template to</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// invoke another with a {{template}} action.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// Because associated templates share underlying data, template construction</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// cannot be done safely in parallel. Once the templates are constructed, they</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// can be executed in parallel.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>func (t *Template) New(name string) *Template {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	t.init()
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	nt := &amp;Template{
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		name:       name,
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		common:     t.common,
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		leftDelim:  t.leftDelim,
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		rightDelim: t.rightDelim,
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	return nt
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>}
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// init guarantees that t has a valid common structure.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>func (t *Template) init() {
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	if t.common == nil {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		c := new(common)
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>		c.tmpl = make(map[string]*Template)
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		c.parseFuncs = make(FuncMap)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		c.execFuncs = make(map[string]reflect.Value)
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		t.common = c
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// Clone returns a duplicate of the template, including all associated</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// templates. The actual representation is not copied, but the name space of</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// associated templates is, so further calls to Parse in the copy will add</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// templates to the copy but not to the original. Clone can be used to prepare</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// common templates and use them with variant definitions for other templates</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// by adding the variants after the clone is made.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>func (t *Template) Clone() (*Template, error) {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	nt := t.copy(nil)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	nt.init()
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	if t.common == nil {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		return nt, nil
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	t.muTmpl.RLock()
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	defer t.muTmpl.RUnlock()
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	for k, v := range t.tmpl {
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		if k == t.name {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>			nt.tmpl[t.name] = nt
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>			continue
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		<span class="comment">// The associated templates share nt&#39;s common structure.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		tmpl := v.copy(nt.common)
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		nt.tmpl[k] = tmpl
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	t.muFuncs.RLock()
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	defer t.muFuncs.RUnlock()
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	for k, v := range t.parseFuncs {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		nt.parseFuncs[k] = v
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	for k, v := range t.execFuncs {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		nt.execFuncs[k] = v
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	return nt, nil
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// copy returns a shallow copy of t, with common set to the argument.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>func (t *Template) copy(c *common) *Template {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	return &amp;Template{
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		name:       t.name,
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		Tree:       t.Tree,
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		common:     c,
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		leftDelim:  t.leftDelim,
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		rightDelim: t.rightDelim,
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// AddParseTree associates the argument parse tree with the template t, giving</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// it the specified name. If the template has not been defined, this tree becomes</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// its definition. If it has been defined and already has that name, the existing</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// definition is replaced; otherwise a new template is created, defined, and returned.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>func (t *Template) AddParseTree(name string, tree *parse.Tree) (*Template, error) {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	t.init()
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	t.muTmpl.Lock()
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	defer t.muTmpl.Unlock()
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	nt := t
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	if name != t.name {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		nt = t.New(name)
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	<span class="comment">// Even if nt == t, we need to install it in the common.tmpl map.</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	if t.associate(nt, tree) || nt.Tree == nil {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		nt.Tree = tree
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	return nt, nil
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// Templates returns a slice of defined templates associated with t.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>func (t *Template) Templates() []*Template {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	if t.common == nil {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		return nil
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">// Return a slice so we don&#39;t expose the map.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	t.muTmpl.RLock()
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	defer t.muTmpl.RUnlock()
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	m := make([]*Template, 0, len(t.tmpl))
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	for _, v := range t.tmpl {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		m = append(m, v)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	return m
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// Delims sets the action delimiters to the specified strings, to be used in</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// subsequent calls to Parse, ParseFiles, or ParseGlob. Nested template</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// definitions will inherit the settings. An empty delimiter stands for the</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// corresponding default: {{ or }}.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">// The return value is the template, so calls can be chained.</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>func (t *Template) Delims(left, right string) *Template {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	t.init()
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	t.leftDelim = left
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	t.rightDelim = right
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	return t
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// Funcs adds the elements of the argument map to the template&#39;s function map.</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// It must be called before the template is parsed.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// It panics if a value in the map is not a function with appropriate return</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// type or if the name cannot be used syntactically as a function in a template.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// It is legal to overwrite elements of the map. The return value is the template,</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// so calls can be chained.</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>func (t *Template) Funcs(funcMap FuncMap) *Template {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	t.init()
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	t.muFuncs.Lock()
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	defer t.muFuncs.Unlock()
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	addValueFuncs(t.execFuncs, funcMap)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	addFuncs(t.parseFuncs, funcMap)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	return t
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// Lookup returns the template with the given name that is associated with t.</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// It returns nil if there is no such template or the template has no definition.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="selection">func (t *Template) Lookup(name string) *Template</span> {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	if t.common == nil {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		return nil
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	t.muTmpl.RLock()
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	defer t.muTmpl.RUnlock()
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	return t.tmpl[name]
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// Parse parses text as a template body for t.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">// Named template definitions ({{define ...}} or {{block ...}} statements) in text</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// define additional templates associated with t and are removed from the</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// definition of t itself.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// Templates can be redefined in successive calls to Parse.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// A template definition with a body containing only white space and comments</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// is considered empty and will not replace an existing template&#39;s body.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// This allows using Parse to add new named template definitions without</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// overwriting the main template body.</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>func (t *Template) Parse(text string) (*Template, error) {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	t.init()
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	t.muFuncs.RLock()
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	trees, err := parse.Parse(t.name, text, t.leftDelim, t.rightDelim, t.parseFuncs, builtins())
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	t.muFuncs.RUnlock()
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	if err != nil {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		return nil, err
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	<span class="comment">// Add the newly parsed trees, including the one for t, into our common structure.</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	for name, tree := range trees {
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		if _, err := t.AddParseTree(name, tree); err != nil {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>			return nil, err
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	return t, nil
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">// associate installs the new template into the group of templates associated</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">// with t. The two are already known to share the common structure.</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">// The boolean return value reports whether to store this tree as t.Tree.</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>func (t *Template) associate(new *Template, tree *parse.Tree) bool {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	if new.common != t.common {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		panic(&#34;internal error: associate not common&#34;)
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	if old := t.tmpl[new.name]; old != nil &amp;&amp; parse.IsEmptyTree(tree.Root) &amp;&amp; old.Tree != nil {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		<span class="comment">// If a template by that name exists,</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		<span class="comment">// don&#39;t replace it with an empty template.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		return false
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	t.tmpl[new.name] = new
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	return true
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>
</pre><p><a href="template.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
