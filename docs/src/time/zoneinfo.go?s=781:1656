<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/time/zoneinfo.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./zoneinfo.go?s=781:1656#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/time">time</a>/<span class="text-muted">zoneinfo.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/time">time</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package time
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;syscall&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>)
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">//go:generate env ZONEINFO=$GOROOT/lib/time/zoneinfo.zip go run genzabbrs.go -output zoneinfo_abbrs_windows.go</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// A Location maps time instants to the zone in use at that time.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// Typically, the Location represents the collection of time offsets</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// in use in a geographical area. For many Locations the time offset varies</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// depending on whether daylight savings time is in use at the time instant.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// Location is used to provide a time zone in a printed Time value and for</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// calculations involving intervals that may cross daylight savings time</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// boundaries.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="selection">type Location struct {
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	name string
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	zone []zone
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	tx   []zoneTrans
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	</span><span class="selection-comment">// The tzdata information can be followed by a string that describes</span><span class="selection">
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	</span><span class="selection-comment">// how to handle DST transitions not recorded in zoneTrans.</span><span class="selection">
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	</span><span class="selection-comment">// The format is the TZ environment variable without a colon; see</span><span class="selection">
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	</span><span class="selection-comment">// https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap08.html.</span><span class="selection">
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Example string, for America/Los_Angeles: PST8PDT,M3.2.0,M11.1.0</span><span class="selection">
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	extend string
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Most lookups will be for the current time.</span><span class="selection">
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	</span><span class="selection-comment">// To avoid the binary search through tx, keep a</span><span class="selection">
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	</span><span class="selection-comment">// static one-element cache that gives the correct</span><span class="selection">
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	</span><span class="selection-comment">// zone for the time when the Location was created.</span><span class="selection">
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	</span><span class="selection-comment">// if cacheStart &lt;= t &lt; cacheEnd,</span><span class="selection">
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	</span><span class="selection-comment">// lookup can return cacheZone.</span><span class="selection">
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	</span><span class="selection-comment">// The units for cacheStart and cacheEnd are seconds</span><span class="selection">
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	</span><span class="selection-comment">// since January 1, 1970 UTC, to match the argument</span><span class="selection">
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	</span><span class="selection-comment">// to lookup.</span><span class="selection">
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	cacheStart int64
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	cacheEnd   int64
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	cacheZone  *zone
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>}</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// A zone represents a single time zone such as CET.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>type zone struct {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	name   string <span class="comment">// abbreviated name, &#34;CET&#34;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	offset int    <span class="comment">// seconds east of UTC</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	isDST  bool   <span class="comment">// is this zone Daylight Savings Time?</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// A zoneTrans represents a single time zone transition.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>type zoneTrans struct {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	when         int64 <span class="comment">// transition time, in seconds since 1970 GMT</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	index        uint8 <span class="comment">// the index of the zone that goes into effect at that time</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	isstd, isutc bool  <span class="comment">// ignored - no idea what these mean</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// alpha and omega are the beginning and end of time for zone</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// transitions.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>const (
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	alpha = -1 &lt;&lt; 63  <span class="comment">// math.MinInt64</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	omega = 1&lt;&lt;63 - 1 <span class="comment">// math.MaxInt64</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>)
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// UTC represents Universal Coordinated Time (UTC).</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>var UTC *Location = &amp;utcLoc
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// utcLoc is separate so that get can refer to &amp;utcLoc</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// and ensure that it never returns a nil *Location,</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// even if a badly behaved client has changed UTC.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>var utcLoc = Location{name: &#34;UTC&#34;}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// Local represents the system&#39;s local time zone.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// On Unix systems, Local consults the TZ environment</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// variable to find the time zone to use. No TZ means</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// use the system default /etc/localtime.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// TZ=&#34;&#34; means use UTC.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// TZ=&#34;foo&#34; means use file foo in the system timezone directory.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>var Local *Location = &amp;localLoc
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// localLoc is separate so that initLocal can initialize</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// it even if a client has changed Local.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>var localLoc Location
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>var localOnce sync.Once
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>func (l *Location) get() *Location {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	if l == nil {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		return &amp;utcLoc
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	if l == &amp;localLoc {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		localOnce.Do(initLocal)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	return l
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// String returns a descriptive name for the time zone information,</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// corresponding to the name argument to LoadLocation or FixedZone.</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>func (l *Location) String() string {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	return l.get().name
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>var unnamedFixedZones []*Location
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>var unnamedFixedZonesOnce sync.Once
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// FixedZone returns a Location that always uses</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// the given zone name and offset (seconds east of UTC).</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>func FixedZone(name string, offset int) *Location {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// Most calls to FixedZone have an unnamed zone with an offset by the hour.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// Optimize for that case by returning the same *Location for a given hour.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	const hoursBeforeUTC = 12
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	const hoursAfterUTC = 14
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	hour := offset / 60 / 60
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	if name == &#34;&#34; &amp;&amp; -hoursBeforeUTC &lt;= hour &amp;&amp; hour &lt;= +hoursAfterUTC &amp;&amp; hour*60*60 == offset {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		unnamedFixedZonesOnce.Do(func() {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			unnamedFixedZones = make([]*Location, hoursBeforeUTC+1+hoursAfterUTC)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			for hr := -hoursBeforeUTC; hr &lt;= +hoursAfterUTC; hr++ {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>				unnamedFixedZones[hr+hoursBeforeUTC] = fixedZone(&#34;&#34;, hr*60*60)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		})
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		return unnamedFixedZones[hour+hoursBeforeUTC]
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	return fixedZone(name, offset)
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>func fixedZone(name string, offset int) *Location {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	l := &amp;Location{
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		name:       name,
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		zone:       []zone{{name, offset, false}},
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		tx:         []zoneTrans{{alpha, 0, false, false}},
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		cacheStart: alpha,
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		cacheEnd:   omega,
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	l.cacheZone = &amp;l.zone[0]
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	return l
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// lookup returns information about the time zone in use at an</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// instant in time expressed as seconds since January 1, 1970 00:00:00 UTC.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// The returned information gives the name of the zone (such as &#34;CET&#34;),</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// the start and end times bracketing sec when that zone is in effect,</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// the offset in seconds east of UTC (such as -5*60*60), and whether</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">// the daylight savings is being observed at that time.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>func (l *Location) lookup(sec int64) (name string, offset int, start, end int64, isDST bool) {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	l = l.get()
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	if len(l.zone) == 0 {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		name = &#34;UTC&#34;
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		offset = 0
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		start = alpha
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		end = omega
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		isDST = false
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		return
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	if zone := l.cacheZone; zone != nil &amp;&amp; l.cacheStart &lt;= sec &amp;&amp; sec &lt; l.cacheEnd {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		name = zone.name
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		offset = zone.offset
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		start = l.cacheStart
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		end = l.cacheEnd
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		isDST = zone.isDST
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		return
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	if len(l.tx) == 0 || sec &lt; l.tx[0].when {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		zone := &amp;l.zone[l.lookupFirstZone()]
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		name = zone.name
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		offset = zone.offset
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		start = alpha
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		if len(l.tx) &gt; 0 {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>			end = l.tx[0].when
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		} else {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>			end = omega
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		isDST = zone.isDST
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		return
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	<span class="comment">// Binary search for entry with largest time &lt;= sec.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	<span class="comment">// Not using sort.Search to avoid dependencies.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	tx := l.tx
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	end = omega
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	lo := 0
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	hi := len(tx)
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	for hi-lo &gt; 1 {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		m := int(uint(lo+hi) &gt;&gt; 1)
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		lim := tx[m].when
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		if sec &lt; lim {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>			end = lim
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>			hi = m
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		} else {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>			lo = m
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	zone := &amp;l.zone[tx[lo].index]
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	name = zone.name
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	offset = zone.offset
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	start = tx[lo].when
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	<span class="comment">// end = maintained during the search</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	isDST = zone.isDST
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	<span class="comment">// If we&#39;re at the end of the known zone transitions,</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	<span class="comment">// try the extend string.</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	if lo == len(tx)-1 &amp;&amp; l.extend != &#34;&#34; {
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		if ename, eoffset, estart, eend, eisDST, ok := tzset(l.extend, start, sec); ok {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>			return ename, eoffset, estart, eend, eisDST
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	}
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	return
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// lookupFirstZone returns the index of the time zone to use for times</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span><span class="comment">// before the first transition time, or when there are no transition</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// times.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// The reference implementation in localtime.c from</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// https://www.iana.org/time-zones/repository/releases/tzcode2013g.tar.gz</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">// implements the following algorithm for these cases:</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">//  1. If the first zone is unused by the transitions, use it.</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">//  2. Otherwise, if there are transition times, and the first</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">//     transition is to a zone in daylight time, find the first</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">//     non-daylight-time zone before and closest to the first transition</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">//     zone.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">//  3. Otherwise, use the first zone that is not daylight time, if</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">//     there is one.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">//  4. Otherwise, use the first zone.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>func (l *Location) lookupFirstZone() int {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	<span class="comment">// Case 1.</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	if !l.firstZoneUsed() {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		return 0
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	<span class="comment">// Case 2.</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	if len(l.tx) &gt; 0 &amp;&amp; l.zone[l.tx[0].index].isDST {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		for zi := int(l.tx[0].index) - 1; zi &gt;= 0; zi-- {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>			if !l.zone[zi].isDST {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>				return zi
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	<span class="comment">// Case 3.</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	for zi := range l.zone {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		if !l.zone[zi].isDST {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>			return zi
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	<span class="comment">// Case 4.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	return 0
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>}
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// firstZoneUsed reports whether the first zone is used by some</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// transition.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>func (l *Location) firstZoneUsed() bool {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	for _, tx := range l.tx {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		if tx.index == 0 {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>			return true
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	return false
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// tzset takes a timezone string like the one found in the TZ environment</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// variable, the time of the last time zone transition expressed as seconds</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// since January 1, 1970 00:00:00 UTC, and a time expressed the same way.</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// We call this a tzset string since in C the function tzset reads TZ.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">// The return values are as for lookup, plus ok which reports whether the</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// parse succeeded.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>func tzset(s string, lastTxSec, sec int64) (name string, offset int, start, end int64, isDST, ok bool) {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	var (
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		stdName, dstName     string
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		stdOffset, dstOffset int
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	stdName, s, ok = tzsetName(s)
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	if ok {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		stdOffset, s, ok = tzsetOffset(s)
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	if !ok {
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		return &#34;&#34;, 0, 0, 0, false, false
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	<span class="comment">// The numbers in the tzset string are added to local time to get UTC,</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	<span class="comment">// but our offsets are added to UTC to get local time,</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	<span class="comment">// so we negate the number we see here.</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	stdOffset = -stdOffset
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	if len(s) == 0 || s[0] == &#39;,&#39; {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		<span class="comment">// No daylight savings time.</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		return stdName, stdOffset, lastTxSec, omega, false, true
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	dstName, s, ok = tzsetName(s)
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	if ok {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		if len(s) == 0 || s[0] == &#39;,&#39; {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>			dstOffset = stdOffset + secondsPerHour
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		} else {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			dstOffset, s, ok = tzsetOffset(s)
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>			dstOffset = -dstOffset <span class="comment">// as with stdOffset, above</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	if !ok {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		return &#34;&#34;, 0, 0, 0, false, false
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	if len(s) == 0 {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		<span class="comment">// Default DST rules per tzcode.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		s = &#34;,M3.2.0,M11.1.0&#34;
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	<span class="comment">// The TZ definition does not mention &#39;;&#39; here but tzcode accepts it.</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	if s[0] != &#39;,&#39; &amp;&amp; s[0] != &#39;;&#39; {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		return &#34;&#34;, 0, 0, 0, false, false
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	s = s[1:]
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	var startRule, endRule rule
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	startRule, s, ok = tzsetRule(s)
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	if !ok || len(s) == 0 || s[0] != &#39;,&#39; {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		return &#34;&#34;, 0, 0, 0, false, false
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	s = s[1:]
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	endRule, s, ok = tzsetRule(s)
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	if !ok || len(s) &gt; 0 {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		return &#34;&#34;, 0, 0, 0, false, false
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	year, _, _, yday := absDate(uint64(sec+unixToInternal+internalToAbsolute), false)
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	ysec := int64(yday*secondsPerDay) + sec%secondsPerDay
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	<span class="comment">// Compute start of year in seconds since Unix epoch.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	d := daysSinceEpoch(year)
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	abs := int64(d * secondsPerDay)
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	abs += absoluteToInternal + internalToUnix
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	startSec := int64(tzruleTime(year, startRule, stdOffset))
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	endSec := int64(tzruleTime(year, endRule, dstOffset))
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	dstIsDST, stdIsDST := true, false
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	<span class="comment">// Note: this is a flipping of &#34;DST&#34; and &#34;STD&#34; while retaining the labels</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	<span class="comment">// This happens in southern hemispheres. The labelling here thus is a little</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	<span class="comment">// inconsistent with the goal.</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	if endSec &lt; startSec {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		startSec, endSec = endSec, startSec
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		stdName, dstName = dstName, stdName
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		stdOffset, dstOffset = dstOffset, stdOffset
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		stdIsDST, dstIsDST = dstIsDST, stdIsDST
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	<span class="comment">// The start and end values that we return are accurate</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	<span class="comment">// close to a daylight savings transition, but are otherwise</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	<span class="comment">// just the start and end of the year. That suffices for</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	<span class="comment">// the only caller that cares, which is Date.</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	if ysec &lt; startSec {
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		return stdName, stdOffset, abs, startSec + abs, stdIsDST, true
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	} else if ysec &gt;= endSec {
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		return stdName, stdOffset, endSec + abs, abs + 365*secondsPerDay, stdIsDST, true
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	} else {
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		return dstName, dstOffset, startSec + abs, endSec + abs, dstIsDST, true
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// tzsetName returns the timezone name at the start of the tzset string s,</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">// and the remainder of s, and reports whether the parsing is OK.</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>func tzsetName(s string) (string, string, bool) {
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	if len(s) == 0 {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		return &#34;&#34;, &#34;&#34;, false
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	if s[0] != &#39;&lt;&#39; {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		for i, r := range s {
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>			switch r {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>			case &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;,&#39;, &#39;-&#39;, &#39;+&#39;:
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>				if i &lt; 3 {
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>					return &#34;&#34;, &#34;&#34;, false
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>				}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>				return s[:i], s[i:], true
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>			}
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		if len(s) &lt; 3 {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>			return &#34;&#34;, &#34;&#34;, false
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		return s, &#34;&#34;, true
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	} else {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		for i, r := range s {
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>			if r == &#39;&gt;&#39; {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>				return s[1:i], s[i+1:], true
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>			}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		return &#34;&#34;, &#34;&#34;, false
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>}
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">// tzsetOffset returns the timezone offset at the start of the tzset string s,</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span><span class="comment">// and the remainder of s, and reports whether the parsing is OK.</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span><span class="comment">// The timezone offset is returned as a number of seconds.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>func tzsetOffset(s string) (offset int, rest string, ok bool) {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	if len(s) == 0 {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		return 0, &#34;&#34;, false
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	}
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	neg := false
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	if s[0] == &#39;+&#39; {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		s = s[1:]
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	} else if s[0] == &#39;-&#39; {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		s = s[1:]
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		neg = true
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	<span class="comment">// The tzdata code permits values up to 24 * 7 here,</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	<span class="comment">// although POSIX does not.</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	var hours int
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	hours, s, ok = tzsetNum(s, 0, 24*7)
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	if !ok {
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		return 0, &#34;&#34;, false
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	off := hours * secondsPerHour
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	if len(s) == 0 || s[0] != &#39;:&#39; {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		if neg {
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>			off = -off
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		return off, s, true
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	}
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	var mins int
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	mins, s, ok = tzsetNum(s[1:], 0, 59)
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	if !ok {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		return 0, &#34;&#34;, false
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	off += mins * secondsPerMinute
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	if len(s) == 0 || s[0] != &#39;:&#39; {
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		if neg {
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>			off = -off
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		}
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		return off, s, true
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	var secs int
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	secs, s, ok = tzsetNum(s[1:], 0, 59)
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	if !ok {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		return 0, &#34;&#34;, false
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	off += secs
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	if neg {
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		off = -off
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	}
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	return off, s, true
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>}
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span><span class="comment">// ruleKind is the kinds of rules that can be seen in a tzset string.</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>type ruleKind int
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>const (
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	ruleJulian ruleKind = iota
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	ruleDOY
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	ruleMonthWeekDay
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>)
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span><span class="comment">// rule is a rule read from a tzset string.</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>type rule struct {
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	kind ruleKind
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	day  int
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	week int
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	mon  int
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	time int <span class="comment">// transition time</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span><span class="comment">// tzsetRule parses a rule from a tzset string.</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span><span class="comment">// It returns the rule, and the remainder of the string, and reports success.</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>func tzsetRule(s string) (rule, string, bool) {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	var r rule
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	if len(s) == 0 {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		return rule{}, &#34;&#34;, false
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	ok := false
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	if s[0] == &#39;J&#39; {
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>		var jday int
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>		jday, s, ok = tzsetNum(s[1:], 1, 365)
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		if !ok {
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>			return rule{}, &#34;&#34;, false
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		}
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		r.kind = ruleJulian
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		r.day = jday
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	} else if s[0] == &#39;M&#39; {
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		var mon int
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		mon, s, ok = tzsetNum(s[1:], 1, 12)
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		if !ok || len(s) == 0 || s[0] != &#39;.&#39; {
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>			return rule{}, &#34;&#34;, false
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		var week int
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		week, s, ok = tzsetNum(s[1:], 1, 5)
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		if !ok || len(s) == 0 || s[0] != &#39;.&#39; {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>			return rule{}, &#34;&#34;, false
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		var day int
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		day, s, ok = tzsetNum(s[1:], 0, 6)
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		if !ok {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>			return rule{}, &#34;&#34;, false
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		r.kind = ruleMonthWeekDay
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		r.day = day
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>		r.week = week
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		r.mon = mon
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	} else {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		var day int
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		day, s, ok = tzsetNum(s, 0, 365)
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		if !ok {
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>			return rule{}, &#34;&#34;, false
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		}
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		r.kind = ruleDOY
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		r.day = day
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	}
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	if len(s) == 0 || s[0] != &#39;/&#39; {
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		r.time = 2 * secondsPerHour <span class="comment">// 2am is the default</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		return r, s, true
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	offset, s, ok := tzsetOffset(s[1:])
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	if !ok {
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		return rule{}, &#34;&#34;, false
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	}
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	r.time = offset
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	return r, s, true
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>}
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span><span class="comment">// tzsetNum parses a number from a tzset string.</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span><span class="comment">// It returns the number, and the remainder of the string, and reports success.</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span><span class="comment">// The number must be between min and max.</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>func tzsetNum(s string, min, max int) (num int, rest string, ok bool) {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	if len(s) == 0 {
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		return 0, &#34;&#34;, false
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	}
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	num = 0
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	for i, r := range s {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		if r &lt; &#39;0&#39; || r &gt; &#39;9&#39; {
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>			if i == 0 || num &lt; min {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>				return 0, &#34;&#34;, false
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>			}
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>			return num, s[i:], true
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>		}
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		num *= 10
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		num += int(r) - &#39;0&#39;
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		if num &gt; max {
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>			return 0, &#34;&#34;, false
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	}
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	if num &lt; min {
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		return 0, &#34;&#34;, false
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	}
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	return num, &#34;&#34;, true
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>}
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span><span class="comment">// tzruleTime takes a year, a rule, and a timezone offset,</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span><span class="comment">// and returns the number of seconds since the start of the year</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span><span class="comment">// that the rule takes effect.</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>func tzruleTime(year int, r rule, off int) int {
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	var s int
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	switch r.kind {
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	case ruleJulian:
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		s = (r.day - 1) * secondsPerDay
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		if isLeap(year) &amp;&amp; r.day &gt;= 60 {
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>			s += secondsPerDay
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>		}
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	case ruleDOY:
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>		s = r.day * secondsPerDay
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	case ruleMonthWeekDay:
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>		<span class="comment">// Zeller&#39;s Congruence.</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>		m1 := (r.mon+9)%12 + 1
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		yy0 := year
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		if r.mon &lt;= 2 {
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>			yy0--
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		}
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		yy1 := yy0 / 100
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		yy2 := yy0 % 100
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		dow := ((26*m1-2)/10 + 1 + yy2 + yy2/4 + yy1/4 - 2*yy1) % 7
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		if dow &lt; 0 {
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>			dow += 7
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		}
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		<span class="comment">// Now dow is the day-of-week of the first day of r.mon.</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		<span class="comment">// Get the day-of-month of the first &#34;dow&#34; day.</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		d := r.day - dow
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		if d &lt; 0 {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>			d += 7
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		}
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		for i := 1; i &lt; r.week; i++ {
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>			if d+7 &gt;= daysIn(Month(r.mon), year) {
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>				break
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>			}
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>			d += 7
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		}
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>		d += int(daysBefore[r.mon-1])
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		if isLeap(year) &amp;&amp; r.mon &gt; 2 {
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>			d++
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		}
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		s = d * secondsPerDay
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	}
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	return s + r.time - off
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>}
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>
<span id="L609" class="ln">   609&nbsp;&nbsp;</span><span class="comment">// lookupName returns information about the time zone with</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span><span class="comment">// the given name (such as &#34;EST&#34;) at the given pseudo-Unix time</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span><span class="comment">// (what the given time of day would be in UTC).</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>func (l *Location) lookupName(name string, unix int64) (offset int, ok bool) {
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	l = l.get()
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	<span class="comment">// First try for a zone with the right name that was actually</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	<span class="comment">// in effect at the given time. (In Sydney, Australia, both standard</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	<span class="comment">// and daylight-savings time are abbreviated &#34;EST&#34;. Using the</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	<span class="comment">// offset helps us pick the right one for the given time.</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	<span class="comment">// It&#39;s not perfect: during the backward transition we might pick</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	<span class="comment">// either one.)</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	for i := range l.zone {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>		zone := &amp;l.zone[i]
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		if zone.name == name {
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>			nam, offset, _, _, _ := l.lookup(unix - int64(zone.offset))
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>			if nam == zone.name {
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>				return offset, true
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>			}
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		}
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	}
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	<span class="comment">// Otherwise fall back to an ordinary name match.</span>
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	for i := range l.zone {
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		zone := &amp;l.zone[i]
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		if zone.name == name {
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>			return zone.offset, true
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		}
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	}
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	<span class="comment">// Otherwise, give up.</span>
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>	return
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>}
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span><span class="comment">// NOTE(rsc): Eventually we will need to accept the POSIX TZ environment</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span><span class="comment">// syntax too, but I don&#39;t feel like implementing it today.</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>var errLocation = errors.New(&#34;time: invalid location name&#34;)
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>var zoneinfo *string
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>var zoneinfoOnce sync.Once
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span><span class="comment">// LoadLocation returns the Location with the given name.</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span><span class="comment">// If the name is &#34;&#34; or &#34;UTC&#34;, LoadLocation returns UTC.</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span><span class="comment">// If the name is &#34;Local&#34;, LoadLocation returns Local.</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span><span class="comment">// Otherwise, the name is taken to be a location name corresponding to a file</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span><span class="comment">// in the IANA Time Zone database, such as &#34;America/New_York&#34;.</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span><span class="comment">// LoadLocation looks for the IANA Time Zone database in the following</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span><span class="comment">// locations in order:</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span><span class="comment">//   - the directory or uncompressed zip file named by the ZONEINFO environment variable</span>
<span id="L663" class="ln">   663&nbsp;&nbsp;</span><span class="comment">//   - on a Unix system, the system standard installation location</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span><span class="comment">//   - $GOROOT/lib/time/zoneinfo.zip</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span><span class="comment">//   - the time/tzdata package, if it was imported</span>
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>func LoadLocation(name string) (*Location, error) {
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	if name == &#34;&#34; || name == &#34;UTC&#34; {
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		return UTC, nil
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	}
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>	if name == &#34;Local&#34; {
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>		return Local, nil
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	}
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	if containsDotDot(name) || name[0] == &#39;/&#39; || name[0] == &#39;\\&#39; {
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		<span class="comment">// No valid IANA Time Zone name contains a single dot,</span>
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		<span class="comment">// much less dot dot. Likewise, none begin with a slash.</span>
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		return nil, errLocation
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	}
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	zoneinfoOnce.Do(func() {
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		env, _ := syscall.Getenv(&#34;ZONEINFO&#34;)
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		zoneinfo = &amp;env
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	})
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	var firstErr error
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	if *zoneinfo != &#34;&#34; {
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		if zoneData, err := loadTzinfoFromDirOrZip(*zoneinfo, name); err == nil {
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>			if z, err := LoadLocationFromTZData(name, zoneData); err == nil {
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>				return z, nil
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>			}
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>			firstErr = err
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		} else if err != syscall.ENOENT {
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>			firstErr = err
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		}
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	}
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	if z, err := loadLocation(name, platformZoneSources); err == nil {
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>		return z, nil
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	} else if firstErr == nil {
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>		firstErr = err
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	}
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	return nil, firstErr
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>}
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span><span class="comment">// containsDotDot reports whether s contains &#34;..&#34;.</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>func containsDotDot(s string) bool {
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	if len(s) &lt; 2 {
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>		return false
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	}
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s)-1; i++ {
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>		if s[i] == &#39;.&#39; &amp;&amp; s[i+1] == &#39;.&#39; {
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>			return true
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>		}
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	}
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	return false
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>}
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>
</pre><p><a href="zoneinfo.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
