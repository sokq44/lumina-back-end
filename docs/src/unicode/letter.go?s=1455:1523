<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/unicode/letter.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./letter.go?s=1455:1523#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/unicode">unicode</a>/<span class="text-muted">letter.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/unicode">unicode</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package unicode provides data and functions to test some properties of</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// Unicode code points.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package unicode
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>const (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	MaxRune         = &#39;\U0010FFFF&#39; <span class="comment">// Maximum valid Unicode code point.</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	ReplacementChar = &#39;\uFFFD&#39;     <span class="comment">// Represents invalid code points.</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	MaxASCII        = &#39;\u007F&#39;     <span class="comment">// maximum ASCII value.</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	MaxLatin1       = &#39;\u00FF&#39;     <span class="comment">// maximum Latin-1 value.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>)
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// RangeTable defines a set of Unicode code points by listing the ranges of</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// code points within the set. The ranges are listed in two slices</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// to save space: a slice of 16-bit ranges and a slice of 32-bit ranges.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// The two slices must be in sorted order and non-overlapping.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// Also, R32 should contain only values &gt;= 0x10000 (1&lt;&lt;16).</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>type RangeTable struct {
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	R16         []Range16
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	R32         []Range32
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	LatinOffset int <span class="comment">// number of entries in R16 with Hi &lt;= MaxLatin1</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// Range16 represents of a range of 16-bit Unicode code points. The range runs from Lo to Hi</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// inclusive and has the specified stride.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>type Range16 struct {
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	Lo     uint16
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	Hi     uint16
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	Stride uint16
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>}
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// Range32 represents of a range of Unicode code points and is used when one or</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// more of the values will not fit in 16 bits. The range runs from Lo to Hi</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// inclusive and has the specified stride. Lo and Hi must always be &gt;= 1&lt;&lt;16.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="selection">type Range32 struct {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	Lo     uint32
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	Hi     uint32
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	Stride uint32
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>}</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// CaseRange represents a range of Unicode code points for simple (one</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// code point to one code point) case conversion.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// The range runs from Lo to Hi inclusive, with a fixed stride of 1. Deltas</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// are the number to add to the code point to reach the code point for a</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// different case for that character. They may be negative. If zero, it</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// means the character is in the corresponding case. There is a special</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// case representing sequences of alternating corresponding Upper and Lower</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// pairs. It appears with a fixed Delta of</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//	{UpperLower, UpperLower, UpperLower}</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// The constant UpperLower has an otherwise impossible delta value.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>type CaseRange struct {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	Lo    uint32
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	Hi    uint32
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	Delta d
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// SpecialCase represents language-specific case mappings such as Turkish.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// Methods of SpecialCase customize (by overriding) the standard mappings.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>type SpecialCase []CaseRange
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// BUG(r): There is no mechanism for full case folding, that is, for</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// characters that involve multiple runes in the input or output.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// Indices into the Delta arrays inside CaseRanges for case mapping.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>const (
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	UpperCase = iota
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	LowerCase
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	TitleCase
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	MaxCase
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>)
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>type d [MaxCase]rune <span class="comment">// to make the CaseRanges text shorter</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// If the Delta field of a [CaseRange] is UpperLower, it means</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// this CaseRange represents a sequence of the form (say)</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// [Upper] [Lower] [Upper] [Lower].</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>const (
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	UpperLower = MaxRune + 1 <span class="comment">// (Cannot be a valid delta.)</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>)
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// linearMax is the maximum size table for linear search for non-Latin1 rune.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// Derived by running &#39;go test -calibrate&#39;.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>const linearMax = 18
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// is16 reports whether r is in the sorted slice of 16-bit ranges.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>func is16(ranges []Range16, r uint16) bool {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	if len(ranges) &lt;= linearMax || r &lt;= MaxLatin1 {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		for i := range ranges {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>			range_ := &amp;ranges[i]
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>			if r &lt; range_.Lo {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>				return false
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>			}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>			if r &lt;= range_.Hi {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>				return range_.Stride == 1 || (r-range_.Lo)%range_.Stride == 0
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>			}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		return false
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	<span class="comment">// binary search over ranges</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	lo := 0
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	hi := len(ranges)
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	for lo &lt; hi {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		m := int(uint(lo+hi) &gt;&gt; 1)
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		range_ := &amp;ranges[m]
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		if range_.Lo &lt;= r &amp;&amp; r &lt;= range_.Hi {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>			return range_.Stride == 1 || (r-range_.Lo)%range_.Stride == 0
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		if r &lt; range_.Lo {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>			hi = m
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		} else {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>			lo = m + 1
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		}
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	return false
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// is32 reports whether r is in the sorted slice of 32-bit ranges.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>func is32(ranges []Range32, r uint32) bool {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	if len(ranges) &lt;= linearMax {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		for i := range ranges {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			range_ := &amp;ranges[i]
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>			if r &lt; range_.Lo {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>				return false
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>			}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>			if r &lt;= range_.Hi {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>				return range_.Stride == 1 || (r-range_.Lo)%range_.Stride == 0
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>			}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		return false
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	<span class="comment">// binary search over ranges</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	lo := 0
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	hi := len(ranges)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	for lo &lt; hi {
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		m := int(uint(lo+hi) &gt;&gt; 1)
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		range_ := ranges[m]
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		if range_.Lo &lt;= r &amp;&amp; r &lt;= range_.Hi {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>			return range_.Stride == 1 || (r-range_.Lo)%range_.Stride == 0
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		if r &lt; range_.Lo {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>			hi = m
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		} else {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>			lo = m + 1
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	return false
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// Is reports whether the rune is in the specified table of ranges.</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>func Is(rangeTab *RangeTable, r rune) bool {
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	r16 := rangeTab.R16
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	<span class="comment">// Compare as uint32 to correctly handle negative runes.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	if len(r16) &gt; 0 &amp;&amp; uint32(r) &lt;= uint32(r16[len(r16)-1].Hi) {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		return is16(r16, uint16(r))
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	r32 := rangeTab.R32
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	if len(r32) &gt; 0 &amp;&amp; r &gt;= rune(r32[0].Lo) {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		return is32(r32, uint32(r))
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	return false
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>func isExcludingLatin(rangeTab *RangeTable, r rune) bool {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	r16 := rangeTab.R16
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	<span class="comment">// Compare as uint32 to correctly handle negative runes.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	if off := rangeTab.LatinOffset; len(r16) &gt; off &amp;&amp; uint32(r) &lt;= uint32(r16[len(r16)-1].Hi) {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		return is16(r16[off:], uint16(r))
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	r32 := rangeTab.R32
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	if len(r32) &gt; 0 &amp;&amp; r &gt;= rune(r32[0].Lo) {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		return is32(r32, uint32(r))
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	return false
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// IsUpper reports whether the rune is an upper case letter.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>func IsUpper(r rune) bool {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	<span class="comment">// See comment in IsGraphic.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	if uint32(r) &lt;= MaxLatin1 {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		return properties[uint8(r)]&amp;pLmask == pLu
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	return isExcludingLatin(Upper, r)
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// IsLower reports whether the rune is a lower case letter.</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>func IsLower(r rune) bool {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	<span class="comment">// See comment in IsGraphic.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	if uint32(r) &lt;= MaxLatin1 {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		return properties[uint8(r)]&amp;pLmask == pLl
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	return isExcludingLatin(Lower, r)
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// IsTitle reports whether the rune is a title case letter.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>func IsTitle(r rune) bool {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	if r &lt;= MaxLatin1 {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		return false
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	return isExcludingLatin(Title, r)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// to maps the rune using the specified case mapping.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// It additionally reports whether caseRange contained a mapping for r.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>func to(_case int, r rune, caseRange []CaseRange) (mappedRune rune, foundMapping bool) {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	if _case &lt; 0 || MaxCase &lt;= _case {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		return ReplacementChar, false <span class="comment">// as reasonable an error as any</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	<span class="comment">// binary search over ranges</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	lo := 0
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	hi := len(caseRange)
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	for lo &lt; hi {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		m := int(uint(lo+hi) &gt;&gt; 1)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		cr := caseRange[m]
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		if rune(cr.Lo) &lt;= r &amp;&amp; r &lt;= rune(cr.Hi) {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>			delta := cr.Delta[_case]
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>			if delta &gt; MaxRune {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>				<span class="comment">// In an Upper-Lower sequence, which always starts with</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>				<span class="comment">// an UpperCase letter, the real deltas always look like:</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>				<span class="comment">//	{0, 1, 0}    UpperCase (Lower is next)</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>				<span class="comment">//	{-1, 0, -1}  LowerCase (Upper, Title are previous)</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>				<span class="comment">// The characters at even offsets from the beginning of the</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>				<span class="comment">// sequence are upper case; the ones at odd offsets are lower.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>				<span class="comment">// The correct mapping can be done by clearing or setting the low</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>				<span class="comment">// bit in the sequence offset.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>				<span class="comment">// The constants UpperCase and TitleCase are even while LowerCase</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>				<span class="comment">// is odd so we take the low bit from _case.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>				return rune(cr.Lo) + ((r-rune(cr.Lo))&amp;^1 | rune(_case&amp;1)), true
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>			}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>			return r + delta, true
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		if r &lt; rune(cr.Lo) {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>			hi = m
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		} else {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			lo = m + 1
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	}
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	return r, false
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">// To maps the rune to the specified case: [UpperCase], [LowerCase], or [TitleCase].</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>func To(_case int, r rune) rune {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	r, _ = to(_case, r, CaseRanges)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	return r
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">// ToUpper maps the rune to upper case.</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>func ToUpper(r rune) rune {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	if r &lt;= MaxASCII {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		if &#39;a&#39; &lt;= r &amp;&amp; r &lt;= &#39;z&#39; {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>			r -= &#39;a&#39; - &#39;A&#39;
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		return r
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	return To(UpperCase, r)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span><span class="comment">// ToLower maps the rune to lower case.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>func ToLower(r rune) rune {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	if r &lt;= MaxASCII {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		if &#39;A&#39; &lt;= r &amp;&amp; r &lt;= &#39;Z&#39; {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>			r += &#39;a&#39; - &#39;A&#39;
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		return r
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	return To(LowerCase, r)
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// ToTitle maps the rune to title case.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>func ToTitle(r rune) rune {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	if r &lt;= MaxASCII {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		if &#39;a&#39; &lt;= r &amp;&amp; r &lt;= &#39;z&#39; { <span class="comment">// title case is upper case for ASCII</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>			r -= &#39;a&#39; - &#39;A&#39;
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		return r
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	return To(TitleCase, r)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">// ToUpper maps the rune to upper case giving priority to the special mapping.</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>func (special SpecialCase) ToUpper(r rune) rune {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	r1, hadMapping := to(UpperCase, r, []CaseRange(special))
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	if r1 == r &amp;&amp; !hadMapping {
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		r1 = ToUpper(r)
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	return r1
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">// ToTitle maps the rune to title case giving priority to the special mapping.</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>func (special SpecialCase) ToTitle(r rune) rune {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	r1, hadMapping := to(TitleCase, r, []CaseRange(special))
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	if r1 == r &amp;&amp; !hadMapping {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		r1 = ToTitle(r)
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	return r1
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span><span class="comment">// ToLower maps the rune to lower case giving priority to the special mapping.</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>func (special SpecialCase) ToLower(r rune) rune {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	r1, hadMapping := to(LowerCase, r, []CaseRange(special))
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	if r1 == r &amp;&amp; !hadMapping {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		r1 = ToLower(r)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	return r1
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span><span class="comment">// caseOrbit is defined in tables.go as []foldPair. Right now all the</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">// entries fit in uint16, so use uint16. If that changes, compilation</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span><span class="comment">// will fail (the constants in the composite literal will not fit in uint16)</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">// and the types here can change to uint32.</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>type foldPair struct {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	From uint16
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	To   uint16
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span><span class="comment">// SimpleFold iterates over Unicode code points equivalent under</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">// the Unicode-defined simple case folding. Among the code points</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span><span class="comment">// equivalent to rune (including rune itself), SimpleFold returns the</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span><span class="comment">// smallest rune &gt; r if one exists, or else the smallest rune &gt;= 0.</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span><span class="comment">// If r is not a valid Unicode code point, SimpleFold(r) returns r.</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">// For example:</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="comment">//	SimpleFold(&#39;A&#39;) = &#39;a&#39;</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span><span class="comment">//	SimpleFold(&#39;a&#39;) = &#39;A&#39;</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">//	SimpleFold(&#39;K&#39;) = &#39;k&#39;</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">//	SimpleFold(&#39;k&#39;) = &#39;\u212A&#39; (Kelvin symbol, K)</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">//	SimpleFold(&#39;\u212A&#39;) = &#39;K&#39;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">//	SimpleFold(&#39;1&#39;) = &#39;1&#39;</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">//	SimpleFold(-2) = -2</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>func SimpleFold(r rune) rune {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	if r &lt; 0 || r &gt; MaxRune {
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		return r
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	if int(r) &lt; len(asciiFold) {
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		return rune(asciiFold[r])
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	<span class="comment">// Consult caseOrbit table for special cases.</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	lo := 0
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	hi := len(caseOrbit)
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	for lo &lt; hi {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		m := int(uint(lo+hi) &gt;&gt; 1)
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		if rune(caseOrbit[m].From) &lt; r {
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>			lo = m + 1
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		} else {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>			hi = m
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>		}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	}
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	if lo &lt; len(caseOrbit) &amp;&amp; rune(caseOrbit[lo].From) == r {
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		return rune(caseOrbit[lo].To)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	<span class="comment">// No folding specified. This is a one- or two-element</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	<span class="comment">// equivalence class containing rune and ToLower(rune)</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	<span class="comment">// and ToUpper(rune) if they are different from rune.</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	if l := ToLower(r); l != r {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		return l
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	return ToUpper(r)
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>}
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>
</pre><p><a href="letter.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
