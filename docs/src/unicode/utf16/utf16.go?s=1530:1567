<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/unicode/utf16/utf16.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./utf16.go?s=1530:1567#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/unicode">unicode</a>/<a href="http://localhost:8080/src/unicode/utf16">utf16</a>/<span class="text-muted">utf16.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/unicode/utf16">unicode/utf16</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package utf16 implements encoding and decoding of UTF-16 sequences.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>package utf16
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// The conditions replacementChar==unicode.ReplacementChar and</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// maxRune==unicode.MaxRune are verified in the tests.</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// Defining them locally avoids this package depending on package unicode.</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>const (
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	replacementChar = &#39;\uFFFD&#39;     <span class="comment">// Unicode replacement character</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	maxRune         = &#39;\U0010FFFF&#39; <span class="comment">// Maximum valid Unicode code point.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>)
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>const (
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	<span class="comment">// 0xd800-0xdc00 encodes the high 10 bits of a pair.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	<span class="comment">// 0xdc00-0xe000 encodes the low 10 bits of a pair.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	<span class="comment">// the value is those 20 bits plus 0x10000.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	surr1 = 0xd800
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	surr2 = 0xdc00
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	surr3 = 0xe000
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	surrSelf = 0x10000
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// IsSurrogate reports whether the specified Unicode code point</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// can appear in a surrogate pair.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>func IsSurrogate(r rune) bool {
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	return surr1 &lt;= r &amp;&amp; r &lt; surr3
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>}
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// DecodeRune returns the UTF-16 decoding of a surrogate pair.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// If the pair is not a valid UTF-16 surrogate pair, DecodeRune returns</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// the Unicode replacement code point U+FFFD.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>func DecodeRune(r1, r2 rune) rune {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	if surr1 &lt;= r1 &amp;&amp; r1 &lt; surr2 &amp;&amp; surr2 &lt;= r2 &amp;&amp; r2 &lt; surr3 {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>		return (r1-surr1)&lt;&lt;10 | (r2 - surr2) + surrSelf
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	}
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	return replacementChar
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// EncodeRune returns the UTF-16 surrogate pair r1, r2 for the given rune.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// If the rune is not a valid Unicode code point or does not need encoding,</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// EncodeRune returns U+FFFD, U+FFFD.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="selection">func EncodeRune(r rune) (r1, r2 rune)</span> {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	if r &lt; surrSelf || r &gt; maxRune {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		return replacementChar, replacementChar
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	r -= surrSelf
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	return surr1 + (r&gt;&gt;10)&amp;0x3ff, surr2 + r&amp;0x3ff
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>}
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// Encode returns the UTF-16 encoding of the Unicode code point sequence s.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>func Encode(s []rune) []uint16 {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	n := len(s)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	for _, v := range s {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		if v &gt;= surrSelf {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>			n++
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	a := make([]uint16, n)
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	n = 0
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	for _, v := range s {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		switch {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		case 0 &lt;= v &amp;&amp; v &lt; surr1, surr3 &lt;= v &amp;&amp; v &lt; surrSelf:
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>			<span class="comment">// normal rune</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>			a[n] = uint16(v)
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>			n++
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		case surrSelf &lt;= v &amp;&amp; v &lt;= maxRune:
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>			<span class="comment">// needs surrogate sequence</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>			r1, r2 := EncodeRune(v)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>			a[n] = uint16(r1)
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>			a[n+1] = uint16(r2)
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>			n += 2
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		default:
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>			a[n] = uint16(replacementChar)
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>			n++
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	return a[:n]
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// AppendRune appends the UTF-16 encoding of the Unicode code point r</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// to the end of p and returns the extended buffer. If the rune is not</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// a valid Unicode code point, it appends the encoding of U+FFFD.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>func AppendRune(a []uint16, r rune) []uint16 {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// This function is inlineable for fast handling of ASCII.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	switch {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	case 0 &lt;= r &amp;&amp; r &lt; surr1, surr3 &lt;= r &amp;&amp; r &lt; surrSelf:
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		<span class="comment">// normal rune</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		return append(a, uint16(r))
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	case surrSelf &lt;= r &amp;&amp; r &lt;= maxRune:
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		<span class="comment">// needs surrogate sequence</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		r1, r2 := EncodeRune(r)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		return append(a, uint16(r1), uint16(r2))
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	return append(a, replacementChar)
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// Decode returns the Unicode code point sequence represented</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// by the UTF-16 encoding s.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>func Decode(s []uint16) []rune {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	<span class="comment">// Preallocate capacity to hold up to 64 runes.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	<span class="comment">// Decode inlines, so the allocation can live on the stack.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	buf := make([]rune, 0, 64)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	return decode(s, buf)
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// decode appends to buf the Unicode code point sequence represented</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// by the UTF-16 encoding s and return the extended buffer.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>func decode(s []uint16, buf []rune) []rune {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		var ar rune
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		switch r := s[i]; {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		case r &lt; surr1, surr3 &lt;= r:
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>			<span class="comment">// normal rune</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			ar = rune(r)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		case surr1 &lt;= r &amp;&amp; r &lt; surr2 &amp;&amp; i+1 &lt; len(s) &amp;&amp;
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>			surr2 &lt;= s[i+1] &amp;&amp; s[i+1] &lt; surr3:
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			<span class="comment">// valid surrogate sequence</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			ar = DecodeRune(rune(r), rune(s[i+1]))
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			i++
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		default:
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			<span class="comment">// invalid surrogate sequence</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>			ar = replacementChar
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		buf = append(buf, ar)
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	return buf
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>
</pre><p><a href="utf16.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
