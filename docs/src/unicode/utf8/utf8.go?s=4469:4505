<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/unicode/utf8/utf8.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./utf8.go?s=4469:4505#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/unicode">unicode</a>/<a href="http://localhost:8080/src/unicode/utf8">utf8</a>/<span class="text-muted">utf8.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/unicode/utf8">unicode/utf8</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package utf8 implements functions and constants to support text encoded in</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// UTF-8. It includes functions to translate between runes and UTF-8 byte sequences.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// See https://en.wikipedia.org/wiki/UTF-8</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>package utf8
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// The conditions RuneError==unicode.ReplacementChar and</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// MaxRune==unicode.MaxRune are verified in the tests.</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// Defining them locally avoids this package depending on package unicode.</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// Numbers fundamental to the encoding.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>const (
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	RuneError = &#39;\uFFFD&#39;     <span class="comment">// the &#34;error&#34; Rune or &#34;Unicode replacement character&#34;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	RuneSelf  = 0x80         <span class="comment">// characters below RuneSelf are represented as themselves in a single byte.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	MaxRune   = &#39;\U0010FFFF&#39; <span class="comment">// Maximum valid Unicode code point.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	UTFMax    = 4            <span class="comment">// maximum number of bytes of a UTF-8 encoded Unicode character.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>)
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// Code points in the surrogate range are not valid for UTF-8.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>const (
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	surrogateMin = 0xD800
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	surrogateMax = 0xDFFF
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>const (
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	t1 = 0b00000000
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	tx = 0b10000000
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	t2 = 0b11000000
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	t3 = 0b11100000
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	t4 = 0b11110000
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	t5 = 0b11111000
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	maskx = 0b00111111
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	mask2 = 0b00011111
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	mask3 = 0b00001111
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	mask4 = 0b00000111
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	rune1Max = 1&lt;&lt;7 - 1
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	rune2Max = 1&lt;&lt;11 - 1
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	rune3Max = 1&lt;&lt;16 - 1
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">// The default lowest and highest continuation byte.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	locb = 0b10000000
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	hicb = 0b10111111
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">// These names of these constants are chosen to give nice alignment in the</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// table below. The first nibble is an index into acceptRanges or F for</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// special one-byte cases. The second nibble is the Rune length or the</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">// Status for the special one-byte case.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	xx = 0xF1 <span class="comment">// invalid: size 1</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	as = 0xF0 <span class="comment">// ASCII: size 1</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	s1 = 0x02 <span class="comment">// accept 0, size 2</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	s2 = 0x13 <span class="comment">// accept 1, size 3</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	s3 = 0x03 <span class="comment">// accept 0, size 3</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	s4 = 0x23 <span class="comment">// accept 2, size 3</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	s5 = 0x34 <span class="comment">// accept 3, size 4</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	s6 = 0x04 <span class="comment">// accept 0, size 4</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	s7 = 0x44 <span class="comment">// accept 4, size 4</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>)
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// first is information about the first byte in a UTF-8 sequence.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>var first = [256]uint8{
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">//   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, <span class="comment">// 0x00-0x0F</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, <span class="comment">// 0x10-0x1F</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, <span class="comment">// 0x20-0x2F</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, <span class="comment">// 0x30-0x3F</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, <span class="comment">// 0x40-0x4F</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, <span class="comment">// 0x50-0x5F</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, <span class="comment">// 0x60-0x6F</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, <span class="comment">// 0x70-0x7F</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">//   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, <span class="comment">// 0x80-0x8F</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, <span class="comment">// 0x90-0x9F</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, <span class="comment">// 0xA0-0xAF</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, <span class="comment">// 0xB0-0xBF</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	xx, xx, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, <span class="comment">// 0xC0-0xCF</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, <span class="comment">// 0xD0-0xDF</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	s2, s3, s3, s3, s3, s3, s3, s3, s3, s3, s3, s3, s3, s4, s3, s3, <span class="comment">// 0xE0-0xEF</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	s5, s6, s6, s6, s7, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, <span class="comment">// 0xF0-0xFF</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// acceptRange gives the range of valid values for the second byte in a UTF-8</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// sequence.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>type acceptRange struct {
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	lo uint8 <span class="comment">// lowest value for second byte.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	hi uint8 <span class="comment">// highest value for second byte.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// acceptRanges has size 16 to avoid bounds checks in the code that uses it.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>var acceptRanges = [16]acceptRange{
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	0: {locb, hicb},
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	1: {0xA0, hicb},
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	2: {locb, 0x9F},
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	3: {0x90, hicb},
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	4: {locb, 0x8F},
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// FullRune reports whether the bytes in p begin with a full UTF-8 encoding of a rune.</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// An invalid encoding is considered a full Rune since it will convert as a width-1 error rune.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>func FullRune(p []byte) bool {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	n := len(p)
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	if n == 0 {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		return false
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	x := first[p[0]]
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	if n &gt;= int(x&amp;7) {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		return true <span class="comment">// ASCII, invalid or valid.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// Must be short or invalid.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	accept := acceptRanges[x&gt;&gt;4]
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	if n &gt; 1 &amp;&amp; (p[1] &lt; accept.lo || accept.hi &lt; p[1]) {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		return true
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	} else if n &gt; 2 &amp;&amp; (p[2] &lt; locb || hicb &lt; p[2]) {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		return true
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	return false
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// FullRuneInString is like FullRune but its input is a string.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="selection">func FullRuneInString(s string) bool</span> {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	n := len(s)
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	if n == 0 {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		return false
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	x := first[s[0]]
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	if n &gt;= int(x&amp;7) {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		return true <span class="comment">// ASCII, invalid, or valid.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// Must be short or invalid.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	accept := acceptRanges[x&gt;&gt;4]
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	if n &gt; 1 &amp;&amp; (s[1] &lt; accept.lo || accept.hi &lt; s[1]) {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		return true
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	} else if n &gt; 2 &amp;&amp; (s[2] &lt; locb || hicb &lt; s[2]) {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		return true
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	return false
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// DecodeRune unpacks the first UTF-8 encoding in p and returns the rune and</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// its width in bytes. If p is empty it returns ([RuneError], 0). Otherwise, if</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// the encoding is invalid, it returns (RuneError, 1). Both are impossible</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// results for correct, non-empty UTF-8.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// out of range, or is not the shortest possible UTF-8 encoding for the</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// value. No other validation is performed.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>func DecodeRune(p []byte) (r rune, size int) {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	n := len(p)
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	if n &lt; 1 {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		return RuneError, 0
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	p0 := p[0]
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	x := first[p0]
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	if x &gt;= as {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		<span class="comment">// The following code simulates an additional check for x == xx and</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		<span class="comment">// handling the ASCII and invalid cases accordingly. This mask-and-or</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		<span class="comment">// approach prevents an additional branch.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		mask := rune(x) &lt;&lt; 31 &gt;&gt; 31 <span class="comment">// Create 0x0000 or 0xFFFF.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		return rune(p[0])&amp;^mask | RuneError&amp;mask, 1
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	sz := int(x &amp; 7)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	accept := acceptRanges[x&gt;&gt;4]
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	if n &lt; sz {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		return RuneError, 1
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	b1 := p[1]
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	if b1 &lt; accept.lo || accept.hi &lt; b1 {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		return RuneError, 1
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	if sz &lt;= 2 { <span class="comment">// &lt;= instead of == to help the compiler eliminate some bounds checks</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		return rune(p0&amp;mask2)&lt;&lt;6 | rune(b1&amp;maskx), 2
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	b2 := p[2]
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	if b2 &lt; locb || hicb &lt; b2 {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		return RuneError, 1
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	if sz &lt;= 3 {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		return rune(p0&amp;mask3)&lt;&lt;12 | rune(b1&amp;maskx)&lt;&lt;6 | rune(b2&amp;maskx), 3
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	b3 := p[3]
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	if b3 &lt; locb || hicb &lt; b3 {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		return RuneError, 1
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	return rune(p0&amp;mask4)&lt;&lt;18 | rune(b1&amp;maskx)&lt;&lt;12 | rune(b2&amp;maskx)&lt;&lt;6 | rune(b3&amp;maskx), 4
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// DecodeRuneInString is like [DecodeRune] but its input is a string. If s is</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// empty it returns ([RuneError], 0). Otherwise, if the encoding is invalid, it</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// returns (RuneError, 1). Both are impossible results for correct, non-empty</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// UTF-8.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// out of range, or is not the shortest possible UTF-8 encoding for the</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">// value. No other validation is performed.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>func DecodeRuneInString(s string) (r rune, size int) {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	n := len(s)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	if n &lt; 1 {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		return RuneError, 0
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	s0 := s[0]
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	x := first[s0]
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	if x &gt;= as {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		<span class="comment">// The following code simulates an additional check for x == xx and</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		<span class="comment">// handling the ASCII and invalid cases accordingly. This mask-and-or</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		<span class="comment">// approach prevents an additional branch.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		mask := rune(x) &lt;&lt; 31 &gt;&gt; 31 <span class="comment">// Create 0x0000 or 0xFFFF.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		return rune(s[0])&amp;^mask | RuneError&amp;mask, 1
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	sz := int(x &amp; 7)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	accept := acceptRanges[x&gt;&gt;4]
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	if n &lt; sz {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		return RuneError, 1
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	s1 := s[1]
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	if s1 &lt; accept.lo || accept.hi &lt; s1 {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		return RuneError, 1
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	if sz &lt;= 2 { <span class="comment">// &lt;= instead of == to help the compiler eliminate some bounds checks</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		return rune(s0&amp;mask2)&lt;&lt;6 | rune(s1&amp;maskx), 2
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	s2 := s[2]
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	if s2 &lt; locb || hicb &lt; s2 {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		return RuneError, 1
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	if sz &lt;= 3 {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		return rune(s0&amp;mask3)&lt;&lt;12 | rune(s1&amp;maskx)&lt;&lt;6 | rune(s2&amp;maskx), 3
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	s3 := s[3]
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	if s3 &lt; locb || hicb &lt; s3 {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		return RuneError, 1
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	return rune(s0&amp;mask4)&lt;&lt;18 | rune(s1&amp;maskx)&lt;&lt;12 | rune(s2&amp;maskx)&lt;&lt;6 | rune(s3&amp;maskx), 4
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span><span class="comment">// DecodeLastRune unpacks the last UTF-8 encoding in p and returns the rune and</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">// its width in bytes. If p is empty it returns ([RuneError], 0). Otherwise, if</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">// the encoding is invalid, it returns (RuneError, 1). Both are impossible</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// results for correct, non-empty UTF-8.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// out of range, or is not the shortest possible UTF-8 encoding for the</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// value. No other validation is performed.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>func DecodeLastRune(p []byte) (r rune, size int) {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	end := len(p)
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	if end == 0 {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		return RuneError, 0
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	start := end - 1
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	r = rune(p[start])
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	if r &lt; RuneSelf {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		return r, 1
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	<span class="comment">// guard against O(n^2) behavior when traversing</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	<span class="comment">// backwards through strings with long sequences of</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	<span class="comment">// invalid UTF-8.</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	lim := end - UTFMax
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	if lim &lt; 0 {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		lim = 0
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	for start--; start &gt;= lim; start-- {
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		if RuneStart(p[start]) {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>			break
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	if start &lt; 0 {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		start = 0
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	r, size = DecodeRune(p[start:end])
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	if start+size != end {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		return RuneError, 1
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	return r, size
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// DecodeLastRuneInString is like [DecodeLastRune] but its input is a string. If</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">// s is empty it returns ([RuneError], 0). Otherwise, if the encoding is invalid,</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">// it returns (RuneError, 1). Both are impossible results for correct,</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// non-empty UTF-8.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// out of range, or is not the shortest possible UTF-8 encoding for the</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">// value. No other validation is performed.</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>func DecodeLastRuneInString(s string) (r rune, size int) {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	end := len(s)
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	if end == 0 {
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		return RuneError, 0
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	start := end - 1
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	r = rune(s[start])
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	if r &lt; RuneSelf {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		return r, 1
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	<span class="comment">// guard against O(n^2) behavior when traversing</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	<span class="comment">// backwards through strings with long sequences of</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	<span class="comment">// invalid UTF-8.</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	lim := end - UTFMax
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	if lim &lt; 0 {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		lim = 0
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	for start--; start &gt;= lim; start-- {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		if RuneStart(s[start]) {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>			break
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	if start &lt; 0 {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		start = 0
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	r, size = DecodeRuneInString(s[start:end])
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	if start+size != end {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		return RuneError, 1
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	return r, size
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span><span class="comment">// RuneLen returns the number of bytes required to encode the rune.</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span><span class="comment">// It returns -1 if the rune is not a valid value to encode in UTF-8.</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>func RuneLen(r rune) int {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	switch {
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	case r &lt; 0:
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		return -1
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	case r &lt;= rune1Max:
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		return 1
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	case r &lt;= rune2Max:
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		return 2
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	case surrogateMin &lt;= r &amp;&amp; r &lt;= surrogateMax:
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		return -1
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	case r &lt;= rune3Max:
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		return 3
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	case r &lt;= MaxRune:
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		return 4
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	return -1
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">// EncodeRune writes into p (which must be large enough) the UTF-8 encoding of the rune.</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// If the rune is out of range, it writes the encoding of [RuneError].</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">// It returns the number of bytes written.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>func EncodeRune(p []byte, r rune) int {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	<span class="comment">// Negative values are erroneous. Making it unsigned addresses the problem.</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	switch i := uint32(r); {
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	case i &lt;= rune1Max:
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		p[0] = byte(r)
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		return 1
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	case i &lt;= rune2Max:
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		_ = p[1] <span class="comment">// eliminate bounds checks</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		p[0] = t2 | byte(r&gt;&gt;6)
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		p[1] = tx | byte(r)&amp;maskx
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		return 2
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	case i &gt; MaxRune, surrogateMin &lt;= i &amp;&amp; i &lt;= surrogateMax:
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		r = RuneError
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		fallthrough
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	case i &lt;= rune3Max:
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		_ = p[2] <span class="comment">// eliminate bounds checks</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>		p[0] = t3 | byte(r&gt;&gt;12)
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		p[1] = tx | byte(r&gt;&gt;6)&amp;maskx
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		p[2] = tx | byte(r)&amp;maskx
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		return 3
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	default:
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		_ = p[3] <span class="comment">// eliminate bounds checks</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		p[0] = t4 | byte(r&gt;&gt;18)
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		p[1] = tx | byte(r&gt;&gt;12)&amp;maskx
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		p[2] = tx | byte(r&gt;&gt;6)&amp;maskx
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>		p[3] = tx | byte(r)&amp;maskx
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		return 4
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>}
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="comment">// AppendRune appends the UTF-8 encoding of r to the end of p and</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">// returns the extended buffer. If the rune is out of range,</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span><span class="comment">// it appends the encoding of [RuneError].</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>func AppendRune(p []byte, r rune) []byte {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	<span class="comment">// This function is inlineable for fast handling of ASCII.</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	if uint32(r) &lt;= rune1Max {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		return append(p, byte(r))
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	return appendRuneNonASCII(p, r)
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>func appendRuneNonASCII(p []byte, r rune) []byte {
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	<span class="comment">// Negative values are erroneous. Making it unsigned addresses the problem.</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	switch i := uint32(r); {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	case i &lt;= rune2Max:
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		return append(p, t2|byte(r&gt;&gt;6), tx|byte(r)&amp;maskx)
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	case i &gt; MaxRune, surrogateMin &lt;= i &amp;&amp; i &lt;= surrogateMax:
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		r = RuneError
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		fallthrough
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	case i &lt;= rune3Max:
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>		return append(p, t3|byte(r&gt;&gt;12), tx|byte(r&gt;&gt;6)&amp;maskx, tx|byte(r)&amp;maskx)
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	default:
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		return append(p, t4|byte(r&gt;&gt;18), tx|byte(r&gt;&gt;12)&amp;maskx, tx|byte(r&gt;&gt;6)&amp;maskx, tx|byte(r)&amp;maskx)
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	}
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// RuneCount returns the number of runes in p. Erroneous and short</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">// encodings are treated as single runes of width 1 byte.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>func RuneCount(p []byte) int {
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	np := len(p)
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	var n int
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	for i := 0; i &lt; np; {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		n++
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		c := p[i]
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		if c &lt; RuneSelf {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>			<span class="comment">// ASCII fast path</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>			i++
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>			continue
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		}
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		x := first[c]
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		if x == xx {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>			i++ <span class="comment">// invalid.</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			continue
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		size := int(x &amp; 7)
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		if i+size &gt; np {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>			i++ <span class="comment">// Short or invalid.</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>			continue
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>		}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		accept := acceptRanges[x&gt;&gt;4]
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		if c := p[i+1]; c &lt; accept.lo || accept.hi &lt; c {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>			size = 1
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		} else if size == 2 {
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		} else if c := p[i+2]; c &lt; locb || hicb &lt; c {
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>			size = 1
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		} else if size == 3 {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		} else if c := p[i+3]; c &lt; locb || hicb &lt; c {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>			size = 1
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		i += size
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	return n
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>}
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span><span class="comment">// RuneCountInString is like [RuneCount] but its input is a string.</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>func RuneCountInString(s string) (n int) {
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	ns := len(s)
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	for i := 0; i &lt; ns; n++ {
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		c := s[i]
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		if c &lt; RuneSelf {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>			<span class="comment">// ASCII fast path</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>			i++
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>			continue
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		x := first[c]
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		if x == xx {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>			i++ <span class="comment">// invalid.</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>			continue
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		size := int(x &amp; 7)
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		if i+size &gt; ns {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>			i++ <span class="comment">// Short or invalid.</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>			continue
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		}
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		accept := acceptRanges[x&gt;&gt;4]
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		if c := s[i+1]; c &lt; accept.lo || accept.hi &lt; c {
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>			size = 1
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		} else if size == 2 {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		} else if c := s[i+2]; c &lt; locb || hicb &lt; c {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>			size = 1
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		} else if size == 3 {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		} else if c := s[i+3]; c &lt; locb || hicb &lt; c {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>			size = 1
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		}
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		i += size
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	}
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	return n
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span><span class="comment">// RuneStart reports whether the byte could be the first byte of an encoded,</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span><span class="comment">// possibly invalid rune. Second and subsequent bytes always have the top two</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span><span class="comment">// bits set to 10.</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>func RuneStart(b byte) bool { return b&amp;0xC0 != 0x80 }
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span><span class="comment">// Valid reports whether p consists entirely of valid UTF-8-encoded runes.</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>func Valid(p []byte) bool {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	<span class="comment">// This optimization avoids the need to recompute the capacity</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	<span class="comment">// when generating code for p[8:], bringing it to parity with</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	<span class="comment">// ValidString, which was 20% faster on long ASCII strings.</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	p = p[:len(p):len(p)]
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	<span class="comment">// Fast path. Check for and skip 8 bytes of ASCII characters per iteration.</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	for len(p) &gt;= 8 {
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		<span class="comment">// Combining two 32 bit loads allows the same code to be used</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		<span class="comment">// for 32 and 64 bit platforms.</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		<span class="comment">// The compiler can generate a 32bit load for first32 and second32</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		<span class="comment">// on many platforms. See test/codegen/memcombine.go.</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>		first32 := uint32(p[0]) | uint32(p[1])&lt;&lt;8 | uint32(p[2])&lt;&lt;16 | uint32(p[3])&lt;&lt;24
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		second32 := uint32(p[4]) | uint32(p[5])&lt;&lt;8 | uint32(p[6])&lt;&lt;16 | uint32(p[7])&lt;&lt;24
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		if (first32|second32)&amp;0x80808080 != 0 {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>			<span class="comment">// Found a non ASCII byte (&gt;= RuneSelf).</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>			break
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		}
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		p = p[8:]
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	}
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	n := len(p)
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	for i := 0; i &lt; n; {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		pi := p[i]
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		if pi &lt; RuneSelf {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>			i++
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>			continue
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		}
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		x := first[pi]
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		if x == xx {
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>			return false <span class="comment">// Illegal starter byte.</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>		size := int(x &amp; 7)
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		if i+size &gt; n {
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>			return false <span class="comment">// Short or invalid.</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		}
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		accept := acceptRanges[x&gt;&gt;4]
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		if c := p[i+1]; c &lt; accept.lo || accept.hi &lt; c {
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>			return false
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		} else if size == 2 {
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		} else if c := p[i+2]; c &lt; locb || hicb &lt; c {
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>			return false
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>		} else if size == 3 {
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		} else if c := p[i+3]; c &lt; locb || hicb &lt; c {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>			return false
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		i += size
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	return true
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>}
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span><span class="comment">// ValidString reports whether s consists entirely of valid UTF-8-encoded runes.</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>func ValidString(s string) bool {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	<span class="comment">// Fast path. Check for and skip 8 bytes of ASCII characters per iteration.</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	for len(s) &gt;= 8 {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		<span class="comment">// Combining two 32 bit loads allows the same code to be used</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		<span class="comment">// for 32 and 64 bit platforms.</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		<span class="comment">// The compiler can generate a 32bit load for first32 and second32</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		<span class="comment">// on many platforms. See test/codegen/memcombine.go.</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		first32 := uint32(s[0]) | uint32(s[1])&lt;&lt;8 | uint32(s[2])&lt;&lt;16 | uint32(s[3])&lt;&lt;24
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		second32 := uint32(s[4]) | uint32(s[5])&lt;&lt;8 | uint32(s[6])&lt;&lt;16 | uint32(s[7])&lt;&lt;24
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		if (first32|second32)&amp;0x80808080 != 0 {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>			<span class="comment">// Found a non ASCII byte (&gt;= RuneSelf).</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>			break
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		}
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		s = s[8:]
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	}
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	n := len(s)
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	for i := 0; i &lt; n; {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		si := s[i]
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		if si &lt; RuneSelf {
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>			i++
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>			continue
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		}
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		x := first[si]
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		if x == xx {
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>			return false <span class="comment">// Illegal starter byte.</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>		size := int(x &amp; 7)
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		if i+size &gt; n {
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>			return false <span class="comment">// Short or invalid.</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>		}
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		accept := acceptRanges[x&gt;&gt;4]
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		if c := s[i+1]; c &lt; accept.lo || accept.hi &lt; c {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>			return false
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		} else if size == 2 {
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		} else if c := s[i+2]; c &lt; locb || hicb &lt; c {
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>			return false
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		} else if size == 3 {
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		} else if c := s[i+3]; c &lt; locb || hicb &lt; c {
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>			return false
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>		}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		i += size
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	return true
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>}
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span><span class="comment">// ValidRune reports whether r can be legally encoded as UTF-8.</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span><span class="comment">// Code points that are out of range or a surrogate half are illegal.</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>func ValidRune(r rune) bool {
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	switch {
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	case 0 &lt;= r &amp;&amp; r &lt; surrogateMin:
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		return true
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	case surrogateMax &lt; r &amp;&amp; r &lt;= MaxRune:
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		return true
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	}
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	return false
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>}
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>
</pre><p><a href="utf8.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
