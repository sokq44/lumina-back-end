<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/unsafe/unsafe.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./unsafe.go?s=544:566#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/unsafe">unsafe</a>/<span class="text-muted">unsafe.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/unsafe">unsafe</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">/*
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>Package unsafe contains operations that step around the type safety of Go programs.
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>Packages that import unsafe may be non-portable and are not protected by the
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>Go 1 compatibility guidelines.
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>*/</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>package unsafe
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// ArbitraryType is here for the purposes of documentation only and is not actually</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// part of the unsafe package. It represents the type of an arbitrary Go expression.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="selection">type ArbitraryType int</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// IntegerType is here for the purposes of documentation only and is not actually</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// part of the unsafe package. It represents any arbitrary integer type.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>type IntegerType int
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// Pointer represents a pointer to an arbitrary type. There are four special operations</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// available for type Pointer that are not available for other types:</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">//   - A pointer value of any type can be converted to a Pointer.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">//   - A Pointer can be converted to a pointer value of any type.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">//   - A uintptr can be converted to a Pointer.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">//   - A Pointer can be converted to a uintptr.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// Pointer therefore allows a program to defeat the type system and read and write</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// arbitrary memory. It should be used with extreme care.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// The following patterns involving Pointer are valid.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// Code not using these patterns is likely to be invalid today</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// or to become invalid in the future.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// Even the valid patterns below come with important caveats.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// Running &#34;go vet&#34; can help find uses of Pointer that do not conform to these patterns,</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// but silence from &#34;go vet&#34; is not a guarantee that the code is valid.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// (1) Conversion of a *T1 to Pointer to *T2.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// Provided that T2 is no larger than T1 and that the two share an equivalent</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// memory layout, this conversion allows reinterpreting data of one type as</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// data of another type. An example is the implementation of</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// math.Float64bits:</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//	func Float64bits(f float64) uint64 {</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//		return *(*uint64)(unsafe.Pointer(&amp;f))</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// (2) Conversion of a Pointer to a uintptr (but not back to Pointer).</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// Converting a Pointer to a uintptr produces the memory address of the value</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// pointed at, as an integer. The usual use for such a uintptr is to print it.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// Conversion of a uintptr back to Pointer is not valid in general.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// A uintptr is an integer, not a reference.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// Converting a Pointer to a uintptr creates an integer value</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// with no pointer semantics.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// Even if a uintptr holds the address of some object,</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// the garbage collector will not update that uintptr&#39;s value</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// if the object moves, nor will that uintptr keep the object</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// from being reclaimed.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// The remaining patterns enumerate the only valid conversions</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// from uintptr to Pointer.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// (3) Conversion of a Pointer to a uintptr and back, with arithmetic.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// If p points into an allocated object, it can be advanced through the object</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// by conversion to uintptr, addition of an offset, and conversion back to Pointer.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">//	p = unsafe.Pointer(uintptr(p) + offset)</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// The most common use of this pattern is to access fields in a struct</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// or elements of an array:</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//	// equivalent to f := unsafe.Pointer(&amp;s.f)</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">//	f := unsafe.Pointer(uintptr(unsafe.Pointer(&amp;s)) + unsafe.Offsetof(s.f))</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">//	// equivalent to e := unsafe.Pointer(&amp;x[i])</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">//	e := unsafe.Pointer(uintptr(unsafe.Pointer(&amp;x[0])) + i*unsafe.Sizeof(x[0]))</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// It is valid both to add and to subtract offsets from a pointer in this way.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// It is also valid to use &amp;^ to round pointers, usually for alignment.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// In all cases, the result must continue to point into the original allocated object.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// Unlike in C, it is not valid to advance a pointer just beyond the end of</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// its original allocation:</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">//	// INVALID: end points outside allocated space.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">//	var s thing</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">//	end = unsafe.Pointer(uintptr(unsafe.Pointer(&amp;s)) + unsafe.Sizeof(s))</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">//	// INVALID: end points outside allocated space.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">//	b := make([]byte, n)</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">//	end = unsafe.Pointer(uintptr(unsafe.Pointer(&amp;b[0])) + uintptr(n))</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// Note that both conversions must appear in the same expression, with only</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// the intervening arithmetic between them:</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">//	// INVALID: uintptr cannot be stored in variable</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">//	// before conversion back to Pointer.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">//	u := uintptr(p)</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">//	p = unsafe.Pointer(u + offset)</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// Note that the pointer must point into an allocated object, so it may not be nil.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">//	// INVALID: conversion of nil pointer</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">//	u := unsafe.Pointer(nil)</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">//	p := unsafe.Pointer(uintptr(u) + offset)</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// (4) Conversion of a Pointer to a uintptr when calling syscall.Syscall.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// The Syscall functions in package syscall pass their uintptr arguments directly</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// to the operating system, which then may, depending on the details of the call,</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// reinterpret some of them as pointers.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// That is, the system call implementation is implicitly converting certain arguments</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// back from uintptr to pointer.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// If a pointer argument must be converted to uintptr for use as an argument,</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// that conversion must appear in the call expression itself:</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">//	syscall.Syscall(SYS_READ, uintptr(fd), uintptr(unsafe.Pointer(p)), uintptr(n))</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// The compiler handles a Pointer converted to a uintptr in the argument list of</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// a call to a function implemented in assembly by arranging that the referenced</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// allocated object, if any, is retained and not moved until the call completes,</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// even though from the types alone it would appear that the object is no longer</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// needed during the call.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// For the compiler to recognize this pattern,</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// the conversion must appear in the argument list:</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">//	// INVALID: uintptr cannot be stored in variable</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">//	// before implicit conversion back to Pointer during system call.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">//	u := uintptr(unsafe.Pointer(p))</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">//	syscall.Syscall(SYS_READ, uintptr(fd), u, uintptr(n))</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// (5) Conversion of the result of reflect.Value.Pointer or reflect.Value.UnsafeAddr</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">// from uintptr to Pointer.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// Package reflect&#39;s Value methods named Pointer and UnsafeAddr return type uintptr</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// instead of unsafe.Pointer to keep callers from changing the result to an arbitrary</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// type without first importing &#34;unsafe&#34;. However, this means that the result is</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// fragile and must be converted to Pointer immediately after making the call,</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// in the same expression:</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">//	p := (*int)(unsafe.Pointer(reflect.ValueOf(new(int)).Pointer()))</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// As in the cases above, it is invalid to store the result before the conversion:</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">//	// INVALID: uintptr cannot be stored in variable</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">//	// before conversion back to Pointer.</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">//	u := reflect.ValueOf(new(int)).Pointer()</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">//	p := (*int)(unsafe.Pointer(u))</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// (6) Conversion of a reflect.SliceHeader or reflect.StringHeader Data field to or from Pointer.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// As in the previous case, the reflect data structures SliceHeader and StringHeader</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// declare the field Data as a uintptr to keep callers from changing the result to</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// an arbitrary type without first importing &#34;unsafe&#34;. However, this means that</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">// SliceHeader and StringHeader are only valid when interpreting the content</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">// of an actual slice or string value.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">//	var s string</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">//	hdr := (*reflect.StringHeader)(unsafe.Pointer(&amp;s)) // case 1</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">//	hdr.Data = uintptr(unsafe.Pointer(p))              // case 6 (this case)</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">//	hdr.Len = n</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// In this usage hdr.Data is really an alternate way to refer to the underlying</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// pointer in the string header, not a uintptr variable itself.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// In general, reflect.SliceHeader and reflect.StringHeader should be used</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// only as *reflect.SliceHeader and *reflect.StringHeader pointing at actual</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// slices or strings, never as plain structs.</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// A program should not declare or allocate variables of these struct types.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">//	// INVALID: a directly-declared header will not hold Data as a reference.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">//	var hdr reflect.StringHeader</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">//	hdr.Data = uintptr(unsafe.Pointer(p))</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">//	hdr.Len = n</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">//	s := *(*string)(unsafe.Pointer(&amp;hdr)) // p possibly already lost</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>type Pointer *ArbitraryType
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// Sizeof takes an expression x of any type and returns the size in bytes</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// of a hypothetical variable v as if v was declared via var v = x.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// The size does not include any memory possibly referenced by x.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// For instance, if x is a slice, Sizeof returns the size of the slice</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// descriptor, not the size of the memory referenced by the slice.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// For a struct, the size includes any padding introduced by field alignment.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// The return value of Sizeof is a Go constant if the type of the argument x</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// does not have variable size.</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// (A type has variable size if it is a type parameter or if it is an array</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// or struct type with elements of variable size).</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>func Sizeof(x ArbitraryType) uintptr
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">// Offsetof returns the offset within the struct of the field represented by x,</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// which must be of the form structValue.field. In other words, it returns the</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// number of bytes between the start of the struct and the start of the field.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// The return value of Offsetof is a Go constant if the type of the argument x</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// does not have variable size.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// (See the description of [Sizeof] for a definition of variable sized types.)</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>func Offsetof(x ArbitraryType) uintptr
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// Alignof takes an expression x of any type and returns the required alignment</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">// of a hypothetical variable v as if v was declared via var v = x.</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">// It is the largest value m such that the address of v is always zero mod m.</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// It is the same as the value returned by reflect.TypeOf(x).Align().</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// As a special case, if a variable s is of struct type and f is a field</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// within that struct, then Alignof(s.f) will return the required alignment</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">// of a field of that type within a struct. This case is the same as the</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">// value returned by reflect.TypeOf(s.f).FieldAlign().</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// The return value of Alignof is a Go constant if the type of the argument</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// does not have variable size.</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// (See the description of [Sizeof] for a definition of variable sized types.)</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>func Alignof(x ArbitraryType) uintptr
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span><span class="comment">// The function Add adds len to ptr and returns the updated pointer</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// Pointer(uintptr(ptr) + uintptr(len)).</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// The len argument must be of integer type or an untyped constant.</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// A constant len argument must be representable by a value of type int;</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// if it is an untyped constant it is given type int.</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">// The rules for valid uses of Pointer still apply.</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>func Add(ptr Pointer, len IntegerType) Pointer
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// The function Slice returns a slice whose underlying array starts at ptr</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// and whose length and capacity are len.</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// Slice(ptr, len) is equivalent to</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">//	(*[len]ArbitraryType)(unsafe.Pointer(ptr))[:]</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">// except that, as a special case, if ptr is nil and len is zero,</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">// Slice returns nil.</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// The len argument must be of integer type or an untyped constant.</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// A constant len argument must be non-negative and representable by a value of type int;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// if it is an untyped constant it is given type int.</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span><span class="comment">// At run time, if len is negative, or if ptr is nil and len is not zero,</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">// a run-time panic occurs.</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>func Slice(ptr *ArbitraryType, len IntegerType) []ArbitraryType
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// SliceData returns a pointer to the underlying array of the argument</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// slice.</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">//   - If cap(slice) &gt; 0, SliceData returns &amp;slice[:1][0].</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">//   - If slice == nil, SliceData returns nil.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">//   - Otherwise, SliceData returns a non-nil pointer to an</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">//     unspecified memory address.</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>func SliceData(slice []ArbitraryType) *ArbitraryType
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// String returns a string value whose underlying bytes</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// start at ptr and whose length is len.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// The len argument must be of integer type or an untyped constant.</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// A constant len argument must be non-negative and representable by a value of type int;</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// if it is an untyped constant it is given type int.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// At run time, if len is negative, or if ptr is nil and len is not zero,</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// a run-time panic occurs.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// Since Go strings are immutable, the bytes passed to String</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">// must not be modified afterwards.</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>func String(ptr *byte, len IntegerType) string
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span><span class="comment">// StringData returns a pointer to the underlying bytes of str.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// For an empty string the return value is unspecified, and may be nil.</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">// Since Go strings are immutable, the bytes returned by StringData</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">// must not be modified.</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>func StringData(str string) *byte
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>
</pre><p><a href="unsafe.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
